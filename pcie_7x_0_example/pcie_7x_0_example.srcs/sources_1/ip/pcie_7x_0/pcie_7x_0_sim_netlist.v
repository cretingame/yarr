// Copyright 1986-2016 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2016.2 (lin64) Build 1577090 Thu Jun  2 16:32:35 MDT 2016
// Date        : Fri Mar 31 11:11:52 2017
// Host        : spikepig.dhcp.lbl.gov running 64-bit CentOS Linux release 7.2.1511 (Core)
// Command     : write_verilog -force -mode funcsim
//               /home/asautaux/yarr/project_pcie_6/project_pcie_6.srcs/sources_1/ip/pcie_7x_0/pcie_7x_0_sim_netlist.v
// Design      : pcie_7x_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7k160tfbg676-2
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "pcie_7x_0,pcie_7x_0_pcie2_top,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "pcie_7x_0_pcie2_top,Vivado 2016.2" *) 
(* NotValidForBitStream *)
module pcie_7x_0
   (pci_exp_txp,
    pci_exp_txn,
    pci_exp_rxp,
    pci_exp_rxn,
    user_clk_out,
    user_reset_out,
    user_lnk_up,
    user_app_rdy,
    tx_buf_av,
    tx_cfg_req,
    tx_err_drop,
    s_axis_tx_tready,
    s_axis_tx_tdata,
    s_axis_tx_tkeep,
    s_axis_tx_tlast,
    s_axis_tx_tvalid,
    s_axis_tx_tuser,
    m_axis_rx_tdata,
    m_axis_rx_tkeep,
    m_axis_rx_tlast,
    m_axis_rx_tvalid,
    m_axis_rx_tready,
    m_axis_rx_tuser,
    cfg_status,
    cfg_command,
    cfg_dstatus,
    cfg_dcommand,
    cfg_lstatus,
    cfg_lcommand,
    cfg_dcommand2,
    cfg_pcie_link_state,
    cfg_pmcsr_pme_en,
    cfg_pmcsr_powerstate,
    cfg_pmcsr_pme_status,
    cfg_received_func_lvl_rst,
    cfg_interrupt,
    cfg_interrupt_rdy,
    cfg_interrupt_assert,
    cfg_interrupt_di,
    cfg_interrupt_do,
    cfg_interrupt_mmenable,
    cfg_interrupt_msienable,
    cfg_interrupt_msixenable,
    cfg_interrupt_msixfm,
    cfg_interrupt_stat,
    cfg_pciecap_interrupt_msgnum,
    cfg_to_turnoff,
    cfg_bus_number,
    cfg_device_number,
    cfg_function_number,
    cfg_msg_received,
    cfg_msg_data,
    cfg_bridge_serr_en,
    cfg_slot_control_electromech_il_ctl_pulse,
    cfg_root_control_syserr_corr_err_en,
    cfg_root_control_syserr_non_fatal_err_en,
    cfg_root_control_syserr_fatal_err_en,
    cfg_root_control_pme_int_en,
    cfg_aer_rooterr_corr_err_reporting_en,
    cfg_aer_rooterr_non_fatal_err_reporting_en,
    cfg_aer_rooterr_fatal_err_reporting_en,
    cfg_aer_rooterr_corr_err_received,
    cfg_aer_rooterr_non_fatal_err_received,
    cfg_aer_rooterr_fatal_err_received,
    cfg_msg_received_err_cor,
    cfg_msg_received_err_non_fatal,
    cfg_msg_received_err_fatal,
    cfg_msg_received_pm_as_nak,
    cfg_msg_received_pm_pme,
    cfg_msg_received_pme_to_ack,
    cfg_msg_received_assert_int_a,
    cfg_msg_received_assert_int_b,
    cfg_msg_received_assert_int_c,
    cfg_msg_received_assert_int_d,
    cfg_msg_received_deassert_int_a,
    cfg_msg_received_deassert_int_b,
    cfg_msg_received_deassert_int_c,
    cfg_msg_received_deassert_int_d,
    cfg_msg_received_setslotpowerlimit,
    cfg_vc_tcvc_map,
    sys_clk,
    sys_rst_n,
    startup_cfgclk,
    startup_cfgmclk,
    startup_eos,
    startup_preq,
    startup_clk,
    startup_gsr,
    startup_gts,
    startup_keyclearb,
    startup_pack,
    startup_usrcclko,
    startup_usrcclkts,
    startup_usrdoneo,
    startup_usrdonets,
    icap_clk,
    icap_csib,
    icap_rdwrb,
    icap_i,
    icap_o);
  (* x_interface_info = "xilinx.com:interface:pcie_7x_mgt:1.0 pcie_7x_mgt txp" *) output [3:0]pci_exp_txp;
  (* x_interface_info = "xilinx.com:interface:pcie_7x_mgt:1.0 pcie_7x_mgt txn" *) output [3:0]pci_exp_txn;
  (* x_interface_info = "xilinx.com:interface:pcie_7x_mgt:1.0 pcie_7x_mgt rxp" *) input [3:0]pci_exp_rxp;
  (* x_interface_info = "xilinx.com:interface:pcie_7x_mgt:1.0 pcie_7x_mgt rxn" *) input [3:0]pci_exp_rxn;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.user_clk_out CLK" *) output user_clk_out;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 RST.user_reset_out RST" *) output user_reset_out;
  output user_lnk_up;
  output user_app_rdy;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status tx_buf_av" *) output [5:0]tx_buf_av;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status tx_cfg_req" *) output tx_cfg_req;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status tx_err_drop" *) output tx_err_drop;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 s_axis_tx TREADY" *) output s_axis_tx_tready;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 s_axis_tx TDATA" *) input [63:0]s_axis_tx_tdata;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 s_axis_tx TKEEP" *) input [7:0]s_axis_tx_tkeep;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 s_axis_tx TLAST" *) input s_axis_tx_tlast;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 s_axis_tx TVALID" *) input s_axis_tx_tvalid;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 s_axis_tx TUSER" *) input [3:0]s_axis_tx_tuser;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 m_axis_rx TDATA" *) output [63:0]m_axis_rx_tdata;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 m_axis_rx TKEEP" *) output [7:0]m_axis_rx_tkeep;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 m_axis_rx TLAST" *) output m_axis_rx_tlast;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 m_axis_rx TVALID" *) output m_axis_rx_tvalid;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 m_axis_rx TREADY" *) input m_axis_rx_tready;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 m_axis_rx TUSER" *) output [21:0]m_axis_rx_tuser;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status status" *) output [15:0]cfg_status;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status command" *) output [15:0]cfg_command;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status dstatus" *) output [15:0]cfg_dstatus;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status dcommand" *) output [15:0]cfg_dcommand;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status lstatus" *) output [15:0]cfg_lstatus;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status lcommand" *) output [15:0]cfg_lcommand;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status dcommand2" *) output [15:0]cfg_dcommand2;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status pcie_link_state" *) output [2:0]cfg_pcie_link_state;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status pmcsr_pme_en" *) output cfg_pmcsr_pme_en;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status pmcsr_powerstate" *) output [1:0]cfg_pmcsr_powerstate;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status pmcsr_pme_status" *) output cfg_pmcsr_pme_status;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status received_func_lvl_rst" *) output cfg_received_func_lvl_rst;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt interrupt" *) input cfg_interrupt;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt rdy" *) output cfg_interrupt_rdy;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt assert" *) input cfg_interrupt_assert;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt write_data" *) input [7:0]cfg_interrupt_di;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt read_data" *) output [7:0]cfg_interrupt_do;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt mmenable" *) output [2:0]cfg_interrupt_mmenable;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt msienable" *) output cfg_interrupt_msienable;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt msixenable" *) output cfg_interrupt_msixenable;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt msixfm" *) output cfg_interrupt_msixfm;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt stat" *) input cfg_interrupt_stat;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_interrupt:1.0 pcie2_cfg_interrupt pciecap_interrupt_msgnum" *) input [4:0]cfg_pciecap_interrupt_msgnum;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status turnoff" *) output cfg_to_turnoff;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status bus_number" *) output [7:0]cfg_bus_number;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status device_number" *) output [4:0]cfg_device_number;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status function_number" *) output [2:0]cfg_function_number;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd received" *) output cfg_msg_received;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd data" *) output [15:0]cfg_msg_data;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status bridge_serr_en" *) output cfg_bridge_serr_en;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status slot_control_electromech_il_ctl_pulse" *) output cfg_slot_control_electromech_il_ctl_pulse;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status root_control_syserr_corr_err_en" *) output cfg_root_control_syserr_corr_err_en;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status root_control_syserr_non_fatal_err_en" *) output cfg_root_control_syserr_non_fatal_err_en;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status root_control_syserr_fatal_err_en" *) output cfg_root_control_syserr_fatal_err_en;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status root_control_pme_int_en" *) output cfg_root_control_pme_int_en;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status aer_rooterr_corr_err_reporting_en" *) output cfg_aer_rooterr_corr_err_reporting_en;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status aer_rooterr_non_fatal_err_reporting_en" *) output cfg_aer_rooterr_non_fatal_err_reporting_en;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status aer_rooterr_fatal_err_reporting_en" *) output cfg_aer_rooterr_fatal_err_reporting_en;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status aer_rooterr_corr_err_received" *) output cfg_aer_rooterr_corr_err_received;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status aer_rooterr_non_fatal_err_received" *) output cfg_aer_rooterr_non_fatal_err_received;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status aer_rooterr_fatal_err_received" *) output cfg_aer_rooterr_fatal_err_received;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd err_cor" *) output cfg_msg_received_err_cor;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd err_non_fatal" *) output cfg_msg_received_err_non_fatal;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd err_fatal" *) output cfg_msg_received_err_fatal;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd received_pm_as_nak" *) output cfg_msg_received_pm_as_nak;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd pm_pme" *) output cfg_msg_received_pm_pme;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd pme_to_ack" *) output cfg_msg_received_pme_to_ack;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd assert_int_a" *) output cfg_msg_received_assert_int_a;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd assert_int_b" *) output cfg_msg_received_assert_int_b;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd assert_int_c" *) output cfg_msg_received_assert_int_c;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd assert_int_d" *) output cfg_msg_received_assert_int_d;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd deassert_int_a" *) output cfg_msg_received_deassert_int_a;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd deassert_int_b" *) output cfg_msg_received_deassert_int_b;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd deassert_int_c" *) output cfg_msg_received_deassert_int_c;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd deassert_int_d" *) output cfg_msg_received_deassert_int_d;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_msg_rcvd:1.0 pcie2_cfg_msg_rcvd received_setslotpowerlimit" *) output cfg_msg_received_setslotpowerlimit;
  (* x_interface_info = "xilinx.com:interface:pcie2_cfg_status:1.0 pcie2_cfg_status vc_tcvc_map" *) output [6:0]cfg_vc_tcvc_map;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.sys_clk CLK" *) input sys_clk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 RST.sys_rst_n RST" *) input sys_rst_n;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup cfgclk" *) output startup_cfgclk;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup cfgmclk" *) output startup_cfgmclk;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup eos" *) output startup_eos;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup preq" *) output startup_preq;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup clk" *) input startup_clk;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup gsr" *) input startup_gsr;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup gts" *) input startup_gts;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup keyclearb" *) input startup_keyclearb;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup pack" *) input startup_pack;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup usrcclko" *) input startup_usrcclko;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup usrclkts" *) input startup_usrcclkts;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup userdoneo" *) input startup_usrdoneo;
  (* x_interface_info = "xilinx.com:interface:startup:1.0 startup usrdonets" *) input startup_usrdonets;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 icap clk" *) input icap_clk;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 icap csib" *) input icap_csib;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 icap rdwrb" *) input icap_rdwrb;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 icap i" *) input [31:0]icap_i;
  (* x_interface_info = "xilinx.com:interface:icap:1.0 icap o" *) output [31:0]icap_o;

  wire cfg_aer_rooterr_corr_err_received;
  wire cfg_aer_rooterr_corr_err_reporting_en;
  wire cfg_aer_rooterr_fatal_err_received;
  wire cfg_aer_rooterr_fatal_err_reporting_en;
  wire cfg_aer_rooterr_non_fatal_err_received;
  wire cfg_aer_rooterr_non_fatal_err_reporting_en;
  wire cfg_bridge_serr_en;
  wire [7:0]cfg_bus_number;
  wire [15:0]cfg_command;
  wire [15:0]cfg_dcommand;
  wire [15:0]cfg_dcommand2;
  wire [4:0]cfg_device_number;
  wire [15:0]cfg_dstatus;
  wire [2:0]cfg_function_number;
  wire cfg_interrupt;
  wire cfg_interrupt_assert;
  wire [7:0]cfg_interrupt_di;
  wire [7:0]cfg_interrupt_do;
  wire [2:0]cfg_interrupt_mmenable;
  wire cfg_interrupt_msienable;
  wire cfg_interrupt_msixenable;
  wire cfg_interrupt_msixfm;
  wire cfg_interrupt_rdy;
  wire cfg_interrupt_stat;
  wire [15:0]cfg_lcommand;
  wire [15:0]cfg_lstatus;
  wire [15:0]cfg_msg_data;
  wire cfg_msg_received;
  wire cfg_msg_received_assert_int_a;
  wire cfg_msg_received_assert_int_b;
  wire cfg_msg_received_assert_int_c;
  wire cfg_msg_received_assert_int_d;
  wire cfg_msg_received_deassert_int_a;
  wire cfg_msg_received_deassert_int_b;
  wire cfg_msg_received_deassert_int_c;
  wire cfg_msg_received_deassert_int_d;
  wire cfg_msg_received_err_cor;
  wire cfg_msg_received_err_fatal;
  wire cfg_msg_received_err_non_fatal;
  wire cfg_msg_received_pm_as_nak;
  wire cfg_msg_received_pm_pme;
  wire cfg_msg_received_pme_to_ack;
  wire cfg_msg_received_setslotpowerlimit;
  wire [2:0]cfg_pcie_link_state;
  wire [4:0]cfg_pciecap_interrupt_msgnum;
  wire cfg_pmcsr_pme_en;
  wire cfg_pmcsr_pme_status;
  wire [1:0]cfg_pmcsr_powerstate;
  wire cfg_received_func_lvl_rst;
  wire cfg_root_control_pme_int_en;
  wire cfg_root_control_syserr_corr_err_en;
  wire cfg_root_control_syserr_fatal_err_en;
  wire cfg_root_control_syserr_non_fatal_err_en;
  wire cfg_slot_control_electromech_il_ctl_pulse;
  wire [15:0]cfg_status;
  wire cfg_to_turnoff;
  wire [6:0]cfg_vc_tcvc_map;
  wire icap_clk;
  wire icap_csib;
  wire [31:0]icap_i;
  wire [31:0]icap_o;
  wire icap_rdwrb;
  wire [63:0]m_axis_rx_tdata;
  wire [7:0]m_axis_rx_tkeep;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tready;
  wire [21:0]m_axis_rx_tuser;
  wire m_axis_rx_tvalid;
  wire [3:0]pci_exp_rxn;
  wire [3:0]pci_exp_rxp;
  wire [3:0]pci_exp_txn;
  wire [3:0]pci_exp_txp;
  wire [63:0]s_axis_tx_tdata;
  wire [7:0]s_axis_tx_tkeep;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tready;
  wire [3:0]s_axis_tx_tuser;
  wire s_axis_tx_tvalid;
  wire startup_cfgclk;
  wire startup_cfgmclk;
  wire startup_clk;
  wire startup_eos;
  wire startup_gsr;
  wire startup_gts;
  wire startup_keyclearb;
  wire startup_pack;
  wire startup_preq;
  wire startup_usrcclko;
  wire startup_usrcclkts;
  wire startup_usrdoneo;
  wire startup_usrdonets;
  wire sys_clk;
  wire sys_rst_n;
  wire [5:0]tx_buf_av;
  wire tx_cfg_req;
  wire tx_err_drop;
  wire user_app_rdy;
  wire user_clk_out;
  wire user_lnk_up;
  wire user_reset_out;
  wire NLW_U0_cfg_aer_ecrc_check_en_UNCONNECTED;
  wire NLW_U0_cfg_aer_ecrc_gen_en_UNCONNECTED;
  wire NLW_U0_cfg_err_aer_headerlog_set_UNCONNECTED;
  wire NLW_U0_cfg_err_cpl_rdy_UNCONNECTED;
  wire NLW_U0_cfg_mgmt_rd_wr_done_UNCONNECTED;
  wire NLW_U0_ext_ch_gt_drpclk_UNCONNECTED;
  wire NLW_U0_int_dclk_out_UNCONNECTED;
  wire NLW_U0_int_mmcm_lock_out_UNCONNECTED;
  wire NLW_U0_int_oobclk_out_UNCONNECTED;
  wire NLW_U0_int_pclk_out_slave_UNCONNECTED;
  wire NLW_U0_int_pipe_rxusrclk_out_UNCONNECTED;
  wire NLW_U0_int_userclk1_out_UNCONNECTED;
  wire NLW_U0_int_userclk2_out_UNCONNECTED;
  wire NLW_U0_pcie_drp_rdy_UNCONNECTED;
  wire NLW_U0_pipe_gen3_out_UNCONNECTED;
  wire NLW_U0_pipe_qrst_idle_UNCONNECTED;
  wire NLW_U0_pipe_rate_idle_UNCONNECTED;
  wire NLW_U0_pipe_rst_idle_UNCONNECTED;
  wire NLW_U0_pipe_txoutclk_out_UNCONNECTED;
  wire NLW_U0_pl_directed_change_done_UNCONNECTED;
  wire NLW_U0_pl_link_gen2_cap_UNCONNECTED;
  wire NLW_U0_pl_link_partner_gen2_supported_UNCONNECTED;
  wire NLW_U0_pl_link_upcfg_cap_UNCONNECTED;
  wire NLW_U0_pl_phy_lnk_up_UNCONNECTED;
  wire NLW_U0_pl_received_hot_rst_UNCONNECTED;
  wire NLW_U0_pl_sel_lnk_rate_UNCONNECTED;
  wire NLW_U0_qpll_drp_clk_UNCONNECTED;
  wire NLW_U0_qpll_drp_gen3_UNCONNECTED;
  wire NLW_U0_qpll_drp_ovrd_UNCONNECTED;
  wire NLW_U0_qpll_drp_rst_n_UNCONNECTED;
  wire NLW_U0_qpll_drp_start_UNCONNECTED;
  wire NLW_U0_qpll_qplld_UNCONNECTED;
  wire [31:0]NLW_U0_cfg_mgmt_do_UNCONNECTED;
  wire [11:0]NLW_U0_common_commands_out_UNCONNECTED;
  wire [63:0]NLW_U0_ext_ch_gt_drpdo_UNCONNECTED;
  wire [3:0]NLW_U0_ext_ch_gt_drprdy_UNCONNECTED;
  wire [11:0]NLW_U0_fc_cpld_UNCONNECTED;
  wire [7:0]NLW_U0_fc_cplh_UNCONNECTED;
  wire [11:0]NLW_U0_fc_npd_UNCONNECTED;
  wire [7:0]NLW_U0_fc_nph_UNCONNECTED;
  wire [11:0]NLW_U0_fc_pd_UNCONNECTED;
  wire [7:0]NLW_U0_fc_ph_UNCONNECTED;
  wire [3:0]NLW_U0_gt_ch_drp_rdy_UNCONNECTED;
  wire [1:0]NLW_U0_int_qplllock_out_UNCONNECTED;
  wire [1:0]NLW_U0_int_qplloutclk_out_UNCONNECTED;
  wire [1:0]NLW_U0_int_qplloutrefclk_out_UNCONNECTED;
  wire [3:0]NLW_U0_int_rxoutclk_out_UNCONNECTED;
  wire [15:0]NLW_U0_pcie_drp_do_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_cpll_lock_UNCONNECTED;
  wire [31:0]NLW_U0_pipe_debug_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_0_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_1_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_2_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_3_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_4_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_5_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_6_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_7_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_8_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_debug_9_UNCONNECTED;
  wire [59:0]NLW_U0_pipe_dmonitorout_UNCONNECTED;
  wire [27:0]NLW_U0_pipe_drp_fsm_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_eyescandataerror_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_pclk_sel_out_UNCONNECTED;
  wire [0:0]NLW_U0_pipe_qpll_lock_UNCONNECTED;
  wire [11:0]NLW_U0_pipe_qrst_fsm_UNCONNECTED;
  wire [19:0]NLW_U0_pipe_rate_fsm_UNCONNECTED;
  wire [4:0]NLW_U0_pipe_rst_fsm_UNCONNECTED;
  wire [11:0]NLW_U0_pipe_rxbufstatus_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_rxcommadet_UNCONNECTED;
  wire [31:0]NLW_U0_pipe_rxdisperr_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_rxdlysresetdone_UNCONNECTED;
  wire [31:0]NLW_U0_pipe_rxnotintable_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_rxoutclk_out_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_rxphaligndone_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_rxpmaresetdone_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_rxprbserr_UNCONNECTED;
  wire [11:0]NLW_U0_pipe_rxstatus_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_rxsyncdone_UNCONNECTED;
  wire [27:0]NLW_U0_pipe_sync_fsm_rx_UNCONNECTED;
  wire [23:0]NLW_U0_pipe_sync_fsm_tx_UNCONNECTED;
  wire [24:0]NLW_U0_pipe_tx_0_sigs_UNCONNECTED;
  wire [24:0]NLW_U0_pipe_tx_1_sigs_UNCONNECTED;
  wire [24:0]NLW_U0_pipe_tx_2_sigs_UNCONNECTED;
  wire [24:0]NLW_U0_pipe_tx_3_sigs_UNCONNECTED;
  wire [24:0]NLW_U0_pipe_tx_4_sigs_UNCONNECTED;
  wire [24:0]NLW_U0_pipe_tx_5_sigs_UNCONNECTED;
  wire [24:0]NLW_U0_pipe_tx_6_sigs_UNCONNECTED;
  wire [24:0]NLW_U0_pipe_tx_7_sigs_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_txdlysresetdone_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_txphaligndone_UNCONNECTED;
  wire [3:0]NLW_U0_pipe_txphinitdone_UNCONNECTED;
  wire [2:0]NLW_U0_pl_initial_link_width_UNCONNECTED;
  wire [1:0]NLW_U0_pl_lane_reversal_mode_UNCONNECTED;
  wire [5:0]NLW_U0_pl_ltssm_state_UNCONNECTED;
  wire [1:0]NLW_U0_pl_rx_pm_state_UNCONNECTED;
  wire [1:0]NLW_U0_pl_sel_lnk_width_UNCONNECTED;
  wire [2:0]NLW_U0_pl_tx_pm_state_UNCONNECTED;
  wire [1:0]NLW_U0_qpll_qpllreset_UNCONNECTED;

  (* CFG_CTL_IF = "FALSE" *) 
  (* CFG_FC_IF = "FALSE" *) 
  (* CFG_MGMT_IF = "FALSE" *) 
  (* CFG_STATUS_IF = "TRUE" *) 
  (* CLASS_CODE = "058000" *) 
  (* C_DATA_WIDTH = "64" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* ERR_REPORTING_IF = "FALSE" *) 
  (* EXT_CH_GT_DRP = "FALSE" *) 
  (* EXT_PIPE_INTERFACE = "FALSE" *) 
  (* EXT_STARTUP_PRIMITIVE = "FALSE" *) 
  (* KEEP_WIDTH = "8" *) 
  (* LINK_CAP_MAX_LINK_WIDTH = "4" *) 
  (* PCIE_ASYNC_EN = "FALSE" *) 
  (* PCIE_EXT_CLK = "FALSE" *) 
  (* PCIE_EXT_GT_COMMON = "FALSE" *) 
  (* PIPE_SIM = "FALSE" *) 
  (* PL_INTERFACE = "FALSE" *) 
  (* RCV_MSG_IF = "TRUE" *) 
  (* SHARED_LOGIC_IN_CORE = "FALSE" *) 
  (* TRANSCEIVER_CTRL_STATUS_PORTS = "FALSE" *) 
  (* bar_0 = "FFF00000" *) 
  (* bar_1 = "FFE00000" *) 
  (* bar_2 = "FFE00000" *) 
  (* bar_3 = "FFE00000" *) 
  (* bar_4 = "FFE00000" *) 
  (* bar_5 = "FFE00000" *) 
  (* bram_lat = "0" *) 
  (* c_aer_base_ptr = "000" *) 
  (* c_aer_cap_ecrc_check_capable = "FALSE" *) 
  (* c_aer_cap_ecrc_gen_capable = "FALSE" *) 
  (* c_aer_cap_multiheader = "FALSE" *) 
  (* c_aer_cap_nextptr = "000" *) 
  (* c_aer_cap_on = "FALSE" *) 
  (* c_aer_cap_optional_err_support = "000000" *) 
  (* c_aer_cap_permit_rooterr_update = "FALSE" *) 
  (* c_buf_opt_bma = "TRUE" *) 
  (* c_component_name = "pcie_7x_0" *) 
  (* c_cpl_inf = "TRUE" *) 
  (* c_cpl_infinite = "TRUE" *) 
  (* c_cpl_timeout_disable_sup = "FALSE" *) 
  (* c_cpl_timeout_range = "0010" *) 
  (* c_cpl_timeout_ranges_sup = "2" *) 
  (* c_d1_support = "FALSE" *) 
  (* c_d2_support = "FALSE" *) 
  (* c_de_emph = "FALSE" *) 
  (* c_dev_cap2_ari_forwarding_supported = "FALSE" *) 
  (* c_dev_cap2_atomicop32_completer_supported = "FALSE" *) 
  (* c_dev_cap2_atomicop64_completer_supported = "FALSE" *) 
  (* c_dev_cap2_atomicop_routing_supported = "FALSE" *) 
  (* c_dev_cap2_cas128_completer_supported = "FALSE" *) 
  (* c_dev_cap2_tph_completer_supported = "00" *) 
  (* c_dev_control_ext_tag_default = "FALSE" *) 
  (* c_dev_port_type = "0" *) 
  (* c_dis_lane_reverse = "TRUE" *) 
  (* c_disable_rx_poisoned_resp = "FALSE" *) 
  (* c_disable_scrambling = "FALSE" *) 
  (* c_disable_tx_aspm_l0s = "FALSE" *) 
  (* c_dll_lnk_actv_cap = "FALSE" *) 
  (* c_dsi_bool = "FALSE" *) 
  (* c_dsn_base_ptr = "100" *) 
  (* c_dsn_cap_enabled = "TRUE" *) 
  (* c_dsn_next_ptr = "000" *) 
  (* c_enable_msg_route = "00000000000" *) 
  (* c_ep_l0s_accpt_lat = "0" *) 
  (* c_ep_l1_accpt_lat = "7" *) 
  (* c_ext_pci_cfg_space_addr = "3FF" *) 
  (* c_external_clocking = "TRUE" *) 
  (* c_fc_cpld = "461" *) 
  (* c_fc_cplh = "36" *) 
  (* c_fc_npd = "24" *) 
  (* c_fc_nph = "12" *) 
  (* c_fc_pd = "437" *) 
  (* c_fc_ph = "32" *) 
  (* c_gen1 = "TRUE" *) 
  (* c_header_type = "00" *) 
  (* c_hw_auton_spd_disable = "FALSE" *) 
  (* c_int_width = "64" *) 
  (* c_last_cfg_dw = "10C" *) 
  (* c_link_cap_aspm_optionality = "FALSE" *) 
  (* c_ll_ack_timeout = "0000" *) 
  (* c_ll_ack_timeout_enable = "FALSE" *) 
  (* c_ll_ack_timeout_function = "0" *) 
  (* c_ll_replay_timeout = "0000" *) 
  (* c_ll_replay_timeout_enable = "FALSE" *) 
  (* c_ll_replay_timeout_func = "1" *) 
  (* c_lnk_bndwdt_notif = "FALSE" *) 
  (* c_msi = "0" *) 
  (* c_msi_64b_addr = "TRUE" *) 
  (* c_msi_cap_on = "TRUE" *) 
  (* c_msi_mult_msg_extn = "0" *) 
  (* c_msi_per_vctr_mask_cap = "FALSE" *) 
  (* c_msix_cap_on = "FALSE" *) 
  (* c_msix_next_ptr = "00" *) 
  (* c_msix_pba_bir = "0" *) 
  (* c_msix_pba_offset = "0" *) 
  (* c_msix_table_bir = "0" *) 
  (* c_msix_table_offset = "0" *) 
  (* c_msix_table_size = "000" *) 
  (* c_pci_cfg_space_addr = "3F" *) 
  (* c_pcie_blk_locn = "0" *) 
  (* c_pcie_cap_next_ptr = "00" *) 
  (* c_pcie_cap_slot_implemented = "FALSE" *) 
  (* c_pcie_dbg_ports = "FALSE" *) 
  (* c_pcie_fast_config = "2" *) 
  (* c_perf_level_high = "TRUE" *) 
  (* c_phantom_functions = "0" *) 
  (* c_pm_cap_next_ptr = "48" *) 
  (* c_pme_support = "0F" *) 
  (* c_rbar_base_ptr = "000" *) 
  (* c_rbar_cap_control_encodedbar0 = "00" *) 
  (* c_rbar_cap_control_encodedbar1 = "00" *) 
  (* c_rbar_cap_control_encodedbar2 = "00" *) 
  (* c_rbar_cap_control_encodedbar3 = "00" *) 
  (* c_rbar_cap_control_encodedbar4 = "00" *) 
  (* c_rbar_cap_control_encodedbar5 = "00" *) 
  (* c_rbar_cap_index0 = "0" *) 
  (* c_rbar_cap_index1 = "0" *) 
  (* c_rbar_cap_index2 = "0" *) 
  (* c_rbar_cap_index3 = "0" *) 
  (* c_rbar_cap_index4 = "0" *) 
  (* c_rbar_cap_index5 = "0" *) 
  (* c_rbar_cap_nextptr = "000" *) 
  (* c_rbar_cap_on = "FALSE" *) 
  (* c_rbar_cap_sup0 = "00001" *) 
  (* c_rbar_cap_sup1 = "00001" *) 
  (* c_rbar_cap_sup2 = "00001" *) 
  (* c_rbar_cap_sup3 = "00001" *) 
  (* c_rbar_cap_sup4 = "00001" *) 
  (* c_rbar_cap_sup5 = "00001" *) 
  (* c_rbar_num = "0" *) 
  (* c_rcb = "0" *) 
  (* c_recrc_check = "0" *) 
  (* c_recrc_check_trim = "FALSE" *) 
  (* c_rev_gt_order = "FALSE" *) 
  (* c_root_cap_crs = "FALSE" *) 
  (* c_rx_raddr_lat = "0" *) 
  (* c_rx_ram_limit = "7FF" *) 
  (* c_rx_rdata_lat = "2" *) 
  (* c_rx_write_lat = "0" *) 
  (* c_silicon_rev = "2" *) 
  (* c_slot_cap_attn_butn = "FALSE" *) 
  (* c_slot_cap_attn_ind = "FALSE" *) 
  (* c_slot_cap_elec_interlock = "FALSE" *) 
  (* c_slot_cap_hotplug_cap = "FALSE" *) 
  (* c_slot_cap_hotplug_surprise = "FALSE" *) 
  (* c_slot_cap_mrl = "FALSE" *) 
  (* c_slot_cap_no_cmd_comp_sup = "FALSE" *) 
  (* c_slot_cap_physical_slot_num = "0" *) 
  (* c_slot_cap_pwr_ctrl = "FALSE" *) 
  (* c_slot_cap_pwr_ind = "FALSE" *) 
  (* c_slot_cap_pwr_limit_scale = "0" *) 
  (* c_slot_cap_pwr_limit_value = "0" *) 
  (* c_surprise_dn_err_cap = "FALSE" *) 
  (* c_trgt_lnk_spd = "2" *) 
  (* c_trn_np_fc = "TRUE" *) 
  (* c_tx_last_tlp = "29" *) 
  (* c_tx_raddr_lat = "0" *) 
  (* c_tx_rdata_lat = "2" *) 
  (* c_tx_write_lat = "0" *) 
  (* c_upconfig_capable = "TRUE" *) 
  (* c_upstream_facing = "TRUE" *) 
  (* c_ur_atomic = "FALSE" *) 
  (* c_ur_inv_req = "TRUE" *) 
  (* c_ur_prs_response = "TRUE" *) 
  (* c_vc_base_ptr = "000" *) 
  (* c_vc_cap_enabled = "FALSE" *) 
  (* c_vc_cap_reject_snoop = "FALSE" *) 
  (* c_vc_next_ptr = "000" *) 
  (* c_vsec_base_ptr = "000" *) 
  (* c_vsec_cap_enabled = "FALSE" *) 
  (* c_vsec_next_ptr = "000" *) 
  (* c_xlnx_ref_board = "NONE" *) 
  (* cap_ver = "2" *) 
  (* cardbus_cis_ptr = "00000000" *) 
  (* cmps = "2" *) 
  (* con_scl_fctr_d0_state = "0" *) 
  (* con_scl_fctr_d1_state = "0" *) 
  (* con_scl_fctr_d2_state = "0" *) 
  (* con_scl_fctr_d3_state = "0" *) 
  (* cost_table = "1" *) 
  (* d1_sup = "0" *) 
  (* d2_sup = "0" *) 
  (* dev_id = "7024" *) 
  (* dev_port_type = "0000" *) 
  (* dis_scl_fctr_d0_state = "0" *) 
  (* dis_scl_fctr_d1_state = "0" *) 
  (* dis_scl_fctr_d2_state = "0" *) 
  (* dis_scl_fctr_d3_state = "0" *) 
  (* dsi = "0" *) 
  (* ep_l0s_accpt_lat = "000" *) 
  (* ep_l1_accpt_lat = "111" *) 
  (* ext_tag_fld_sup = "FALSE" *) 
  (* int_pin = "0" *) 
  (* intx = "FALSE" *) 
  (* max_lnk_spd = "2" *) 
  (* max_lnk_wdt = "000100" *) 
  (* mps = "010" *) 
  (* no_soft_rst = "TRUE" *) 
  (* pci_exp_int_freq = "3" *) 
  (* pci_exp_ref_freq = "0" *) 
  (* phantm_func_sup = "00" *) 
  (* pme_sup = "0F" *) 
  (* pwr_con_d0_state = "00" *) 
  (* pwr_con_d1_state = "00" *) 
  (* pwr_con_d2_state = "00" *) 
  (* pwr_con_d3_state = "00" *) 
  (* pwr_dis_d0_state = "00" *) 
  (* pwr_dis_d1_state = "00" *) 
  (* pwr_dis_d2_state = "00" *) 
  (* pwr_dis_d3_state = "00" *) 
  (* rev_id = "00" *) 
  (* slot_clk = "TRUE" *) 
  (* subsys_id = "0007" *) 
  (* subsys_ven_id = "10EE" *) 
  (* ven_id = "10EE" *) 
  (* xrom_bar = "00000000" *) 
  pcie_7x_0_pcie_7x_0_pcie2_top U0
       (.cfg_aer_ecrc_check_en(NLW_U0_cfg_aer_ecrc_check_en_UNCONNECTED),
        .cfg_aer_ecrc_gen_en(NLW_U0_cfg_aer_ecrc_gen_en_UNCONNECTED),
        .cfg_aer_interrupt_msgnum({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .cfg_aer_rooterr_corr_err_received(cfg_aer_rooterr_corr_err_received),
        .cfg_aer_rooterr_corr_err_reporting_en(cfg_aer_rooterr_corr_err_reporting_en),
        .cfg_aer_rooterr_fatal_err_received(cfg_aer_rooterr_fatal_err_received),
        .cfg_aer_rooterr_fatal_err_reporting_en(cfg_aer_rooterr_fatal_err_reporting_en),
        .cfg_aer_rooterr_non_fatal_err_received(cfg_aer_rooterr_non_fatal_err_received),
        .cfg_aer_rooterr_non_fatal_err_reporting_en(cfg_aer_rooterr_non_fatal_err_reporting_en),
        .cfg_bridge_serr_en(cfg_bridge_serr_en),
        .cfg_bus_number(cfg_bus_number),
        .cfg_command(cfg_command),
        .cfg_dcommand(cfg_dcommand),
        .cfg_dcommand2(cfg_dcommand2),
        .cfg_device_number(cfg_device_number),
        .cfg_ds_bus_number({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .cfg_ds_device_number({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .cfg_ds_function_number({1'b0,1'b0,1'b0}),
        .cfg_dsn({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .cfg_dstatus(cfg_dstatus),
        .cfg_err_acs(1'b0),
        .cfg_err_aer_headerlog({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .cfg_err_aer_headerlog_set(NLW_U0_cfg_err_aer_headerlog_set_UNCONNECTED),
        .cfg_err_atomic_egress_blocked(1'b0),
        .cfg_err_cor(1'b0),
        .cfg_err_cpl_abort(1'b0),
        .cfg_err_cpl_rdy(NLW_U0_cfg_err_cpl_rdy_UNCONNECTED),
        .cfg_err_cpl_timeout(1'b0),
        .cfg_err_cpl_unexpect(1'b0),
        .cfg_err_ecrc(1'b0),
        .cfg_err_internal_cor(1'b0),
        .cfg_err_internal_uncor(1'b0),
        .cfg_err_locked(1'b0),
        .cfg_err_malformed(1'b0),
        .cfg_err_mc_blocked(1'b0),
        .cfg_err_norecovery(1'b0),
        .cfg_err_poisoned(1'b0),
        .cfg_err_posted(1'b0),
        .cfg_err_tlp_cpl_header({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .cfg_err_ur(1'b0),
        .cfg_function_number(cfg_function_number),
        .cfg_interrupt(cfg_interrupt),
        .cfg_interrupt_assert(cfg_interrupt_assert),
        .cfg_interrupt_di(cfg_interrupt_di),
        .cfg_interrupt_do(cfg_interrupt_do),
        .cfg_interrupt_mmenable(cfg_interrupt_mmenable),
        .cfg_interrupt_msienable(cfg_interrupt_msienable),
        .cfg_interrupt_msixenable(cfg_interrupt_msixenable),
        .cfg_interrupt_msixfm(cfg_interrupt_msixfm),
        .cfg_interrupt_rdy(cfg_interrupt_rdy),
        .cfg_interrupt_stat(cfg_interrupt_stat),
        .cfg_lcommand(cfg_lcommand),
        .cfg_lstatus(cfg_lstatus),
        .cfg_mgmt_byte_en({1'b0,1'b0,1'b0,1'b0}),
        .cfg_mgmt_di({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .cfg_mgmt_do(NLW_U0_cfg_mgmt_do_UNCONNECTED[31:0]),
        .cfg_mgmt_dwaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .cfg_mgmt_rd_en(1'b0),
        .cfg_mgmt_rd_wr_done(NLW_U0_cfg_mgmt_rd_wr_done_UNCONNECTED),
        .cfg_mgmt_wr_en(1'b0),
        .cfg_mgmt_wr_readonly(1'b0),
        .cfg_mgmt_wr_rw1c_as_rw(1'b0),
        .cfg_msg_data(cfg_msg_data),
        .cfg_msg_received(cfg_msg_received),
        .cfg_msg_received_assert_int_a(cfg_msg_received_assert_int_a),
        .cfg_msg_received_assert_int_b(cfg_msg_received_assert_int_b),
        .cfg_msg_received_assert_int_c(cfg_msg_received_assert_int_c),
        .cfg_msg_received_assert_int_d(cfg_msg_received_assert_int_d),
        .cfg_msg_received_deassert_int_a(cfg_msg_received_deassert_int_a),
        .cfg_msg_received_deassert_int_b(cfg_msg_received_deassert_int_b),
        .cfg_msg_received_deassert_int_c(cfg_msg_received_deassert_int_c),
        .cfg_msg_received_deassert_int_d(cfg_msg_received_deassert_int_d),
        .cfg_msg_received_err_cor(cfg_msg_received_err_cor),
        .cfg_msg_received_err_fatal(cfg_msg_received_err_fatal),
        .cfg_msg_received_err_non_fatal(cfg_msg_received_err_non_fatal),
        .cfg_msg_received_pm_as_nak(cfg_msg_received_pm_as_nak),
        .cfg_msg_received_pm_pme(cfg_msg_received_pm_pme),
        .cfg_msg_received_pme_to_ack(cfg_msg_received_pme_to_ack),
        .cfg_msg_received_setslotpowerlimit(cfg_msg_received_setslotpowerlimit),
        .cfg_pcie_link_state(cfg_pcie_link_state),
        .cfg_pciecap_interrupt_msgnum(cfg_pciecap_interrupt_msgnum),
        .cfg_pm_force_state({1'b0,1'b0}),
        .cfg_pm_force_state_en(1'b0),
        .cfg_pm_halt_aspm_l0s(1'b0),
        .cfg_pm_halt_aspm_l1(1'b0),
        .cfg_pm_send_pme_to(1'b0),
        .cfg_pm_wake(1'b0),
        .cfg_pmcsr_pme_en(cfg_pmcsr_pme_en),
        .cfg_pmcsr_pme_status(cfg_pmcsr_pme_status),
        .cfg_pmcsr_powerstate(cfg_pmcsr_powerstate),
        .cfg_received_func_lvl_rst(cfg_received_func_lvl_rst),
        .cfg_root_control_pme_int_en(cfg_root_control_pme_int_en),
        .cfg_root_control_syserr_corr_err_en(cfg_root_control_syserr_corr_err_en),
        .cfg_root_control_syserr_fatal_err_en(cfg_root_control_syserr_fatal_err_en),
        .cfg_root_control_syserr_non_fatal_err_en(cfg_root_control_syserr_non_fatal_err_en),
        .cfg_slot_control_electromech_il_ctl_pulse(cfg_slot_control_electromech_il_ctl_pulse),
        .cfg_status(cfg_status),
        .cfg_to_turnoff(cfg_to_turnoff),
        .cfg_trn_pending(1'b0),
        .cfg_turnoff_ok(1'b0),
        .cfg_vc_tcvc_map(cfg_vc_tcvc_map),
        .common_commands_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .common_commands_out(NLW_U0_common_commands_out_UNCONNECTED[11:0]),
        .ext_ch_gt_drpaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ext_ch_gt_drpclk(NLW_U0_ext_ch_gt_drpclk_UNCONNECTED),
        .ext_ch_gt_drpdi({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ext_ch_gt_drpdo(NLW_U0_ext_ch_gt_drpdo_UNCONNECTED[63:0]),
        .ext_ch_gt_drpen({1'b0,1'b0,1'b0,1'b0}),
        .ext_ch_gt_drprdy(NLW_U0_ext_ch_gt_drprdy_UNCONNECTED[3:0]),
        .ext_ch_gt_drpwe({1'b0,1'b0,1'b0,1'b0}),
        .fc_cpld(NLW_U0_fc_cpld_UNCONNECTED[11:0]),
        .fc_cplh(NLW_U0_fc_cplh_UNCONNECTED[7:0]),
        .fc_npd(NLW_U0_fc_npd_UNCONNECTED[11:0]),
        .fc_nph(NLW_U0_fc_nph_UNCONNECTED[7:0]),
        .fc_pd(NLW_U0_fc_pd_UNCONNECTED[11:0]),
        .fc_ph(NLW_U0_fc_ph_UNCONNECTED[7:0]),
        .fc_sel({1'b0,1'b0,1'b0}),
        .gt_ch_drp_rdy(NLW_U0_gt_ch_drp_rdy_UNCONNECTED[3:0]),
        .icap_clk(icap_clk),
        .icap_csib(icap_csib),
        .icap_i(icap_i),
        .icap_o(icap_o),
        .icap_rdwrb(icap_rdwrb),
        .int_dclk_out(NLW_U0_int_dclk_out_UNCONNECTED),
        .int_mmcm_lock_out(NLW_U0_int_mmcm_lock_out_UNCONNECTED),
        .int_oobclk_out(NLW_U0_int_oobclk_out_UNCONNECTED),
        .int_pclk_out_slave(NLW_U0_int_pclk_out_slave_UNCONNECTED),
        .int_pclk_sel_slave({1'b0,1'b0,1'b0,1'b0}),
        .int_pipe_rxusrclk_out(NLW_U0_int_pipe_rxusrclk_out_UNCONNECTED),
        .int_qplllock_out(NLW_U0_int_qplllock_out_UNCONNECTED[1:0]),
        .int_qplloutclk_out(NLW_U0_int_qplloutclk_out_UNCONNECTED[1:0]),
        .int_qplloutrefclk_out(NLW_U0_int_qplloutrefclk_out_UNCONNECTED[1:0]),
        .int_rxoutclk_out(NLW_U0_int_rxoutclk_out_UNCONNECTED[3:0]),
        .int_userclk1_out(NLW_U0_int_userclk1_out_UNCONNECTED),
        .int_userclk2_out(NLW_U0_int_userclk2_out_UNCONNECTED),
        .m_axis_rx_tdata(m_axis_rx_tdata),
        .m_axis_rx_tkeep(m_axis_rx_tkeep),
        .m_axis_rx_tlast(m_axis_rx_tlast),
        .m_axis_rx_tready(m_axis_rx_tready),
        .m_axis_rx_tuser(m_axis_rx_tuser),
        .m_axis_rx_tvalid(m_axis_rx_tvalid),
        .pci_exp_rxn(pci_exp_rxn),
        .pci_exp_rxp(pci_exp_rxp),
        .pci_exp_txn(pci_exp_txn),
        .pci_exp_txp(pci_exp_txp),
        .pcie_drp_addr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pcie_drp_clk(1'b1),
        .pcie_drp_di({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pcie_drp_do(NLW_U0_pcie_drp_do_UNCONNECTED[15:0]),
        .pcie_drp_en(1'b0),
        .pcie_drp_rdy(NLW_U0_pcie_drp_rdy_UNCONNECTED),
        .pcie_drp_we(1'b0),
        .pipe_cpll_lock(NLW_U0_pipe_cpll_lock_UNCONNECTED[3:0]),
        .pipe_dclk_in(1'b0),
        .pipe_debug(NLW_U0_pipe_debug_UNCONNECTED[31:0]),
        .pipe_debug_0(NLW_U0_pipe_debug_0_UNCONNECTED[3:0]),
        .pipe_debug_1(NLW_U0_pipe_debug_1_UNCONNECTED[3:0]),
        .pipe_debug_2(NLW_U0_pipe_debug_2_UNCONNECTED[3:0]),
        .pipe_debug_3(NLW_U0_pipe_debug_3_UNCONNECTED[3:0]),
        .pipe_debug_4(NLW_U0_pipe_debug_4_UNCONNECTED[3:0]),
        .pipe_debug_5(NLW_U0_pipe_debug_5_UNCONNECTED[3:0]),
        .pipe_debug_6(NLW_U0_pipe_debug_6_UNCONNECTED[3:0]),
        .pipe_debug_7(NLW_U0_pipe_debug_7_UNCONNECTED[3:0]),
        .pipe_debug_8(NLW_U0_pipe_debug_8_UNCONNECTED[3:0]),
        .pipe_debug_9(NLW_U0_pipe_debug_9_UNCONNECTED[3:0]),
        .pipe_dmonitorout(NLW_U0_pipe_dmonitorout_UNCONNECTED[59:0]),
        .pipe_drp_fsm(NLW_U0_pipe_drp_fsm_UNCONNECTED[27:0]),
        .pipe_eyescandataerror(NLW_U0_pipe_eyescandataerror_UNCONNECTED[3:0]),
        .pipe_gen3_out(NLW_U0_pipe_gen3_out_UNCONNECTED),
        .pipe_loopback({1'b0,1'b0,1'b0}),
        .pipe_mmcm_lock_in(1'b1),
        .pipe_mmcm_rst_n(1'b1),
        .pipe_oobclk_in(1'b0),
        .pipe_pclk_in(1'b0),
        .pipe_pclk_sel_out(NLW_U0_pipe_pclk_sel_out_UNCONNECTED[3:0]),
        .pipe_qpll_lock(NLW_U0_pipe_qpll_lock_UNCONNECTED[0]),
        .pipe_qrst_fsm(NLW_U0_pipe_qrst_fsm_UNCONNECTED[11:0]),
        .pipe_qrst_idle(NLW_U0_pipe_qrst_idle_UNCONNECTED),
        .pipe_rate_fsm(NLW_U0_pipe_rate_fsm_UNCONNECTED[19:0]),
        .pipe_rate_idle(NLW_U0_pipe_rate_idle_UNCONNECTED),
        .pipe_rst_fsm(NLW_U0_pipe_rst_fsm_UNCONNECTED[4:0]),
        .pipe_rst_idle(NLW_U0_pipe_rst_idle_UNCONNECTED),
        .pipe_rx_0_sigs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipe_rx_1_sigs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipe_rx_2_sigs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipe_rx_3_sigs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipe_rx_4_sigs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipe_rx_5_sigs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipe_rx_6_sigs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipe_rx_7_sigs({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pipe_rxbufstatus(NLW_U0_pipe_rxbufstatus_UNCONNECTED[11:0]),
        .pipe_rxcommadet(NLW_U0_pipe_rxcommadet_UNCONNECTED[3:0]),
        .pipe_rxdisperr(NLW_U0_pipe_rxdisperr_UNCONNECTED[31:0]),
        .pipe_rxdlysresetdone(NLW_U0_pipe_rxdlysresetdone_UNCONNECTED[3:0]),
        .pipe_rxnotintable(NLW_U0_pipe_rxnotintable_UNCONNECTED[31:0]),
        .pipe_rxoutclk_in({1'b0,1'b0,1'b0,1'b0}),
        .pipe_rxoutclk_out(NLW_U0_pipe_rxoutclk_out_UNCONNECTED[3:0]),
        .pipe_rxphaligndone(NLW_U0_pipe_rxphaligndone_UNCONNECTED[3:0]),
        .pipe_rxpmaresetdone(NLW_U0_pipe_rxpmaresetdone_UNCONNECTED[3:0]),
        .pipe_rxprbscntreset(1'b0),
        .pipe_rxprbserr(NLW_U0_pipe_rxprbserr_UNCONNECTED[3:0]),
        .pipe_rxprbssel({1'b0,1'b0,1'b0}),
        .pipe_rxstatus(NLW_U0_pipe_rxstatus_UNCONNECTED[11:0]),
        .pipe_rxsyncdone(NLW_U0_pipe_rxsyncdone_UNCONNECTED[3:0]),
        .pipe_rxusrclk_in(1'b0),
        .pipe_sync_fsm_rx(NLW_U0_pipe_sync_fsm_rx_UNCONNECTED[27:0]),
        .pipe_sync_fsm_tx(NLW_U0_pipe_sync_fsm_tx_UNCONNECTED[23:0]),
        .pipe_tx_0_sigs(NLW_U0_pipe_tx_0_sigs_UNCONNECTED[24:0]),
        .pipe_tx_1_sigs(NLW_U0_pipe_tx_1_sigs_UNCONNECTED[24:0]),
        .pipe_tx_2_sigs(NLW_U0_pipe_tx_2_sigs_UNCONNECTED[24:0]),
        .pipe_tx_3_sigs(NLW_U0_pipe_tx_3_sigs_UNCONNECTED[24:0]),
        .pipe_tx_4_sigs(NLW_U0_pipe_tx_4_sigs_UNCONNECTED[24:0]),
        .pipe_tx_5_sigs(NLW_U0_pipe_tx_5_sigs_UNCONNECTED[24:0]),
        .pipe_tx_6_sigs(NLW_U0_pipe_tx_6_sigs_UNCONNECTED[24:0]),
        .pipe_tx_7_sigs(NLW_U0_pipe_tx_7_sigs_UNCONNECTED[24:0]),
        .pipe_txdlysresetdone(NLW_U0_pipe_txdlysresetdone_UNCONNECTED[3:0]),
        .pipe_txinhibit({1'b0,1'b0,1'b0,1'b0}),
        .pipe_txoutclk_out(NLW_U0_pipe_txoutclk_out_UNCONNECTED),
        .pipe_txphaligndone(NLW_U0_pipe_txphaligndone_UNCONNECTED[3:0]),
        .pipe_txphinitdone(NLW_U0_pipe_txphinitdone_UNCONNECTED[3:0]),
        .pipe_txprbsforceerr(1'b0),
        .pipe_txprbssel({1'b0,1'b0,1'b0}),
        .pipe_userclk1_in(1'b1),
        .pipe_userclk2_in(1'b0),
        .pl_directed_change_done(NLW_U0_pl_directed_change_done_UNCONNECTED),
        .pl_directed_link_auton(1'b0),
        .pl_directed_link_change({1'b0,1'b0}),
        .pl_directed_link_speed(1'b0),
        .pl_directed_link_width({1'b0,1'b0}),
        .pl_downstream_deemph_source(1'b0),
        .pl_initial_link_width(NLW_U0_pl_initial_link_width_UNCONNECTED[2:0]),
        .pl_lane_reversal_mode(NLW_U0_pl_lane_reversal_mode_UNCONNECTED[1:0]),
        .pl_link_gen2_cap(NLW_U0_pl_link_gen2_cap_UNCONNECTED),
        .pl_link_partner_gen2_supported(NLW_U0_pl_link_partner_gen2_supported_UNCONNECTED),
        .pl_link_upcfg_cap(NLW_U0_pl_link_upcfg_cap_UNCONNECTED),
        .pl_ltssm_state(NLW_U0_pl_ltssm_state_UNCONNECTED[5:0]),
        .pl_phy_lnk_up(NLW_U0_pl_phy_lnk_up_UNCONNECTED),
        .pl_received_hot_rst(NLW_U0_pl_received_hot_rst_UNCONNECTED),
        .pl_rx_pm_state(NLW_U0_pl_rx_pm_state_UNCONNECTED[1:0]),
        .pl_sel_lnk_rate(NLW_U0_pl_sel_lnk_rate_UNCONNECTED),
        .pl_sel_lnk_width(NLW_U0_pl_sel_lnk_width_UNCONNECTED[1:0]),
        .pl_transmit_hot_rst(1'b0),
        .pl_tx_pm_state(NLW_U0_pl_tx_pm_state_UNCONNECTED[2:0]),
        .pl_upstream_prefer_deemph(1'b1),
        .qpll_drp_clk(NLW_U0_qpll_drp_clk_UNCONNECTED),
        .qpll_drp_crscode({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .qpll_drp_done({1'b0,1'b0}),
        .qpll_drp_fsm({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .qpll_drp_gen3(NLW_U0_qpll_drp_gen3_UNCONNECTED),
        .qpll_drp_ovrd(NLW_U0_qpll_drp_ovrd_UNCONNECTED),
        .qpll_drp_reset({1'b0,1'b0}),
        .qpll_drp_rst_n(NLW_U0_qpll_drp_rst_n_UNCONNECTED),
        .qpll_drp_start(NLW_U0_qpll_drp_start_UNCONNECTED),
        .qpll_qplld(NLW_U0_qpll_qplld_UNCONNECTED),
        .qpll_qplllock({1'b0,1'b0}),
        .qpll_qplloutclk({1'b0,1'b0}),
        .qpll_qplloutrefclk({1'b0,1'b0}),
        .qpll_qpllreset(NLW_U0_qpll_qpllreset_UNCONNECTED[1:0]),
        .rx_np_ok(1'b1),
        .rx_np_req(1'b1),
        .s_axis_tx_tdata(s_axis_tx_tdata),
        .s_axis_tx_tkeep(s_axis_tx_tkeep),
        .s_axis_tx_tlast(s_axis_tx_tlast),
        .s_axis_tx_tready(s_axis_tx_tready),
        .s_axis_tx_tuser(s_axis_tx_tuser),
        .s_axis_tx_tvalid(s_axis_tx_tvalid),
        .startup_cfgclk(startup_cfgclk),
        .startup_cfgmclk(startup_cfgmclk),
        .startup_clk(startup_clk),
        .startup_eos(startup_eos),
        .startup_eos_in(1'b0),
        .startup_gsr(startup_gsr),
        .startup_gts(startup_gts),
        .startup_keyclearb(startup_keyclearb),
        .startup_pack(startup_pack),
        .startup_preq(startup_preq),
        .startup_usrcclko(startup_usrcclko),
        .startup_usrcclkts(startup_usrcclkts),
        .startup_usrdoneo(startup_usrdoneo),
        .startup_usrdonets(startup_usrdonets),
        .sys_clk(sys_clk),
        .sys_rst_n(sys_rst_n),
        .tx_buf_av(tx_buf_av),
        .tx_cfg_gnt(1'b1),
        .tx_cfg_req(tx_cfg_req),
        .tx_err_drop(tx_err_drop),
        .user_app_rdy(user_app_rdy),
        .user_clk_out(user_clk_out),
        .user_lnk_up(user_lnk_up),
        .user_reset_out(user_reset_out));
endmodule

(* ORIG_REF_NAME = "BRAM_TDP_MACRO" *) 
module pcie_7x_0_BRAM_TDP_MACRO
   (rdata,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata);
  output [14:0]rdata;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [14:0]wdata;

  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_69 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_70 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_91 ;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [14:0]rdata;
  wire user_clk;
  wire [14:0]wdata;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "COMMON" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl 
       (.ADDRARDADDR({1'b1,MIMTXWADDR,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,MIMTXRADDR,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(user_clk),
        .CLKBWRCLK(user_clk),
        .DBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ),
        .DIADI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED [31:16],1'b0,1'b0,wdata[14:9],wdata[7:0]}),
        .DIBDI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED [31:16],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,wdata[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 }),
        .DOBDO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_69 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_70 ,rdata[14:9],rdata[7:0]}),
        .DOPADOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 }),
        .DOPBDOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_91 ,rdata[8]}),
        .ECCPARITY(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mim_tx_wen),
        .ENBWREN(mim_tx_ren),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ),
        .WEA({1'b1,1'b1,1'b1,1'b1}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "BRAM_TDP_MACRO" *) 
module pcie_7x_0_BRAM_TDP_MACRO_14
   (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    user_clk,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [13:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  input user_clk;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [13:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [13:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_69 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_70 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_71 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_91 ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire [13:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire user_clk;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "COMMON" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl 
       (.ADDRARDADDR({1'b1,MIMRXWADDR,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,MIMRXRADDR,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(user_clk),
        .CLKBWRCLK(user_clk),
        .DBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ),
        .DIADI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED [31:16],1'b0,1'b0,1'b0,\pipe_stages_1.pipe_rx_chanisaligned_q_reg [13:9],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [7:0]}),
        .DIBDI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED [31:16],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,1'b0,\pipe_stages_1.pipe_rx_chanisaligned_q_reg [8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 }),
        .DOBDO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_69 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_70 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_71 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [13:9],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [7:0]}),
        .DOPADOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 }),
        .DOPBDOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_91 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [8]}),
        .ECCPARITY(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mim_rx_wen),
        .ENBWREN(mim_rx_ren),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ),
        .WEA({1'b1,1'b1,1'b1,1'b1}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "BRAM_TDP_MACRO" *) 
module pcie_7x_0_BRAM_TDP_MACRO_15
   (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    user_clk,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  input user_clk;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire user_clk;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "COMMON" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl 
       (.ADDRARDADDR({1'b1,MIMRXWADDR,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,MIMRXRADDR,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(user_clk),
        .CLKBWRCLK(user_clk),
        .DBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ),
        .DIADI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED [31:16],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [16:9],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [7:0]}),
        .DIBDI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED [31:16],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,\pipe_stages_1.pipe_rx_chanisaligned_q_reg [17],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 }),
        .DOBDO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [16:9],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [7:0]}),
        .DOPADOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 }),
        .DOPBDOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [17],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [8]}),
        .ECCPARITY(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mim_rx_wen),
        .ENBWREN(mim_rx_ren),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ),
        .WEA({1'b1,1'b1,1'b1,1'b1}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "BRAM_TDP_MACRO" *) 
module pcie_7x_0_BRAM_TDP_MACRO_16
   (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    user_clk,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  input user_clk;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire user_clk;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "COMMON" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl 
       (.ADDRARDADDR({1'b1,MIMRXWADDR,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,MIMRXRADDR,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(user_clk),
        .CLKBWRCLK(user_clk),
        .DBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ),
        .DIADI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED [31:16],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [16:9],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [7:0]}),
        .DIBDI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED [31:16],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,\pipe_stages_1.pipe_rx_chanisaligned_q_reg [17],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 }),
        .DOBDO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [16:9],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [7:0]}),
        .DOPADOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 }),
        .DOPBDOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [17],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [8]}),
        .ECCPARITY(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mim_rx_wen),
        .ENBWREN(mim_rx_ren),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ),
        .WEA({1'b1,1'b1,1'b1,1'b1}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "BRAM_TDP_MACRO" *) 
module pcie_7x_0_BRAM_TDP_MACRO_17
   (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    user_clk,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  input user_clk;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire user_clk;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "COMMON" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl 
       (.ADDRARDADDR({1'b1,MIMRXWADDR,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,MIMRXRADDR,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(user_clk),
        .CLKBWRCLK(user_clk),
        .DBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ),
        .DIADI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED [31:16],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [16:9],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [7:0]}),
        .DIBDI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED [31:16],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,\pipe_stages_1.pipe_rx_chanisaligned_q_reg [17],\pipe_stages_1.pipe_rx_chanisaligned_q_reg [8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 }),
        .DOBDO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [16:9],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [7:0]}),
        .DOPADOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 }),
        .DOPBDOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [17],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [8]}),
        .ECCPARITY(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mim_rx_wen),
        .ENBWREN(mim_rx_ren),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ),
        .WEA({1'b1,1'b1,1'b1,1'b1}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "BRAM_TDP_MACRO" *) 
module pcie_7x_0_BRAM_TDP_MACRO_7
   (rdata,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata);
  output [17:0]rdata;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [17:0]wdata;

  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 ;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [17:0]rdata;
  wire user_clk;
  wire [17:0]wdata;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "COMMON" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl 
       (.ADDRARDADDR({1'b1,MIMTXWADDR,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,MIMTXRADDR,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(user_clk),
        .CLKBWRCLK(user_clk),
        .DBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ),
        .DIADI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED [31:16],wdata[16:9],wdata[7:0]}),
        .DIBDI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED [31:16],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,wdata[17],wdata[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 }),
        .DOBDO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED [31:16],rdata[16:9],rdata[7:0]}),
        .DOPADOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 }),
        .DOPBDOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED [3:2],rdata[17],rdata[8]}),
        .ECCPARITY(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mim_tx_wen),
        .ENBWREN(mim_tx_ren),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ),
        .WEA({1'b1,1'b1,1'b1,1'b1}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "BRAM_TDP_MACRO" *) 
module pcie_7x_0_BRAM_TDP_MACRO_8
   (rdata,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata);
  output [17:0]rdata;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [17:0]wdata;

  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 ;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [17:0]rdata;
  wire user_clk;
  wire [17:0]wdata;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "COMMON" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl 
       (.ADDRARDADDR({1'b1,MIMTXWADDR,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,MIMTXRADDR,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(user_clk),
        .CLKBWRCLK(user_clk),
        .DBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ),
        .DIADI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED [31:16],wdata[16:9],wdata[7:0]}),
        .DIBDI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED [31:16],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,wdata[17],wdata[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 }),
        .DOBDO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED [31:16],rdata[16:9],rdata[7:0]}),
        .DOPADOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 }),
        .DOPBDOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED [3:2],rdata[17],rdata[8]}),
        .ECCPARITY(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mim_tx_wen),
        .ENBWREN(mim_tx_ren),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ),
        .WEA({1'b1,1'b1,1'b1,1'b1}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "BRAM_TDP_MACRO" *) 
module pcie_7x_0_BRAM_TDP_MACRO_9
   (rdata,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata);
  output [17:0]rdata;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [17:0]wdata;

  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ;
  wire \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 ;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [17:0]rdata;
  wire user_clk;
  wire [17:0]wdata;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ;
  wire \NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED ;
  wire [3:2]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "COMMON" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(1),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("NO_CHANGE"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl 
       (.ADDRARDADDR({1'b1,MIMTXWADDR,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,MIMTXRADDR,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(user_clk),
        .CLKBWRCLK(user_clk),
        .DBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DBITERR_UNCONNECTED ),
        .DIADI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIADI_UNCONNECTED [31:16],wdata[16:9],wdata[7:0]}),
        .DIBDI({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DIBDI_UNCONNECTED [31:16],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIPADIP({1'b0,1'b0,wdata[17],wdata[8]}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOADO_UNCONNECTED [31:16],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_37 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_38 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_39 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_40 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_41 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_42 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_43 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_44 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_45 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_46 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_47 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_48 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_49 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_50 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_51 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_52 }),
        .DOBDO({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOBDO_UNCONNECTED [31:16],rdata[16:9],rdata[7:0]}),
        .DOPADOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPADOP_UNCONNECTED [3:2],\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_87 ,\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_n_88 }),
        .DOPBDOP({\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_DOPBDOP_UNCONNECTED [3:2],rdata[17],rdata[8]}),
        .ECCPARITY(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(mim_tx_wen),
        .ENBWREN(mim_tx_ren),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_genblk5_0.bram36_tdp_bl.bram36_tdp_bl_SBITERR_UNCONNECTED ),
        .WEA({1'b1,1'b1,1'b1,1'b1}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_ICAP_access" *) 
module pcie_7x_0_pcie_7x_0_ICAP_access
   (ICAP_ceb,
    ICAP_din_bs,
    p_0_in,
    conf_clk,
    D);
  output ICAP_ceb;
  output [31:0]ICAP_din_bs;
  input p_0_in;
  input conf_clk;
  input [31:0]D;

  wire [31:0]D;
  wire ICAP_ceb;
  wire [31:0]ICAP_din_bs;
  wire conf_clk;
  wire p_0_in;

  FDRE ICAP_ceb_reg
       (.C(conf_clk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(ICAP_ceb),
        .R(1'b0));
  FDRE \ICAP_din_reg[0] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(ICAP_din_bs[31]),
        .R(1'b0));
  FDRE \ICAP_din_reg[10] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[10]),
        .Q(ICAP_din_bs[21]),
        .R(1'b0));
  FDRE \ICAP_din_reg[11] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[11]),
        .Q(ICAP_din_bs[20]),
        .R(1'b0));
  FDRE \ICAP_din_reg[12] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[12]),
        .Q(ICAP_din_bs[19]),
        .R(1'b0));
  FDRE \ICAP_din_reg[13] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[13]),
        .Q(ICAP_din_bs[18]),
        .R(1'b0));
  FDRE \ICAP_din_reg[14] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[14]),
        .Q(ICAP_din_bs[17]),
        .R(1'b0));
  FDRE \ICAP_din_reg[15] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[15]),
        .Q(ICAP_din_bs[16]),
        .R(1'b0));
  FDRE \ICAP_din_reg[16] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[16]),
        .Q(ICAP_din_bs[15]),
        .R(1'b0));
  FDRE \ICAP_din_reg[17] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[17]),
        .Q(ICAP_din_bs[14]),
        .R(1'b0));
  FDRE \ICAP_din_reg[18] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[18]),
        .Q(ICAP_din_bs[13]),
        .R(1'b0));
  FDRE \ICAP_din_reg[19] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[19]),
        .Q(ICAP_din_bs[12]),
        .R(1'b0));
  FDRE \ICAP_din_reg[1] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(ICAP_din_bs[30]),
        .R(1'b0));
  FDRE \ICAP_din_reg[20] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[20]),
        .Q(ICAP_din_bs[11]),
        .R(1'b0));
  FDRE \ICAP_din_reg[21] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[21]),
        .Q(ICAP_din_bs[10]),
        .R(1'b0));
  FDRE \ICAP_din_reg[22] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[22]),
        .Q(ICAP_din_bs[9]),
        .R(1'b0));
  FDRE \ICAP_din_reg[23] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[23]),
        .Q(ICAP_din_bs[8]),
        .R(1'b0));
  FDRE \ICAP_din_reg[24] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[24]),
        .Q(ICAP_din_bs[7]),
        .R(1'b0));
  FDRE \ICAP_din_reg[25] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[25]),
        .Q(ICAP_din_bs[6]),
        .R(1'b0));
  FDRE \ICAP_din_reg[26] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[26]),
        .Q(ICAP_din_bs[5]),
        .R(1'b0));
  FDRE \ICAP_din_reg[27] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[27]),
        .Q(ICAP_din_bs[4]),
        .R(1'b0));
  FDRE \ICAP_din_reg[28] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[28]),
        .Q(ICAP_din_bs[3]),
        .R(1'b0));
  FDRE \ICAP_din_reg[29] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[29]),
        .Q(ICAP_din_bs[2]),
        .R(1'b0));
  FDRE \ICAP_din_reg[2] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[2]),
        .Q(ICAP_din_bs[29]),
        .R(1'b0));
  FDRE \ICAP_din_reg[30] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[30]),
        .Q(ICAP_din_bs[1]),
        .R(1'b0));
  FDRE \ICAP_din_reg[31] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[31]),
        .Q(ICAP_din_bs[0]),
        .R(1'b0));
  FDRE \ICAP_din_reg[3] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[3]),
        .Q(ICAP_din_bs[28]),
        .R(1'b0));
  FDRE \ICAP_din_reg[4] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[4]),
        .Q(ICAP_din_bs[27]),
        .R(1'b0));
  FDRE \ICAP_din_reg[5] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[5]),
        .Q(ICAP_din_bs[26]),
        .R(1'b0));
  FDRE \ICAP_din_reg[6] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[6]),
        .Q(ICAP_din_bs[25]),
        .R(1'b0));
  FDRE \ICAP_din_reg[7] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[7]),
        .Q(ICAP_din_bs[24]),
        .R(1'b0));
  FDRE \ICAP_din_reg[8] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[8]),
        .Q(ICAP_din_bs[23]),
        .R(1'b0));
  FDRE \ICAP_din_reg[9] 
       (.C(conf_clk),
        .CE(1'b1),
        .D(D[9]),
        .Q(ICAP_din_bs[22]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_PIO_EP_FPC" *) 
module pcie_7x_0_pcie_7x_0_PIO_EP_FPC
   (req_compl,
    ICAP_ceb,
    pr_done,
    \pio_rx_sm_64.in_packet_q_reg ,
    s_axis_tx_tlast,
    rx_completion_busy_reg,
    user_app_rdy_gnt_reg,
    trn_pending_reg,
    s_axis_tx_tdata,
    s_axis_tx_tkeep,
    s_axis_tx_tvalid,
    ICAP_din_bs,
    sys_clk,
    conf_clk,
    sys_reset,
    m_axis_rx_tdata,
    s_axis_tx_tready,
    rx_completion_busy,
    m_axis_rx_tvalid,
    m_axis_rx_tlast,
    trn_pending,
    cfg_bus_number,
    cfg_device_number,
    cfg_function_number);
  output req_compl;
  output ICAP_ceb;
  output pr_done;
  output \pio_rx_sm_64.in_packet_q_reg ;
  output s_axis_tx_tlast;
  output rx_completion_busy_reg;
  output user_app_rdy_gnt_reg;
  output trn_pending_reg;
  output [50:0]s_axis_tx_tdata;
  output [1:0]s_axis_tx_tkeep;
  output s_axis_tx_tvalid;
  output [31:0]ICAP_din_bs;
  input sys_clk;
  input conf_clk;
  input sys_reset;
  input [63:0]m_axis_rx_tdata;
  input s_axis_tx_tready;
  input rx_completion_busy;
  input m_axis_rx_tvalid;
  input m_axis_rx_tlast;
  input trn_pending;
  input [7:0]cfg_bus_number;
  input [4:0]cfg_device_number;
  input [2:0]cfg_function_number;

  wire EP_RX_inst_n_10;
  wire EP_RX_inst_n_11;
  wire EP_RX_inst_n_12;
  wire EP_RX_inst_n_13;
  wire EP_RX_inst_n_14;
  wire EP_RX_inst_n_15;
  wire EP_RX_inst_n_16;
  wire EP_RX_inst_n_17;
  wire EP_RX_inst_n_40;
  wire EP_RX_inst_n_41;
  wire EP_RX_inst_n_42;
  wire EP_RX_inst_n_6;
  wire EP_RX_inst_n_7;
  wire EP_RX_inst_n_8;
  wire EP_RX_inst_n_9;
  wire EP_TX_inst_n_4;
  wire EP_TX_inst_n_5;
  wire ICAP_ceb;
  wire [31:0]ICAP_din_bs;
  wire [7:0]cfg_bus_number;
  wire [4:0]cfg_device_number;
  wire [2:0]cfg_function_number;
  wire compl_done;
  wire conf_clk;
  wire [31:0]conf_data_fifo;
  wire [63:0]m_axis_rx_tdata;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tvalid;
  wire p_0_in;
  wire pause;
  wire \pio_rx_sm_64.in_packet_q_reg ;
  wire pr_done;
  wire [6:2]req_addr;
  wire req_compl;
  wire req_compl_q;
  wire req_compl_wd;
  wire [7:1]req_len;
  wire [15:0]req_rid;
  wire [3:2]req_tag;
  wire rx_completion_busy;
  wire rx_completion_busy_reg;
  wire [50:0]s_axis_tx_tdata;
  wire [1:0]s_axis_tx_tkeep;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tready;
  wire s_axis_tx_tvalid;
  wire soc_1_fd;
  wire soc_2_fd;
  wire soc_3_fd;
  wire state;
  wire sys_clk;
  wire sys_reset;
  wire trn_pending;
  wire trn_pending_reg;
  wire user_app_rdy_gnt_reg;
  wire [31:0]wr_data_conf;
  wire write_en;

  pcie_7x_0_pcie_7x_0_PIO_EP_MA_FPC EP_MEM_FPC_inst
       (.sys_clk(sys_clk),
        .sys_reset(sys_reset));
  pcie_7x_0_pcie_7x_0_PIO_RX_ENG_FPC EP_RX_inst
       (.D({EP_RX_inst_n_6,EP_RX_inst_n_7,EP_RX_inst_n_8,EP_RX_inst_n_9,EP_RX_inst_n_10,EP_RX_inst_n_11,EP_RX_inst_n_12,EP_RX_inst_n_13,EP_RX_inst_n_14,EP_RX_inst_n_15,EP_RX_inst_n_16,EP_RX_inst_n_17}),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (wr_data_conf),
        .Q(req_len),
        .compl_done(compl_done),
        .\gen_cpl_64.s_axis_tx_tdata_reg[11] (req_tag),
        .\gen_cpl_64.s_axis_tx_tdata_reg[1] (EP_RX_inst_n_42),
        .\gen_cpl_64.s_axis_tx_tdata_reg[31] ({req_rid[15:7],req_rid[3:0]}),
        .\gen_cpl_64.s_axis_tx_tdata_reg[32] (EP_RX_inst_n_40),
        .\gen_cpl_64.s_axis_tx_tdata_reg[34] (EP_RX_inst_n_41),
        .\gen_cpl_64.s_axis_tx_tdata_reg[6] (req_addr),
        .\gen_cpl_64.state_reg (EP_TX_inst_n_4),
        .m_axis_rx_tdata(m_axis_rx_tdata),
        .m_axis_rx_tlast(m_axis_rx_tlast),
        .m_axis_rx_tvalid(m_axis_rx_tvalid),
        .pause(pause),
        .\pio_rx_sm_64.in_packet_q_reg_0 (\pio_rx_sm_64.in_packet_q_reg ),
        .req_compl_q(req_compl_q),
        .req_compl_q_reg(req_compl),
        .req_compl_wd(req_compl_wd),
        .rx_completion_busy(rx_completion_busy),
        .rx_completion_busy_reg(rx_completion_busy_reg),
        .soc_1_fd(soc_1_fd),
        .soc_2_fd(soc_2_fd),
        .soc_3_fd(soc_3_fd),
        .state(state),
        .sys_clk(sys_clk),
        .sys_reset(sys_reset),
        .trn_pending(trn_pending),
        .trn_pending_reg(trn_pending_reg),
        .user_app_rdy_gnt_reg(user_app_rdy_gnt_reg),
        .user_reset_out_reg(EP_TX_inst_n_5),
        .write_en(write_en));
  pcie_7x_0_pcie_7x_0_PIO_TX_ENG_FPC EP_TX_inst
       (.D({EP_RX_inst_n_6,EP_RX_inst_n_7,EP_RX_inst_n_8,EP_RX_inst_n_9,EP_RX_inst_n_10,EP_RX_inst_n_11,EP_RX_inst_n_12,EP_RX_inst_n_13,EP_RX_inst_n_14,EP_RX_inst_n_15,EP_RX_inst_n_16,EP_RX_inst_n_17}),
        .Q(req_len),
        .cfg_bus_number(cfg_bus_number),
        .cfg_device_number(cfg_device_number),
        .cfg_function_number(cfg_function_number),
        .compl_done(compl_done),
        .\gen_cpl_64.s_axis_tx_tdata_reg[0]_0 (EP_TX_inst_n_4),
        .\gen_cpl_64.s_axis_tx_tdata_reg[0]_1 (EP_TX_inst_n_5),
        .\pio_rx_sm_64.req_addr_reg[6] (req_addr),
        .\pio_rx_sm_64.req_be_reg[0] (EP_RX_inst_n_40),
        .\pio_rx_sm_64.req_be_reg[0]_0 (EP_RX_inst_n_41),
        .\pio_rx_sm_64.req_be_reg[1] (EP_RX_inst_n_42),
        .\pio_rx_sm_64.req_rid_reg[15] ({req_rid[15:7],req_rid[3:0]}),
        .\pio_rx_sm_64.req_tag_reg[3] (req_tag),
        .req_compl(req_compl),
        .req_compl_q(req_compl_q),
        .req_compl_wd(req_compl_wd),
        .s_axis_tx_tdata(s_axis_tx_tdata),
        .s_axis_tx_tkeep(s_axis_tx_tkeep),
        .s_axis_tx_tlast(s_axis_tx_tlast),
        .s_axis_tx_tready(s_axis_tx_tready),
        .s_axis_tx_tvalid(s_axis_tx_tvalid),
        .state(state),
        .sys_clk(sys_clk),
        .sys_reset(sys_reset));
  pcie_7x_0_pcie_7x_0_ICAP_access ICAP_ACC
       (.D(conf_data_fifo),
        .ICAP_ceb(ICAP_ceb),
        .ICAP_din_bs(ICAP_din_bs),
        .conf_clk(conf_clk),
        .p_0_in(p_0_in));
  pcie_7x_0_pcie_7x_0_data_transfer data_transfer_i
       (.conf_clk(conf_clk),
        .dout(conf_data_fifo),
        .p_0_in(p_0_in),
        .pause(pause),
        .\pio_rx_sm_64.wr_data_reg[31] (wr_data_conf),
        .pr_done(pr_done),
        .soc_1_fd(soc_1_fd),
        .soc_2_fd(soc_2_fd),
        .soc_3_fd(soc_3_fd),
        .sys_clk(sys_clk),
        .sys_reset(sys_reset),
        .write_en(write_en));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_PIO_EP_MA_FPC" *) 
module pcie_7x_0_pcie_7x_0_PIO_EP_MA_FPC
   (sys_reset,
    sys_clk);
  input sys_reset;
  input sys_clk;

  wire \FSM_onehot_wr_mem_state[0]_i_1_n_0 ;
  wire \FSM_onehot_wr_mem_state[2]_i_1_n_0 ;
  wire \FSM_onehot_wr_mem_state[3]_i_1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_wr_mem_state_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_wr_mem_state_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_wr_mem_state_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_wr_mem_state_reg_n_0_[3] ;
  wire sys_clk;
  wire sys_reset;

  LUT4 #(
    .INIT(16'hFF02)) 
    \FSM_onehot_wr_mem_state[0]_i_1 
       (.I0(\FSM_onehot_wr_mem_state_reg_n_0_[3] ),
        .I1(\FSM_onehot_wr_mem_state_reg_n_0_[1] ),
        .I2(\FSM_onehot_wr_mem_state_reg_n_0_[2] ),
        .I3(\FSM_onehot_wr_mem_state_reg_n_0_[0] ),
        .O(\FSM_onehot_wr_mem_state[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_onehot_wr_mem_state[2]_i_1 
       (.I0(\FSM_onehot_wr_mem_state_reg_n_0_[1] ),
        .I1(\FSM_onehot_wr_mem_state_reg_n_0_[0] ),
        .O(\FSM_onehot_wr_mem_state[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \FSM_onehot_wr_mem_state[3]_i_1 
       (.I0(\FSM_onehot_wr_mem_state_reg_n_0_[2] ),
        .I1(\FSM_onehot_wr_mem_state_reg_n_0_[0] ),
        .I2(\FSM_onehot_wr_mem_state_reg_n_0_[1] ),
        .O(\FSM_onehot_wr_mem_state[3]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_wr_mem_state_reg[0] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\FSM_onehot_wr_mem_state[0]_i_1_n_0 ),
        .Q(\FSM_onehot_wr_mem_state_reg_n_0_[0] ),
        .S(sys_reset));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_wr_mem_state_reg[1] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_wr_mem_state_reg_n_0_[1] ),
        .R(sys_reset));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_wr_mem_state_reg[2] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\FSM_onehot_wr_mem_state[2]_i_1_n_0 ),
        .Q(\FSM_onehot_wr_mem_state_reg_n_0_[2] ),
        .R(sys_reset));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_wr_mem_state_reg[3] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\FSM_onehot_wr_mem_state[3]_i_1_n_0 ),
        .Q(\FSM_onehot_wr_mem_state_reg_n_0_[3] ),
        .R(sys_reset));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_PIO_FPC" *) 
module pcie_7x_0_pcie_7x_0_PIO_FPC
   (s_axis_tx_tdata,
    s_axis_tx_tkeep,
    s_axis_tx_tvalid,
    cfg_turnoff_ok,
    ICAP_ceb,
    ICAP_din_bs,
    \pio_rx_sm_64.in_packet_q_reg ,
    s_axis_tx_tlast,
    user_app_rdy_gnt,
    pr_done,
    s_axis_tx_tready,
    sys_reset,
    cfg_to_turnoff,
    sys_clk,
    conf_clk,
    m_axis_rx_tdata,
    cfg_bus_number,
    cfg_device_number,
    cfg_function_number,
    m_axis_rx_tvalid,
    m_axis_rx_tlast,
    user_app_rdy_req);
  output [50:0]s_axis_tx_tdata;
  output [1:0]s_axis_tx_tkeep;
  output s_axis_tx_tvalid;
  output cfg_turnoff_ok;
  output ICAP_ceb;
  output [31:0]ICAP_din_bs;
  output \pio_rx_sm_64.in_packet_q_reg ;
  output s_axis_tx_tlast;
  output user_app_rdy_gnt;
  output pr_done;
  input s_axis_tx_tready;
  input sys_reset;
  input cfg_to_turnoff;
  input sys_clk;
  input conf_clk;
  input [63:0]m_axis_rx_tdata;
  input [7:0]cfg_bus_number;
  input [4:0]cfg_device_number;
  input [2:0]cfg_function_number;
  input m_axis_rx_tvalid;
  input m_axis_rx_tlast;
  input user_app_rdy_req;

  wire ICAP_ceb;
  wire [31:0]ICAP_din_bs;
  wire PIO_EP_FPC_inst_n_5;
  wire PIO_EP_FPC_inst_n_6;
  wire PIO_EP_FPC_inst_n_7;
  wire [7:0]cfg_bus_number;
  wire [4:0]cfg_device_number;
  wire [2:0]cfg_function_number;
  wire cfg_to_turnoff;
  wire cfg_turnoff_ok;
  wire conf_clk;
  wire [63:0]m_axis_rx_tdata;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tvalid;
  wire \pio_rx_sm_64.in_packet_q_reg ;
  wire pr_done;
  wire req_compl;
  wire rx_completion_busy;
  wire [50:0]s_axis_tx_tdata;
  wire [1:0]s_axis_tx_tkeep;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tready;
  wire s_axis_tx_tvalid;
  wire sys_clk;
  wire sys_reset;
  wire trn_pending;
  wire user_app_rdy_gnt;
  wire user_app_rdy_req;

  pcie_7x_0_pcie_7x_0_PIO_EP_FPC PIO_EP_FPC_inst
       (.ICAP_ceb(ICAP_ceb),
        .ICAP_din_bs(ICAP_din_bs),
        .cfg_bus_number(cfg_bus_number),
        .cfg_device_number(cfg_device_number),
        .cfg_function_number(cfg_function_number),
        .conf_clk(conf_clk),
        .m_axis_rx_tdata(m_axis_rx_tdata),
        .m_axis_rx_tlast(m_axis_rx_tlast),
        .m_axis_rx_tvalid(m_axis_rx_tvalid),
        .\pio_rx_sm_64.in_packet_q_reg (\pio_rx_sm_64.in_packet_q_reg ),
        .pr_done(pr_done),
        .req_compl(req_compl),
        .rx_completion_busy(rx_completion_busy),
        .rx_completion_busy_reg(PIO_EP_FPC_inst_n_5),
        .s_axis_tx_tdata(s_axis_tx_tdata),
        .s_axis_tx_tkeep(s_axis_tx_tkeep),
        .s_axis_tx_tlast(s_axis_tx_tlast),
        .s_axis_tx_tready(s_axis_tx_tready),
        .s_axis_tx_tvalid(s_axis_tx_tvalid),
        .sys_clk(sys_clk),
        .sys_reset(sys_reset),
        .trn_pending(trn_pending),
        .trn_pending_reg(PIO_EP_FPC_inst_n_7),
        .user_app_rdy_gnt_reg(PIO_EP_FPC_inst_n_6));
  pcie_7x_0_pcie_7x_0_PIO_TO_CTRL_FPC PIO_TO_FPC_inst
       (.cfg_to_turnoff(cfg_to_turnoff),
        .cfg_turnoff_ok(cfg_turnoff_ok),
        .sys_clk(sys_clk),
        .sys_reset(sys_reset),
        .trn_pending(trn_pending),
        .trn_pending_reg_0(PIO_EP_FPC_inst_n_7));
  pcie_7x_0_pcie_7x_0_tandem_cpler_ctl_arb tandem_ctl_arb_i
       (.m_axis_rx_tvalid(m_axis_rx_tvalid),
        .m_axis_rx_tvalid_reg(PIO_EP_FPC_inst_n_6),
        .\pio_rx_sm_64.m_axis_rx_tready_reg (\pio_rx_sm_64.in_packet_q_reg ),
        .req_compl(req_compl),
        .rx_completion_busy(rx_completion_busy),
        .sys_clk(sys_clk),
        .sys_reset(sys_reset),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_app_rdy_req(user_app_rdy_req),
        .user_reset_out_reg(PIO_EP_FPC_inst_n_5));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_PIO_RX_ENG_FPC" *) 
module pcie_7x_0_pcie_7x_0_PIO_RX_ENG_FPC
   (write_en,
    req_compl_q_reg,
    \pio_rx_sm_64.in_packet_q_reg_0 ,
    req_compl_wd,
    rx_completion_busy_reg,
    user_app_rdy_gnt_reg,
    D,
    Q,
    \gen_cpl_64.s_axis_tx_tdata_reg[11] ,
    \gen_cpl_64.s_axis_tx_tdata_reg[31] ,
    \gen_cpl_64.s_axis_tx_tdata_reg[32] ,
    \gen_cpl_64.s_axis_tx_tdata_reg[34] ,
    \gen_cpl_64.s_axis_tx_tdata_reg[1] ,
    trn_pending_reg,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \gen_cpl_64.s_axis_tx_tdata_reg[6] ,
    soc_2_fd,
    soc_1_fd,
    soc_3_fd,
    sys_reset,
    sys_clk,
    m_axis_rx_tdata,
    rx_completion_busy,
    compl_done,
    m_axis_rx_tvalid,
    user_reset_out_reg,
    \gen_cpl_64.state_reg ,
    state,
    req_compl_q,
    pause,
    m_axis_rx_tlast,
    trn_pending);
  output write_en;
  output req_compl_q_reg;
  output \pio_rx_sm_64.in_packet_q_reg_0 ;
  output req_compl_wd;
  output rx_completion_busy_reg;
  output user_app_rdy_gnt_reg;
  output [11:0]D;
  output [6:0]Q;
  output [1:0]\gen_cpl_64.s_axis_tx_tdata_reg[11] ;
  output [12:0]\gen_cpl_64.s_axis_tx_tdata_reg[31] ;
  output [0:0]\gen_cpl_64.s_axis_tx_tdata_reg[32] ;
  output \gen_cpl_64.s_axis_tx_tdata_reg[34] ;
  output \gen_cpl_64.s_axis_tx_tdata_reg[1] ;
  output trn_pending_reg;
  output [31:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [4:0]\gen_cpl_64.s_axis_tx_tdata_reg[6] ;
  output soc_2_fd;
  output soc_1_fd;
  output soc_3_fd;
  input sys_reset;
  input sys_clk;
  input [63:0]m_axis_rx_tdata;
  input rx_completion_busy;
  input compl_done;
  input m_axis_rx_tvalid;
  input user_reset_out_reg;
  input \gen_cpl_64.state_reg ;
  input state;
  input req_compl_q;
  input pause;
  input m_axis_rx_tlast;
  input trn_pending;

  wire [11:0]D;
  wire [31:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [6:0]Q;
  wire compl_done;
  wire [1:0]\gen_cpl_64.s_axis_tx_tdata_reg[11] ;
  wire \gen_cpl_64.s_axis_tx_tdata_reg[1] ;
  wire [12:0]\gen_cpl_64.s_axis_tx_tdata_reg[31] ;
  wire [0:0]\gen_cpl_64.s_axis_tx_tdata_reg[32] ;
  wire \gen_cpl_64.s_axis_tx_tdata_reg[34] ;
  wire [4:0]\gen_cpl_64.s_axis_tx_tdata_reg[6] ;
  wire \gen_cpl_64.state_reg ;
  wire in_packet_q;
  wire [63:0]m_axis_rx_tdata;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tvalid;
  wire pause;
  wire \pio_rx_sm_64.in_packet_q_i_1_n_0 ;
  wire \pio_rx_sm_64.in_packet_q_reg_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_10_n_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_1_n_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_2_n_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_3_n_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_4_n_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_5_n_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_6_n_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_7_n_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_8_n_0 ;
  wire \pio_rx_sm_64.m_axis_rx_tready_i_9_n_0 ;
  wire \pio_rx_sm_64.req_addr[2]_i_1_n_0 ;
  wire \pio_rx_sm_64.req_addr[3]_i_1_n_0 ;
  wire \pio_rx_sm_64.req_addr[4]_i_1_n_0 ;
  wire \pio_rx_sm_64.req_addr[5]_i_1_n_0 ;
  wire \pio_rx_sm_64.req_addr[6]_i_1_n_0 ;
  wire \pio_rx_sm_64.req_addr[6]_i_2_n_0 ;
  wire \pio_rx_sm_64.req_be[3]_i_1_n_0 ;
  wire \pio_rx_sm_64.req_be_reg_n_0_[1] ;
  wire \pio_rx_sm_64.req_be_reg_n_0_[2] ;
  wire \pio_rx_sm_64.req_be_reg_n_0_[3] ;
  wire \pio_rx_sm_64.req_compl_i_1_n_0 ;
  wire \pio_rx_sm_64.req_compl_wd_i_1_n_0 ;
  wire \pio_rx_sm_64.req_compl_wd_i_2_n_0 ;
  wire \pio_rx_sm_64.req_compl_wd_i_3_n_0 ;
  wire \pio_rx_sm_64.req_compl_wd_i_4_n_0 ;
  wire \pio_rx_sm_64.state[0]_i_1_n_0 ;
  wire \pio_rx_sm_64.state[0]_i_2_n_0 ;
  wire \pio_rx_sm_64.state[1]_i_1_n_0 ;
  wire \pio_rx_sm_64.state[1]_i_2_n_0 ;
  wire \pio_rx_sm_64.state[2]_i_1_n_0 ;
  wire \pio_rx_sm_64.state[2]_i_2_n_0 ;
  wire \pio_rx_sm_64.state[3]_i_1_n_0 ;
  wire \pio_rx_sm_64.state[3]_i_2_n_0 ;
  wire \pio_rx_sm_64.state[3]_i_3_n_0 ;
  wire \pio_rx_sm_64.state[4]_i_1_n_0 ;
  wire \pio_rx_sm_64.state[4]_i_2_n_0 ;
  wire \pio_rx_sm_64.state[5]_i_1_n_0 ;
  wire \pio_rx_sm_64.state[5]_i_2_n_0 ;
  wire \pio_rx_sm_64.state[5]_i_3_n_0 ;
  wire \pio_rx_sm_64.state[5]_i_4_n_0 ;
  wire \pio_rx_sm_64.state[6]_i_1_n_0 ;
  wire \pio_rx_sm_64.state[6]_i_2_n_0 ;
  wire \pio_rx_sm_64.state[6]_i_3_n_0 ;
  wire \pio_rx_sm_64.state[6]_i_4_n_0 ;
  wire \pio_rx_sm_64.state[6]_i_5_n_0 ;
  wire \pio_rx_sm_64.state[6]_i_6_n_0 ;
  wire \pio_rx_sm_64.state_reg_n_0_[0] ;
  wire \pio_rx_sm_64.state_reg_n_0_[1] ;
  wire \pio_rx_sm_64.state_reg_n_0_[2] ;
  wire \pio_rx_sm_64.state_reg_n_0_[3] ;
  wire \pio_rx_sm_64.state_reg_n_0_[4] ;
  wire \pio_rx_sm_64.state_reg_n_0_[5] ;
  wire \pio_rx_sm_64.state_reg_n_0_[6] ;
  wire \pio_rx_sm_64.tlp_type[7]_i_1_n_0 ;
  wire \pio_rx_sm_64.tlp_type[7]_i_2_n_0 ;
  wire \pio_rx_sm_64.wr_data[0]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[10]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[11]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[12]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[13]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[14]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[15]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[16]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[17]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[18]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[19]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[1]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[20]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[21]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[22]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[23]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[24]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[25]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[26]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[27]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[28]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[29]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[2]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[30]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[31]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[31]_i_2_n_0 ;
  wire \pio_rx_sm_64.wr_data[31]_i_3_n_0 ;
  wire \pio_rx_sm_64.wr_data[31]_i_4_n_0 ;
  wire \pio_rx_sm_64.wr_data[3]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[4]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[5]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[6]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[7]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[8]_i_1_n_0 ;
  wire \pio_rx_sm_64.wr_data[9]_i_1_n_0 ;
  wire [1:0]req_attr;
  wire req_compl_q;
  wire req_compl_q_reg;
  wire req_compl_wd;
  wire req_ep;
  wire [9:0]req_len;
  wire [6:4]req_rid;
  wire [7:0]req_tag;
  wire [2:0]req_tc;
  wire req_td;
  wire rx_completion_busy;
  wire rx_completion_busy_reg;
  wire soc_1_fd;
  wire soc_1_fd_i_2_n_0;
  wire soc_1_fd_i_3_n_0;
  wire soc_1_fd_i_4_n_0;
  wire soc_1_fd_i_5_n_0;
  wire soc_2_fd;
  wire soc_2_fd_i_2_n_0;
  wire soc_2_fd_i_3_n_0;
  wire soc_2_fd_i_4_n_0;
  wire soc_2_fd_i_5_n_0;
  wire soc_2_fd_i_6_n_0;
  wire soc_2_fd_i_7_n_0;
  wire soc_3_fd;
  wire soc_3_fd_i_2_n_0;
  wire soc_3_fd_i_3_n_0;
  wire soc_3_fd_i_4_n_0;
  wire soc_3_fd_i_5_n_0;
  wire soc_3_fd_i_6_n_0;
  wire state;
  wire sys_clk;
  wire sys_reset;
  wire [7:0]tlp_type;
  wire trn_pending;
  wire trn_pending_reg;
  wire user_app_rdy_gnt_reg;
  wire user_reset_out_reg;
  wire write_en;

  LUT6 #(
    .INIT(64'hFFFFF400F400F400)) 
    \gen_cpl_64.s_axis_tx_tdata[0]_i_1 
       (.I0(\pio_rx_sm_64.req_be_reg_n_0_[2] ),
        .I1(\pio_rx_sm_64.req_be_reg_n_0_[3] ),
        .I2(\pio_rx_sm_64.req_be_reg_n_0_[1] ),
        .I3(user_reset_out_reg),
        .I4(req_len[0]),
        .I5(\gen_cpl_64.state_reg ),
        .O(D[0]));
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[12]_i_1 
       (.I0(req_tag[4]),
        .I1(req_attr[0]),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(D[3]));
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[13]_i_1 
       (.I0(req_tag[5]),
        .I1(req_attr[1]),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(D[4]));
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[14]_i_1 
       (.I0(req_tag[6]),
        .I1(req_ep),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(D[5]));
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[15]_i_1 
       (.I0(req_tag[7]),
        .I1(req_td),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'h1110)) 
    \gen_cpl_64.s_axis_tx_tdata[1]_i_2 
       (.I0(\pio_rx_sm_64.req_be_reg_n_0_[1] ),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[32] ),
        .I2(\pio_rx_sm_64.req_be_reg_n_0_[3] ),
        .I3(\pio_rx_sm_64.req_be_reg_n_0_[2] ),
        .O(\gen_cpl_64.s_axis_tx_tdata_reg[1] ));
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[20]_i_1 
       (.I0(req_rid[4]),
        .I1(req_tc[0]),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(D[7]));
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[21]_i_1 
       (.I0(req_rid[5]),
        .I1(req_tc[1]),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(D[8]));
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[22]_i_1 
       (.I0(req_rid[6]),
        .I1(req_tc[2]),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(D[9]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'h51009F00)) 
    \gen_cpl_64.s_axis_tx_tdata[32]_i_1 
       (.I0(\pio_rx_sm_64.req_be_reg_n_0_[3] ),
        .I1(\pio_rx_sm_64.req_be_reg_n_0_[1] ),
        .I2(\pio_rx_sm_64.req_be_reg_n_0_[2] ),
        .I3(\gen_cpl_64.state_reg ),
        .I4(\gen_cpl_64.s_axis_tx_tdata_reg[32] ),
        .O(D[10]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'h0EE80000)) 
    \gen_cpl_64.s_axis_tx_tdata[33]_i_1 
       (.I0(\pio_rx_sm_64.req_be_reg_n_0_[1] ),
        .I1(\pio_rx_sm_64.req_be_reg_n_0_[2] ),
        .I2(\pio_rx_sm_64.req_be_reg_n_0_[3] ),
        .I3(\gen_cpl_64.s_axis_tx_tdata_reg[32] ),
        .I4(\gen_cpl_64.state_reg ),
        .O(D[11]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \gen_cpl_64.s_axis_tx_tdata[34]_i_1 
       (.I0(\gen_cpl_64.s_axis_tx_tdata_reg[32] ),
        .I1(\pio_rx_sm_64.req_be_reg_n_0_[3] ),
        .O(\gen_cpl_64.s_axis_tx_tdata_reg[34] ));
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[8]_i_1 
       (.I0(req_tag[0]),
        .I1(req_len[8]),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(D[1]));
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[9]_i_1 
       (.I0(req_tag[1]),
        .I1(req_len[9]),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'h03222222)) 
    \pio_rx_sm_64.in_packet_q_i_1 
       (.I0(in_packet_q),
        .I1(sys_reset),
        .I2(m_axis_rx_tlast),
        .I3(\pio_rx_sm_64.in_packet_q_reg_0 ),
        .I4(m_axis_rx_tvalid),
        .O(\pio_rx_sm_64.in_packet_q_i_1_n_0 ));
  FDRE \pio_rx_sm_64.in_packet_q_reg 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.in_packet_q_i_1_n_0 ),
        .Q(in_packet_q),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFEFEFEFFFEFEFE00)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_1 
       (.I0(\pio_rx_sm_64.m_axis_rx_tready_i_2_n_0 ),
        .I1(\pio_rx_sm_64.m_axis_rx_tready_i_3_n_0 ),
        .I2(\pio_rx_sm_64.m_axis_rx_tready_i_4_n_0 ),
        .I3(\pio_rx_sm_64.m_axis_rx_tready_i_5_n_0 ),
        .I4(\pio_rx_sm_64.m_axis_rx_tready_i_6_n_0 ),
        .I5(\pio_rx_sm_64.in_packet_q_reg_0 ),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h0444)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_10 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I1(m_axis_rx_tvalid),
        .I2(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'h00020000)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_2 
       (.I0(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I4(\pio_rx_sm_64.m_axis_rx_tready_i_7_n_0 ),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_3 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I1(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I4(\pio_rx_sm_64.m_axis_rx_tready_i_8_n_0 ),
        .I5(\pio_rx_sm_64.m_axis_rx_tready_i_9_n_0 ),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hC0C0C04040404040)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_4 
       (.I0(m_axis_rx_tvalid),
        .I1(\pio_rx_sm_64.state[4]_i_2_n_0 ),
        .I2(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .I3(m_axis_rx_tdata[30]),
        .I4(m_axis_rx_tdata[25]),
        .I5(m_axis_rx_tdata[29]),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00000010000000F0)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_5 
       (.I0(\pio_rx_sm_64.m_axis_rx_tready_i_9_n_0 ),
        .I1(\pio_rx_sm_64.m_axis_rx_tready_i_8_n_0 ),
        .I2(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I4(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I5(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00000030003030F2)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_6 
       (.I0(\pio_rx_sm_64.m_axis_rx_tready_i_10_n_0 ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(\pio_rx_sm_64.wr_data[31]_i_3_n_0 ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[3] ),
        .I4(\pio_rx_sm_64.state_reg_n_0_[1] ),
        .I5(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_7 
       (.I0(in_packet_q),
        .I1(m_axis_rx_tdata[27]),
        .I2(m_axis_rx_tdata[28]),
        .I3(m_axis_rx_tdata[26]),
        .I4(m_axis_rx_tdata[24]),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'hFEEE)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_8 
       (.I0(tlp_type[7]),
        .I1(tlp_type[4]),
        .I2(tlp_type[5]),
        .I3(tlp_type[1]),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEAEF)) 
    \pio_rx_sm_64.m_axis_rx_tready_i_9 
       (.I0(tlp_type[0]),
        .I1(pause),
        .I2(tlp_type[6]),
        .I3(compl_done),
        .I4(tlp_type[3]),
        .I5(tlp_type[2]),
        .O(\pio_rx_sm_64.m_axis_rx_tready_i_9_n_0 ));
  FDRE \pio_rx_sm_64.m_axis_rx_tready_reg 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.m_axis_rx_tready_i_1_n_0 ),
        .Q(\pio_rx_sm_64.in_packet_q_reg_0 ),
        .R(sys_reset));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.req_addr[2]_i_1 
       (.I0(m_axis_rx_tdata[34]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(m_axis_rx_tdata[2]),
        .O(\pio_rx_sm_64.req_addr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.req_addr[3]_i_1 
       (.I0(m_axis_rx_tdata[35]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(m_axis_rx_tdata[3]),
        .O(\pio_rx_sm_64.req_addr[3]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.req_addr[4]_i_1 
       (.I0(m_axis_rx_tdata[36]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(m_axis_rx_tdata[4]),
        .O(\pio_rx_sm_64.req_addr[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.req_addr[5]_i_1 
       (.I0(m_axis_rx_tdata[37]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(m_axis_rx_tdata[5]),
        .O(\pio_rx_sm_64.req_addr[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0023000000200000)) 
    \pio_rx_sm_64.req_addr[6]_i_1 
       (.I0(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I4(m_axis_rx_tvalid),
        .I5(\pio_rx_sm_64.state[0]_i_2_n_0 ),
        .O(\pio_rx_sm_64.req_addr[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.req_addr[6]_i_2 
       (.I0(m_axis_rx_tdata[38]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(m_axis_rx_tdata[6]),
        .O(\pio_rx_sm_64.req_addr[6]_i_2_n_0 ));
  FDRE \pio_rx_sm_64.req_addr_reg[2] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_addr[6]_i_1_n_0 ),
        .D(\pio_rx_sm_64.req_addr[2]_i_1_n_0 ),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[6] [0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_addr_reg[3] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_addr[6]_i_1_n_0 ),
        .D(\pio_rx_sm_64.req_addr[3]_i_1_n_0 ),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[6] [1]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_addr_reg[4] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_addr[6]_i_1_n_0 ),
        .D(\pio_rx_sm_64.req_addr[4]_i_1_n_0 ),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[6] [2]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_addr_reg[5] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_addr[6]_i_1_n_0 ),
        .D(\pio_rx_sm_64.req_addr[5]_i_1_n_0 ),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[6] [3]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_addr_reg[6] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_addr[6]_i_1_n_0 ),
        .D(\pio_rx_sm_64.req_addr[6]_i_2_n_0 ),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[6] [4]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_attr_reg[0] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[12]),
        .Q(req_attr[0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_attr_reg[1] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[13]),
        .Q(req_attr[1]),
        .R(sys_reset));
  LUT4 #(
    .INIT(16'h02A2)) 
    \pio_rx_sm_64.req_be[3]_i_1 
       (.I0(\pio_rx_sm_64.state[6]_i_2_n_0 ),
        .I1(m_axis_rx_tdata[30]),
        .I2(m_axis_rx_tdata[25]),
        .I3(m_axis_rx_tdata[29]),
        .O(\pio_rx_sm_64.req_be[3]_i_1_n_0 ));
  FDRE \pio_rx_sm_64.req_be_reg[0] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[32]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[32] ),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_be_reg[1] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[33]),
        .Q(\pio_rx_sm_64.req_be_reg_n_0_[1] ),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_be_reg[2] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[34]),
        .Q(\pio_rx_sm_64.req_be_reg_n_0_[2] ),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_be_reg[3] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[35]),
        .Q(\pio_rx_sm_64.req_be_reg_n_0_[3] ),
        .R(sys_reset));
  LUT6 #(
    .INIT(64'hFFFFFFFF02000000)) 
    \pio_rx_sm_64.req_compl_i_1 
       (.I0(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I3(m_axis_rx_tvalid),
        .I4(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I5(\pio_rx_sm_64.req_addr[6]_i_1_n_0 ),
        .O(\pio_rx_sm_64.req_compl_i_1_n_0 ));
  FDRE \pio_rx_sm_64.req_compl_reg 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.req_compl_i_1_n_0 ),
        .Q(req_compl_q_reg),
        .R(sys_reset));
  LUT6 #(
    .INIT(64'hF4F4F4FFF4F4F400)) 
    \pio_rx_sm_64.req_compl_wd_i_1 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .I1(\pio_rx_sm_64.state[5]_i_2_n_0 ),
        .I2(\pio_rx_sm_64.req_compl_wd_i_2_n_0 ),
        .I3(\pio_rx_sm_64.req_compl_wd_i_3_n_0 ),
        .I4(\pio_rx_sm_64.req_compl_wd_i_4_n_0 ),
        .I5(req_compl_wd),
        .O(\pio_rx_sm_64.req_compl_wd_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \pio_rx_sm_64.req_compl_wd_i_2 
       (.I0(m_axis_rx_tvalid),
        .I1(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .O(\pio_rx_sm_64.req_compl_wd_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \pio_rx_sm_64.req_compl_wd_i_3 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I3(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .O(\pio_rx_sm_64.req_compl_wd_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000F4)) 
    \pio_rx_sm_64.req_compl_wd_i_4 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .I1(\pio_rx_sm_64.m_axis_rx_tready_i_10_n_0 ),
        .I2(\pio_rx_sm_64.wr_data[31]_i_3_n_0 ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[3] ),
        .I4(\pio_rx_sm_64.state_reg_n_0_[1] ),
        .I5(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .O(\pio_rx_sm_64.req_compl_wd_i_4_n_0 ));
  FDSE \pio_rx_sm_64.req_compl_wd_reg 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.req_compl_wd_i_1_n_0 ),
        .Q(req_compl_wd),
        .S(sys_reset));
  FDRE \pio_rx_sm_64.req_ep_reg 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[14]),
        .Q(req_ep),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[0] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[0]),
        .Q(req_len[0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[1] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[1]),
        .Q(Q[0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[2] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[2]),
        .Q(Q[1]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[3] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[3]),
        .Q(Q[2]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[4] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[4]),
        .Q(Q[3]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[5] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[5]),
        .Q(Q[4]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[6] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[6]),
        .Q(Q[5]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[7] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[7]),
        .Q(Q[6]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[8] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[8]),
        .Q(req_len[8]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_len_reg[9] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[9]),
        .Q(req_len[9]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[0] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[48]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[10] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[58]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [7]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[11] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[59]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [8]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[12] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[60]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [9]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[13] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[61]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [10]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[14] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[62]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [11]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[15] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[63]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [12]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[1] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[49]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [1]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[2] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[50]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [2]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[3] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[51]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [3]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[4] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[52]),
        .Q(req_rid[4]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[5] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[53]),
        .Q(req_rid[5]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[6] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[54]),
        .Q(req_rid[6]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[7] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[55]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [4]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[8] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[56]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [5]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_rid_reg[9] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[57]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[31] [6]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tag_reg[0] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[40]),
        .Q(req_tag[0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tag_reg[1] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[41]),
        .Q(req_tag[1]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tag_reg[2] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[42]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[11] [0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tag_reg[3] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[43]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[11] [1]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tag_reg[4] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[44]),
        .Q(req_tag[4]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tag_reg[5] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[45]),
        .Q(req_tag[5]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tag_reg[6] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[46]),
        .Q(req_tag[6]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tag_reg[7] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[47]),
        .Q(req_tag[7]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tc_reg[0] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[20]),
        .Q(req_tc[0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tc_reg[1] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[21]),
        .Q(req_tc[1]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_tc_reg[2] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[22]),
        .Q(req_tc[2]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.req_td_reg 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.req_be[3]_i_1_n_0 ),
        .D(m_axis_rx_tdata[15]),
        .Q(req_td),
        .R(sys_reset));
  LUT5 #(
    .INIT(32'hFF020202)) 
    \pio_rx_sm_64.state[0]_i_1 
       (.I0(\pio_rx_sm_64.state[6]_i_2_n_0 ),
        .I1(m_axis_rx_tdata[29]),
        .I2(m_axis_rx_tdata[30]),
        .I3(\pio_rx_sm_64.state[3]_i_2_n_0 ),
        .I4(\pio_rx_sm_64.state[0]_i_2_n_0 ),
        .O(\pio_rx_sm_64.state[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \pio_rx_sm_64.state[0]_i_2 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[3] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[1] ),
        .O(\pio_rx_sm_64.state[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF002000200020)) 
    \pio_rx_sm_64.state[1]_i_1 
       (.I0(\pio_rx_sm_64.state[6]_i_2_n_0 ),
        .I1(m_axis_rx_tdata[29]),
        .I2(m_axis_rx_tdata[30]),
        .I3(m_axis_rx_tdata[25]),
        .I4(\pio_rx_sm_64.state[3]_i_2_n_0 ),
        .I5(\pio_rx_sm_64.state[1]_i_2_n_0 ),
        .O(\pio_rx_sm_64.state[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \pio_rx_sm_64.state[1]_i_2 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[3] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[1] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .O(\pio_rx_sm_64.state[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    \pio_rx_sm_64.state[2]_i_1 
       (.I0(\pio_rx_sm_64.state[6]_i_2_n_0 ),
        .I1(m_axis_rx_tdata[29]),
        .I2(m_axis_rx_tdata[30]),
        .I3(m_axis_rx_tdata[25]),
        .I4(\pio_rx_sm_64.state[2]_i_2_n_0 ),
        .O(\pio_rx_sm_64.state[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h00100000)) 
    \pio_rx_sm_64.state[2]_i_2 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I1(m_axis_rx_tvalid),
        .I2(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I4(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .O(\pio_rx_sm_64.state[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF008000800080)) 
    \pio_rx_sm_64.state[3]_i_1 
       (.I0(\pio_rx_sm_64.state[6]_i_2_n_0 ),
        .I1(m_axis_rx_tdata[30]),
        .I2(m_axis_rx_tdata[29]),
        .I3(m_axis_rx_tdata[25]),
        .I4(\pio_rx_sm_64.state[3]_i_2_n_0 ),
        .I5(\pio_rx_sm_64.state[3]_i_3_n_0 ),
        .O(\pio_rx_sm_64.state[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \pio_rx_sm_64.state[3]_i_2 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I3(m_axis_rx_tvalid),
        .O(\pio_rx_sm_64.state[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \pio_rx_sm_64.state[3]_i_3 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[1] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[3] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .O(\pio_rx_sm_64.state[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000080200)) 
    \pio_rx_sm_64.state[4]_i_1 
       (.I0(\pio_rx_sm_64.state[4]_i_2_n_0 ),
        .I1(m_axis_rx_tvalid),
        .I2(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I4(\pio_rx_sm_64.state_reg_n_0_[3] ),
        .I5(\pio_rx_sm_64.state_reg_n_0_[1] ),
        .O(\pio_rx_sm_64.state[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \pio_rx_sm_64.state[4]_i_2 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .O(\pio_rx_sm_64.state[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFEEEEEEEEEEEEEEE)) 
    \pio_rx_sm_64.state[5]_i_1 
       (.I0(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .I1(\pio_rx_sm_64.req_addr[6]_i_1_n_0 ),
        .I2(\pio_rx_sm_64.state[5]_i_2_n_0 ),
        .I3(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .I4(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I5(\pio_rx_sm_64.state[5]_i_4_n_0 ),
        .O(\pio_rx_sm_64.state[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \pio_rx_sm_64.state[5]_i_2 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .O(\pio_rx_sm_64.state[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \pio_rx_sm_64.state[5]_i_3 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[3] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[1] ),
        .O(\pio_rx_sm_64.state[5]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT5 #(
    .INIT(32'hFFFFFFEA)) 
    \pio_rx_sm_64.state[5]_i_4 
       (.I0(\pio_rx_sm_64.m_axis_rx_tready_i_9_n_0 ),
        .I1(tlp_type[1]),
        .I2(tlp_type[5]),
        .I3(tlp_type[4]),
        .I4(tlp_type[7]),
        .O(\pio_rx_sm_64.state[5]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF2000)) 
    \pio_rx_sm_64.state[6]_i_1 
       (.I0(\pio_rx_sm_64.state[6]_i_2_n_0 ),
        .I1(m_axis_rx_tdata[29]),
        .I2(m_axis_rx_tdata[30]),
        .I3(m_axis_rx_tdata[25]),
        .I4(\pio_rx_sm_64.state[6]_i_3_n_0 ),
        .O(\pio_rx_sm_64.state[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    \pio_rx_sm_64.state[6]_i_2 
       (.I0(\pio_rx_sm_64.state[6]_i_4_n_0 ),
        .I1(\pio_rx_sm_64.state[6]_i_5_n_0 ),
        .I2(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .I3(\pio_rx_sm_64.wr_data[31]_i_3_n_0 ),
        .I4(\pio_rx_sm_64.m_axis_rx_tready_i_7_n_0 ),
        .I5(\pio_rx_sm_64.state[6]_i_6_n_0 ),
        .O(\pio_rx_sm_64.state[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h00020000)) 
    \pio_rx_sm_64.state[6]_i_3 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I1(m_axis_rx_tvalid),
        .I2(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I4(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .O(\pio_rx_sm_64.state[6]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \pio_rx_sm_64.state[6]_i_4 
       (.I0(m_axis_rx_tdata[9]),
        .I1(m_axis_rx_tdata[8]),
        .I2(m_axis_rx_tdata[7]),
        .I3(m_axis_rx_tdata[6]),
        .O(\pio_rx_sm_64.state[6]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \pio_rx_sm_64.state[6]_i_5 
       (.I0(m_axis_rx_tdata[5]),
        .I1(m_axis_rx_tdata[4]),
        .I2(m_axis_rx_tdata[3]),
        .I3(m_axis_rx_tdata[2]),
        .O(\pio_rx_sm_64.state[6]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \pio_rx_sm_64.state[6]_i_6 
       (.I0(m_axis_rx_tdata[0]),
        .I1(m_axis_rx_tdata[1]),
        .O(\pio_rx_sm_64.state[6]_i_6_n_0 ));
  FDRE \pio_rx_sm_64.state_reg[0] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.state[0]_i_1_n_0 ),
        .Q(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.state_reg[1] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.state[1]_i_1_n_0 ),
        .Q(\pio_rx_sm_64.state_reg_n_0_[1] ),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.state_reg[2] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.state[2]_i_1_n_0 ),
        .Q(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.state_reg[3] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.state[3]_i_1_n_0 ),
        .Q(\pio_rx_sm_64.state_reg_n_0_[3] ),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.state_reg[4] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.state[4]_i_1_n_0 ),
        .Q(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.state_reg[5] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.state[5]_i_1_n_0 ),
        .Q(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.state_reg[6] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.state[6]_i_1_n_0 ),
        .Q(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .R(sys_reset));
  LUT3 #(
    .INIT(8'h70)) 
    \pio_rx_sm_64.tlp_type[7]_i_1 
       (.I0(m_axis_rx_tdata[25]),
        .I1(m_axis_rx_tdata[29]),
        .I2(\pio_rx_sm_64.tlp_type[7]_i_2_n_0 ),
        .O(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000020000)) 
    \pio_rx_sm_64.tlp_type[7]_i_2 
       (.I0(\pio_rx_sm_64.state[5]_i_3_n_0 ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I4(m_axis_rx_tvalid),
        .I5(\pio_rx_sm_64.m_axis_rx_tready_i_7_n_0 ),
        .O(\pio_rx_sm_64.tlp_type[7]_i_2_n_0 ));
  FDRE \pio_rx_sm_64.tlp_type_reg[0] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[24]),
        .Q(tlp_type[0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.tlp_type_reg[1] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[25]),
        .Q(tlp_type[1]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.tlp_type_reg[2] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[26]),
        .Q(tlp_type[2]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.tlp_type_reg[3] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[27]),
        .Q(tlp_type[3]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.tlp_type_reg[4] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[28]),
        .Q(tlp_type[4]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.tlp_type_reg[5] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[29]),
        .Q(tlp_type[5]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.tlp_type_reg[6] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[30]),
        .Q(tlp_type[6]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.tlp_type_reg[7] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.tlp_type[7]_i_1_n_0 ),
        .D(m_axis_rx_tdata[31]),
        .Q(tlp_type[7]),
        .R(sys_reset));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[0]_i_1 
       (.I0(m_axis_rx_tdata[0]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[32]),
        .O(\pio_rx_sm_64.wr_data[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[10]_i_1 
       (.I0(m_axis_rx_tdata[10]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[42]),
        .O(\pio_rx_sm_64.wr_data[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[11]_i_1 
       (.I0(m_axis_rx_tdata[11]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[43]),
        .O(\pio_rx_sm_64.wr_data[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[12]_i_1 
       (.I0(m_axis_rx_tdata[12]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[44]),
        .O(\pio_rx_sm_64.wr_data[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[13]_i_1 
       (.I0(m_axis_rx_tdata[13]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[45]),
        .O(\pio_rx_sm_64.wr_data[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[14]_i_1 
       (.I0(m_axis_rx_tdata[14]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[46]),
        .O(\pio_rx_sm_64.wr_data[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[15]_i_1 
       (.I0(m_axis_rx_tdata[15]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[47]),
        .O(\pio_rx_sm_64.wr_data[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[16]_i_1 
       (.I0(m_axis_rx_tdata[16]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[48]),
        .O(\pio_rx_sm_64.wr_data[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[17]_i_1 
       (.I0(m_axis_rx_tdata[17]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[49]),
        .O(\pio_rx_sm_64.wr_data[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[18]_i_1 
       (.I0(m_axis_rx_tdata[18]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[50]),
        .O(\pio_rx_sm_64.wr_data[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[19]_i_1 
       (.I0(m_axis_rx_tdata[19]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[51]),
        .O(\pio_rx_sm_64.wr_data[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[1]_i_1 
       (.I0(m_axis_rx_tdata[1]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[33]),
        .O(\pio_rx_sm_64.wr_data[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[20]_i_1 
       (.I0(m_axis_rx_tdata[20]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[52]),
        .O(\pio_rx_sm_64.wr_data[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[21]_i_1 
       (.I0(m_axis_rx_tdata[21]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[53]),
        .O(\pio_rx_sm_64.wr_data[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[22]_i_1 
       (.I0(m_axis_rx_tdata[22]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[54]),
        .O(\pio_rx_sm_64.wr_data[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[23]_i_1 
       (.I0(m_axis_rx_tdata[23]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[55]),
        .O(\pio_rx_sm_64.wr_data[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[24]_i_1 
       (.I0(m_axis_rx_tdata[24]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[56]),
        .O(\pio_rx_sm_64.wr_data[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[25]_i_1 
       (.I0(m_axis_rx_tdata[25]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[57]),
        .O(\pio_rx_sm_64.wr_data[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[26]_i_1 
       (.I0(m_axis_rx_tdata[26]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[58]),
        .O(\pio_rx_sm_64.wr_data[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[27]_i_1 
       (.I0(m_axis_rx_tdata[27]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[59]),
        .O(\pio_rx_sm_64.wr_data[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[28]_i_1 
       (.I0(m_axis_rx_tdata[28]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[60]),
        .O(\pio_rx_sm_64.wr_data[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[29]_i_1 
       (.I0(m_axis_rx_tdata[29]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[61]),
        .O(\pio_rx_sm_64.wr_data[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[2]_i_1 
       (.I0(m_axis_rx_tdata[2]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[34]),
        .O(\pio_rx_sm_64.wr_data[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[30]_i_1 
       (.I0(m_axis_rx_tdata[30]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[62]),
        .O(\pio_rx_sm_64.wr_data[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0013000100120000)) 
    \pio_rx_sm_64.wr_data[31]_i_1 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[1] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[3] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I3(\pio_rx_sm_64.state_reg_n_0_[0] ),
        .I4(\pio_rx_sm_64.wr_data[31]_i_3_n_0 ),
        .I5(\pio_rx_sm_64.wr_data[31]_i_4_n_0 ),
        .O(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[31]_i_2 
       (.I0(m_axis_rx_tdata[31]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[63]),
        .O(\pio_rx_sm_64.wr_data[31]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \pio_rx_sm_64.wr_data[31]_i_3 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .I3(m_axis_rx_tvalid),
        .O(\pio_rx_sm_64.wr_data[31]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \pio_rx_sm_64.wr_data[31]_i_4 
       (.I0(\pio_rx_sm_64.state_reg_n_0_[5] ),
        .I1(\pio_rx_sm_64.state_reg_n_0_[2] ),
        .I2(m_axis_rx_tvalid),
        .I3(\pio_rx_sm_64.state_reg_n_0_[6] ),
        .O(\pio_rx_sm_64.wr_data[31]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[3]_i_1 
       (.I0(m_axis_rx_tdata[3]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[35]),
        .O(\pio_rx_sm_64.wr_data[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[4]_i_1 
       (.I0(m_axis_rx_tdata[4]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[36]),
        .O(\pio_rx_sm_64.wr_data[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[5]_i_1 
       (.I0(m_axis_rx_tdata[5]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[37]),
        .O(\pio_rx_sm_64.wr_data[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[6]_i_1 
       (.I0(m_axis_rx_tdata[6]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[38]),
        .O(\pio_rx_sm_64.wr_data[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[7]_i_1 
       (.I0(m_axis_rx_tdata[7]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[39]),
        .O(\pio_rx_sm_64.wr_data[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[8]_i_1 
       (.I0(m_axis_rx_tdata[8]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[40]),
        .O(\pio_rx_sm_64.wr_data[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \pio_rx_sm_64.wr_data[9]_i_1 
       (.I0(m_axis_rx_tdata[9]),
        .I1(\pio_rx_sm_64.state_reg_n_0_[4] ),
        .I2(m_axis_rx_tdata[41]),
        .O(\pio_rx_sm_64.wr_data[9]_i_1_n_0 ));
  FDRE \pio_rx_sm_64.wr_data_reg[0] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[0]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[10] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[10]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [10]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[11] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[11]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [11]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[12] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[12]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [12]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[13] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[13]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [13]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[14] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[14]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [14]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[15] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[15]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [15]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[16] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[16]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [16]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[17] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[17]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [17]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[18] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[18]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [18]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[19] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[19]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [19]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[1] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[1]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[20] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[20]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [20]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[21] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[21]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [21]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[22] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[22]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [22]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[23] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[23]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [23]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[24] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[24]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [24]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[25] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[25]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [25]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[26] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[26]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [26]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[27] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[27]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [27]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[28] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[28]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [28]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[29] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[29]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [29]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[2] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[2]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[30] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[30]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [30]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[31] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[31]_i_2_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [31]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[3] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[3]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[4] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[4]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[5] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[5]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[6] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[6]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[7] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[7]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[8] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[8]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_data_reg[9] 
       (.C(sys_clk),
        .CE(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .D(\pio_rx_sm_64.wr_data[9]_i_1_n_0 ),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [9]),
        .R(sys_reset));
  FDRE \pio_rx_sm_64.wr_en_reg 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\pio_rx_sm_64.wr_data[31]_i_1_n_0 ),
        .Q(write_en),
        .R(sys_reset));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h0054)) 
    rx_completion_busy_i_1
       (.I0(sys_reset),
        .I1(rx_completion_busy),
        .I2(req_compl_q_reg),
        .I3(compl_done),
        .O(rx_completion_busy_reg));
  LUT6 #(
    .INIT(64'h0000080000000000)) 
    soc_1_fd_i_1
       (.I0(soc_1_fd_i_2_n_0),
        .I1(soc_2_fd_i_3_n_0),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [27]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [26]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [29]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [28]),
        .O(soc_1_fd));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    soc_1_fd_i_2
       (.I0(soc_1_fd_i_3_n_0),
        .I1(soc_1_fd_i_4_n_0),
        .I2(soc_1_fd_i_5_n_0),
        .I3(soc_3_fd_i_6_n_0),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .O(soc_1_fd_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    soc_1_fd_i_3
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [22]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [23]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [20]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [21]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [25]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [24]),
        .O(soc_1_fd_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    soc_1_fd_i_4
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [17]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [16]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [14]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [15]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [19]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [18]),
        .O(soc_1_fd_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    soc_1_fd_i_5
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [10]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [11]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [9]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [13]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [12]),
        .O(soc_1_fd_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000000000800)) 
    soc_2_fd_i_1
       (.I0(soc_2_fd_i_2_n_0),
        .I1(soc_2_fd_i_3_n_0),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [27]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [26]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [29]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [28]),
        .O(soc_2_fd));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    soc_2_fd_i_2
       (.I0(soc_2_fd_i_4_n_0),
        .I1(soc_2_fd_i_5_n_0),
        .I2(soc_2_fd_i_6_n_0),
        .I3(soc_2_fd_i_7_n_0),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .O(soc_2_fd_i_2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    soc_2_fd_i_3
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [30]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [31]),
        .O(soc_2_fd_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    soc_2_fd_i_4
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [22]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [23]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [20]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [21]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [24]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [25]),
        .O(soc_2_fd_i_4_n_0));
  LUT6 #(
    .INIT(64'h0020000000000000)) 
    soc_2_fd_i_5
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [17]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [16]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [14]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [15]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [19]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [18]),
        .O(soc_2_fd_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    soc_2_fd_i_6
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [10]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [11]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [9]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [13]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [12]),
        .O(soc_2_fd_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    soc_2_fd_i_7
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .O(soc_2_fd_i_7_n_0));
  LUT6 #(
    .INIT(64'h0000080000000000)) 
    soc_3_fd_i_1
       (.I0(soc_3_fd_i_2_n_0),
        .I1(soc_2_fd_i_3_n_0),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [27]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [26]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [28]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [29]),
        .O(soc_3_fd));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    soc_3_fd_i_2
       (.I0(soc_3_fd_i_3_n_0),
        .I1(soc_3_fd_i_4_n_0),
        .I2(soc_3_fd_i_5_n_0),
        .I3(soc_3_fd_i_6_n_0),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .O(soc_3_fd_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    soc_3_fd_i_3
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [22]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [23]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [20]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [21]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [25]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [24]),
        .O(soc_3_fd_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    soc_3_fd_i_4
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [16]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [17]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [14]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [15]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [18]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [19]),
        .O(soc_3_fd_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    soc_3_fd_i_5
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [10]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [11]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [9]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [13]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [12]),
        .O(soc_3_fd_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    soc_3_fd_i_6
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I2(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I3(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I4(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .I5(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .O(soc_3_fd_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'h4E)) 
    trn_pending_i_1
       (.I0(trn_pending),
        .I1(req_compl_q_reg),
        .I2(compl_done),
        .O(trn_pending_reg));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h7)) 
    user_app_rdy_gnt_i_2
       (.I0(m_axis_rx_tvalid),
        .I1(\pio_rx_sm_64.in_packet_q_reg_0 ),
        .O(user_app_rdy_gnt_reg));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_PIO_TO_CTRL_FPC" *) 
module pcie_7x_0_pcie_7x_0_PIO_TO_CTRL_FPC
   (cfg_turnoff_ok,
    trn_pending,
    sys_reset,
    sys_clk,
    trn_pending_reg_0,
    cfg_to_turnoff);
  output cfg_turnoff_ok;
  output trn_pending;
  input sys_reset;
  input sys_clk;
  input trn_pending_reg_0;
  input cfg_to_turnoff;

  wire cfg_to_turnoff;
  wire cfg_turnoff_ok;
  wire cfg_turnoff_ok_i_1_n_0;
  wire sys_clk;
  wire sys_reset;
  wire trn_pending;
  wire trn_pending_reg_0;

  LUT2 #(
    .INIT(4'h2)) 
    cfg_turnoff_ok_i_1
       (.I0(cfg_to_turnoff),
        .I1(trn_pending),
        .O(cfg_turnoff_ok_i_1_n_0));
  FDRE cfg_turnoff_ok_reg
       (.C(sys_clk),
        .CE(1'b1),
        .D(cfg_turnoff_ok_i_1_n_0),
        .Q(cfg_turnoff_ok),
        .R(sys_reset));
  FDRE trn_pending_reg
       (.C(sys_clk),
        .CE(1'b1),
        .D(trn_pending_reg_0),
        .Q(trn_pending),
        .R(sys_reset));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_PIO_TX_ENG_FPC" *) 
module pcie_7x_0_pcie_7x_0_PIO_TX_ENG_FPC
   (req_compl_q,
    state,
    s_axis_tx_tlast,
    compl_done,
    \gen_cpl_64.s_axis_tx_tdata_reg[0]_0 ,
    \gen_cpl_64.s_axis_tx_tdata_reg[0]_1 ,
    s_axis_tx_tdata,
    s_axis_tx_tkeep,
    s_axis_tx_tvalid,
    sys_reset,
    req_compl,
    sys_clk,
    req_compl_wd,
    s_axis_tx_tready,
    \pio_rx_sm_64.req_be_reg[1] ,
    Q,
    \pio_rx_sm_64.req_addr_reg[6] ,
    \pio_rx_sm_64.req_rid_reg[15] ,
    \pio_rx_sm_64.req_be_reg[0] ,
    D,
    \pio_rx_sm_64.req_tag_reg[3] ,
    cfg_bus_number,
    cfg_device_number,
    cfg_function_number,
    \pio_rx_sm_64.req_be_reg[0]_0 );
  output req_compl_q;
  output state;
  output s_axis_tx_tlast;
  output compl_done;
  output \gen_cpl_64.s_axis_tx_tdata_reg[0]_0 ;
  output \gen_cpl_64.s_axis_tx_tdata_reg[0]_1 ;
  output [50:0]s_axis_tx_tdata;
  output [1:0]s_axis_tx_tkeep;
  output s_axis_tx_tvalid;
  input sys_reset;
  input req_compl;
  input sys_clk;
  input req_compl_wd;
  input s_axis_tx_tready;
  input \pio_rx_sm_64.req_be_reg[1] ;
  input [6:0]Q;
  input [4:0]\pio_rx_sm_64.req_addr_reg[6] ;
  input [12:0]\pio_rx_sm_64.req_rid_reg[15] ;
  input [0:0]\pio_rx_sm_64.req_be_reg[0] ;
  input [11:0]D;
  input [1:0]\pio_rx_sm_64.req_tag_reg[3] ;
  input [7:0]cfg_bus_number;
  input [4:0]cfg_device_number;
  input [2:0]cfg_function_number;
  input \pio_rx_sm_64.req_be_reg[0]_0 ;

  wire [11:0]D;
  wire [6:0]Q;
  wire [7:0]cfg_bus_number;
  wire [4:0]cfg_device_number;
  wire [2:0]cfg_function_number;
  wire compl_done;
  wire compl_wd;
  wire \gen_cpl_64.compl_done_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[1]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[25]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[27]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[2]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[30]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[3]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[4]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[5]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata[6]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata_reg[0]_0 ;
  wire \gen_cpl_64.s_axis_tx_tdata_reg[0]_1 ;
  wire \gen_cpl_64.s_axis_tx_tkeep[3]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tkeep[7]_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tlast_i_1_n_0 ;
  wire \gen_cpl_64.s_axis_tx_tvalid_i_1_n_0 ;
  wire \gen_cpl_64.state_i_1_n_0 ;
  wire [4:0]\pio_rx_sm_64.req_addr_reg[6] ;
  wire [0:0]\pio_rx_sm_64.req_be_reg[0] ;
  wire \pio_rx_sm_64.req_be_reg[0]_0 ;
  wire \pio_rx_sm_64.req_be_reg[1] ;
  wire [12:0]\pio_rx_sm_64.req_rid_reg[15] ;
  wire [1:0]\pio_rx_sm_64.req_tag_reg[3] ;
  wire req_compl;
  wire req_compl_q;
  wire req_compl_wd;
  wire [50:0]s_axis_tx_tdata;
  wire [1:0]s_axis_tx_tkeep;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tready;
  wire s_axis_tx_tvalid;
  wire state;
  wire sys_clk;
  wire sys_reset;

  LUT5 #(
    .INIT(32'h0E0E0A00)) 
    \gen_cpl_64.compl_done_i_1 
       (.I0(compl_done),
        .I1(s_axis_tx_tready),
        .I2(sys_reset),
        .I3(req_compl_q),
        .I4(state),
        .O(\gen_cpl_64.compl_done_i_1_n_0 ));
  FDRE \gen_cpl_64.compl_done_reg 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\gen_cpl_64.compl_done_i_1_n_0 ),
        .Q(compl_done),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0040)) 
    \gen_cpl_64.s_axis_tx_tdata[0]_i_2 
       (.I0(sys_reset),
        .I1(state),
        .I2(compl_wd),
        .I3(\pio_rx_sm_64.req_be_reg[0] ),
        .O(\gen_cpl_64.s_axis_tx_tdata_reg[0]_1 ));
  LUT6 #(
    .INIT(64'h0000000088F08800)) 
    \gen_cpl_64.s_axis_tx_tdata[1]_i_1 
       (.I0(compl_wd),
        .I1(\pio_rx_sm_64.req_be_reg[1] ),
        .I2(Q[0]),
        .I3(state),
        .I4(req_compl_q),
        .I5(sys_reset),
        .O(\gen_cpl_64.s_axis_tx_tdata[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \gen_cpl_64.s_axis_tx_tdata[25]_i_1 
       (.I0(\pio_rx_sm_64.req_rid_reg[15] [6]),
        .I1(sys_reset),
        .I2(req_compl_q),
        .I3(state),
        .O(\gen_cpl_64.s_axis_tx_tdata[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'h2230)) 
    \gen_cpl_64.s_axis_tx_tdata[27]_i_1 
       (.I0(\pio_rx_sm_64.req_rid_reg[15] [8]),
        .I1(sys_reset),
        .I2(req_compl_q),
        .I3(state),
        .O(\gen_cpl_64.s_axis_tx_tdata[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000088F08800)) 
    \gen_cpl_64.s_axis_tx_tdata[2]_i_1 
       (.I0(\pio_rx_sm_64.req_addr_reg[6] [0]),
        .I1(compl_wd),
        .I2(Q[1]),
        .I3(state),
        .I4(req_compl_q),
        .I5(sys_reset),
        .O(\gen_cpl_64.s_axis_tx_tdata[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT5 #(
    .INIT(32'h0000ACA0)) 
    \gen_cpl_64.s_axis_tx_tdata[30]_i_1 
       (.I0(\pio_rx_sm_64.req_rid_reg[15] [11]),
        .I1(compl_wd),
        .I2(state),
        .I3(req_compl_q),
        .I4(sys_reset),
        .O(\gen_cpl_64.s_axis_tx_tdata[30]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \gen_cpl_64.s_axis_tx_tdata[31]_i_1 
       (.I0(sys_reset),
        .I1(state),
        .O(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \gen_cpl_64.s_axis_tx_tdata[33]_i_2 
       (.I0(state),
        .I1(req_compl_q),
        .I2(sys_reset),
        .O(\gen_cpl_64.s_axis_tx_tdata_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h0000000088F08800)) 
    \gen_cpl_64.s_axis_tx_tdata[3]_i_1 
       (.I0(\pio_rx_sm_64.req_addr_reg[6] [1]),
        .I1(compl_wd),
        .I2(Q[2]),
        .I3(state),
        .I4(req_compl_q),
        .I5(sys_reset),
        .O(\gen_cpl_64.s_axis_tx_tdata[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000088F08800)) 
    \gen_cpl_64.s_axis_tx_tdata[4]_i_1 
       (.I0(\pio_rx_sm_64.req_addr_reg[6] [2]),
        .I1(compl_wd),
        .I2(Q[3]),
        .I3(state),
        .I4(req_compl_q),
        .I5(sys_reset),
        .O(\gen_cpl_64.s_axis_tx_tdata[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000088F08800)) 
    \gen_cpl_64.s_axis_tx_tdata[5]_i_1 
       (.I0(\pio_rx_sm_64.req_addr_reg[6] [3]),
        .I1(compl_wd),
        .I2(Q[4]),
        .I3(state),
        .I4(req_compl_q),
        .I5(sys_reset),
        .O(\gen_cpl_64.s_axis_tx_tdata[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hEECF)) 
    \gen_cpl_64.s_axis_tx_tdata[63]_i_1 
       (.I0(s_axis_tx_tready),
        .I1(sys_reset),
        .I2(req_compl_q),
        .I3(state),
        .O(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hFD)) 
    \gen_cpl_64.s_axis_tx_tdata[63]_i_2 
       (.I0(state),
        .I1(sys_reset),
        .I2(s_axis_tx_tready),
        .O(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000088F08800)) 
    \gen_cpl_64.s_axis_tx_tdata[6]_i_1 
       (.I0(\pio_rx_sm_64.req_addr_reg[6] [4]),
        .I1(compl_wd),
        .I2(Q[5]),
        .I3(state),
        .I4(req_compl_q),
        .I5(sys_reset),
        .O(\gen_cpl_64.s_axis_tx_tdata[6]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[0] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[0]),
        .Q(s_axis_tx_tdata[0]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[10] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_tag_reg[3] [0]),
        .Q(s_axis_tx_tdata[10]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[11] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_tag_reg[3] [1]),
        .Q(s_axis_tx_tdata[11]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[12] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[3]),
        .Q(s_axis_tx_tdata[12]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[13] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[4]),
        .Q(s_axis_tx_tdata[13]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[14] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[5]),
        .Q(s_axis_tx_tdata[14]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[15] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[6]),
        .Q(s_axis_tx_tdata[15]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[16] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [0]),
        .Q(s_axis_tx_tdata[16]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[17] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [1]),
        .Q(s_axis_tx_tdata[17]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[18] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [2]),
        .Q(s_axis_tx_tdata[18]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[19] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [3]),
        .Q(s_axis_tx_tdata[19]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[1] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\gen_cpl_64.s_axis_tx_tdata[1]_i_1_n_0 ),
        .Q(s_axis_tx_tdata[1]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[20] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[7]),
        .Q(s_axis_tx_tdata[20]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[21] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[8]),
        .Q(s_axis_tx_tdata[21]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[22] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[9]),
        .Q(s_axis_tx_tdata[22]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[23] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [4]),
        .Q(s_axis_tx_tdata[23]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[24] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [5]),
        .Q(s_axis_tx_tdata[24]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[25] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\gen_cpl_64.s_axis_tx_tdata[25]_i_1_n_0 ),
        .Q(s_axis_tx_tdata[25]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[26] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [7]),
        .Q(s_axis_tx_tdata[26]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[27] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\gen_cpl_64.s_axis_tx_tdata[27]_i_1_n_0 ),
        .Q(s_axis_tx_tdata[27]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[28] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [9]),
        .Q(s_axis_tx_tdata[28]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[29] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [10]),
        .Q(s_axis_tx_tdata[29]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[2] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\gen_cpl_64.s_axis_tx_tdata[2]_i_1_n_0 ),
        .Q(s_axis_tx_tdata[2]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[30] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\gen_cpl_64.s_axis_tx_tdata[30]_i_1_n_0 ),
        .Q(s_axis_tx_tdata[30]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[31] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_rid_reg[15] [12]),
        .Q(s_axis_tx_tdata[31]),
        .R(\gen_cpl_64.s_axis_tx_tdata[31]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[32] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[10]),
        .Q(s_axis_tx_tdata[32]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[33] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[11]),
        .Q(s_axis_tx_tdata[33]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[34] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\pio_rx_sm_64.req_be_reg[0]_0 ),
        .Q(s_axis_tx_tdata[34]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[3] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\gen_cpl_64.s_axis_tx_tdata[3]_i_1_n_0 ),
        .Q(s_axis_tx_tdata[3]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[48] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_function_number[0]),
        .Q(s_axis_tx_tdata[35]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[49] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_function_number[1]),
        .Q(s_axis_tx_tdata[36]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[4] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\gen_cpl_64.s_axis_tx_tdata[4]_i_1_n_0 ),
        .Q(s_axis_tx_tdata[4]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[50] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_function_number[2]),
        .Q(s_axis_tx_tdata[37]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[51] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_device_number[0]),
        .Q(s_axis_tx_tdata[38]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[52] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_device_number[1]),
        .Q(s_axis_tx_tdata[39]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[53] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_device_number[2]),
        .Q(s_axis_tx_tdata[40]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[54] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_device_number[3]),
        .Q(s_axis_tx_tdata[41]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[55] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_device_number[4]),
        .Q(s_axis_tx_tdata[42]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[56] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_bus_number[0]),
        .Q(s_axis_tx_tdata[43]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[57] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_bus_number[1]),
        .Q(s_axis_tx_tdata[44]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[58] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_bus_number[2]),
        .Q(s_axis_tx_tdata[45]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[59] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_bus_number[3]),
        .Q(s_axis_tx_tdata[46]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[5] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\gen_cpl_64.s_axis_tx_tdata[5]_i_1_n_0 ),
        .Q(s_axis_tx_tdata[5]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[60] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_bus_number[4]),
        .Q(s_axis_tx_tdata[47]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[61] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_bus_number[5]),
        .Q(s_axis_tx_tdata[48]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[62] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_bus_number[6]),
        .Q(s_axis_tx_tdata[49]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[63] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(cfg_bus_number[7]),
        .Q(s_axis_tx_tdata[50]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[6] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(\gen_cpl_64.s_axis_tx_tdata[6]_i_1_n_0 ),
        .Q(s_axis_tx_tdata[6]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[7] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(Q[6]),
        .Q(s_axis_tx_tdata[7]),
        .R(\gen_cpl_64.s_axis_tx_tdata[63]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[8] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[1]),
        .Q(s_axis_tx_tdata[8]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tdata_reg[9] 
       (.C(sys_clk),
        .CE(\gen_cpl_64.s_axis_tx_tdata[63]_i_2_n_0 ),
        .D(D[2]),
        .Q(s_axis_tx_tdata[9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFEFF)) 
    \gen_cpl_64.s_axis_tx_tkeep[3]_i_1 
       (.I0(s_axis_tx_tkeep[0]),
        .I1(s_axis_tx_tready),
        .I2(sys_reset),
        .I3(state),
        .O(\gen_cpl_64.s_axis_tx_tkeep[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFCFEFEF)) 
    \gen_cpl_64.s_axis_tx_tkeep[7]_i_1 
       (.I0(s_axis_tx_tkeep[1]),
        .I1(sys_reset),
        .I2(state),
        .I3(compl_wd),
        .I4(s_axis_tx_tready),
        .O(\gen_cpl_64.s_axis_tx_tkeep[7]_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tkeep_reg[3] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\gen_cpl_64.s_axis_tx_tkeep[3]_i_1_n_0 ),
        .Q(s_axis_tx_tkeep[0]),
        .R(1'b0));
  FDRE \gen_cpl_64.s_axis_tx_tkeep_reg[7] 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\gen_cpl_64.s_axis_tx_tkeep[7]_i_1_n_0 ),
        .Q(s_axis_tx_tkeep[1]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h00E0)) 
    \gen_cpl_64.s_axis_tx_tlast_i_1 
       (.I0(s_axis_tx_tlast),
        .I1(s_axis_tx_tready),
        .I2(state),
        .I3(sys_reset),
        .O(\gen_cpl_64.s_axis_tx_tlast_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tlast_reg 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\gen_cpl_64.s_axis_tx_tlast_i_1_n_0 ),
        .Q(s_axis_tx_tlast),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFACA)) 
    \gen_cpl_64.s_axis_tx_tvalid_i_1 
       (.I0(req_compl_q),
        .I1(s_axis_tx_tready),
        .I2(state),
        .I3(s_axis_tx_tvalid),
        .O(\gen_cpl_64.s_axis_tx_tvalid_i_1_n_0 ));
  FDRE \gen_cpl_64.s_axis_tx_tvalid_reg 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\gen_cpl_64.s_axis_tx_tvalid_i_1_n_0 ),
        .Q(s_axis_tx_tvalid),
        .R(sys_reset));
  LUT3 #(
    .INIT(8'h38)) 
    \gen_cpl_64.state_i_1 
       (.I0(req_compl_q),
        .I1(s_axis_tx_tready),
        .I2(state),
        .O(\gen_cpl_64.state_i_1_n_0 ));
  FDRE \gen_cpl_64.state_reg 
       (.C(sys_clk),
        .CE(1'b1),
        .D(\gen_cpl_64.state_i_1_n_0 ),
        .Q(state),
        .R(sys_reset));
  FDRE req_compl_q_reg
       (.C(sys_clk),
        .CE(1'b1),
        .D(req_compl),
        .Q(req_compl_q),
        .R(sys_reset));
  FDSE req_compl_wd_q_reg
       (.C(sys_clk),
        .CE(1'b1),
        .D(req_compl_wd),
        .Q(compl_wd),
        .S(sys_reset));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_axi_basic_rx" *) 
module pcie_7x_0_pcie_7x_0_axi_basic_rx
   (trn_rsrc_dsc_d,
    E,
    data_prev_reg,
    m_axis_rx_tkeep,
    m_axis_rx_tlast,
    trn_in_packet,
    \m_axis_rx_tuser_reg[21] ,
    m_axis_rx_tvalid,
    m_axis_rx_tlast_0,
    Q,
    m_axis_rx_tdata,
    \m_axis_rx_tkeep[7] ,
    m_axis_rx_tuser,
    m_axis_rx_tuser_mux,
    SR,
    trn_rsrc_dsc,
    user_clk,
    trn_rrem,
    rsrc_rdy_filtered,
    trn_reof,
    trn_rsof,
    trn_recrc_err,
    trn_rerrfwd,
    trn_in_packet_reg,
    m_axis_rx_tready,
    user_app_rdy_gnt,
    \pio_rx_sm_64.m_axis_rx_tready_reg ,
    dsc_detect,
    trn_rd,
    trn_rbar_hit);
  output trn_rsrc_dsc_d;
  output [0:0]E;
  output data_prev_reg;
  output [0:0]m_axis_rx_tkeep;
  output m_axis_rx_tlast;
  output trn_in_packet;
  output \m_axis_rx_tuser_reg[21] ;
  output m_axis_rx_tvalid;
  output m_axis_rx_tlast_0;
  output [63:0]Q;
  output [63:0]m_axis_rx_tdata;
  output [0:0]\m_axis_rx_tkeep[7] ;
  output [12:0]m_axis_rx_tuser;
  output [11:0]m_axis_rx_tuser_mux;
  input [0:0]SR;
  input trn_rsrc_dsc;
  input user_clk;
  input [0:0]trn_rrem;
  input rsrc_rdy_filtered;
  input trn_reof;
  input trn_rsof;
  input trn_recrc_err;
  input trn_rerrfwd;
  input trn_in_packet_reg;
  input m_axis_rx_tready;
  input user_app_rdy_gnt;
  input \pio_rx_sm_64.m_axis_rx_tready_reg ;
  input dsc_detect;
  input [63:0]trn_rd;
  input [6:0]trn_rbar_hit;

  wire [0:0]E;
  wire [63:0]Q;
  wire [0:0]SR;
  wire data_prev_reg;
  wire dsc_detect;
  wire [63:0]m_axis_rx_tdata;
  wire [0:0]m_axis_rx_tkeep;
  wire [0:0]\m_axis_rx_tkeep[7] ;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tlast_0;
  wire m_axis_rx_tready;
  wire m_axis_rx_tready_mux;
  wire [12:0]m_axis_rx_tuser;
  wire [11:0]m_axis_rx_tuser_mux;
  wire \m_axis_rx_tuser_reg[21] ;
  wire m_axis_rx_tvalid;
  wire [10:0]new_pkt_len;
  wire null_mux_sel;
  wire \pio_rx_sm_64.m_axis_rx_tready_reg ;
  wire [1:1]pkt_len_counter;
  wire rsrc_rdy_filtered;
  wire rx_null_gen_inst_n_0;
  wire rx_null_gen_inst_n_1;
  wire rx_null_gen_inst_n_3;
  wire rx_null_gen_inst_n_4;
  wire rx_null_gen_inst_n_5;
  wire rx_null_gen_inst_n_6;
  wire rx_null_gen_inst_n_7;
  wire rx_pipeline_inst_n_10;
  wire trn_in_packet;
  wire trn_in_packet_reg;
  wire [6:0]trn_rbar_hit;
  wire [63:0]trn_rd;
  wire trn_recrc_err;
  wire trn_reof;
  wire trn_rerrfwd;
  wire [0:0]trn_rrem;
  wire trn_rsof;
  wire trn_rsrc_dsc;
  wire trn_rsrc_dsc_d;
  wire user_app_rdy_gnt;
  wire user_clk;

  pcie_7x_0_pcie_7x_0_axi_basic_rx_null_gen rx_null_gen_inst
       (.D(pkt_len_counter),
        .Q({Q[30:29],Q[15],Q[1:0]}),
        .S({rx_null_gen_inst_n_6,rx_null_gen_inst_n_7}),
        .SR(SR),
        .data_prev_reg(rx_pipeline_inst_n_10),
        .m_axis_rx_tready(m_axis_rx_tready),
        .m_axis_rx_tready_mux(m_axis_rx_tready_mux),
        .\m_axis_rx_tuser_reg[19] (rx_null_gen_inst_n_4),
        .\m_axis_rx_tuser_reg[21] (rx_null_gen_inst_n_0),
        .\m_axis_rx_tuser_reg[21]_0 (rx_null_gen_inst_n_1),
        .\m_axis_rx_tuser_reg[21]_1 (rx_null_gen_inst_n_5),
        .\m_axis_rx_tuser_reg[21]_2 (\m_axis_rx_tuser_reg[21] ),
        .m_axis_rx_tvalid_reg(data_prev_reg),
        .new_pkt_len(new_pkt_len),
        .null_mux_sel(null_mux_sel),
        .null_mux_sel_reg(rx_null_gen_inst_n_3),
        .\pio_rx_sm_64.m_axis_rx_tready_reg (\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_clk(user_clk));
  pcie_7x_0_pcie_7x_0_axi_basic_rx_pipeline rx_pipeline_inst
       (.D(pkt_len_counter),
        .E(E),
        .Q(Q),
        .S({rx_null_gen_inst_n_6,rx_null_gen_inst_n_7}),
        .SR(SR),
        .cur_state_reg(rx_null_gen_inst_n_5),
        .data_prev_reg_0(data_prev_reg),
        .dsc_detect(dsc_detect),
        .m_axis_rx_tdata(m_axis_rx_tdata),
        .m_axis_rx_tkeep(m_axis_rx_tkeep),
        .\m_axis_rx_tkeep[7] (\m_axis_rx_tkeep[7] ),
        .m_axis_rx_tlast(m_axis_rx_tlast),
        .m_axis_rx_tlast_0(m_axis_rx_tlast_0),
        .m_axis_rx_tready(m_axis_rx_tready),
        .m_axis_rx_tready_mux(m_axis_rx_tready_mux),
        .m_axis_rx_tuser(m_axis_rx_tuser),
        .m_axis_rx_tuser_mux(m_axis_rx_tuser_mux),
        .\m_axis_rx_tuser_reg[21]_0 (rx_pipeline_inst_n_10),
        .\m_axis_rx_tuser_reg[21]_1 (\m_axis_rx_tuser_reg[21] ),
        .m_axis_rx_tvalid(m_axis_rx_tvalid),
        .new_pkt_len(new_pkt_len),
        .null_mux_sel(null_mux_sel),
        .\pio_rx_sm_64.m_axis_rx_tready_reg (\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .\reg_pkt_len_counter_reg[0] (rx_null_gen_inst_n_3),
        .\reg_pkt_len_counter_reg[0]_0 (rx_null_gen_inst_n_0),
        .\reg_pkt_len_counter_reg[0]_1 (rx_null_gen_inst_n_1),
        .\reg_pkt_len_counter_reg[0]_2 (rx_null_gen_inst_n_4),
        .rsrc_rdy_filtered(rsrc_rdy_filtered),
        .trn_in_packet(trn_in_packet),
        .trn_in_packet_reg_0(trn_in_packet_reg),
        .trn_rbar_hit(trn_rbar_hit),
        .trn_rd(trn_rd),
        .trn_recrc_err(trn_recrc_err),
        .trn_reof(trn_reof),
        .trn_rerrfwd(trn_rerrfwd),
        .trn_rrem(trn_rrem),
        .trn_rsof(trn_rsof),
        .trn_rsrc_dsc(trn_rsrc_dsc),
        .trn_rsrc_dsc_d(trn_rsrc_dsc_d),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_axi_basic_rx_null_gen" *) 
module pcie_7x_0_pcie_7x_0_axi_basic_rx_null_gen
   (\m_axis_rx_tuser_reg[21] ,
    \m_axis_rx_tuser_reg[21]_0 ,
    D,
    null_mux_sel_reg,
    \m_axis_rx_tuser_reg[19] ,
    \m_axis_rx_tuser_reg[21]_1 ,
    S,
    SR,
    user_clk,
    new_pkt_len,
    null_mux_sel,
    m_axis_rx_tready,
    user_app_rdy_gnt,
    \pio_rx_sm_64.m_axis_rx_tready_reg ,
    data_prev_reg,
    m_axis_rx_tready_mux,
    m_axis_rx_tvalid_reg,
    \m_axis_rx_tuser_reg[21]_2 ,
    Q);
  output \m_axis_rx_tuser_reg[21] ;
  output \m_axis_rx_tuser_reg[21]_0 ;
  output [0:0]D;
  output null_mux_sel_reg;
  output \m_axis_rx_tuser_reg[19] ;
  output \m_axis_rx_tuser_reg[21]_1 ;
  output [1:0]S;
  input [0:0]SR;
  input user_clk;
  input [10:0]new_pkt_len;
  input null_mux_sel;
  input m_axis_rx_tready;
  input user_app_rdy_gnt;
  input \pio_rx_sm_64.m_axis_rx_tready_reg ;
  input data_prev_reg;
  input m_axis_rx_tready_mux;
  input m_axis_rx_tvalid_reg;
  input \m_axis_rx_tuser_reg[21]_2 ;
  input [4:0]Q;

  wire [0:0]D;
  wire [4:0]Q;
  wire [1:0]S;
  wire [0:0]SR;
  wire cur_state;
  wire cur_state_i_2_n_0;
  wire data_prev_reg;
  wire m_axis_rx_tready;
  wire m_axis_rx_tready_mux;
  wire \m_axis_rx_tuser_reg[19] ;
  wire \m_axis_rx_tuser_reg[21] ;
  wire \m_axis_rx_tuser_reg[21]_0 ;
  wire \m_axis_rx_tuser_reg[21]_1 ;
  wire \m_axis_rx_tuser_reg[21]_2 ;
  wire m_axis_rx_tvalid_reg;
  wire [10:0]new_pkt_len;
  wire next_state;
  wire null_mux_sel;
  wire null_mux_sel_reg;
  wire \pio_rx_sm_64.m_axis_rx_tready_reg ;
  wire [11:1]pkt_len_counter;
  wire [0:0]pkt_len_counter_0;
  wire pkt_len_counter_dec__0_carry__0_i_1_n_0;
  wire pkt_len_counter_dec__0_carry__0_i_2_n_0;
  wire pkt_len_counter_dec__0_carry__0_i_3_n_0;
  wire pkt_len_counter_dec__0_carry__0_i_4_n_0;
  wire pkt_len_counter_dec__0_carry__0_n_0;
  wire pkt_len_counter_dec__0_carry__0_n_1;
  wire pkt_len_counter_dec__0_carry__0_n_2;
  wire pkt_len_counter_dec__0_carry__0_n_3;
  wire pkt_len_counter_dec__0_carry__1_i_1_n_0;
  wire pkt_len_counter_dec__0_carry__1_i_2_n_0;
  wire pkt_len_counter_dec__0_carry__1_i_3_n_0;
  wire pkt_len_counter_dec__0_carry__1_n_2;
  wire pkt_len_counter_dec__0_carry__1_n_3;
  wire pkt_len_counter_dec__0_carry_i_1_n_0;
  wire pkt_len_counter_dec__0_carry_i_2_n_0;
  wire pkt_len_counter_dec__0_carry_i_3_n_0;
  wire pkt_len_counter_dec__0_carry_i_4_n_0;
  wire pkt_len_counter_dec__0_carry_i_5_n_0;
  wire pkt_len_counter_dec__0_carry_n_0;
  wire pkt_len_counter_dec__0_carry_n_1;
  wire pkt_len_counter_dec__0_carry_n_2;
  wire pkt_len_counter_dec__0_carry_n_3;
  wire [11:0]reg_pkt_len_counter;
  wire \reg_pkt_len_counter[11]_i_2_n_0 ;
  wire \reg_pkt_len_counter[11]_i_3_n_0 ;
  wire \reg_pkt_len_counter[11]_i_4_n_0 ;
  wire \reg_pkt_len_counter[11]_i_5_n_0 ;
  wire [11:2]sel0;
  wire trn_rdst_rdy_i_6_n_0;
  wire trn_rdst_rdy_i_7_n_0;
  wire trn_rdst_rdy_i_8_n_0;
  wire trn_rdst_rdy_i_9_n_0;
  wire user_app_rdy_gnt;
  wire user_clk;
  wire [3:2]NLW_pkt_len_counter_dec__0_carry__1_CO_UNCONNECTED;
  wire [3:3]NLW_pkt_len_counter_dec__0_carry__1_O_UNCONNECTED;

  LUT5 #(
    .INIT(32'h8888B888)) 
    cur_state_i_1
       (.I0(cur_state_i_2_n_0),
        .I1(cur_state),
        .I2(m_axis_rx_tready_mux),
        .I3(m_axis_rx_tvalid_reg),
        .I4(\m_axis_rx_tuser_reg[21]_2 ),
        .O(next_state));
  LUT6 #(
    .INIT(64'hFFFF757FFFFFFFFF)) 
    cur_state_i_2
       (.I0(\reg_pkt_len_counter[11]_i_5_n_0 ),
        .I1(m_axis_rx_tready),
        .I2(user_app_rdy_gnt),
        .I3(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I4(\reg_pkt_len_counter[11]_i_4_n_0 ),
        .I5(\reg_pkt_len_counter[11]_i_3_n_0 ),
        .O(cur_state_i_2_n_0));
  FDRE cur_state_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_state),
        .Q(cur_state),
        .R(SR));
  LUT6 #(
    .INIT(64'hCFAACFFFFFFFFFFF)) 
    \m_axis_rx_tuser[19]_i_2 
       (.I0(reg_pkt_len_counter[0]),
        .I1(new_pkt_len[0]),
        .I2(new_pkt_len[1]),
        .I3(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I4(pkt_len_counter[1]),
        .I5(null_mux_sel),
        .O(\m_axis_rx_tuser_reg[19] ));
  LUT6 #(
    .INIT(64'hB8308800FFFFFFFF)) 
    \m_axis_rx_tuser[21]_i_3 
       (.I0(new_pkt_len[1]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[1]),
        .I3(new_pkt_len[0]),
        .I4(reg_pkt_len_counter[0]),
        .I5(null_mux_sel),
        .O(\m_axis_rx_tuser_reg[21] ));
  LUT6 #(
    .INIT(64'hFF00FF00FF00FF47)) 
    \m_axis_rx_tuser[21]_i_4 
       (.I0(new_pkt_len[0]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(reg_pkt_len_counter[0]),
        .I3(SR),
        .I4(D),
        .I5(data_prev_reg),
        .O(\m_axis_rx_tuser_reg[21]_0 ));
  CARRY4 pkt_len_counter_dec__0_carry
       (.CI(1'b0),
        .CO({pkt_len_counter_dec__0_carry_n_0,pkt_len_counter_dec__0_carry_n_1,pkt_len_counter_dec__0_carry_n_2,pkt_len_counter_dec__0_carry_n_3}),
        .CYINIT(1'b0),
        .DI({reg_pkt_len_counter[3:2],pkt_len_counter_dec__0_carry_i_1_n_0,1'b0}),
        .O(pkt_len_counter[4:1]),
        .S({pkt_len_counter_dec__0_carry_i_2_n_0,pkt_len_counter_dec__0_carry_i_3_n_0,pkt_len_counter_dec__0_carry_i_4_n_0,pkt_len_counter_dec__0_carry_i_5_n_0}));
  CARRY4 pkt_len_counter_dec__0_carry__0
       (.CI(pkt_len_counter_dec__0_carry_n_0),
        .CO({pkt_len_counter_dec__0_carry__0_n_0,pkt_len_counter_dec__0_carry__0_n_1,pkt_len_counter_dec__0_carry__0_n_2,pkt_len_counter_dec__0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(reg_pkt_len_counter[7:4]),
        .O(pkt_len_counter[8:5]),
        .S({pkt_len_counter_dec__0_carry__0_i_1_n_0,pkt_len_counter_dec__0_carry__0_i_2_n_0,pkt_len_counter_dec__0_carry__0_i_3_n_0,pkt_len_counter_dec__0_carry__0_i_4_n_0}));
  LUT2 #(
    .INIT(4'h9)) 
    pkt_len_counter_dec__0_carry__0_i_1
       (.I0(reg_pkt_len_counter[7]),
        .I1(reg_pkt_len_counter[8]),
        .O(pkt_len_counter_dec__0_carry__0_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    pkt_len_counter_dec__0_carry__0_i_2
       (.I0(reg_pkt_len_counter[6]),
        .I1(reg_pkt_len_counter[7]),
        .O(pkt_len_counter_dec__0_carry__0_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    pkt_len_counter_dec__0_carry__0_i_3
       (.I0(reg_pkt_len_counter[5]),
        .I1(reg_pkt_len_counter[6]),
        .O(pkt_len_counter_dec__0_carry__0_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    pkt_len_counter_dec__0_carry__0_i_4
       (.I0(reg_pkt_len_counter[4]),
        .I1(reg_pkt_len_counter[5]),
        .O(pkt_len_counter_dec__0_carry__0_i_4_n_0));
  CARRY4 pkt_len_counter_dec__0_carry__1
       (.CI(pkt_len_counter_dec__0_carry__0_n_0),
        .CO({NLW_pkt_len_counter_dec__0_carry__1_CO_UNCONNECTED[3:2],pkt_len_counter_dec__0_carry__1_n_2,pkt_len_counter_dec__0_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,reg_pkt_len_counter[9:8]}),
        .O({NLW_pkt_len_counter_dec__0_carry__1_O_UNCONNECTED[3],pkt_len_counter[11:9]}),
        .S({1'b0,pkt_len_counter_dec__0_carry__1_i_1_n_0,pkt_len_counter_dec__0_carry__1_i_2_n_0,pkt_len_counter_dec__0_carry__1_i_3_n_0}));
  LUT2 #(
    .INIT(4'h9)) 
    pkt_len_counter_dec__0_carry__1_i_1
       (.I0(reg_pkt_len_counter[10]),
        .I1(reg_pkt_len_counter[11]),
        .O(pkt_len_counter_dec__0_carry__1_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    pkt_len_counter_dec__0_carry__1_i_2
       (.I0(reg_pkt_len_counter[9]),
        .I1(reg_pkt_len_counter[10]),
        .O(pkt_len_counter_dec__0_carry__1_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    pkt_len_counter_dec__0_carry__1_i_3
       (.I0(reg_pkt_len_counter[8]),
        .I1(reg_pkt_len_counter[9]),
        .O(pkt_len_counter_dec__0_carry__1_i_3_n_0));
  LUT4 #(
    .INIT(16'hABFB)) 
    pkt_len_counter_dec__0_carry_i_1
       (.I0(reg_pkt_len_counter[1]),
        .I1(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I2(user_app_rdy_gnt),
        .I3(m_axis_rx_tready),
        .O(pkt_len_counter_dec__0_carry_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    pkt_len_counter_dec__0_carry_i_2
       (.I0(reg_pkt_len_counter[3]),
        .I1(reg_pkt_len_counter[4]),
        .O(pkt_len_counter_dec__0_carry_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    pkt_len_counter_dec__0_carry_i_3
       (.I0(reg_pkt_len_counter[2]),
        .I1(reg_pkt_len_counter[3]),
        .O(pkt_len_counter_dec__0_carry_i_3_n_0));
  LUT5 #(
    .INIT(32'hFF4700B8)) 
    pkt_len_counter_dec__0_carry_i_4
       (.I0(m_axis_rx_tready),
        .I1(user_app_rdy_gnt),
        .I2(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I3(reg_pkt_len_counter[1]),
        .I4(reg_pkt_len_counter[2]),
        .O(pkt_len_counter_dec__0_carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h56A6)) 
    pkt_len_counter_dec__0_carry_i_5
       (.I0(reg_pkt_len_counter[1]),
        .I1(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I2(user_app_rdy_gnt),
        .I3(m_axis_rx_tready),
        .O(pkt_len_counter_dec__0_carry_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[0]_i_1 
       (.I0(new_pkt_len[0]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(reg_pkt_len_counter[0]),
        .O(pkt_len_counter_0));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[10]_i_1 
       (.I0(new_pkt_len[10]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[10]),
        .O(sel0[10]));
  LUT2 #(
    .INIT(4'h2)) 
    \reg_pkt_len_counter[11]_i_1 
       (.I0(pkt_len_counter[11]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .O(sel0[11]));
  LUT5 #(
    .INIT(32'h5D555555)) 
    \reg_pkt_len_counter[11]_i_2 
       (.I0(cur_state),
        .I1(\reg_pkt_len_counter[11]_i_3_n_0 ),
        .I2(\reg_pkt_len_counter[11]_i_4_n_0 ),
        .I3(m_axis_rx_tready_mux),
        .I4(\reg_pkt_len_counter[11]_i_5_n_0 ),
        .O(\reg_pkt_len_counter[11]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \reg_pkt_len_counter[11]_i_3 
       (.I0(reg_pkt_len_counter[7]),
        .I1(reg_pkt_len_counter[6]),
        .I2(reg_pkt_len_counter[8]),
        .I3(reg_pkt_len_counter[5]),
        .O(\reg_pkt_len_counter[11]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \reg_pkt_len_counter[11]_i_4 
       (.I0(reg_pkt_len_counter[0]),
        .I1(reg_pkt_len_counter[1]),
        .I2(reg_pkt_len_counter[11]),
        .I3(reg_pkt_len_counter[10]),
        .O(\reg_pkt_len_counter[11]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \reg_pkt_len_counter[11]_i_5 
       (.I0(reg_pkt_len_counter[4]),
        .I1(reg_pkt_len_counter[3]),
        .I2(reg_pkt_len_counter[9]),
        .I3(reg_pkt_len_counter[2]),
        .O(\reg_pkt_len_counter[11]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[1]_i_1 
       (.I0(new_pkt_len[1]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[1]),
        .O(D));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[2]_i_1 
       (.I0(new_pkt_len[2]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[2]),
        .O(sel0[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[3]_i_1 
       (.I0(new_pkt_len[3]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[3]),
        .O(sel0[3]));
  LUT4 #(
    .INIT(16'h1EEE)) 
    \reg_pkt_len_counter[3]_i_7 
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[1]),
        .O(S[1]));
  LUT4 #(
    .INIT(16'h6999)) 
    \reg_pkt_len_counter[3]_i_8 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[4]),
        .I3(Q[0]),
        .O(S[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[4]_i_1 
       (.I0(new_pkt_len[4]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[4]),
        .O(sel0[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[5]_i_1 
       (.I0(new_pkt_len[5]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[5]),
        .O(sel0[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[6]_i_1 
       (.I0(new_pkt_len[6]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[6]),
        .O(sel0[6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[7]_i_1 
       (.I0(new_pkt_len[7]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[7]),
        .O(sel0[7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[8]_i_1 
       (.I0(new_pkt_len[8]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[8]),
        .O(sel0[8]));
  LUT3 #(
    .INIT(8'hB8)) 
    \reg_pkt_len_counter[9]_i_1 
       (.I0(new_pkt_len[9]),
        .I1(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I2(pkt_len_counter[9]),
        .O(sel0[9]));
  FDRE \reg_pkt_len_counter_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(pkt_len_counter_0),
        .Q(reg_pkt_len_counter[0]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[10]),
        .Q(reg_pkt_len_counter[10]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[11]),
        .Q(reg_pkt_len_counter[11]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D),
        .Q(reg_pkt_len_counter[1]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[2]),
        .Q(reg_pkt_len_counter[2]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[3]),
        .Q(reg_pkt_len_counter[3]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[4]),
        .Q(reg_pkt_len_counter[4]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[5]),
        .Q(reg_pkt_len_counter[5]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[6]),
        .Q(reg_pkt_len_counter[6]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[7]),
        .Q(reg_pkt_len_counter[7]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[8]),
        .Q(reg_pkt_len_counter[8]),
        .R(SR));
  FDRE \reg_pkt_len_counter_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sel0[9]),
        .Q(reg_pkt_len_counter[9]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT5 #(
    .INIT(32'hCCA000A0)) 
    trn_rdst_rdy_i_2
       (.I0(reg_pkt_len_counter[0]),
        .I1(new_pkt_len[0]),
        .I2(pkt_len_counter[1]),
        .I3(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I4(new_pkt_len[1]),
        .O(null_mux_sel_reg));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    trn_rdst_rdy_i_3
       (.I0(sel0[9]),
        .I1(trn_rdst_rdy_i_6_n_0),
        .I2(trn_rdst_rdy_i_7_n_0),
        .I3(trn_rdst_rdy_i_8_n_0),
        .I4(sel0[6]),
        .I5(trn_rdst_rdy_i_9_n_0),
        .O(\m_axis_rx_tuser_reg[21]_1 ));
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    trn_rdst_rdy_i_6
       (.I0(pkt_len_counter[8]),
        .I1(new_pkt_len[8]),
        .I2(pkt_len_counter[7]),
        .I3(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I4(new_pkt_len[7]),
        .O(trn_rdst_rdy_i_6_n_0));
  LUT4 #(
    .INIT(16'h01F1)) 
    trn_rdst_rdy_i_7
       (.I0(pkt_len_counter[11]),
        .I1(pkt_len_counter[10]),
        .I2(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I3(new_pkt_len[10]),
        .O(trn_rdst_rdy_i_7_n_0));
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    trn_rdst_rdy_i_8
       (.I0(pkt_len_counter[3]),
        .I1(new_pkt_len[3]),
        .I2(pkt_len_counter[2]),
        .I3(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I4(new_pkt_len[2]),
        .O(trn_rdst_rdy_i_8_n_0));
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    trn_rdst_rdy_i_9
       (.I0(pkt_len_counter[5]),
        .I1(new_pkt_len[5]),
        .I2(pkt_len_counter[4]),
        .I3(\reg_pkt_len_counter[11]_i_2_n_0 ),
        .I4(new_pkt_len[4]),
        .O(trn_rdst_rdy_i_9_n_0));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_axi_basic_rx_pipeline" *) 
module pcie_7x_0_pcie_7x_0_axi_basic_rx_pipeline
   (trn_rsrc_dsc_d,
    E,
    data_prev_reg_0,
    m_axis_rx_tkeep,
    m_axis_rx_tlast,
    null_mux_sel,
    trn_in_packet,
    m_axis_rx_tready_mux,
    m_axis_rx_tvalid,
    m_axis_rx_tlast_0,
    \m_axis_rx_tuser_reg[21]_0 ,
    Q,
    m_axis_rx_tdata,
    \m_axis_rx_tkeep[7] ,
    m_axis_rx_tuser,
    \m_axis_rx_tuser_reg[21]_1 ,
    m_axis_rx_tuser_mux,
    new_pkt_len,
    SR,
    trn_rsrc_dsc,
    user_clk,
    trn_rrem,
    rsrc_rdy_filtered,
    trn_reof,
    trn_rsof,
    trn_recrc_err,
    trn_rerrfwd,
    trn_in_packet_reg_0,
    m_axis_rx_tready,
    user_app_rdy_gnt,
    \pio_rx_sm_64.m_axis_rx_tready_reg ,
    dsc_detect,
    \reg_pkt_len_counter_reg[0] ,
    cur_state_reg,
    D,
    trn_rd,
    trn_rbar_hit,
    S,
    \reg_pkt_len_counter_reg[0]_0 ,
    \reg_pkt_len_counter_reg[0]_1 ,
    \reg_pkt_len_counter_reg[0]_2 );
  output trn_rsrc_dsc_d;
  output [0:0]E;
  output data_prev_reg_0;
  output [0:0]m_axis_rx_tkeep;
  output m_axis_rx_tlast;
  output null_mux_sel;
  output trn_in_packet;
  output m_axis_rx_tready_mux;
  output m_axis_rx_tvalid;
  output m_axis_rx_tlast_0;
  output \m_axis_rx_tuser_reg[21]_0 ;
  output [63:0]Q;
  output [63:0]m_axis_rx_tdata;
  output [0:0]\m_axis_rx_tkeep[7] ;
  output [12:0]m_axis_rx_tuser;
  output \m_axis_rx_tuser_reg[21]_1 ;
  output [11:0]m_axis_rx_tuser_mux;
  output [10:0]new_pkt_len;
  input [0:0]SR;
  input trn_rsrc_dsc;
  input user_clk;
  input [0:0]trn_rrem;
  input rsrc_rdy_filtered;
  input trn_reof;
  input trn_rsof;
  input trn_recrc_err;
  input trn_rerrfwd;
  input trn_in_packet_reg_0;
  input m_axis_rx_tready;
  input user_app_rdy_gnt;
  input \pio_rx_sm_64.m_axis_rx_tready_reg ;
  input dsc_detect;
  input \reg_pkt_len_counter_reg[0] ;
  input cur_state_reg;
  input [0:0]D;
  input [63:0]trn_rd;
  input [6:0]trn_rbar_hit;
  input [1:0]S;
  input \reg_pkt_len_counter_reg[0]_0 ;
  input \reg_pkt_len_counter_reg[0]_1 ;
  input \reg_pkt_len_counter_reg[0]_2 ;

  wire [0:0]D;
  wire [0:0]E;
  wire [63:0]Q;
  wire [1:0]S;
  wire [0:0]SR;
  wire cur_state_reg;
  wire data_hold;
  wire data_prev;
  wire data_prev_reg_0;
  wire dsc_detect;
  wire [63:0]m_axis_rx_tdata;
  wire [0:0]m_axis_rx_tkeep;
  wire [0:0]\m_axis_rx_tkeep[7] ;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tlast_0;
  wire m_axis_rx_tready;
  wire m_axis_rx_tready_mux;
  wire [12:0]m_axis_rx_tuser;
  wire \m_axis_rx_tuser[0]_i_1_n_0 ;
  wire \m_axis_rx_tuser[14]_i_1_n_0 ;
  wire \m_axis_rx_tuser[14]_i_2_n_0 ;
  wire \m_axis_rx_tuser[14]_i_3_n_0 ;
  wire \m_axis_rx_tuser[18]_i_1_n_0 ;
  wire \m_axis_rx_tuser[19]_i_1_n_0 ;
  wire \m_axis_rx_tuser[19]_i_3_n_0 ;
  wire \m_axis_rx_tuser[1]_i_1_n_0 ;
  wire \m_axis_rx_tuser[21]_i_1_n_0 ;
  wire \m_axis_rx_tuser[2]_i_1_n_0 ;
  wire \m_axis_rx_tuser[3]_i_1_n_0 ;
  wire \m_axis_rx_tuser[4]_i_1_n_0 ;
  wire \m_axis_rx_tuser[5]_i_1_n_0 ;
  wire \m_axis_rx_tuser[6]_i_1_n_0 ;
  wire \m_axis_rx_tuser[7]_i_1_n_0 ;
  wire \m_axis_rx_tuser[8]_i_1_n_0 ;
  wire [11:0]m_axis_rx_tuser_mux;
  wire \m_axis_rx_tuser_reg[21]_0 ;
  wire \m_axis_rx_tuser_reg[21]_1 ;
  wire m_axis_rx_tvalid;
  wire m_axis_rx_tvalid_i_1_n_0;
  wire m_axis_rx_tvalid_i_2_n_0;
  wire [10:0]new_pkt_len;
  wire null_mux_sel;
  wire null_mux_sel_i_1_n_0;
  wire null_mux_sel_i_2_n_0;
  wire [63:0]p_1_in;
  wire \pio_rx_sm_64.m_axis_rx_tready_reg ;
  wire reg_dsc_detect;
  wire reg_dsc_detect_i_1_n_0;
  wire \reg_pkt_len_counter[10]_i_3_n_0 ;
  wire \reg_pkt_len_counter[10]_i_4_n_0 ;
  wire \reg_pkt_len_counter[3]_i_5_n_0 ;
  wire \reg_pkt_len_counter[3]_i_6_n_0 ;
  wire \reg_pkt_len_counter[7]_i_3_n_0 ;
  wire \reg_pkt_len_counter[7]_i_4_n_0 ;
  wire \reg_pkt_len_counter[7]_i_5_n_0 ;
  wire \reg_pkt_len_counter[7]_i_6_n_0 ;
  wire \reg_pkt_len_counter_reg[0] ;
  wire \reg_pkt_len_counter_reg[0]_0 ;
  wire \reg_pkt_len_counter_reg[0]_1 ;
  wire \reg_pkt_len_counter_reg[0]_2 ;
  wire \reg_pkt_len_counter_reg[10]_i_2_n_3 ;
  wire \reg_pkt_len_counter_reg[3]_i_2_n_0 ;
  wire \reg_pkt_len_counter_reg[3]_i_2_n_1 ;
  wire \reg_pkt_len_counter_reg[3]_i_2_n_2 ;
  wire \reg_pkt_len_counter_reg[3]_i_2_n_3 ;
  wire \reg_pkt_len_counter_reg[7]_i_2_n_0 ;
  wire \reg_pkt_len_counter_reg[7]_i_2_n_1 ;
  wire \reg_pkt_len_counter_reg[7]_i_2_n_2 ;
  wire \reg_pkt_len_counter_reg[7]_i_2_n_3 ;
  wire [7:7]reg_tkeep;
  wire reg_tlast_i_1_n_0;
  wire rsrc_rdy_filtered;
  wire [1:0]\rx_null_gen_inst/packet_overhead ;
  wire trn_in_packet;
  wire trn_in_packet_reg_0;
  wire [6:0]trn_rbar_hit;
  wire [6:0]trn_rbar_hit_prev;
  wire [63:0]trn_rd;
  wire [63:0]trn_rd_prev;
  wire trn_rdst_rdy_i_1_n_0;
  wire trn_rdst_rdy_i_5_n_0;
  wire trn_recrc_err;
  wire trn_recrc_err_prev;
  wire trn_reof;
  wire trn_reof_prev;
  wire trn_rerrfwd;
  wire trn_rerrfwd_prev;
  wire [0:0]trn_rrem;
  wire trn_rrem_prev;
  wire trn_rsof;
  wire trn_rsof_prev;
  wire trn_rsrc_dsc;
  wire trn_rsrc_dsc_d;
  wire trn_rsrc_dsc_prev;
  wire trn_rsrc_dsc_prev0;
  wire trn_rsrc_rdy_prev;
  wire user_app_rdy_gnt;
  wire user_clk;
  wire [3:1]\NLW_reg_pkt_len_counter_reg[10]_i_2_CO_UNCONNECTED ;
  wire [3:2]\NLW_reg_pkt_len_counter_reg[10]_i_2_O_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    data_prev_i_1
       (.I0(data_prev_reg_0),
        .I1(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I2(user_app_rdy_gnt),
        .I3(m_axis_rx_tready),
        .O(data_hold));
  FDRE data_prev_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(data_hold),
        .Q(data_prev),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[0]),
        .O(m_axis_rx_tdata[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[0]_i_1 
       (.I0(trn_rd_prev[0]),
        .I1(data_prev),
        .I2(trn_rd[32]),
        .O(p_1_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[10]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[10]),
        .O(m_axis_rx_tdata[10]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[10]_i_1 
       (.I0(trn_rd_prev[10]),
        .I1(data_prev),
        .I2(trn_rd[42]),
        .O(p_1_in[10]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[11]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[11]),
        .O(m_axis_rx_tdata[11]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[11]_i_1 
       (.I0(trn_rd_prev[11]),
        .I1(data_prev),
        .I2(trn_rd[43]),
        .O(p_1_in[11]));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[12]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[12]),
        .O(m_axis_rx_tdata[12]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[12]_i_1 
       (.I0(trn_rd_prev[12]),
        .I1(data_prev),
        .I2(trn_rd[44]),
        .O(p_1_in[12]));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[13]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[13]),
        .O(m_axis_rx_tdata[13]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[13]_i_1 
       (.I0(trn_rd_prev[13]),
        .I1(data_prev),
        .I2(trn_rd[45]),
        .O(p_1_in[13]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[14]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[14]),
        .O(m_axis_rx_tdata[14]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[14]_i_1 
       (.I0(trn_rd_prev[14]),
        .I1(data_prev),
        .I2(trn_rd[46]),
        .O(p_1_in[14]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[15]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[15]),
        .O(m_axis_rx_tdata[15]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[15]_i_1 
       (.I0(trn_rd_prev[15]),
        .I1(data_prev),
        .I2(trn_rd[47]),
        .O(p_1_in[15]));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[16]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[16]),
        .O(m_axis_rx_tdata[16]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[16]_i_1 
       (.I0(trn_rd_prev[16]),
        .I1(data_prev),
        .I2(trn_rd[48]),
        .O(p_1_in[16]));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[17]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[17]),
        .O(m_axis_rx_tdata[17]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[17]_i_1 
       (.I0(trn_rd_prev[17]),
        .I1(data_prev),
        .I2(trn_rd[49]),
        .O(p_1_in[17]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[18]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[18]),
        .O(m_axis_rx_tdata[18]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[18]_i_1 
       (.I0(trn_rd_prev[18]),
        .I1(data_prev),
        .I2(trn_rd[50]),
        .O(p_1_in[18]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[19]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[19]),
        .O(m_axis_rx_tdata[19]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[19]_i_1 
       (.I0(trn_rd_prev[19]),
        .I1(data_prev),
        .I2(trn_rd[51]),
        .O(p_1_in[19]));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[1]),
        .O(m_axis_rx_tdata[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[1]_i_1 
       (.I0(trn_rd_prev[1]),
        .I1(data_prev),
        .I2(trn_rd[33]),
        .O(p_1_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[20]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[20]),
        .O(m_axis_rx_tdata[20]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[20]_i_1 
       (.I0(trn_rd_prev[20]),
        .I1(data_prev),
        .I2(trn_rd[52]),
        .O(p_1_in[20]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[21]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[21]),
        .O(m_axis_rx_tdata[21]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[21]_i_1 
       (.I0(trn_rd_prev[21]),
        .I1(data_prev),
        .I2(trn_rd[53]),
        .O(p_1_in[21]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[22]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[22]),
        .O(m_axis_rx_tdata[22]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[22]_i_1 
       (.I0(trn_rd_prev[22]),
        .I1(data_prev),
        .I2(trn_rd[54]),
        .O(p_1_in[22]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[23]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[23]),
        .O(m_axis_rx_tdata[23]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[23]_i_1 
       (.I0(trn_rd_prev[23]),
        .I1(data_prev),
        .I2(trn_rd[55]),
        .O(p_1_in[23]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[24]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[24]),
        .O(m_axis_rx_tdata[24]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[24]_i_1 
       (.I0(trn_rd_prev[24]),
        .I1(data_prev),
        .I2(trn_rd[56]),
        .O(p_1_in[24]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[25]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[25]),
        .O(m_axis_rx_tdata[25]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[25]_i_1 
       (.I0(trn_rd_prev[25]),
        .I1(data_prev),
        .I2(trn_rd[57]),
        .O(p_1_in[25]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[26]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[26]),
        .O(m_axis_rx_tdata[26]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[26]_i_1 
       (.I0(trn_rd_prev[26]),
        .I1(data_prev),
        .I2(trn_rd[58]),
        .O(p_1_in[26]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[27]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[27]),
        .O(m_axis_rx_tdata[27]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[27]_i_1 
       (.I0(trn_rd_prev[27]),
        .I1(data_prev),
        .I2(trn_rd[59]),
        .O(p_1_in[27]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[28]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[28]),
        .O(m_axis_rx_tdata[28]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[28]_i_1 
       (.I0(trn_rd_prev[28]),
        .I1(data_prev),
        .I2(trn_rd[60]),
        .O(p_1_in[28]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[29]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[29]),
        .O(m_axis_rx_tdata[29]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[29]_i_1 
       (.I0(trn_rd_prev[29]),
        .I1(data_prev),
        .I2(trn_rd[61]),
        .O(p_1_in[29]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[2]),
        .O(m_axis_rx_tdata[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[2]_i_1 
       (.I0(trn_rd_prev[2]),
        .I1(data_prev),
        .I2(trn_rd[34]),
        .O(p_1_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[30]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[30]),
        .O(m_axis_rx_tdata[30]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[30]_i_1 
       (.I0(trn_rd_prev[30]),
        .I1(data_prev),
        .I2(trn_rd[62]),
        .O(p_1_in[30]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[31]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[31]),
        .O(m_axis_rx_tdata[31]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[31]_i_1 
       (.I0(trn_rd_prev[31]),
        .I1(data_prev),
        .I2(trn_rd[63]),
        .O(p_1_in[31]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[32]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[32]),
        .O(m_axis_rx_tdata[32]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[32]_i_1 
       (.I0(trn_rd_prev[32]),
        .I1(data_prev),
        .I2(trn_rd[0]),
        .O(p_1_in[32]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[33]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[33]),
        .O(m_axis_rx_tdata[33]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[33]_i_1 
       (.I0(trn_rd_prev[33]),
        .I1(data_prev),
        .I2(trn_rd[1]),
        .O(p_1_in[33]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[34]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[34]),
        .O(m_axis_rx_tdata[34]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[34]_i_1 
       (.I0(trn_rd_prev[34]),
        .I1(data_prev),
        .I2(trn_rd[2]),
        .O(p_1_in[34]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[35]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[35]),
        .O(m_axis_rx_tdata[35]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[35]_i_1 
       (.I0(trn_rd_prev[35]),
        .I1(data_prev),
        .I2(trn_rd[3]),
        .O(p_1_in[35]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[36]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[36]),
        .O(m_axis_rx_tdata[36]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[36]_i_1 
       (.I0(trn_rd_prev[36]),
        .I1(data_prev),
        .I2(trn_rd[4]),
        .O(p_1_in[36]));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[37]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[37]),
        .O(m_axis_rx_tdata[37]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[37]_i_1 
       (.I0(trn_rd_prev[37]),
        .I1(data_prev),
        .I2(trn_rd[5]),
        .O(p_1_in[37]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[38]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[38]),
        .O(m_axis_rx_tdata[38]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[38]_i_1 
       (.I0(trn_rd_prev[38]),
        .I1(data_prev),
        .I2(trn_rd[6]),
        .O(p_1_in[38]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[39]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[39]),
        .O(m_axis_rx_tdata[39]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[39]_i_1 
       (.I0(trn_rd_prev[39]),
        .I1(data_prev),
        .I2(trn_rd[7]),
        .O(p_1_in[39]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[3]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[3]),
        .O(m_axis_rx_tdata[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[3]_i_1 
       (.I0(trn_rd_prev[3]),
        .I1(data_prev),
        .I2(trn_rd[35]),
        .O(p_1_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[40]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[40]),
        .O(m_axis_rx_tdata[40]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[40]_i_1 
       (.I0(trn_rd_prev[40]),
        .I1(data_prev),
        .I2(trn_rd[8]),
        .O(p_1_in[40]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[41]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[41]),
        .O(m_axis_rx_tdata[41]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[41]_i_1 
       (.I0(trn_rd_prev[41]),
        .I1(data_prev),
        .I2(trn_rd[9]),
        .O(p_1_in[41]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[42]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[42]),
        .O(m_axis_rx_tdata[42]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[42]_i_1 
       (.I0(trn_rd_prev[42]),
        .I1(data_prev),
        .I2(trn_rd[10]),
        .O(p_1_in[42]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[43]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[43]),
        .O(m_axis_rx_tdata[43]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[43]_i_1 
       (.I0(trn_rd_prev[43]),
        .I1(data_prev),
        .I2(trn_rd[11]),
        .O(p_1_in[43]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[44]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[44]),
        .O(m_axis_rx_tdata[44]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[44]_i_1 
       (.I0(trn_rd_prev[44]),
        .I1(data_prev),
        .I2(trn_rd[12]),
        .O(p_1_in[44]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[45]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[45]),
        .O(m_axis_rx_tdata[45]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[45]_i_1 
       (.I0(trn_rd_prev[45]),
        .I1(data_prev),
        .I2(trn_rd[13]),
        .O(p_1_in[45]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[46]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[46]),
        .O(m_axis_rx_tdata[46]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[46]_i_1 
       (.I0(trn_rd_prev[46]),
        .I1(data_prev),
        .I2(trn_rd[14]),
        .O(p_1_in[46]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[47]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[47]),
        .O(m_axis_rx_tdata[47]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[47]_i_1 
       (.I0(trn_rd_prev[47]),
        .I1(data_prev),
        .I2(trn_rd[15]),
        .O(p_1_in[47]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[48]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[48]),
        .O(m_axis_rx_tdata[48]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[48]_i_1 
       (.I0(trn_rd_prev[48]),
        .I1(data_prev),
        .I2(trn_rd[16]),
        .O(p_1_in[48]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[49]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[49]),
        .O(m_axis_rx_tdata[49]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[49]_i_1 
       (.I0(trn_rd_prev[49]),
        .I1(data_prev),
        .I2(trn_rd[17]),
        .O(p_1_in[49]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[4]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[4]),
        .O(m_axis_rx_tdata[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[4]_i_1 
       (.I0(trn_rd_prev[4]),
        .I1(data_prev),
        .I2(trn_rd[36]),
        .O(p_1_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[50]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[50]),
        .O(m_axis_rx_tdata[50]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[50]_i_1 
       (.I0(trn_rd_prev[50]),
        .I1(data_prev),
        .I2(trn_rd[18]),
        .O(p_1_in[50]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[51]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[51]),
        .O(m_axis_rx_tdata[51]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[51]_i_1 
       (.I0(trn_rd_prev[51]),
        .I1(data_prev),
        .I2(trn_rd[19]),
        .O(p_1_in[51]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[52]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[52]),
        .O(m_axis_rx_tdata[52]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[52]_i_1 
       (.I0(trn_rd_prev[52]),
        .I1(data_prev),
        .I2(trn_rd[20]),
        .O(p_1_in[52]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[53]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[53]),
        .O(m_axis_rx_tdata[53]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[53]_i_1 
       (.I0(trn_rd_prev[53]),
        .I1(data_prev),
        .I2(trn_rd[21]),
        .O(p_1_in[53]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[54]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[54]),
        .O(m_axis_rx_tdata[54]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[54]_i_1 
       (.I0(trn_rd_prev[54]),
        .I1(data_prev),
        .I2(trn_rd[22]),
        .O(p_1_in[54]));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[55]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[55]),
        .O(m_axis_rx_tdata[55]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[55]_i_1 
       (.I0(trn_rd_prev[55]),
        .I1(data_prev),
        .I2(trn_rd[23]),
        .O(p_1_in[55]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[56]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[56]),
        .O(m_axis_rx_tdata[56]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[56]_i_1 
       (.I0(trn_rd_prev[56]),
        .I1(data_prev),
        .I2(trn_rd[24]),
        .O(p_1_in[56]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[57]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[57]),
        .O(m_axis_rx_tdata[57]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[57]_i_1 
       (.I0(trn_rd_prev[57]),
        .I1(data_prev),
        .I2(trn_rd[25]),
        .O(p_1_in[57]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[58]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[58]),
        .O(m_axis_rx_tdata[58]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[58]_i_1 
       (.I0(trn_rd_prev[58]),
        .I1(data_prev),
        .I2(trn_rd[26]),
        .O(p_1_in[58]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[59]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[59]),
        .O(m_axis_rx_tdata[59]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[59]_i_1 
       (.I0(trn_rd_prev[59]),
        .I1(data_prev),
        .I2(trn_rd[27]),
        .O(p_1_in[59]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[5]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[5]),
        .O(m_axis_rx_tdata[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[5]_i_1 
       (.I0(trn_rd_prev[5]),
        .I1(data_prev),
        .I2(trn_rd[37]),
        .O(p_1_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[60]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[60]),
        .O(m_axis_rx_tdata[60]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[60]_i_1 
       (.I0(trn_rd_prev[60]),
        .I1(data_prev),
        .I2(trn_rd[28]),
        .O(p_1_in[60]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[61]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[61]),
        .O(m_axis_rx_tdata[61]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[61]_i_1 
       (.I0(trn_rd_prev[61]),
        .I1(data_prev),
        .I2(trn_rd[29]),
        .O(p_1_in[61]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[62]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[62]),
        .O(m_axis_rx_tdata[62]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[62]_i_1 
       (.I0(trn_rd_prev[62]),
        .I1(data_prev),
        .I2(trn_rd[30]),
        .O(p_1_in[62]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[63]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[63]),
        .O(m_axis_rx_tdata[63]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[63]_i_1 
       (.I0(trn_rd_prev[63]),
        .I1(data_prev),
        .I2(trn_rd[31]),
        .O(p_1_in[63]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[6]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[6]),
        .O(m_axis_rx_tdata[6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[6]_i_1 
       (.I0(trn_rd_prev[6]),
        .I1(data_prev),
        .I2(trn_rd[38]),
        .O(p_1_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[7]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[7]),
        .O(m_axis_rx_tdata[7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[7]_i_1 
       (.I0(trn_rd_prev[7]),
        .I1(data_prev),
        .I2(trn_rd[39]),
        .O(p_1_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[8]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[8]),
        .O(m_axis_rx_tdata[8]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[8]_i_1 
       (.I0(trn_rd_prev[8]),
        .I1(data_prev),
        .I2(trn_rd[40]),
        .O(p_1_in[8]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tdata[9]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(Q[9]),
        .O(m_axis_rx_tdata[9]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tdata[9]_i_1 
       (.I0(trn_rd_prev[9]),
        .I1(data_prev),
        .I2(trn_rd[41]),
        .O(p_1_in[9]));
  FDRE \m_axis_rx_tdata_reg[0] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[10] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[10]),
        .Q(Q[10]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[11] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[11]),
        .Q(Q[11]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[12] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[12]),
        .Q(Q[12]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[13] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[13]),
        .Q(Q[13]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[14] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[14]),
        .Q(Q[14]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[15] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[15]),
        .Q(Q[15]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[16] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[16]),
        .Q(Q[16]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[17] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[17]),
        .Q(Q[17]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[18] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[18]),
        .Q(Q[18]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[19] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[19]),
        .Q(Q[19]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[1] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[20] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[20]),
        .Q(Q[20]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[21] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[21]),
        .Q(Q[21]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[22] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[22]),
        .Q(Q[22]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[23] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[23]),
        .Q(Q[23]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[24] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[24]),
        .Q(Q[24]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[25] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[25]),
        .Q(Q[25]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[26] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[26]),
        .Q(Q[26]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[27] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[27]),
        .Q(Q[27]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[28] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[28]),
        .Q(Q[28]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[29] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[29]),
        .Q(Q[29]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[2] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[2]),
        .Q(Q[2]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[30] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[30]),
        .Q(Q[30]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[31] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[31]),
        .Q(Q[31]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[32] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[32]),
        .Q(Q[32]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[33] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[33]),
        .Q(Q[33]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[34] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[34]),
        .Q(Q[34]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[35] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[35]),
        .Q(Q[35]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[36] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[36]),
        .Q(Q[36]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[37] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[37]),
        .Q(Q[37]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[38] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[38]),
        .Q(Q[38]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[39] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[39]),
        .Q(Q[39]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[3] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[3]),
        .Q(Q[3]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[40] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[40]),
        .Q(Q[40]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[41] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[41]),
        .Q(Q[41]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[42] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[42]),
        .Q(Q[42]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[43] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[43]),
        .Q(Q[43]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[44] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[44]),
        .Q(Q[44]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[45] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[45]),
        .Q(Q[45]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[46] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[46]),
        .Q(Q[46]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[47] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[47]),
        .Q(Q[47]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[48] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[48]),
        .Q(Q[48]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[49] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[49]),
        .Q(Q[49]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[4] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[4]),
        .Q(Q[4]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[50] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[50]),
        .Q(Q[50]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[51] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[51]),
        .Q(Q[51]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[52] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[52]),
        .Q(Q[52]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[53] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[53]),
        .Q(Q[53]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[54] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[54]),
        .Q(Q[54]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[55] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[55]),
        .Q(Q[55]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[56] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[56]),
        .Q(Q[56]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[57] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[57]),
        .Q(Q[57]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[58] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[58]),
        .Q(Q[58]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[59] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[59]),
        .Q(Q[59]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[5] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[5]),
        .Q(Q[5]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[60] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[60]),
        .Q(Q[60]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[61] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[61]),
        .Q(Q[61]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[62] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[62]),
        .Q(Q[62]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[63] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[63]),
        .Q(Q[63]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[6] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[6]),
        .Q(Q[6]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[7] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[7]),
        .Q(Q[7]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[8] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[8]),
        .Q(Q[8]),
        .R(SR));
  FDRE \m_axis_rx_tdata_reg[9] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(p_1_in[9]),
        .Q(Q[9]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tkeep[4]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tkeep),
        .O(\m_axis_rx_tkeep[7] ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'h8)) 
    m_axis_rx_tlast_INST_0
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tlast),
        .O(m_axis_rx_tlast_0));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[0]),
        .O(m_axis_rx_tuser[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tuser[0]_i_1 
       (.I0(trn_recrc_err_prev),
        .I1(data_prev),
        .I2(trn_recrc_err),
        .O(\m_axis_rx_tuser[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[14]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[9]),
        .O(m_axis_rx_tuser[9]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFD5D0000)) 
    \m_axis_rx_tuser[14]_i_1 
       (.I0(data_prev_reg_0),
        .I1(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I2(user_app_rdy_gnt),
        .I3(m_axis_rx_tready),
        .I4(null_mux_sel),
        .I5(SR),
        .O(\m_axis_rx_tuser[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFEAFFFF)) 
    \m_axis_rx_tuser[14]_i_2 
       (.I0(SR),
        .I1(m_axis_rx_tready),
        .I2(user_app_rdy_gnt),
        .I3(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I4(data_prev_reg_0),
        .O(\m_axis_rx_tuser[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h20202F20)) 
    \m_axis_rx_tuser[14]_i_3 
       (.I0(trn_rsof_prev),
        .I1(trn_rsrc_dsc_prev),
        .I2(data_prev),
        .I3(trn_rsof),
        .I4(trn_rsrc_dsc),
        .O(\m_axis_rx_tuser[14]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[17]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[10]),
        .O(m_axis_rx_tuser[10]));
  LUT6 #(
    .INIT(64'h5555555545405555)) 
    \m_axis_rx_tuser[18]_i_1 
       (.I0(SR),
        .I1(m_axis_rx_tready),
        .I2(user_app_rdy_gnt),
        .I3(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I4(data_prev_reg_0),
        .I5(m_axis_rx_tuser_mux[10]),
        .O(\m_axis_rx_tuser[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[19]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[11]),
        .O(m_axis_rx_tuser[11]));
  LUT6 #(
    .INIT(64'h5504FFFF55040000)) 
    \m_axis_rx_tuser[19]_i_1 
       (.I0(SR),
        .I1(cur_state_reg),
        .I2(\reg_pkt_len_counter_reg[0]_2 ),
        .I3(\m_axis_rx_tuser[19]_i_3_n_0 ),
        .I4(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .I5(m_axis_rx_tuser_mux[11]),
        .O(\m_axis_rx_tuser[19]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h00E2)) 
    \m_axis_rx_tuser[19]_i_3 
       (.I0(trn_rrem),
        .I1(data_prev),
        .I2(trn_rrem_prev),
        .I3(null_mux_sel),
        .O(\m_axis_rx_tuser[19]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[1]),
        .O(m_axis_rx_tuser[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tuser[1]_i_1 
       (.I0(trn_rerrfwd_prev),
        .I1(data_prev),
        .I2(trn_rerrfwd),
        .O(\m_axis_rx_tuser[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[21]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\m_axis_rx_tuser_reg[21]_1 ),
        .O(m_axis_rx_tuser[12]));
  LUT6 #(
    .INIT(64'h00AEFFFF00AE0000)) 
    \m_axis_rx_tuser[21]_i_1 
       (.I0(\m_axis_rx_tuser_reg[21]_0 ),
        .I1(cur_state_reg),
        .I2(\reg_pkt_len_counter_reg[0]_0 ),
        .I3(\reg_pkt_len_counter_reg[0]_1 ),
        .I4(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .I5(\m_axis_rx_tuser_reg[21]_1 ),
        .O(\m_axis_rx_tuser[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h00E2)) 
    \m_axis_rx_tuser[21]_i_2 
       (.I0(trn_reof),
        .I1(data_prev),
        .I2(trn_reof_prev),
        .I3(null_mux_sel),
        .O(\m_axis_rx_tuser_reg[21]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[2]),
        .O(m_axis_rx_tuser[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tuser[2]_i_1 
       (.I0(trn_rbar_hit_prev[0]),
        .I1(data_prev),
        .I2(trn_rbar_hit[0]),
        .O(\m_axis_rx_tuser[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[3]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[3]),
        .O(m_axis_rx_tuser[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tuser[3]_i_1 
       (.I0(trn_rbar_hit_prev[1]),
        .I1(data_prev),
        .I2(trn_rbar_hit[1]),
        .O(\m_axis_rx_tuser[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[4]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[4]),
        .O(m_axis_rx_tuser[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tuser[4]_i_1 
       (.I0(trn_rbar_hit_prev[2]),
        .I1(data_prev),
        .I2(trn_rbar_hit[2]),
        .O(\m_axis_rx_tuser[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[5]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[5]),
        .O(m_axis_rx_tuser[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tuser[5]_i_1 
       (.I0(trn_rbar_hit_prev[3]),
        .I1(data_prev),
        .I2(trn_rbar_hit[3]),
        .O(\m_axis_rx_tuser[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[6]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[6]),
        .O(m_axis_rx_tuser[6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tuser[6]_i_1 
       (.I0(trn_rbar_hit_prev[4]),
        .I1(data_prev),
        .I2(trn_rbar_hit[4]),
        .O(\m_axis_rx_tuser[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[7]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[7]),
        .O(m_axis_rx_tuser[7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tuser[7]_i_1 
       (.I0(trn_rbar_hit_prev[5]),
        .I1(data_prev),
        .I2(trn_rbar_hit[5]),
        .O(\m_axis_rx_tuser[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m_axis_rx_tuser[8]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tuser_mux[8]),
        .O(m_axis_rx_tuser[8]));
  LUT3 #(
    .INIT(8'hB8)) 
    \m_axis_rx_tuser[8]_i_1 
       (.I0(trn_rbar_hit_prev[6]),
        .I1(data_prev),
        .I2(trn_rbar_hit[6]),
        .O(\m_axis_rx_tuser[8]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[0] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[0]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[0]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[14] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[14]_i_3_n_0 ),
        .Q(m_axis_rx_tuser_mux[9]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\m_axis_rx_tuser[18]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[10]),
        .R(1'b0));
  FDRE \m_axis_rx_tuser_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\m_axis_rx_tuser[19]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[11]),
        .R(1'b0));
  FDRE \m_axis_rx_tuser_reg[1] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[1]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[1]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\m_axis_rx_tuser[21]_i_1_n_0 ),
        .Q(\m_axis_rx_tuser_reg[21]_1 ),
        .R(1'b0));
  FDRE \m_axis_rx_tuser_reg[2] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[2]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[2]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[3] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[3]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[3]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[4] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[4]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[4]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[5] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[5]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[5]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[6] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[6]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[6]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[7] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[7]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[7]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  FDRE \m_axis_rx_tuser_reg[8] 
       (.C(user_clk),
        .CE(\m_axis_rx_tuser[14]_i_2_n_0 ),
        .D(\m_axis_rx_tuser[8]_i_1_n_0 ),
        .Q(m_axis_rx_tuser_mux[8]),
        .R(\m_axis_rx_tuser[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'h8)) 
    m_axis_rx_tvalid_INST_0
       (.I0(user_app_rdy_gnt),
        .I1(data_prev_reg_0),
        .O(m_axis_rx_tvalid));
  LUT4 #(
    .INIT(16'hB8FF)) 
    m_axis_rx_tvalid_i_1
       (.I0(m_axis_rx_tready),
        .I1(user_app_rdy_gnt),
        .I2(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I3(data_prev_reg_0),
        .O(m_axis_rx_tvalid_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFE2)) 
    m_axis_rx_tvalid_i_2
       (.I0(rsrc_rdy_filtered),
        .I1(data_prev),
        .I2(trn_rsrc_rdy_prev),
        .I3(reg_dsc_detect),
        .I4(dsc_detect),
        .I5(null_mux_sel),
        .O(m_axis_rx_tvalid_i_2_n_0));
  FDRE m_axis_rx_tvalid_reg
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(m_axis_rx_tvalid_i_2_n_0),
        .Q(data_prev_reg_0),
        .R(SR));
  LUT6 #(
    .INIT(64'h00000000EEEE2EEE)) 
    null_mux_sel_i_1
       (.I0(null_mux_sel_i_2_n_0),
        .I1(null_mux_sel),
        .I2(m_axis_rx_tready_mux),
        .I3(cur_state_reg),
        .I4(\reg_pkt_len_counter_reg[0] ),
        .I5(SR),
        .O(null_mux_sel_i_1_n_0));
  LUT6 #(
    .INIT(64'hB8FFB8FFB8FF0000)) 
    null_mux_sel_i_2
       (.I0(m_axis_rx_tready),
        .I1(user_app_rdy_gnt),
        .I2(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I3(data_prev_reg_0),
        .I4(dsc_detect),
        .I5(reg_dsc_detect),
        .O(null_mux_sel_i_2_n_0));
  FDRE null_mux_sel_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(null_mux_sel_i_1_n_0),
        .Q(null_mux_sel),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hDC)) 
    reg_dsc_detect_i_1
       (.I0(null_mux_sel),
        .I1(dsc_detect),
        .I2(reg_dsc_detect),
        .O(reg_dsc_detect_i_1_n_0));
  FDRE reg_dsc_detect_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(reg_dsc_detect_i_1_n_0),
        .Q(reg_dsc_detect),
        .R(SR));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_pkt_len_counter[10]_i_3 
       (.I0(Q[9]),
        .I1(Q[30]),
        .O(\reg_pkt_len_counter[10]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_pkt_len_counter[10]_i_4 
       (.I0(Q[8]),
        .I1(Q[30]),
        .O(\reg_pkt_len_counter[10]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \reg_pkt_len_counter[3]_i_3 
       (.I0(Q[29]),
        .I1(Q[15]),
        .O(\rx_null_gen_inst/packet_overhead [1]));
  LUT2 #(
    .INIT(4'h9)) 
    \reg_pkt_len_counter[3]_i_4 
       (.I0(Q[15]),
        .I1(Q[29]),
        .O(\rx_null_gen_inst/packet_overhead [0]));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_pkt_len_counter[3]_i_5 
       (.I0(Q[3]),
        .I1(Q[30]),
        .O(\reg_pkt_len_counter[3]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_pkt_len_counter[3]_i_6 
       (.I0(Q[2]),
        .I1(Q[30]),
        .O(\reg_pkt_len_counter[3]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_pkt_len_counter[7]_i_3 
       (.I0(Q[7]),
        .I1(Q[30]),
        .O(\reg_pkt_len_counter[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_pkt_len_counter[7]_i_4 
       (.I0(Q[6]),
        .I1(Q[30]),
        .O(\reg_pkt_len_counter[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_pkt_len_counter[7]_i_5 
       (.I0(Q[5]),
        .I1(Q[30]),
        .O(\reg_pkt_len_counter[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \reg_pkt_len_counter[7]_i_6 
       (.I0(Q[4]),
        .I1(Q[30]),
        .O(\reg_pkt_len_counter[7]_i_6_n_0 ));
  CARRY4 \reg_pkt_len_counter_reg[10]_i_2 
       (.CI(\reg_pkt_len_counter_reg[7]_i_2_n_0 ),
        .CO({\NLW_reg_pkt_len_counter_reg[10]_i_2_CO_UNCONNECTED [3],new_pkt_len[10],\NLW_reg_pkt_len_counter_reg[10]_i_2_CO_UNCONNECTED [1],\reg_pkt_len_counter_reg[10]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_reg_pkt_len_counter_reg[10]_i_2_O_UNCONNECTED [3:2],new_pkt_len[9:8]}),
        .S({1'b0,1'b1,\reg_pkt_len_counter[10]_i_3_n_0 ,\reg_pkt_len_counter[10]_i_4_n_0 }));
  CARRY4 \reg_pkt_len_counter_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\reg_pkt_len_counter_reg[3]_i_2_n_0 ,\reg_pkt_len_counter_reg[3]_i_2_n_1 ,\reg_pkt_len_counter_reg[3]_i_2_n_2 ,\reg_pkt_len_counter_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,\rx_null_gen_inst/packet_overhead }),
        .O(new_pkt_len[3:0]),
        .S({\reg_pkt_len_counter[3]_i_5_n_0 ,\reg_pkt_len_counter[3]_i_6_n_0 ,S}));
  CARRY4 \reg_pkt_len_counter_reg[7]_i_2 
       (.CI(\reg_pkt_len_counter_reg[3]_i_2_n_0 ),
        .CO({\reg_pkt_len_counter_reg[7]_i_2_n_0 ,\reg_pkt_len_counter_reg[7]_i_2_n_1 ,\reg_pkt_len_counter_reg[7]_i_2_n_2 ,\reg_pkt_len_counter_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(new_pkt_len[7:4]),
        .S({\reg_pkt_len_counter[7]_i_3_n_0 ,\reg_pkt_len_counter[7]_i_4_n_0 ,\reg_pkt_len_counter[7]_i_5_n_0 ,\reg_pkt_len_counter[7]_i_6_n_0 }));
  LUT6 #(
    .INIT(64'hF7F7F7C4C4C4F7C4)) 
    \reg_tkeep[7]_i_1 
       (.I0(cur_state_reg),
        .I1(null_mux_sel),
        .I2(D),
        .I3(trn_rrem),
        .I4(data_prev),
        .I5(trn_rrem_prev),
        .O(reg_tkeep));
  FDSE \reg_tkeep_reg[7] 
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(reg_tkeep),
        .Q(m_axis_rx_tkeep),
        .S(SR));
  LUT6 #(
    .INIT(64'h4F404F4F4F404040)) 
    reg_tlast_i_1
       (.I0(\reg_pkt_len_counter_reg[0] ),
        .I1(cur_state_reg),
        .I2(null_mux_sel),
        .I3(trn_reof_prev),
        .I4(data_prev),
        .I5(trn_reof),
        .O(reg_tlast_i_1_n_0));
  FDRE reg_tlast_reg
       (.C(user_clk),
        .CE(m_axis_rx_tvalid_i_1_n_0),
        .D(reg_tlast_i_1_n_0),
        .Q(m_axis_rx_tlast),
        .R(SR));
  FDRE trn_in_packet_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_in_packet_reg_0),
        .Q(trn_in_packet),
        .R(SR));
  FDRE \trn_rbar_hit_prev_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rbar_hit[0]),
        .Q(trn_rbar_hit_prev[0]),
        .R(SR));
  FDRE \trn_rbar_hit_prev_reg[1] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rbar_hit[1]),
        .Q(trn_rbar_hit_prev[1]),
        .R(SR));
  FDRE \trn_rbar_hit_prev_reg[2] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rbar_hit[2]),
        .Q(trn_rbar_hit_prev[2]),
        .R(SR));
  FDRE \trn_rbar_hit_prev_reg[3] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rbar_hit[3]),
        .Q(trn_rbar_hit_prev[3]),
        .R(SR));
  FDRE \trn_rbar_hit_prev_reg[4] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rbar_hit[4]),
        .Q(trn_rbar_hit_prev[4]),
        .R(SR));
  FDRE \trn_rbar_hit_prev_reg[5] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rbar_hit[5]),
        .Q(trn_rbar_hit_prev[5]),
        .R(SR));
  FDRE \trn_rbar_hit_prev_reg[6] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rbar_hit[6]),
        .Q(trn_rbar_hit_prev[6]),
        .R(SR));
  FDRE \trn_rd_prev_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[32]),
        .Q(trn_rd_prev[0]),
        .R(SR));
  FDRE \trn_rd_prev_reg[10] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[42]),
        .Q(trn_rd_prev[10]),
        .R(SR));
  FDRE \trn_rd_prev_reg[11] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[43]),
        .Q(trn_rd_prev[11]),
        .R(SR));
  FDRE \trn_rd_prev_reg[12] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[44]),
        .Q(trn_rd_prev[12]),
        .R(SR));
  FDRE \trn_rd_prev_reg[13] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[45]),
        .Q(trn_rd_prev[13]),
        .R(SR));
  FDRE \trn_rd_prev_reg[14] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[46]),
        .Q(trn_rd_prev[14]),
        .R(SR));
  FDRE \trn_rd_prev_reg[15] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[47]),
        .Q(trn_rd_prev[15]),
        .R(SR));
  FDRE \trn_rd_prev_reg[16] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[48]),
        .Q(trn_rd_prev[16]),
        .R(SR));
  FDRE \trn_rd_prev_reg[17] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[49]),
        .Q(trn_rd_prev[17]),
        .R(SR));
  FDRE \trn_rd_prev_reg[18] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[50]),
        .Q(trn_rd_prev[18]),
        .R(SR));
  FDRE \trn_rd_prev_reg[19] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[51]),
        .Q(trn_rd_prev[19]),
        .R(SR));
  FDRE \trn_rd_prev_reg[1] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[33]),
        .Q(trn_rd_prev[1]),
        .R(SR));
  FDRE \trn_rd_prev_reg[20] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[52]),
        .Q(trn_rd_prev[20]),
        .R(SR));
  FDRE \trn_rd_prev_reg[21] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[53]),
        .Q(trn_rd_prev[21]),
        .R(SR));
  FDRE \trn_rd_prev_reg[22] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[54]),
        .Q(trn_rd_prev[22]),
        .R(SR));
  FDRE \trn_rd_prev_reg[23] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[55]),
        .Q(trn_rd_prev[23]),
        .R(SR));
  FDRE \trn_rd_prev_reg[24] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[56]),
        .Q(trn_rd_prev[24]),
        .R(SR));
  FDRE \trn_rd_prev_reg[25] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[57]),
        .Q(trn_rd_prev[25]),
        .R(SR));
  FDRE \trn_rd_prev_reg[26] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[58]),
        .Q(trn_rd_prev[26]),
        .R(SR));
  FDRE \trn_rd_prev_reg[27] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[59]),
        .Q(trn_rd_prev[27]),
        .R(SR));
  FDRE \trn_rd_prev_reg[28] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[60]),
        .Q(trn_rd_prev[28]),
        .R(SR));
  FDRE \trn_rd_prev_reg[29] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[61]),
        .Q(trn_rd_prev[29]),
        .R(SR));
  FDRE \trn_rd_prev_reg[2] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[34]),
        .Q(trn_rd_prev[2]),
        .R(SR));
  FDRE \trn_rd_prev_reg[30] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[62]),
        .Q(trn_rd_prev[30]),
        .R(SR));
  FDRE \trn_rd_prev_reg[31] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[63]),
        .Q(trn_rd_prev[31]),
        .R(SR));
  FDRE \trn_rd_prev_reg[32] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[0]),
        .Q(trn_rd_prev[32]),
        .R(SR));
  FDRE \trn_rd_prev_reg[33] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[1]),
        .Q(trn_rd_prev[33]),
        .R(SR));
  FDRE \trn_rd_prev_reg[34] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[2]),
        .Q(trn_rd_prev[34]),
        .R(SR));
  FDRE \trn_rd_prev_reg[35] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[3]),
        .Q(trn_rd_prev[35]),
        .R(SR));
  FDRE \trn_rd_prev_reg[36] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[4]),
        .Q(trn_rd_prev[36]),
        .R(SR));
  FDRE \trn_rd_prev_reg[37] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[5]),
        .Q(trn_rd_prev[37]),
        .R(SR));
  FDRE \trn_rd_prev_reg[38] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[6]),
        .Q(trn_rd_prev[38]),
        .R(SR));
  FDRE \trn_rd_prev_reg[39] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[7]),
        .Q(trn_rd_prev[39]),
        .R(SR));
  FDRE \trn_rd_prev_reg[3] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[35]),
        .Q(trn_rd_prev[3]),
        .R(SR));
  FDRE \trn_rd_prev_reg[40] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[8]),
        .Q(trn_rd_prev[40]),
        .R(SR));
  FDRE \trn_rd_prev_reg[41] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[9]),
        .Q(trn_rd_prev[41]),
        .R(SR));
  FDRE \trn_rd_prev_reg[42] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[10]),
        .Q(trn_rd_prev[42]),
        .R(SR));
  FDRE \trn_rd_prev_reg[43] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[11]),
        .Q(trn_rd_prev[43]),
        .R(SR));
  FDRE \trn_rd_prev_reg[44] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[12]),
        .Q(trn_rd_prev[44]),
        .R(SR));
  FDRE \trn_rd_prev_reg[45] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[13]),
        .Q(trn_rd_prev[45]),
        .R(SR));
  FDRE \trn_rd_prev_reg[46] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[14]),
        .Q(trn_rd_prev[46]),
        .R(SR));
  FDRE \trn_rd_prev_reg[47] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[15]),
        .Q(trn_rd_prev[47]),
        .R(SR));
  FDRE \trn_rd_prev_reg[48] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[16]),
        .Q(trn_rd_prev[48]),
        .R(SR));
  FDRE \trn_rd_prev_reg[49] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[17]),
        .Q(trn_rd_prev[49]),
        .R(SR));
  FDRE \trn_rd_prev_reg[4] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[36]),
        .Q(trn_rd_prev[4]),
        .R(SR));
  FDRE \trn_rd_prev_reg[50] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[18]),
        .Q(trn_rd_prev[50]),
        .R(SR));
  FDRE \trn_rd_prev_reg[51] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[19]),
        .Q(trn_rd_prev[51]),
        .R(SR));
  FDRE \trn_rd_prev_reg[52] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[20]),
        .Q(trn_rd_prev[52]),
        .R(SR));
  FDRE \trn_rd_prev_reg[53] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[21]),
        .Q(trn_rd_prev[53]),
        .R(SR));
  FDRE \trn_rd_prev_reg[54] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[22]),
        .Q(trn_rd_prev[54]),
        .R(SR));
  FDRE \trn_rd_prev_reg[55] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[23]),
        .Q(trn_rd_prev[55]),
        .R(SR));
  FDRE \trn_rd_prev_reg[56] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[24]),
        .Q(trn_rd_prev[56]),
        .R(SR));
  FDRE \trn_rd_prev_reg[57] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[25]),
        .Q(trn_rd_prev[57]),
        .R(SR));
  FDRE \trn_rd_prev_reg[58] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[26]),
        .Q(trn_rd_prev[58]),
        .R(SR));
  FDRE \trn_rd_prev_reg[59] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[27]),
        .Q(trn_rd_prev[59]),
        .R(SR));
  FDRE \trn_rd_prev_reg[5] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[37]),
        .Q(trn_rd_prev[5]),
        .R(SR));
  FDRE \trn_rd_prev_reg[60] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[28]),
        .Q(trn_rd_prev[60]),
        .R(SR));
  FDRE \trn_rd_prev_reg[61] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[29]),
        .Q(trn_rd_prev[61]),
        .R(SR));
  FDRE \trn_rd_prev_reg[62] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[30]),
        .Q(trn_rd_prev[62]),
        .R(SR));
  FDRE \trn_rd_prev_reg[63] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[31]),
        .Q(trn_rd_prev[63]),
        .R(SR));
  FDRE \trn_rd_prev_reg[6] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[38]),
        .Q(trn_rd_prev[6]),
        .R(SR));
  FDRE \trn_rd_prev_reg[7] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[39]),
        .Q(trn_rd_prev[7]),
        .R(SR));
  FDRE \trn_rd_prev_reg[8] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[40]),
        .Q(trn_rd_prev[8]),
        .R(SR));
  FDRE \trn_rd_prev_reg[9] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rd[41]),
        .Q(trn_rd_prev[9]),
        .R(SR));
  LUT6 #(
    .INIT(64'h4F004FFF40004000)) 
    trn_rdst_rdy_i_1
       (.I0(\reg_pkt_len_counter_reg[0] ),
        .I1(cur_state_reg),
        .I2(null_mux_sel),
        .I3(m_axis_rx_tready_mux),
        .I4(data_prev_reg_0),
        .I5(trn_rdst_rdy_i_5_n_0),
        .O(trn_rdst_rdy_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    trn_rdst_rdy_i_4
       (.I0(m_axis_rx_tready),
        .I1(user_app_rdy_gnt),
        .I2(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .O(m_axis_rx_tready_mux));
  LUT2 #(
    .INIT(4'h1)) 
    trn_rdst_rdy_i_5
       (.I0(reg_dsc_detect),
        .I1(dsc_detect),
        .O(trn_rdst_rdy_i_5_n_0));
  FDRE trn_rdst_rdy_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_rdst_rdy_i_1_n_0),
        .Q(E),
        .R(SR));
  FDRE trn_recrc_err_prev_reg
       (.C(user_clk),
        .CE(E),
        .D(trn_recrc_err),
        .Q(trn_recrc_err_prev),
        .R(SR));
  FDRE trn_reof_prev_reg
       (.C(user_clk),
        .CE(E),
        .D(trn_reof),
        .Q(trn_reof_prev),
        .R(SR));
  FDRE trn_rerrfwd_prev_reg
       (.C(user_clk),
        .CE(E),
        .D(trn_rerrfwd),
        .Q(trn_rerrfwd_prev),
        .R(SR));
  FDRE \trn_rrem_prev_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(trn_rrem),
        .Q(trn_rrem_prev),
        .R(SR));
  FDRE trn_rsof_prev_reg
       (.C(user_clk),
        .CE(E),
        .D(trn_rsof),
        .Q(trn_rsof_prev),
        .R(SR));
  FDRE trn_rsrc_dsc_d_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_rsrc_dsc),
        .Q(trn_rsrc_dsc_d),
        .R(SR));
  LUT2 #(
    .INIT(4'hE)) 
    trn_rsrc_dsc_prev_i_1
       (.I0(reg_dsc_detect),
        .I1(trn_rsrc_dsc),
        .O(trn_rsrc_dsc_prev0));
  FDRE trn_rsrc_dsc_prev_reg
       (.C(user_clk),
        .CE(E),
        .D(trn_rsrc_dsc_prev0),
        .Q(trn_rsrc_dsc_prev),
        .R(SR));
  FDRE trn_rsrc_rdy_prev_reg
       (.C(user_clk),
        .CE(E),
        .D(rsrc_rdy_filtered),
        .Q(trn_rsrc_rdy_prev),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_axi_basic_top" *) 
module pcie_7x_0_pcie_7x_0_axi_basic_top
   (trn_rsrc_dsc_d,
    E,
    data_prev_reg,
    m_axis_rx_tkeep,
    m_axis_rx_tlast,
    reg_tcfg_gnt,
    \throttle_ctl_pipeline.reg_tsrc_rdy_reg ,
    trn_teof,
    trn_tsrc_rdy,
    trn_trem,
    trn_in_packet,
    lnk_up_thrtl,
    ppm_L1_thrtl,
    reg_to_turnoff,
    \m_axis_rx_tuser_reg[21] ,
    ppm_L1_trig,
    cfg_pm_turnoff_ok_n,
    trn_tcfg_gnt,
    trn_tsof,
    s_axis_tx_tready,
    m_axis_rx_tvalid,
    m_axis_rx_tlast_0,
    Q,
    m_axis_rx_tdata,
    \m_axis_rx_tkeep[7] ,
    m_axis_rx_tuser,
    m_axis_rx_tuser_mux,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    SR,
    trn_rsrc_dsc,
    user_clk,
    trn_rrem,
    rsrc_rdy_filtered,
    trn_reof,
    trn_rsof,
    trn_recrc_err,
    trn_rerrfwd,
    trn_tcfg_req,
    trn_tdst_rdy,
    tbuf_av_min_trig,
    trn_in_packet_reg,
    lnk_up_thrtl_reg,
    ppm_L1_thrtl_reg,
    \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ,
    m_axis_rx_tready,
    user_app_rdy_gnt,
    \pio_rx_sm_64.m_axis_rx_tready_reg ,
    dsc_detect,
    s_axis_tx_tvalid,
    s_axis_tx_tvalid_0,
    s_axis_tx_tlast,
    s_axis_tx_tlast_0,
    tcfg_req_trig,
    out,
    s_axis_tx_tdata,
    \gen_cpl_64.s_axis_tx_tdata_reg[63] ,
    trn_tbuf_av,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg ,
    cfg_pcie_link_state,
    s_axis_tx_tuser,
    UNCONN_IN,
    cfg_turnoff_ok,
    cfg_turnoff_ok_reg,
    tx_cfg_gnt,
    trn_rd,
    trn_rbar_hit,
    s_axis_tx_tkeep,
    \gen_cpl_64.s_axis_tx_tkeep_reg[7] );
  output trn_rsrc_dsc_d;
  output [0:0]E;
  output data_prev_reg;
  output [0:0]m_axis_rx_tkeep;
  output m_axis_rx_tlast;
  output reg_tcfg_gnt;
  output \throttle_ctl_pipeline.reg_tsrc_rdy_reg ;
  output trn_teof;
  output trn_tsrc_rdy;
  output [0:0]trn_trem;
  output trn_in_packet;
  output lnk_up_thrtl;
  output ppm_L1_thrtl;
  output reg_to_turnoff;
  output \m_axis_rx_tuser_reg[21] ;
  output ppm_L1_trig;
  output cfg_pm_turnoff_ok_n;
  output trn_tcfg_gnt;
  output trn_tsof;
  output s_axis_tx_tready;
  output m_axis_rx_tvalid;
  output m_axis_rx_tlast_0;
  output [63:0]Q;
  output [63:0]m_axis_rx_tdata;
  output [0:0]\m_axis_rx_tkeep[7] ;
  output [12:0]m_axis_rx_tuser;
  output [11:0]m_axis_rx_tuser_mux;
  output [63:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  output [3:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  input [0:0]SR;
  input trn_rsrc_dsc;
  input user_clk;
  input [0:0]trn_rrem;
  input rsrc_rdy_filtered;
  input trn_reof;
  input trn_rsof;
  input trn_recrc_err;
  input trn_rerrfwd;
  input trn_tcfg_req;
  input trn_tdst_rdy;
  input tbuf_av_min_trig;
  input trn_in_packet_reg;
  input lnk_up_thrtl_reg;
  input ppm_L1_thrtl_reg;
  input \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ;
  input m_axis_rx_tready;
  input user_app_rdy_gnt;
  input \pio_rx_sm_64.m_axis_rx_tready_reg ;
  input dsc_detect;
  input s_axis_tx_tvalid;
  input s_axis_tx_tvalid_0;
  input s_axis_tx_tlast;
  input s_axis_tx_tlast_0;
  input tcfg_req_trig;
  input out;
  input [63:0]s_axis_tx_tdata;
  input [63:0]\gen_cpl_64.s_axis_tx_tdata_reg[63] ;
  input [5:0]trn_tbuf_av;
  input \pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  input [2:0]cfg_pcie_link_state;
  input [3:0]s_axis_tx_tuser;
  input [3:0]UNCONN_IN;
  input cfg_turnoff_ok;
  input cfg_turnoff_ok_reg;
  input tx_cfg_gnt;
  input [63:0]trn_rd;
  input [6:0]trn_rbar_hit;
  input [0:0]s_axis_tx_tkeep;
  input [0:0]\gen_cpl_64.s_axis_tx_tkeep_reg[7] ;

  wire [0:0]E;
  wire \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ;
  wire [63:0]Q;
  wire [0:0]SR;
  wire [3:0]UNCONN_IN;
  wire [2:0]cfg_pcie_link_state;
  wire cfg_pm_turnoff_ok_n;
  wire cfg_turnoff_ok;
  wire cfg_turnoff_ok_reg;
  wire data_prev_reg;
  wire dsc_detect;
  wire [63:0]\gen_cpl_64.s_axis_tx_tdata_reg[63] ;
  wire [0:0]\gen_cpl_64.s_axis_tx_tkeep_reg[7] ;
  wire [63:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire [3:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire lnk_up_thrtl;
  wire lnk_up_thrtl_reg;
  wire [63:0]m_axis_rx_tdata;
  wire [0:0]m_axis_rx_tkeep;
  wire [0:0]\m_axis_rx_tkeep[7] ;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tlast_0;
  wire m_axis_rx_tready;
  wire [12:0]m_axis_rx_tuser;
  wire [11:0]m_axis_rx_tuser_mux;
  wire \m_axis_rx_tuser_reg[21] ;
  wire m_axis_rx_tvalid;
  wire out;
  wire \pio_rx_sm_64.m_axis_rx_tready_reg ;
  wire \pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire ppm_L1_thrtl;
  wire ppm_L1_thrtl_reg;
  wire ppm_L1_trig;
  wire reg_tcfg_gnt;
  wire reg_to_turnoff;
  wire rsrc_rdy_filtered;
  wire [63:0]s_axis_tx_tdata;
  wire [0:0]s_axis_tx_tkeep;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tlast_0;
  wire s_axis_tx_tready;
  wire [3:0]s_axis_tx_tuser;
  wire s_axis_tx_tvalid;
  wire s_axis_tx_tvalid_0;
  wire tbuf_av_min_trig;
  wire tcfg_req_trig;
  wire \throttle_ctl_pipeline.reg_tsrc_rdy_reg ;
  wire trn_in_packet;
  wire trn_in_packet_reg;
  wire [6:0]trn_rbar_hit;
  wire [63:0]trn_rd;
  wire trn_recrc_err;
  wire trn_reof;
  wire trn_rerrfwd;
  wire [0:0]trn_rrem;
  wire trn_rsof;
  wire trn_rsrc_dsc;
  wire trn_rsrc_dsc_d;
  wire [5:0]trn_tbuf_av;
  wire trn_tcfg_gnt;
  wire trn_tcfg_req;
  wire trn_tdst_rdy;
  wire trn_teof;
  wire [0:0]trn_trem;
  wire trn_tsof;
  wire trn_tsrc_rdy;
  wire tx_cfg_gnt;
  wire user_app_rdy_gnt;
  wire user_clk;

  pcie_7x_0_pcie_7x_0_axi_basic_rx rx_inst
       (.E(E),
        .Q(Q),
        .SR(SR),
        .data_prev_reg(data_prev_reg),
        .dsc_detect(dsc_detect),
        .m_axis_rx_tdata(m_axis_rx_tdata),
        .m_axis_rx_tkeep(m_axis_rx_tkeep),
        .\m_axis_rx_tkeep[7] (\m_axis_rx_tkeep[7] ),
        .m_axis_rx_tlast(m_axis_rx_tlast),
        .m_axis_rx_tlast_0(m_axis_rx_tlast_0),
        .m_axis_rx_tready(m_axis_rx_tready),
        .m_axis_rx_tuser(m_axis_rx_tuser),
        .m_axis_rx_tuser_mux(m_axis_rx_tuser_mux),
        .\m_axis_rx_tuser_reg[21] (\m_axis_rx_tuser_reg[21] ),
        .m_axis_rx_tvalid(m_axis_rx_tvalid),
        .\pio_rx_sm_64.m_axis_rx_tready_reg (\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .rsrc_rdy_filtered(rsrc_rdy_filtered),
        .trn_in_packet(trn_in_packet),
        .trn_in_packet_reg(trn_in_packet_reg),
        .trn_rbar_hit(trn_rbar_hit),
        .trn_rd(trn_rd),
        .trn_recrc_err(trn_recrc_err),
        .trn_reof(trn_reof),
        .trn_rerrfwd(trn_rerrfwd),
        .trn_rrem(trn_rrem),
        .trn_rsof(trn_rsof),
        .trn_rsrc_dsc(trn_rsrc_dsc),
        .trn_rsrc_dsc_d(trn_rsrc_dsc_d),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_clk(user_clk));
  pcie_7x_0_pcie_7x_0_axi_basic_tx tx_inst
       (.\L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg (\L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ),
        .SR(SR),
        .UNCONN_IN(UNCONN_IN),
        .cfg_pcie_link_state(cfg_pcie_link_state),
        .cfg_pm_turnoff_ok_n(cfg_pm_turnoff_ok_n),
        .cfg_turnoff_ok(cfg_turnoff_ok),
        .cfg_turnoff_ok_pending_reg(reg_to_turnoff),
        .cfg_turnoff_ok_reg(cfg_turnoff_ok_reg),
        .\gen_cpl_64.s_axis_tx_tdata_reg[63] (\gen_cpl_64.s_axis_tx_tdata_reg[63] ),
        .\gen_cpl_64.s_axis_tx_tkeep_reg[7] (\gen_cpl_64.s_axis_tx_tkeep_reg[7] ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ),
        .lnk_up_thrtl(lnk_up_thrtl),
        .lnk_up_thrtl_reg(lnk_up_thrtl_reg),
        .out(out),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg ),
        .ppm_L1_thrtl(ppm_L1_thrtl),
        .ppm_L1_thrtl_reg(ppm_L1_thrtl_reg),
        .ppm_L1_trig(ppm_L1_trig),
        .reg_tcfg_gnt(reg_tcfg_gnt),
        .s_axis_tx_tdata(s_axis_tx_tdata),
        .s_axis_tx_tkeep(s_axis_tx_tkeep),
        .s_axis_tx_tlast(s_axis_tx_tlast),
        .s_axis_tx_tlast_0(s_axis_tx_tlast_0),
        .s_axis_tx_tready(s_axis_tx_tready),
        .s_axis_tx_tuser(s_axis_tx_tuser),
        .s_axis_tx_tvalid(s_axis_tx_tvalid),
        .s_axis_tx_tvalid_0(s_axis_tx_tvalid_0),
        .tbuf_av_min_trig(tbuf_av_min_trig),
        .tcfg_req_trig(tcfg_req_trig),
        .\throttle_ctl_pipeline.reg_tsrc_rdy_reg (\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .trn_tbuf_av(trn_tbuf_av),
        .trn_tcfg_gnt(trn_tcfg_gnt),
        .trn_tcfg_req(trn_tcfg_req),
        .trn_tdst_rdy(trn_tdst_rdy),
        .trn_teof(trn_teof),
        .trn_trem(trn_trem),
        .trn_tsof(trn_tsof),
        .trn_tsrc_rdy(trn_tsrc_rdy),
        .tx_cfg_gnt(tx_cfg_gnt),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_axi_basic_tx" *) 
module pcie_7x_0_pcie_7x_0_axi_basic_tx
   (reg_tcfg_gnt,
    \throttle_ctl_pipeline.reg_tsrc_rdy_reg ,
    trn_teof,
    trn_tsrc_rdy,
    trn_trem,
    lnk_up_thrtl,
    ppm_L1_thrtl,
    cfg_turnoff_ok_pending_reg,
    ppm_L1_trig,
    cfg_pm_turnoff_ok_n,
    trn_tcfg_gnt,
    trn_tsof,
    s_axis_tx_tready,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    SR,
    user_clk,
    trn_tcfg_req,
    trn_tdst_rdy,
    tbuf_av_min_trig,
    lnk_up_thrtl_reg,
    ppm_L1_thrtl_reg,
    \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ,
    s_axis_tx_tvalid,
    user_app_rdy_gnt,
    s_axis_tx_tvalid_0,
    s_axis_tx_tlast,
    s_axis_tx_tlast_0,
    tcfg_req_trig,
    out,
    s_axis_tx_tdata,
    \gen_cpl_64.s_axis_tx_tdata_reg[63] ,
    trn_tbuf_av,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg ,
    cfg_pcie_link_state,
    s_axis_tx_tuser,
    UNCONN_IN,
    cfg_turnoff_ok,
    cfg_turnoff_ok_reg,
    tx_cfg_gnt,
    s_axis_tx_tkeep,
    \gen_cpl_64.s_axis_tx_tkeep_reg[7] );
  output reg_tcfg_gnt;
  output \throttle_ctl_pipeline.reg_tsrc_rdy_reg ;
  output trn_teof;
  output trn_tsrc_rdy;
  output [0:0]trn_trem;
  output lnk_up_thrtl;
  output ppm_L1_thrtl;
  output cfg_turnoff_ok_pending_reg;
  output ppm_L1_trig;
  output cfg_pm_turnoff_ok_n;
  output trn_tcfg_gnt;
  output trn_tsof;
  output s_axis_tx_tready;
  output [63:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  output [3:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  input [0:0]SR;
  input user_clk;
  input trn_tcfg_req;
  input trn_tdst_rdy;
  input tbuf_av_min_trig;
  input lnk_up_thrtl_reg;
  input ppm_L1_thrtl_reg;
  input \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ;
  input s_axis_tx_tvalid;
  input user_app_rdy_gnt;
  input s_axis_tx_tvalid_0;
  input s_axis_tx_tlast;
  input s_axis_tx_tlast_0;
  input tcfg_req_trig;
  input out;
  input [63:0]s_axis_tx_tdata;
  input [63:0]\gen_cpl_64.s_axis_tx_tdata_reg[63] ;
  input [5:0]trn_tbuf_av;
  input \pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  input [2:0]cfg_pcie_link_state;
  input [3:0]s_axis_tx_tuser;
  input [3:0]UNCONN_IN;
  input cfg_turnoff_ok;
  input cfg_turnoff_ok_reg;
  input tx_cfg_gnt;
  input [0:0]s_axis_tx_tkeep;
  input [0:0]\gen_cpl_64.s_axis_tx_tkeep_reg[7] ;

  wire \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ;
  wire [0:0]SR;
  wire [3:0]UNCONN_IN;
  wire axi_in_packet;
  wire [2:0]cfg_pcie_link_state;
  wire cfg_pm_turnoff_ok_n;
  wire cfg_turnoff_ok;
  wire cfg_turnoff_ok_pending_reg;
  wire cfg_turnoff_ok_reg;
  wire [63:0]\gen_cpl_64.s_axis_tx_tdata_reg[63] ;
  wire [0:0]\gen_cpl_64.s_axis_tx_tkeep_reg[7] ;
  wire [63:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire [3:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire lnk_up_thrtl;
  wire lnk_up_thrtl_reg;
  wire out;
  wire \pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire ppm_L1_thrtl;
  wire ppm_L1_thrtl_reg;
  wire ppm_L1_trig;
  wire reg_disable_trn;
  wire reg_tcfg_gnt;
  wire reg_tsrc_rdy0;
  wire [63:0]s_axis_tx_tdata;
  wire [0:0]s_axis_tx_tkeep;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tlast_0;
  wire s_axis_tx_tlast_mux;
  wire s_axis_tx_tready;
  wire [3:0]s_axis_tx_tuser;
  wire s_axis_tx_tvalid;
  wire s_axis_tx_tvalid_0;
  wire s_axis_tx_tvalid_mux;
  wire tbuf_av_min_trig;
  wire tcfg_req_trig;
  wire \throttle_ctl_pipeline.reg_tsrc_rdy_reg ;
  wire \thrtl_ctl_enabled.tx_thrl_ctl_inst_n_13 ;
  wire \thrtl_ctl_enabled.tx_thrl_ctl_inst_n_7 ;
  wire [5:0]trn_tbuf_av;
  wire trn_tcfg_gnt;
  wire trn_tcfg_req;
  wire trn_tdst_rdy;
  wire trn_teof;
  wire [0:0]trn_trem;
  wire trn_tsof;
  wire trn_tsrc_rdy;
  wire tx_cfg_gnt;
  wire user_app_rdy_gnt;
  wire user_clk;

  pcie_7x_0_pcie_7x_0_axi_basic_tx_thrtl_ctl \thrtl_ctl_enabled.tx_thrl_ctl_inst 
       (.\L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg_0 (\L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ),
        .SR(SR),
        .UNCONN_IN(UNCONN_IN[0]),
        .axi_in_packet(axi_in_packet),
        .axi_in_packet_reg(\thrtl_ctl_enabled.tx_thrl_ctl_inst_n_13 ),
        .cfg_pcie_link_state(cfg_pcie_link_state),
        .cfg_pm_turnoff_ok_n(cfg_pm_turnoff_ok_n),
        .cfg_turnoff_ok(cfg_turnoff_ok),
        .cfg_turnoff_ok_pending_reg_0(cfg_turnoff_ok_pending_reg),
        .cfg_turnoff_ok_reg(cfg_turnoff_ok_reg),
        .\gen_cpl_64.s_axis_tx_tdata_reg[30] ({\gen_cpl_64.s_axis_tx_tdata_reg[63] [30:29],\gen_cpl_64.s_axis_tx_tdata_reg[63] [15],\gen_cpl_64.s_axis_tx_tdata_reg[63] [0]}),
        .lnk_up_thrtl(lnk_up_thrtl),
        .lnk_up_thrtl_reg_0(lnk_up_thrtl_reg),
        .out(out),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg ),
        .ppm_L1_thrtl(ppm_L1_thrtl),
        .ppm_L1_thrtl_reg_0(ppm_L1_thrtl_reg),
        .ppm_L1_trig(ppm_L1_trig),
        .reg_disable_trn(reg_disable_trn),
        .reg_tcfg_gnt(reg_tcfg_gnt),
        .reg_tsrc_rdy0(reg_tsrc_rdy0),
        .s_axis_tx_tdata({s_axis_tx_tdata[30:29],s_axis_tx_tdata[15],s_axis_tx_tdata[0]}),
        .s_axis_tx_tlast(s_axis_tx_tlast),
        .s_axis_tx_tlast_0(s_axis_tx_tlast_0),
        .s_axis_tx_tlast_mux(s_axis_tx_tlast_mux),
        .s_axis_tx_tready(s_axis_tx_tready),
        .s_axis_tx_tuser(s_axis_tx_tuser[0]),
        .s_axis_tx_tvalid(s_axis_tx_tvalid),
        .s_axis_tx_tvalid_0(s_axis_tx_tvalid_0),
        .s_axis_tx_tvalid_mux(s_axis_tx_tvalid_mux),
        .tbuf_av_min_trig(tbuf_av_min_trig),
        .tcfg_req_trig(tcfg_req_trig),
        .\throttle_ctl_pipeline.reg_tsrc_rdy_reg (\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .tready_thrtl_reg_0(\thrtl_ctl_enabled.tx_thrl_ctl_inst_n_7 ),
        .trn_tbuf_av(trn_tbuf_av),
        .trn_tcfg_gnt(trn_tcfg_gnt),
        .trn_tcfg_req(trn_tcfg_req),
        .trn_tdst_rdy(trn_tdst_rdy),
        .tx_cfg_gnt(tx_cfg_gnt),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_clk(user_clk));
  pcie_7x_0_pcie_7x_0_axi_basic_tx_pipeline tx_pipeline_inst
       (.SR(SR),
        .UNCONN_IN(UNCONN_IN),
        .axi_in_packet(axi_in_packet),
        .\gen_cpl_64.s_axis_tx_tdata_reg[63] (\gen_cpl_64.s_axis_tx_tdata_reg[63] ),
        .\gen_cpl_64.s_axis_tx_tkeep_reg[7] (\gen_cpl_64.s_axis_tx_tkeep_reg[7] ),
        .\gen_cpl_64.s_axis_tx_tlast_reg (\thrtl_ctl_enabled.tx_thrl_ctl_inst_n_13 ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ),
        .out(out),
        .reg_disable_trn(reg_disable_trn),
        .reg_tsrc_rdy0(reg_tsrc_rdy0),
        .s_axis_tx_tdata(s_axis_tx_tdata),
        .s_axis_tx_tkeep(s_axis_tx_tkeep),
        .s_axis_tx_tlast_mux(s_axis_tx_tlast_mux),
        .s_axis_tx_tuser(s_axis_tx_tuser),
        .s_axis_tx_tvalid_mux(s_axis_tx_tvalid_mux),
        .tready_thrtl_reg(\thrtl_ctl_enabled.tx_thrl_ctl_inst_n_7 ),
        .trn_tdst_rdy(trn_tdst_rdy),
        .trn_teof(trn_teof),
        .trn_trem(trn_trem),
        .trn_tsof(trn_tsof),
        .trn_tsrc_rdy(trn_tsrc_rdy),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_axi_basic_tx_pipeline" *) 
module pcie_7x_0_pcie_7x_0_axi_basic_tx_pipeline
   (trn_teof,
    trn_tsrc_rdy,
    trn_trem,
    axi_in_packet,
    reg_disable_trn,
    trn_tsof,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    SR,
    s_axis_tx_tlast_mux,
    user_clk,
    reg_tsrc_rdy0,
    s_axis_tx_tvalid_mux,
    \gen_cpl_64.s_axis_tx_tlast_reg ,
    s_axis_tx_tdata,
    user_app_rdy_gnt,
    \gen_cpl_64.s_axis_tx_tdata_reg[63] ,
    s_axis_tx_tuser,
    UNCONN_IN,
    s_axis_tx_tkeep,
    \gen_cpl_64.s_axis_tx_tkeep_reg[7] ,
    tready_thrtl_reg,
    out,
    trn_tdst_rdy);
  output trn_teof;
  output trn_tsrc_rdy;
  output [0:0]trn_trem;
  output axi_in_packet;
  output reg_disable_trn;
  output trn_tsof;
  output [63:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  output [3:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  input [0:0]SR;
  input s_axis_tx_tlast_mux;
  input user_clk;
  input reg_tsrc_rdy0;
  input s_axis_tx_tvalid_mux;
  input \gen_cpl_64.s_axis_tx_tlast_reg ;
  input [63:0]s_axis_tx_tdata;
  input user_app_rdy_gnt;
  input [63:0]\gen_cpl_64.s_axis_tx_tdata_reg[63] ;
  input [3:0]s_axis_tx_tuser;
  input [3:0]UNCONN_IN;
  input [0:0]s_axis_tx_tkeep;
  input [0:0]\gen_cpl_64.s_axis_tx_tkeep_reg[7] ;
  input tready_thrtl_reg;
  input out;
  input trn_tdst_rdy;

  wire [0:0]SR;
  wire [3:0]UNCONN_IN;
  wire axi_in_packet;
  wire [63:0]\gen_cpl_64.s_axis_tx_tdata_reg[63] ;
  wire [0:0]\gen_cpl_64.s_axis_tx_tkeep_reg[7] ;
  wire \gen_cpl_64.s_axis_tx_tlast_reg ;
  wire [63:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire [3:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire out;
  wire reg_disable_trn;
  wire reg_tsrc_rdy0;
  wire reg_tvalid;
  wire [63:0]s_axis_tx_tdata;
  wire [30:0]s_axis_tx_tdata_mux;
  wire [0:0]s_axis_tx_tkeep;
  wire [7:7]s_axis_tx_tkeep_mux;
  wire s_axis_tx_tlast_mux;
  wire [3:0]s_axis_tx_tuser;
  wire [3:0]s_axis_tx_tuser_mux;
  wire s_axis_tx_tvalid_mux;
  wire \throttle_ctl_pipeline.reg_tdata[10]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[11]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[12]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[13]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[14]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[16]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[17]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[18]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[19]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[1]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[20]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[21]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[22]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[23]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[24]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[25]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[26]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[27]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[28]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[2]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[31]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[32]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[33]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[34]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[35]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[36]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[37]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[38]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[39]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[3]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[40]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[41]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[42]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[43]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[44]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[45]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[46]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[47]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[48]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[49]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[4]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[50]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[51]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[52]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[53]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[54]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[55]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[56]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[57]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[58]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[59]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[5]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[60]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[61]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[62]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[63]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[6]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[7]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[8]_i_1_n_0 ;
  wire \throttle_ctl_pipeline.reg_tdata[9]_i_1_n_0 ;
  wire \thrtl_ctl_trn_flush.reg_disable_trn_i_1_n_0 ;
  wire tready_thrtl_reg;
  wire trn_in_packet;
  wire trn_in_packet_i_1__0_n_0;
  wire trn_tdst_rdy;
  wire trn_teof;
  wire [0:0]trn_trem;
  wire trn_tsof;
  wire trn_tsrc_rdy;
  wire user_app_rdy_gnt;
  wire user_clk;

  FDRE axi_in_packet_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(\gen_cpl_64.s_axis_tx_tlast_reg ),
        .Q(axi_in_packet),
        .R(SR));
  LUT2 #(
    .INIT(4'h2)) 
    pcie_block_i_i_37
       (.I0(reg_tvalid),
        .I1(trn_in_packet),
        .O(trn_tsof));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[0]_i_1 
       (.I0(s_axis_tx_tdata[0]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [0]),
        .O(s_axis_tx_tdata_mux[0]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[10]_i_1 
       (.I0(s_axis_tx_tdata[10]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [10]),
        .O(\throttle_ctl_pipeline.reg_tdata[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[11]_i_1 
       (.I0(s_axis_tx_tdata[11]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [11]),
        .O(\throttle_ctl_pipeline.reg_tdata[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[12]_i_1 
       (.I0(s_axis_tx_tdata[12]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [12]),
        .O(\throttle_ctl_pipeline.reg_tdata[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[13]_i_1 
       (.I0(s_axis_tx_tdata[13]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [13]),
        .O(\throttle_ctl_pipeline.reg_tdata[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[14]_i_1 
       (.I0(s_axis_tx_tdata[14]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [14]),
        .O(\throttle_ctl_pipeline.reg_tdata[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[15]_i_1 
       (.I0(s_axis_tx_tdata[15]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [15]),
        .O(s_axis_tx_tdata_mux[15]));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[16]_i_1 
       (.I0(s_axis_tx_tdata[16]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [16]),
        .O(\throttle_ctl_pipeline.reg_tdata[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[17]_i_1 
       (.I0(s_axis_tx_tdata[17]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [17]),
        .O(\throttle_ctl_pipeline.reg_tdata[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[18]_i_1 
       (.I0(s_axis_tx_tdata[18]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [18]),
        .O(\throttle_ctl_pipeline.reg_tdata[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[19]_i_1 
       (.I0(s_axis_tx_tdata[19]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [19]),
        .O(\throttle_ctl_pipeline.reg_tdata[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[1]_i_1 
       (.I0(s_axis_tx_tdata[1]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [1]),
        .O(\throttle_ctl_pipeline.reg_tdata[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[20]_i_1 
       (.I0(s_axis_tx_tdata[20]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [20]),
        .O(\throttle_ctl_pipeline.reg_tdata[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[21]_i_1 
       (.I0(s_axis_tx_tdata[21]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [21]),
        .O(\throttle_ctl_pipeline.reg_tdata[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[22]_i_1 
       (.I0(s_axis_tx_tdata[22]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [22]),
        .O(\throttle_ctl_pipeline.reg_tdata[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[23]_i_1 
       (.I0(s_axis_tx_tdata[23]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [23]),
        .O(\throttle_ctl_pipeline.reg_tdata[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[24]_i_1 
       (.I0(s_axis_tx_tdata[24]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [24]),
        .O(\throttle_ctl_pipeline.reg_tdata[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[25]_i_1 
       (.I0(s_axis_tx_tdata[25]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [25]),
        .O(\throttle_ctl_pipeline.reg_tdata[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[26]_i_1 
       (.I0(s_axis_tx_tdata[26]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [26]),
        .O(\throttle_ctl_pipeline.reg_tdata[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[27]_i_1 
       (.I0(s_axis_tx_tdata[27]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [27]),
        .O(\throttle_ctl_pipeline.reg_tdata[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[28]_i_1 
       (.I0(s_axis_tx_tdata[28]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [28]),
        .O(\throttle_ctl_pipeline.reg_tdata[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[29]_i_1 
       (.I0(s_axis_tx_tdata[29]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [29]),
        .O(s_axis_tx_tdata_mux[29]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[2]_i_1 
       (.I0(s_axis_tx_tdata[2]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [2]),
        .O(\throttle_ctl_pipeline.reg_tdata[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[30]_i_1 
       (.I0(s_axis_tx_tdata[30]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [30]),
        .O(s_axis_tx_tdata_mux[30]));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[31]_i_1 
       (.I0(s_axis_tx_tdata[31]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [31]),
        .O(\throttle_ctl_pipeline.reg_tdata[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[32]_i_1 
       (.I0(s_axis_tx_tdata[32]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [32]),
        .O(\throttle_ctl_pipeline.reg_tdata[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[33]_i_1 
       (.I0(s_axis_tx_tdata[33]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [33]),
        .O(\throttle_ctl_pipeline.reg_tdata[33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[34]_i_1 
       (.I0(s_axis_tx_tdata[34]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [34]),
        .O(\throttle_ctl_pipeline.reg_tdata[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[35]_i_1 
       (.I0(s_axis_tx_tdata[35]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [35]),
        .O(\throttle_ctl_pipeline.reg_tdata[35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[36]_i_1 
       (.I0(s_axis_tx_tdata[36]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [36]),
        .O(\throttle_ctl_pipeline.reg_tdata[36]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[37]_i_1 
       (.I0(s_axis_tx_tdata[37]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [37]),
        .O(\throttle_ctl_pipeline.reg_tdata[37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[38]_i_1 
       (.I0(s_axis_tx_tdata[38]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [38]),
        .O(\throttle_ctl_pipeline.reg_tdata[38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[39]_i_1 
       (.I0(s_axis_tx_tdata[39]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [39]),
        .O(\throttle_ctl_pipeline.reg_tdata[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[3]_i_1 
       (.I0(s_axis_tx_tdata[3]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [3]),
        .O(\throttle_ctl_pipeline.reg_tdata[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[40]_i_1 
       (.I0(s_axis_tx_tdata[40]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [40]),
        .O(\throttle_ctl_pipeline.reg_tdata[40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[41]_i_1 
       (.I0(s_axis_tx_tdata[41]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [41]),
        .O(\throttle_ctl_pipeline.reg_tdata[41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[42]_i_1 
       (.I0(s_axis_tx_tdata[42]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [42]),
        .O(\throttle_ctl_pipeline.reg_tdata[42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[43]_i_1 
       (.I0(s_axis_tx_tdata[43]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [43]),
        .O(\throttle_ctl_pipeline.reg_tdata[43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[44]_i_1 
       (.I0(s_axis_tx_tdata[44]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [44]),
        .O(\throttle_ctl_pipeline.reg_tdata[44]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[45]_i_1 
       (.I0(s_axis_tx_tdata[45]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [45]),
        .O(\throttle_ctl_pipeline.reg_tdata[45]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[46]_i_1 
       (.I0(s_axis_tx_tdata[46]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [46]),
        .O(\throttle_ctl_pipeline.reg_tdata[46]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[47]_i_1 
       (.I0(s_axis_tx_tdata[47]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [47]),
        .O(\throttle_ctl_pipeline.reg_tdata[47]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[48]_i_1 
       (.I0(s_axis_tx_tdata[48]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [48]),
        .O(\throttle_ctl_pipeline.reg_tdata[48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[49]_i_1 
       (.I0(s_axis_tx_tdata[49]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [49]),
        .O(\throttle_ctl_pipeline.reg_tdata[49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[4]_i_1 
       (.I0(s_axis_tx_tdata[4]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [4]),
        .O(\throttle_ctl_pipeline.reg_tdata[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[50]_i_1 
       (.I0(s_axis_tx_tdata[50]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [50]),
        .O(\throttle_ctl_pipeline.reg_tdata[50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[51]_i_1 
       (.I0(s_axis_tx_tdata[51]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [51]),
        .O(\throttle_ctl_pipeline.reg_tdata[51]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[52]_i_1 
       (.I0(s_axis_tx_tdata[52]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [52]),
        .O(\throttle_ctl_pipeline.reg_tdata[52]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[53]_i_1 
       (.I0(s_axis_tx_tdata[53]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [53]),
        .O(\throttle_ctl_pipeline.reg_tdata[53]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[54]_i_1 
       (.I0(s_axis_tx_tdata[54]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [54]),
        .O(\throttle_ctl_pipeline.reg_tdata[54]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[55]_i_1 
       (.I0(s_axis_tx_tdata[55]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [55]),
        .O(\throttle_ctl_pipeline.reg_tdata[55]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[56]_i_1 
       (.I0(s_axis_tx_tdata[56]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [56]),
        .O(\throttle_ctl_pipeline.reg_tdata[56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[57]_i_1 
       (.I0(s_axis_tx_tdata[57]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [57]),
        .O(\throttle_ctl_pipeline.reg_tdata[57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[58]_i_1 
       (.I0(s_axis_tx_tdata[58]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [58]),
        .O(\throttle_ctl_pipeline.reg_tdata[58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[59]_i_1 
       (.I0(s_axis_tx_tdata[59]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [59]),
        .O(\throttle_ctl_pipeline.reg_tdata[59]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[5]_i_1 
       (.I0(s_axis_tx_tdata[5]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [5]),
        .O(\throttle_ctl_pipeline.reg_tdata[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[60]_i_1 
       (.I0(s_axis_tx_tdata[60]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [60]),
        .O(\throttle_ctl_pipeline.reg_tdata[60]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[61]_i_1 
       (.I0(s_axis_tx_tdata[61]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [61]),
        .O(\throttle_ctl_pipeline.reg_tdata[61]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[62]_i_1 
       (.I0(s_axis_tx_tdata[62]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [62]),
        .O(\throttle_ctl_pipeline.reg_tdata[62]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[63]_i_1 
       (.I0(s_axis_tx_tdata[63]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [63]),
        .O(\throttle_ctl_pipeline.reg_tdata[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[6]_i_1 
       (.I0(s_axis_tx_tdata[6]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [6]),
        .O(\throttle_ctl_pipeline.reg_tdata[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[7]_i_1 
       (.I0(s_axis_tx_tdata[7]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [7]),
        .O(\throttle_ctl_pipeline.reg_tdata[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[8]_i_1 
       (.I0(s_axis_tx_tdata[8]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [8]),
        .O(\throttle_ctl_pipeline.reg_tdata[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tdata[9]_i_1 
       (.I0(s_axis_tx_tdata[9]),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[63] [9]),
        .O(\throttle_ctl_pipeline.reg_tdata[9]_i_1_n_0 ));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tdata_mux[0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [0]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[10]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [10]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[11]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [11]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[12]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [12]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[13]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [13]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[14]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [14]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tdata_mux[15]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [15]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[16]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [16]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[17]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [17]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[18]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [18]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[19]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [19]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[1]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [1]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[20]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [20]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[21]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [21]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[22]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [22]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[23]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [23]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[24]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [24]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[25]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [25]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[26]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [26]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[27]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [27]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[28]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [28]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tdata_mux[29]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [29]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[2]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [2]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tdata_mux[30]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [30]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[31]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [31]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[32] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[32]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [32]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[33] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[33]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [33]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[34] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[34]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [34]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[35] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[35]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [35]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[36] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[36]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [36]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[37] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[37]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [37]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[38] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[38]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [38]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[39] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[39]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [39]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[3]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [3]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[40] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[40]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [40]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[41] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[41]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [41]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[42] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[42]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [42]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[43] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[43]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [43]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[44] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[44]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [44]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[45] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[45]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [45]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[46] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[46]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [46]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[47] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[47]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [47]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[48] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[48]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [48]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[49] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[49]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [49]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[4]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [4]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[50] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[50]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [50]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[51] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[51]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [51]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[52] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[52]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [52]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[53] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[53]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [53]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[54] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[54]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [54]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[55] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[55]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [55]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[56] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[56]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [56]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[57] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[57]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [57]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[58] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[58]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [58]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[59] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[59]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [59]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[5]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [5]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[60] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[60]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [60]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[61] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[61]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [61]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[62] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[62]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [62]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[63] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[63]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [63]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[6]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [6]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[7]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [7]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[8]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [8]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tdata_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\throttle_ctl_pipeline.reg_tdata[9]_i_1_n_0 ),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [9]),
        .R(SR));
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tkeep[7]_i_1 
       (.I0(s_axis_tx_tkeep),
        .I1(user_app_rdy_gnt),
        .I2(\gen_cpl_64.s_axis_tx_tkeep_reg[7] ),
        .O(s_axis_tx_tkeep_mux));
  FDRE \throttle_ctl_pipeline.reg_tkeep_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tkeep_mux),
        .Q(trn_trem),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tlast_reg 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tlast_mux),
        .Q(trn_teof),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tsrc_rdy_reg 
       (.C(user_clk),
        .CE(1'b1),
        .D(reg_tsrc_rdy0),
        .Q(trn_tsrc_rdy),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tuser[0]_i_1 
       (.I0(s_axis_tx_tuser[0]),
        .I1(user_app_rdy_gnt),
        .I2(UNCONN_IN[0]),
        .O(s_axis_tx_tuser_mux[0]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tuser[1]_i_1 
       (.I0(s_axis_tx_tuser[1]),
        .I1(user_app_rdy_gnt),
        .I2(UNCONN_IN[1]),
        .O(s_axis_tx_tuser_mux[1]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tuser[2]_i_1 
       (.I0(s_axis_tx_tuser[2]),
        .I1(user_app_rdy_gnt),
        .I2(UNCONN_IN[2]),
        .O(s_axis_tx_tuser_mux[2]));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tuser[3]_i_1 
       (.I0(s_axis_tx_tuser[3]),
        .I1(user_app_rdy_gnt),
        .I2(UNCONN_IN[3]),
        .O(s_axis_tx_tuser_mux[3]));
  FDRE \throttle_ctl_pipeline.reg_tuser_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tuser_mux[0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [0]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tuser_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tuser_mux[1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [1]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tuser_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tuser_mux[2]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [2]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tuser_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tuser_mux[3]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [3]),
        .R(SR));
  FDRE \throttle_ctl_pipeline.reg_tvalid_reg 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axis_tx_tvalid_mux),
        .Q(reg_tvalid),
        .R(SR));
  LUT4 #(
    .INIT(16'h5510)) 
    \thrtl_ctl_trn_flush.reg_disable_trn_i_1 
       (.I0(tready_thrtl_reg),
        .I1(out),
        .I2(axi_in_packet),
        .I3(reg_disable_trn),
        .O(\thrtl_ctl_trn_flush.reg_disable_trn_i_1_n_0 ));
  FDRE \thrtl_ctl_trn_flush.reg_disable_trn_reg 
       (.C(user_clk),
        .CE(1'b1),
        .D(\thrtl_ctl_trn_flush.reg_disable_trn_i_1_n_0 ),
        .Q(reg_disable_trn),
        .R(SR));
  LUT6 #(
    .INIT(64'h00F00000F0F08800)) 
    trn_in_packet_i_1__0
       (.I0(trn_tdst_rdy),
        .I1(reg_tvalid),
        .I2(out),
        .I3(trn_tsrc_rdy),
        .I4(trn_in_packet),
        .I5(trn_teof),
        .O(trn_in_packet_i_1__0_n_0));
  FDRE trn_in_packet_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_in_packet_i_1__0_n_0),
        .Q(trn_in_packet),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_axi_basic_tx_thrtl_ctl" *) 
module pcie_7x_0_pcie_7x_0_axi_basic_tx_thrtl_ctl
   (reg_tcfg_gnt,
    \throttle_ctl_pipeline.reg_tsrc_rdy_reg ,
    lnk_up_thrtl,
    ppm_L1_thrtl,
    cfg_turnoff_ok_pending_reg_0,
    s_axis_tx_tlast_mux,
    s_axis_tx_tvalid_mux,
    tready_thrtl_reg_0,
    ppm_L1_trig,
    cfg_pm_turnoff_ok_n,
    trn_tcfg_gnt,
    reg_tsrc_rdy0,
    s_axis_tx_tready,
    axi_in_packet_reg,
    SR,
    user_clk,
    trn_tcfg_req,
    trn_tdst_rdy,
    tbuf_av_min_trig,
    lnk_up_thrtl_reg_0,
    ppm_L1_thrtl_reg_0,
    \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg_0 ,
    s_axis_tx_tvalid,
    user_app_rdy_gnt,
    s_axis_tx_tvalid_0,
    s_axis_tx_tlast,
    s_axis_tx_tlast_0,
    tcfg_req_trig,
    out,
    reg_disable_trn,
    s_axis_tx_tdata,
    \gen_cpl_64.s_axis_tx_tdata_reg[30] ,
    trn_tbuf_av,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg ,
    cfg_pcie_link_state,
    s_axis_tx_tuser,
    UNCONN_IN,
    cfg_turnoff_ok,
    cfg_turnoff_ok_reg,
    tx_cfg_gnt,
    axi_in_packet);
  output reg_tcfg_gnt;
  output \throttle_ctl_pipeline.reg_tsrc_rdy_reg ;
  output lnk_up_thrtl;
  output ppm_L1_thrtl;
  output cfg_turnoff_ok_pending_reg_0;
  output s_axis_tx_tlast_mux;
  output s_axis_tx_tvalid_mux;
  output tready_thrtl_reg_0;
  output ppm_L1_trig;
  output cfg_pm_turnoff_ok_n;
  output trn_tcfg_gnt;
  output reg_tsrc_rdy0;
  output s_axis_tx_tready;
  output axi_in_packet_reg;
  input [0:0]SR;
  input user_clk;
  input trn_tcfg_req;
  input trn_tdst_rdy;
  input tbuf_av_min_trig;
  input lnk_up_thrtl_reg_0;
  input ppm_L1_thrtl_reg_0;
  input \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg_0 ;
  input s_axis_tx_tvalid;
  input user_app_rdy_gnt;
  input s_axis_tx_tvalid_0;
  input s_axis_tx_tlast;
  input s_axis_tx_tlast_0;
  input tcfg_req_trig;
  input out;
  input reg_disable_trn;
  input [3:0]s_axis_tx_tdata;
  input [3:0]\gen_cpl_64.s_axis_tx_tdata_reg[30] ;
  input [5:0]trn_tbuf_av;
  input \pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  input [2:0]cfg_pcie_link_state;
  input [0:0]s_axis_tx_tuser;
  input [0:0]UNCONN_IN;
  input cfg_turnoff_ok;
  input cfg_turnoff_ok_reg;
  input tx_cfg_gnt;
  input axi_in_packet;

  wire \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg_0 ;
  wire [0:0]SR;
  wire [0:0]UNCONN_IN;
  wire axi_in_packet;
  wire axi_in_packet_i_2_n_0;
  wire axi_in_packet_reg;
  wire [2:0]cfg_pcie_link_state;
  wire [2:0]cfg_pcie_link_state_d;
  wire cfg_pm_turnoff_ok_n;
  wire cfg_turnoff_ok;
  wire cfg_turnoff_ok_mux;
  wire cfg_turnoff_ok_pending;
  wire cfg_turnoff_ok_pending_i_1_n_0;
  wire cfg_turnoff_ok_pending_reg_0;
  wire cfg_turnoff_ok_reg;
  wire cur_state;
  wire \ecrc_pause_enabled.reg_tx_ecrc_pkt_i_1_n_0 ;
  wire [3:0]\gen_cpl_64.s_axis_tx_tdata_reg[30] ;
  wire lnk_up_thrtl;
  wire lnk_up_thrtl_reg_0;
  wire next_state;
  wire out;
  wire p_2_in;
  wire pcie_block_i_i_152_n_0;
  wire \pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire ppm_L1_thrtl;
  wire ppm_L1_thrtl_reg_0;
  wire ppm_L1_trig;
  wire ppm_L23_thrtl;
  wire ppm_L23_thrtl_i_1_n_0;
  wire ppm_L23_trig;
  wire reg_axi_in_pkt;
  wire reg_axi_in_pkt_i_1_n_0;
  wire reg_disable_trn;
  wire reg_tcfg_gnt;
  wire reg_tsrc_rdy0;
  wire reg_turnoff_ok;
  wire reg_tx_ecrc_pkt;
  wire [3:0]s_axis_tx_tdata;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tlast_0;
  wire s_axis_tx_tlast_mux;
  wire s_axis_tx_tready;
  wire [0:0]s_axis_tx_tuser;
  wire s_axis_tx_tvalid;
  wire s_axis_tx_tvalid_0;
  wire s_axis_tx_tvalid_mux;
  wire [5:0]tbuf_av_d;
  wire tbuf_av_gap_thrtl;
  wire tbuf_av_gap_thrtl_i_1_n_0;
  wire tbuf_av_gap_thrtl_i_3_n_0;
  wire tbuf_av_gap_thrtl_i_4_n_0;
  wire tbuf_av_gap_trig;
  wire tbuf_av_min_thrtl;
  wire tbuf_av_min_trig;
  wire \tbuf_gap_cnt[0]_i_1_n_0 ;
  wire \tbuf_gap_cnt_reg_n_0_[0] ;
  wire tcfg_gnt_pending;
  wire tcfg_gnt_pending_i_1_n_0;
  wire [1:0]tcfg_req_cnt;
  wire \tcfg_req_cnt[0]_i_1_n_0 ;
  wire \tcfg_req_cnt[1]_i_1_n_0 ;
  wire tcfg_req_thrtl;
  wire tcfg_req_thrtl_i_1_n_0;
  wire tcfg_req_trig;
  wire \throttle_ctl_pipeline.reg_tsrc_rdy_reg ;
  wire tready_thrtl0;
  wire tready_thrtl_i_10_n_0;
  wire tready_thrtl_i_2_n_0;
  wire tready_thrtl_i_4_n_0;
  wire tready_thrtl_i_5_n_0;
  wire tready_thrtl_i_6_n_0;
  wire tready_thrtl_i_9_n_0;
  wire tready_thrtl_reg_0;
  wire [5:0]trn_tbuf_av;
  wire trn_tcfg_gnt;
  wire trn_tcfg_req;
  wire trn_tcfg_req_d;
  wire trn_tdst_rdy;
  wire trn_tdst_rdy_d;
  wire tx_cfg_gnt;
  wire tx_cfg_gnt_mux;
  wire user_app_rdy_gnt;
  wire user_clk;

  LUT3 #(
    .INIT(8'hB8)) 
    \L23_thrtl_ep.reg_turnoff_ok_i_1 
       (.I0(cfg_turnoff_ok),
        .I1(user_app_rdy_gnt),
        .I2(cfg_turnoff_ok_reg),
        .O(cfg_turnoff_ok_mux));
  FDRE \L23_thrtl_ep.reg_turnoff_ok_reg 
       (.C(user_clk),
        .CE(1'b1),
        .D(cfg_turnoff_ok_mux),
        .Q(reg_turnoff_ok),
        .R(SR));
  FDRE \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg 
       (.C(user_clk),
        .CE(1'b1),
        .D(\L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg_0 ),
        .Q(cfg_turnoff_ok_pending_reg_0),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT5 #(
    .INIT(32'h1DFF1D00)) 
    axi_in_packet_i_1
       (.I0(s_axis_tx_tlast),
        .I1(user_app_rdy_gnt),
        .I2(s_axis_tx_tlast_0),
        .I3(axi_in_packet_i_2_n_0),
        .I4(axi_in_packet),
        .O(axi_in_packet_reg));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT4 #(
    .INIT(16'hE200)) 
    axi_in_packet_i_2
       (.I0(s_axis_tx_tvalid),
        .I1(user_app_rdy_gnt),
        .I2(s_axis_tx_tvalid_0),
        .I3(\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .O(axi_in_packet_i_2_n_0));
  FDRE \cfg_pcie_link_state_d_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(cfg_pcie_link_state[0]),
        .Q(cfg_pcie_link_state_d[0]),
        .R(SR));
  FDRE \cfg_pcie_link_state_d_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(cfg_pcie_link_state[1]),
        .Q(cfg_pcie_link_state_d[1]),
        .R(SR));
  FDRE \cfg_pcie_link_state_d_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(cfg_pcie_link_state[2]),
        .Q(cfg_pcie_link_state_d[2]),
        .R(SR));
  LUT5 #(
    .INIT(32'h75553000)) 
    cfg_turnoff_ok_pending_i_1
       (.I0(cfg_pm_turnoff_ok_n),
        .I1(ppm_L23_thrtl),
        .I2(reg_turnoff_ok),
        .I3(cfg_turnoff_ok_pending_reg_0),
        .I4(cfg_turnoff_ok_pending),
        .O(cfg_turnoff_ok_pending_i_1_n_0));
  FDRE cfg_turnoff_ok_pending_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(cfg_turnoff_ok_pending_i_1_n_0),
        .Q(cfg_turnoff_ok_pending),
        .R(SR));
  LUT6 #(
    .INIT(64'hAAAAAAAAA202AAAA)) 
    cur_state_i_1__0
       (.I0(tready_thrtl_i_5_n_0),
        .I1(reg_axi_in_pkt),
        .I2(s_axis_tx_tvalid_mux),
        .I3(s_axis_tx_tlast_mux),
        .I4(\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .I5(cur_state),
        .O(next_state));
  FDSE cur_state_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_state),
        .Q(cur_state),
        .S(SR));
  LUT6 #(
    .INIT(64'h02A2FFFF02A202A2)) 
    \ecrc_pause_enabled.reg_tx_ecrc_pkt_i_1 
       (.I0(tready_thrtl_i_4_n_0),
        .I1(s_axis_tx_tlast),
        .I2(user_app_rdy_gnt),
        .I3(s_axis_tx_tlast_0),
        .I4(tready_thrtl_reg_0),
        .I5(reg_tx_ecrc_pkt),
        .O(\ecrc_pause_enabled.reg_tx_ecrc_pkt_i_1_n_0 ));
  FDRE \ecrc_pause_enabled.reg_tx_ecrc_pkt_reg 
       (.C(user_clk),
        .CE(1'b1),
        .D(\ecrc_pause_enabled.reg_tx_ecrc_pkt_i_1_n_0 ),
        .Q(reg_tx_ecrc_pkt),
        .R(SR));
  FDRE lnk_up_thrtl_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(lnk_up_thrtl_reg_0),
        .Q(lnk_up_thrtl),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000D5DF0000)) 
    pcie_block_i_i_152
       (.I0(\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .I1(s_axis_tx_tlast_mux),
        .I2(s_axis_tx_tvalid_mux),
        .I3(reg_axi_in_pkt),
        .I4(tready_thrtl_i_5_n_0),
        .I5(cur_state),
        .O(pcie_block_i_i_152_n_0));
  LUT6 #(
    .INIT(64'h08FF088808880888)) 
    pcie_block_i_i_26
       (.I0(cur_state),
        .I1(cfg_turnoff_ok_pending),
        .I2(tcfg_gnt_pending),
        .I3(tcfg_req_thrtl),
        .I4(ppm_L23_thrtl),
        .I5(pcie_block_i_i_152_n_0),
        .O(cfg_pm_turnoff_ok_n));
  LUT4 #(
    .INIT(16'hA888)) 
    pcie_block_i_i_36
       (.I0(tcfg_req_thrtl),
        .I1(pcie_block_i_i_152_n_0),
        .I2(tcfg_gnt_pending),
        .I3(cur_state),
        .O(trn_tcfg_gnt));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    ppm_L1_thrtl_i_2
       (.I0(cfg_pcie_link_state_d[1]),
        .I1(cfg_pcie_link_state_d[2]),
        .I2(cfg_pcie_link_state_d[0]),
        .I3(cfg_pcie_link_state[1]),
        .I4(cfg_pcie_link_state[2]),
        .I5(cfg_pcie_link_state[0]),
        .O(ppm_L1_trig));
  FDRE ppm_L1_thrtl_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(ppm_L1_thrtl_reg_0),
        .Q(ppm_L1_thrtl),
        .R(SR));
  LUT3 #(
    .INIT(8'hF8)) 
    ppm_L23_thrtl_i_1
       (.I0(cfg_turnoff_ok_pending_reg_0),
        .I1(reg_turnoff_ok),
        .I2(ppm_L23_thrtl),
        .O(ppm_L23_thrtl_i_1_n_0));
  FDRE ppm_L23_thrtl_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(ppm_L23_thrtl_i_1_n_0),
        .Q(ppm_L23_thrtl),
        .R(SR));
  LUT5 #(
    .INIT(32'h00000AEA)) 
    reg_axi_in_pkt_i_1
       (.I0(reg_axi_in_pkt),
        .I1(\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .I2(s_axis_tx_tvalid_mux),
        .I3(s_axis_tx_tlast_mux),
        .I4(SR),
        .O(reg_axi_in_pkt_i_1_n_0));
  FDRE reg_axi_in_pkt_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(reg_axi_in_pkt_i_1_n_0),
        .Q(reg_axi_in_pkt),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    reg_tcfg_gnt_i_1
       (.I0(tx_cfg_gnt),
        .I1(user_app_rdy_gnt),
        .O(tx_cfg_gnt_mux));
  FDRE reg_tcfg_gnt_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_cfg_gnt_mux),
        .Q(reg_tcfg_gnt),
        .R(SR));
  LUT2 #(
    .INIT(4'h8)) 
    s_axis_tx_tready_INST_0
       (.I0(\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .I1(user_app_rdy_gnt),
        .O(s_axis_tx_tready));
  FDRE \tbuf_av_d_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_tbuf_av[0]),
        .Q(tbuf_av_d[0]),
        .R(SR));
  FDRE \tbuf_av_d_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_tbuf_av[1]),
        .Q(tbuf_av_d[1]),
        .R(SR));
  FDRE \tbuf_av_d_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_tbuf_av[2]),
        .Q(tbuf_av_d[2]),
        .R(SR));
  FDRE \tbuf_av_d_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_tbuf_av[3]),
        .Q(tbuf_av_d[3]),
        .R(SR));
  FDRE \tbuf_av_d_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_tbuf_av[4]),
        .Q(tbuf_av_d[4]),
        .R(SR));
  FDRE \tbuf_av_d_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_tbuf_av[5]),
        .Q(tbuf_av_d[5]),
        .R(SR));
  LUT3 #(
    .INIT(8'hEA)) 
    tbuf_av_gap_thrtl_i_1
       (.I0(tbuf_av_gap_trig),
        .I1(\tbuf_gap_cnt_reg_n_0_[0] ),
        .I2(tbuf_av_gap_thrtl),
        .O(tbuf_av_gap_thrtl_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00100000)) 
    tbuf_av_gap_thrtl_i_2
       (.I0(tcfg_req_cnt[1]),
        .I1(tcfg_req_cnt[0]),
        .I2(trn_tdst_rdy),
        .I3(trn_tdst_rdy_d),
        .I4(tcfg_req_thrtl),
        .I5(tbuf_av_gap_thrtl_i_3_n_0),
        .O(tbuf_av_gap_trig));
  LUT6 #(
    .INIT(64'h00000000FFFF0040)) 
    tbuf_av_gap_thrtl_i_3
       (.I0(tbuf_av_d[4]),
        .I1(trn_tbuf_av[1]),
        .I2(tbuf_av_d[0]),
        .I3(tbuf_av_gap_thrtl_i_4_n_0),
        .I4(tready_thrtl_reg_0),
        .I5(\pipe_stages_1.pipe_rx_chanisaligned_q_reg ),
        .O(tbuf_av_gap_thrtl_i_3_n_0));
  LUT4 #(
    .INIT(16'hFFFD)) 
    tbuf_av_gap_thrtl_i_4
       (.I0(tbuf_av_d[1]),
        .I1(tbuf_av_d[3]),
        .I2(tbuf_av_d[5]),
        .I3(tbuf_av_d[2]),
        .O(tbuf_av_gap_thrtl_i_4_n_0));
  FDRE tbuf_av_gap_thrtl_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(tbuf_av_gap_thrtl_i_1_n_0),
        .Q(tbuf_av_gap_thrtl),
        .R(SR));
  FDRE tbuf_av_min_thrtl_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(tbuf_av_min_trig),
        .Q(tbuf_av_min_thrtl),
        .R(SR));
  LUT2 #(
    .INIT(4'h7)) 
    \tbuf_gap_cnt[0]_i_1 
       (.I0(tbuf_av_gap_thrtl),
        .I1(cur_state),
        .O(\tbuf_gap_cnt[0]_i_1_n_0 ));
  FDRE \tbuf_gap_cnt_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\tbuf_gap_cnt[0]_i_1_n_0 ),
        .Q(\tbuf_gap_cnt_reg_n_0_[0] ),
        .R(SR));
  LUT6 #(
    .INIT(64'h44444F44FF44FF44)) 
    tcfg_gnt_pending_i_1
       (.I0(trn_tcfg_req_d),
        .I1(trn_tcfg_req),
        .I2(cur_state),
        .I3(tcfg_gnt_pending),
        .I4(pcie_block_i_i_152_n_0),
        .I5(tcfg_req_thrtl),
        .O(tcfg_gnt_pending_i_1_n_0));
  FDRE tcfg_gnt_pending_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(tcfg_gnt_pending_i_1_n_0),
        .Q(tcfg_gnt_pending),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000000004000404)) 
    \tcfg_req_cnt[0]_i_1 
       (.I0(tcfg_req_cnt[0]),
        .I1(tcfg_req_cnt[1]),
        .I2(tcfg_gnt_pending),
        .I3(trn_tcfg_req_d),
        .I4(trn_tcfg_req),
        .I5(SR),
        .O(\tcfg_req_cnt[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF88F8)) 
    \tcfg_req_cnt[1]_i_1 
       (.I0(tcfg_req_cnt[1]),
        .I1(tcfg_req_cnt[0]),
        .I2(trn_tcfg_req),
        .I3(trn_tcfg_req_d),
        .I4(tcfg_gnt_pending),
        .O(\tcfg_req_cnt[1]_i_1_n_0 ));
  FDRE \tcfg_req_cnt_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\tcfg_req_cnt[0]_i_1_n_0 ),
        .Q(tcfg_req_cnt[0]),
        .R(1'b0));
  FDRE \tcfg_req_cnt_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\tcfg_req_cnt[1]_i_1_n_0 ),
        .Q(tcfg_req_cnt[1]),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFFFF8FF88888888)) 
    tcfg_req_thrtl_i_1
       (.I0(reg_tcfg_gnt),
        .I1(trn_tcfg_req),
        .I2(trn_tdst_rdy_d),
        .I3(trn_tdst_rdy),
        .I4(p_2_in),
        .I5(tcfg_req_thrtl),
        .O(tcfg_req_thrtl_i_1_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    tcfg_req_thrtl_i_2
       (.I0(tcfg_req_cnt[0]),
        .I1(tcfg_req_cnt[1]),
        .O(p_2_in));
  FDRE tcfg_req_thrtl_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(tcfg_req_thrtl_i_1_n_0),
        .Q(tcfg_req_thrtl),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tlast_i_1 
       (.I0(s_axis_tx_tlast_0),
        .I1(user_app_rdy_gnt),
        .I2(s_axis_tx_tlast),
        .O(s_axis_tx_tlast_mux));
  LUT6 #(
    .INIT(64'h000000008A800000)) 
    \throttle_ctl_pipeline.reg_tsrc_rdy_i_1 
       (.I0(\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .I1(s_axis_tx_tvalid_0),
        .I2(user_app_rdy_gnt),
        .I3(s_axis_tx_tvalid),
        .I4(out),
        .I5(reg_disable_trn),
        .O(reg_tsrc_rdy0));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \throttle_ctl_pipeline.reg_tvalid_i_1 
       (.I0(s_axis_tx_tvalid_0),
        .I1(user_app_rdy_gnt),
        .I2(s_axis_tx_tvalid),
        .O(s_axis_tx_tvalid_mux));
  LUT6 #(
    .INIT(64'h333F333F0000222A)) 
    tready_thrtl_i_1
       (.I0(tready_thrtl_i_2_n_0),
        .I1(tready_thrtl_reg_0),
        .I2(tready_thrtl_i_4_n_0),
        .I3(reg_tx_ecrc_pkt),
        .I4(tready_thrtl_i_5_n_0),
        .I5(tready_thrtl_i_6_n_0),
        .O(tready_thrtl0));
  LUT6 #(
    .INIT(64'hFFFFFFFFCFAACFFF)) 
    tready_thrtl_i_10
       (.I0(\gen_cpl_64.s_axis_tx_tdata_reg[30] [1]),
        .I1(s_axis_tx_tdata[1]),
        .I2(s_axis_tx_tuser),
        .I3(user_app_rdy_gnt),
        .I4(UNCONN_IN),
        .I5(reg_axi_in_pkt),
        .O(tready_thrtl_i_10_n_0));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    tready_thrtl_i_2
       (.I0(tbuf_av_gap_trig),
        .I1(tbuf_av_min_trig),
        .I2(tcfg_req_trig),
        .I3(out),
        .I4(ppm_L23_trig),
        .I5(ppm_L1_trig),
        .O(tready_thrtl_i_2_n_0));
  LUT6 #(
    .INIT(64'h8A800A0080800000)) 
    tready_thrtl_i_3
       (.I0(\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .I1(s_axis_tx_tlast_0),
        .I2(user_app_rdy_gnt),
        .I3(s_axis_tx_tlast),
        .I4(s_axis_tx_tvalid_0),
        .I5(s_axis_tx_tvalid),
        .O(tready_thrtl_reg_0));
  LUT6 #(
    .INIT(64'h00000000656A0000)) 
    tready_thrtl_i_4
       (.I0(tready_thrtl_i_9_n_0),
        .I1(s_axis_tx_tdata[2]),
        .I2(user_app_rdy_gnt),
        .I3(\gen_cpl_64.s_axis_tx_tdata_reg[30] [2]),
        .I4(axi_in_packet_i_2_n_0),
        .I5(tready_thrtl_i_10_n_0),
        .O(tready_thrtl_i_4_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    tready_thrtl_i_5
       (.I0(ppm_L1_thrtl),
        .I1(tbuf_av_min_thrtl),
        .I2(tcfg_req_thrtl),
        .I3(ppm_L23_thrtl),
        .I4(tbuf_av_gap_thrtl),
        .I5(lnk_up_thrtl),
        .O(tready_thrtl_i_5_n_0));
  LUT5 #(
    .INIT(32'h04440400)) 
    tready_thrtl_i_6
       (.I0(cur_state),
        .I1(\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .I2(s_axis_tx_tlast_mux),
        .I3(s_axis_tx_tvalid_mux),
        .I4(reg_axi_in_pkt),
        .O(tready_thrtl_i_6_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    tready_thrtl_i_8
       (.I0(reg_turnoff_ok),
        .I1(cfg_turnoff_ok_pending_reg_0),
        .O(ppm_L23_trig));
  LUT5 #(
    .INIT(32'hCCA000A0)) 
    tready_thrtl_i_9
       (.I0(\gen_cpl_64.s_axis_tx_tdata_reg[30] [3]),
        .I1(s_axis_tx_tdata[3]),
        .I2(\gen_cpl_64.s_axis_tx_tdata_reg[30] [0]),
        .I3(user_app_rdy_gnt),
        .I4(s_axis_tx_tdata[0]),
        .O(tready_thrtl_i_9_n_0));
  FDRE tready_thrtl_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(tready_thrtl0),
        .Q(\throttle_ctl_pipeline.reg_tsrc_rdy_reg ),
        .R(SR));
  FDRE trn_tcfg_req_d_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_tcfg_req),
        .Q(trn_tcfg_req_d),
        .R(SR));
  FDSE trn_tdst_rdy_d_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(trn_tdst_rdy),
        .Q(trn_tdst_rdy_d),
        .S(SR));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_core_top" *) 
module pcie_7x_0_pcie_7x_0_core_top
   (pl_ltssm_state,
    INT_RXUSRCLK_OUT,
    PIPE_RATE_FSM,
    PIPE_DRP_FSM,
    out0,
    \txsync_fsm.txsync_done_reg ,
    \txsync_fsm.txsync_done_reg_0 ,
    user_app_rdy,
    user_reset_out,
    startup_eos,
    INT_USERCLK1_OUT,
    cfg_aer_ecrc_check_en,
    cfg_aer_ecrc_gen_en,
    cfg_aer_rooterr_corr_err_received,
    cfg_aer_rooterr_corr_err_reporting_en,
    cfg_aer_rooterr_fatal_err_received,
    cfg_aer_rooterr_fatal_err_reporting_en,
    cfg_aer_rooterr_non_fatal_err_received,
    cfg_aer_rooterr_non_fatal_err_reporting_en,
    cfg_bridge_serr_en,
    cfg_command,
    cfg_dcommand2,
    cfg_dcommand,
    cfg_dstatus,
    cfg_interrupt_msienable,
    cfg_interrupt_msixenable,
    cfg_interrupt_msixfm,
    cfg_lcommand,
    cfg_lstatus,
    cfg_msg_received_assert_int_a,
    cfg_msg_received_assert_int_b,
    cfg_msg_received_assert_int_c,
    cfg_msg_received_assert_int_d,
    cfg_msg_received_deassert_int_a,
    cfg_msg_received_deassert_int_b,
    cfg_msg_received_deassert_int_c,
    cfg_msg_received_deassert_int_d,
    cfg_msg_received_err_cor,
    cfg_msg_received_err_fatal,
    cfg_msg_received_err_non_fatal,
    cfg_msg_received_pm_as_nak,
    cfg_msg_received_pme_to_ack,
    cfg_msg_received_pm_pme,
    cfg_msg_received_setslotpowerlimit,
    cfg_pmcsr_pme_en,
    cfg_pmcsr_pme_status,
    cfg_root_control_pme_int_en,
    cfg_root_control_syserr_corr_err_en,
    cfg_root_control_syserr_fatal_err_en,
    cfg_root_control_syserr_non_fatal_err_en,
    cfg_slot_control_electromech_il_ctl_pulse,
    pl_directed_change_done,
    pl_link_gen2_cap,
    pl_link_partner_gen2_supported,
    pl_link_upcfg_cap,
    pl_sel_lnk_rate,
    fc_cpld,
    fc_npd,
    fc_pd,
    pl_lane_reversal_mode,
    pl_rx_pm_state,
    pl_sel_lnk_width,
    cfg_interrupt_mmenable,
    pl_initial_link_width,
    pl_tx_pm_state,
    cfg_mgmt_do,
    cfg_vc_tcvc_map,
    cfg_interrupt_do,
    fc_cplh,
    fc_nph,
    fc_ph,
    pipe_txoutclk_out,
    int_dclk_out,
    int_mmcm_lock_out,
    out,
    pipe_rst_fsm,
    pipe_cpll_lock,
    pipe_qrst_idle,
    \FSM_sequential_fsm_reg[2] ,
    pipe_qrst_fsm,
    int_qplllock_out,
    pipe_pclk_sel_out,
    rate_gen3_reg1_reg,
    ext_ch_gt_drprdy,
    ext_ch_gt_drpdo,
    int_qplloutclk_out,
    int_qplloutrefclk_out,
    pipe_rxstatus,
    \txsync_fsm.txdlyen_reg ,
    pipe_sync_fsm_rx,
    pipe_rxphaligndone,
    pipe_eyescandataerror,
    pci_exp_txn,
    pci_exp_txp,
    pipe_rxcommadet,
    pipe_rxdlysresetdone,
    pipe_rxoutclk_out,
    pipe_rxprbserr,
    pipe_txdlysresetdone,
    pipe_txphaligndone,
    pipe_txphinitdone,
    pipe_rxbufstatus,
    pipe_dmonitorout,
    pipe_rxdisperr,
    pipe_rxnotintable,
    pipe_rate_idle,
    gt_ch_drp_rdy,
    icap_o,
    user_lnk_up,
    tx_err_drop,
    tx_cfg_req,
    s_axis_tx_tready,
    m_axis_rx_tvalid,
    m_axis_rx_tlast,
    cfg_msg_received,
    cfg_to_turnoff,
    pl_phy_lnk_up,
    pl_received_hot_rst,
    startup_cfgclk,
    startup_cfgmclk,
    startup_preq,
    pcie_drp_rdy,
    tx_buf_av,
    cfg_pcie_link_state,
    cfg_pmcsr_powerstate,
    cfg_device_number,
    cfg_function_number,
    m_axis_rx_tdata,
    m_axis_rx_tkeep,
    m_axis_rx_tuser,
    cfg_msg_data,
    cfg_bus_number,
    pcie_drp_do,
    cfg_mgmt_rd_wr_done,
    cfg_err_aer_headerlog_set,
    cfg_err_cpl_rdy,
    cfg_interrupt_rdy,
    cfg_received_func_lvl_rst,
    ext_ch_gt_drpaddr,
    m_axis_rx_tready,
    s_axis_tx_tvalid,
    s_axis_tx_tlast,
    pcie_drp_clk,
    pl_directed_link_auton,
    pl_directed_link_speed,
    pl_downstream_deemph_source,
    cfg_err_aer_headerlog,
    cfg_pm_force_state,
    pl_directed_link_width,
    cfg_mgmt_di,
    cfg_err_tlp_cpl_header,
    cfg_aer_interrupt_msgnum,
    cfg_pciecap_interrupt_msgnum,
    cfg_interrupt_di,
    cfg_mgmt_dwaddr,
    sys_clk,
    pci_exp_rxn,
    pci_exp_rxp,
    pipe_rxprbscntreset,
    pipe_txinhibit,
    pipe_txprbsforceerr,
    pipe_loopback,
    pipe_rxprbssel,
    pipe_txprbssel,
    int_pclk_sel_slave,
    ext_ch_gt_drpdi,
    ext_ch_gt_drpen,
    ext_ch_gt_drpwe,
    sys_rst_n,
    pipe_mmcm_rst_n,
    icap_clk,
    cfg_mgmt_byte_en,
    s_axis_tx_tdata,
    s_axis_tx_tuser,
    pl_transmit_hot_rst,
    cfg_mgmt_wr_en,
    cfg_mgmt_rd_en,
    cfg_err_malformed,
    cfg_err_cor,
    cfg_err_ur,
    cfg_err_ecrc,
    cfg_err_cpl_timeout,
    cfg_err_cpl_abort,
    cfg_err_cpl_unexpect,
    cfg_err_poisoned,
    cfg_err_atomic_egress_blocked,
    cfg_err_mc_blocked,
    cfg_err_internal_uncor,
    cfg_err_internal_cor,
    cfg_interrupt,
    cfg_pm_halt_aspm_l0s,
    cfg_pm_halt_aspm_l1,
    cfg_pm_force_state_en,
    cfg_pm_wake,
    cfg_turnoff_ok,
    cfg_trn_pending,
    pcie_drp_en,
    pcie_drp_we,
    icap_csib,
    icap_rdwrb,
    startup_clk,
    startup_gsr,
    startup_gts,
    startup_pack,
    startup_usrcclko,
    startup_usrdoneo,
    tx_cfg_gnt,
    rx_np_ok,
    rx_np_req,
    fc_sel,
    pl_directed_link_change,
    pl_upstream_prefer_deemph,
    cfg_ds_device_number,
    cfg_ds_function_number,
    startup_keyclearb,
    startup_usrcclkts,
    startup_usrdonets,
    s_axis_tx_tkeep,
    cfg_ds_bus_number,
    cfg_dsn,
    pcie_drp_addr,
    pcie_drp_di,
    icap_i,
    cfg_mgmt_wr_rw1c_as_rw,
    cfg_mgmt_wr_readonly,
    cfg_err_posted,
    cfg_err_locked,
    cfg_err_norecovery,
    cfg_interrupt_assert,
    cfg_interrupt_stat);
  output [5:0]pl_ltssm_state;
  output INT_RXUSRCLK_OUT;
  output [19:0]PIPE_RATE_FSM;
  output [11:0]PIPE_DRP_FSM;
  output [5:0]out0;
  output [5:0]\txsync_fsm.txsync_done_reg ;
  output [5:0]\txsync_fsm.txsync_done_reg_0 ;
  output user_app_rdy;
  output user_reset_out;
  output startup_eos;
  output INT_USERCLK1_OUT;
  output cfg_aer_ecrc_check_en;
  output cfg_aer_ecrc_gen_en;
  output cfg_aer_rooterr_corr_err_received;
  output cfg_aer_rooterr_corr_err_reporting_en;
  output cfg_aer_rooterr_fatal_err_received;
  output cfg_aer_rooterr_fatal_err_reporting_en;
  output cfg_aer_rooterr_non_fatal_err_received;
  output cfg_aer_rooterr_non_fatal_err_reporting_en;
  output cfg_bridge_serr_en;
  output [4:0]cfg_command;
  output [11:0]cfg_dcommand2;
  output [14:0]cfg_dcommand;
  output [4:0]cfg_dstatus;
  output cfg_interrupt_msienable;
  output cfg_interrupt_msixenable;
  output cfg_interrupt_msixfm;
  output [10:0]cfg_lcommand;
  output [9:0]cfg_lstatus;
  output cfg_msg_received_assert_int_a;
  output cfg_msg_received_assert_int_b;
  output cfg_msg_received_assert_int_c;
  output cfg_msg_received_assert_int_d;
  output cfg_msg_received_deassert_int_a;
  output cfg_msg_received_deassert_int_b;
  output cfg_msg_received_deassert_int_c;
  output cfg_msg_received_deassert_int_d;
  output cfg_msg_received_err_cor;
  output cfg_msg_received_err_fatal;
  output cfg_msg_received_err_non_fatal;
  output cfg_msg_received_pm_as_nak;
  output cfg_msg_received_pme_to_ack;
  output cfg_msg_received_pm_pme;
  output cfg_msg_received_setslotpowerlimit;
  output cfg_pmcsr_pme_en;
  output cfg_pmcsr_pme_status;
  output cfg_root_control_pme_int_en;
  output cfg_root_control_syserr_corr_err_en;
  output cfg_root_control_syserr_fatal_err_en;
  output cfg_root_control_syserr_non_fatal_err_en;
  output cfg_slot_control_electromech_il_ctl_pulse;
  output pl_directed_change_done;
  output pl_link_gen2_cap;
  output pl_link_partner_gen2_supported;
  output pl_link_upcfg_cap;
  output pl_sel_lnk_rate;
  output [11:0]fc_cpld;
  output [11:0]fc_npd;
  output [11:0]fc_pd;
  output [1:0]pl_lane_reversal_mode;
  output [1:0]pl_rx_pm_state;
  output [1:0]pl_sel_lnk_width;
  output [2:0]cfg_interrupt_mmenable;
  output [2:0]pl_initial_link_width;
  output [2:0]pl_tx_pm_state;
  output [31:0]cfg_mgmt_do;
  output [6:0]cfg_vc_tcvc_map;
  output [7:0]cfg_interrupt_do;
  output [7:0]fc_cplh;
  output [7:0]fc_nph;
  output [7:0]fc_ph;
  output pipe_txoutclk_out;
  output int_dclk_out;
  output int_mmcm_lock_out;
  output [1:0]out;
  output [3:0]pipe_rst_fsm;
  output [3:0]pipe_cpll_lock;
  output pipe_qrst_idle;
  output [0:0]\FSM_sequential_fsm_reg[2] ;
  output [2:0]pipe_qrst_fsm;
  output [0:0]int_qplllock_out;
  output [3:0]pipe_pclk_sel_out;
  output rate_gen3_reg1_reg;
  output [3:0]ext_ch_gt_drprdy;
  output [63:0]ext_ch_gt_drpdo;
  output [0:0]int_qplloutclk_out;
  output [0:0]int_qplloutrefclk_out;
  output [11:0]pipe_rxstatus;
  output [5:0]\txsync_fsm.txdlyen_reg ;
  output [3:0]pipe_sync_fsm_rx;
  output [3:0]pipe_rxphaligndone;
  output [3:0]pipe_eyescandataerror;
  output [3:0]pci_exp_txn;
  output [3:0]pci_exp_txp;
  output [3:0]pipe_rxcommadet;
  output [3:0]pipe_rxdlysresetdone;
  output [3:0]pipe_rxoutclk_out;
  output [3:0]pipe_rxprbserr;
  output [3:0]pipe_txdlysresetdone;
  output [3:0]pipe_txphaligndone;
  output [3:0]pipe_txphinitdone;
  output [11:0]pipe_rxbufstatus;
  output [31:0]pipe_dmonitorout;
  output [31:0]pipe_rxdisperr;
  output [31:0]pipe_rxnotintable;
  output pipe_rate_idle;
  output [3:0]gt_ch_drp_rdy;
  output [31:0]icap_o;
  output user_lnk_up;
  output tx_err_drop;
  output tx_cfg_req;
  output s_axis_tx_tready;
  output m_axis_rx_tvalid;
  output m_axis_rx_tlast;
  output cfg_msg_received;
  output cfg_to_turnoff;
  output pl_phy_lnk_up;
  output pl_received_hot_rst;
  output startup_cfgclk;
  output startup_cfgmclk;
  output startup_preq;
  output pcie_drp_rdy;
  output [5:0]tx_buf_av;
  output [2:0]cfg_pcie_link_state;
  output [1:0]cfg_pmcsr_powerstate;
  output [4:0]cfg_device_number;
  output [2:0]cfg_function_number;
  output [63:0]m_axis_rx_tdata;
  output [0:0]m_axis_rx_tkeep;
  output [12:0]m_axis_rx_tuser;
  output [15:0]cfg_msg_data;
  output [7:0]cfg_bus_number;
  output [15:0]pcie_drp_do;
  output cfg_mgmt_rd_wr_done;
  output cfg_err_aer_headerlog_set;
  output cfg_err_cpl_rdy;
  output cfg_interrupt_rdy;
  output cfg_received_func_lvl_rst;
  input [35:0]ext_ch_gt_drpaddr;
  input m_axis_rx_tready;
  input s_axis_tx_tvalid;
  input s_axis_tx_tlast;
  input pcie_drp_clk;
  input pl_directed_link_auton;
  input pl_directed_link_speed;
  input pl_downstream_deemph_source;
  input [127:0]cfg_err_aer_headerlog;
  input [1:0]cfg_pm_force_state;
  input [1:0]pl_directed_link_width;
  input [31:0]cfg_mgmt_di;
  input [47:0]cfg_err_tlp_cpl_header;
  input [4:0]cfg_aer_interrupt_msgnum;
  input [4:0]cfg_pciecap_interrupt_msgnum;
  input [7:0]cfg_interrupt_di;
  input [9:0]cfg_mgmt_dwaddr;
  input sys_clk;
  input [3:0]pci_exp_rxn;
  input [3:0]pci_exp_rxp;
  input pipe_rxprbscntreset;
  input [3:0]pipe_txinhibit;
  input pipe_txprbsforceerr;
  input [2:0]pipe_loopback;
  input [2:0]pipe_rxprbssel;
  input [2:0]pipe_txprbssel;
  input [3:0]int_pclk_sel_slave;
  input [63:0]ext_ch_gt_drpdi;
  input [3:0]ext_ch_gt_drpen;
  input [3:0]ext_ch_gt_drpwe;
  input sys_rst_n;
  input pipe_mmcm_rst_n;
  input icap_clk;
  input [3:0]cfg_mgmt_byte_en;
  input [63:0]s_axis_tx_tdata;
  input [3:0]s_axis_tx_tuser;
  input pl_transmit_hot_rst;
  input cfg_mgmt_wr_en;
  input cfg_mgmt_rd_en;
  input cfg_err_malformed;
  input cfg_err_cor;
  input cfg_err_ur;
  input cfg_err_ecrc;
  input cfg_err_cpl_timeout;
  input cfg_err_cpl_abort;
  input cfg_err_cpl_unexpect;
  input cfg_err_poisoned;
  input cfg_err_atomic_egress_blocked;
  input cfg_err_mc_blocked;
  input cfg_err_internal_uncor;
  input cfg_err_internal_cor;
  input cfg_interrupt;
  input cfg_pm_halt_aspm_l0s;
  input cfg_pm_halt_aspm_l1;
  input cfg_pm_force_state_en;
  input cfg_pm_wake;
  input cfg_turnoff_ok;
  input cfg_trn_pending;
  input pcie_drp_en;
  input pcie_drp_we;
  input icap_csib;
  input icap_rdwrb;
  input startup_clk;
  input startup_gsr;
  input startup_gts;
  input startup_pack;
  input startup_usrcclko;
  input startup_usrdoneo;
  input tx_cfg_gnt;
  input rx_np_ok;
  input rx_np_req;
  input [2:0]fc_sel;
  input [1:0]pl_directed_link_change;
  input pl_upstream_prefer_deemph;
  input [4:0]cfg_ds_device_number;
  input [2:0]cfg_ds_function_number;
  input startup_keyclearb;
  input startup_usrcclkts;
  input startup_usrdonets;
  input [0:0]s_axis_tx_tkeep;
  input [7:0]cfg_ds_bus_number;
  input [63:0]cfg_dsn;
  input [8:0]pcie_drp_addr;
  input [15:0]pcie_drp_di;
  input [31:0]icap_i;
  input cfg_mgmt_wr_rw1c_as_rw;
  input cfg_mgmt_wr_readonly;
  input cfg_err_posted;
  input cfg_err_locked;
  input cfg_err_norecovery;
  input cfg_interrupt_assert;
  input cfg_interrupt_stat;

  wire [0:0]\FSM_sequential_fsm_reg[2] ;
  wire INT_RXUSRCLK_OUT;
  wire INT_USERCLK1_OUT;
  wire [11:0]PIPE_DRP_FSM;
  wire [19:0]PIPE_RATE_FSM;
  wire S00;
  wire bridge_reset_int;
  wire cfg_aer_ecrc_check_en;
  wire cfg_aer_ecrc_gen_en;
  wire [4:0]cfg_aer_interrupt_msgnum;
  wire cfg_aer_rooterr_corr_err_received;
  wire cfg_aer_rooterr_corr_err_reporting_en;
  wire cfg_aer_rooterr_fatal_err_received;
  wire cfg_aer_rooterr_fatal_err_reporting_en;
  wire cfg_aer_rooterr_non_fatal_err_received;
  wire cfg_aer_rooterr_non_fatal_err_reporting_en;
  wire cfg_bridge_serr_en;
  wire [7:0]cfg_bus_number;
  wire [7:0]cfg_bus_number_mux;
  wire [4:0]cfg_command;
  wire [14:0]cfg_dcommand;
  wire [11:0]cfg_dcommand2;
  wire [4:0]cfg_device_number;
  wire [4:0]cfg_device_number_mux;
  wire [7:0]cfg_ds_bus_number;
  wire [4:0]cfg_ds_device_number;
  wire [2:0]cfg_ds_function_number;
  wire [63:0]cfg_dsn;
  wire [4:0]cfg_dstatus;
  wire [127:0]cfg_err_aer_headerlog;
  wire cfg_err_aer_headerlog_set;
  wire cfg_err_atomic_egress_blocked;
  wire cfg_err_cor;
  wire cfg_err_cpl_abort;
  wire cfg_err_cpl_rdy;
  wire cfg_err_cpl_timeout;
  wire cfg_err_cpl_unexpect;
  wire cfg_err_ecrc;
  wire cfg_err_internal_cor;
  wire cfg_err_internal_uncor;
  wire cfg_err_locked;
  wire cfg_err_malformed;
  wire cfg_err_mc_blocked;
  wire cfg_err_norecovery;
  wire cfg_err_poisoned;
  wire cfg_err_posted;
  wire [47:0]cfg_err_tlp_cpl_header;
  wire cfg_err_ur;
  wire [2:0]cfg_function_number;
  wire [2:0]cfg_function_number_mux;
  wire cfg_interrupt;
  wire cfg_interrupt_assert;
  wire [7:0]cfg_interrupt_di;
  wire [7:0]cfg_interrupt_do;
  wire [2:0]cfg_interrupt_mmenable;
  wire cfg_interrupt_msienable;
  wire cfg_interrupt_msixenable;
  wire cfg_interrupt_msixfm;
  wire cfg_interrupt_rdy;
  wire cfg_interrupt_stat;
  wire [10:0]cfg_lcommand;
  wire [9:0]cfg_lstatus;
  wire [3:0]cfg_mgmt_byte_en;
  wire [31:0]cfg_mgmt_di;
  wire [31:0]cfg_mgmt_do;
  wire [9:0]cfg_mgmt_dwaddr;
  wire cfg_mgmt_rd_en;
  wire cfg_mgmt_rd_wr_done;
  wire cfg_mgmt_wr_en;
  wire cfg_mgmt_wr_readonly;
  wire cfg_mgmt_wr_rw1c_as_rw;
  wire [15:0]cfg_msg_data;
  wire cfg_msg_received;
  wire cfg_msg_received_assert_int_a;
  wire cfg_msg_received_assert_int_b;
  wire cfg_msg_received_assert_int_c;
  wire cfg_msg_received_assert_int_d;
  wire cfg_msg_received_deassert_int_a;
  wire cfg_msg_received_deassert_int_b;
  wire cfg_msg_received_deassert_int_c;
  wire cfg_msg_received_deassert_int_d;
  wire cfg_msg_received_err_cor;
  wire cfg_msg_received_err_fatal;
  wire cfg_msg_received_err_non_fatal;
  wire cfg_msg_received_pm_as_nak;
  wire cfg_msg_received_pm_pme;
  wire cfg_msg_received_pme_to_ack;
  wire cfg_msg_received_setslotpowerlimit;
  wire [2:0]cfg_pcie_link_state;
  wire [4:0]cfg_pciecap_interrupt_msgnum;
  wire [1:0]cfg_pm_force_state;
  wire cfg_pm_force_state_en;
  wire cfg_pm_halt_aspm_l0s;
  wire cfg_pm_halt_aspm_l1;
  wire cfg_pm_wake;
  wire cfg_pmcsr_pme_en;
  wire cfg_pmcsr_pme_status;
  wire [1:0]cfg_pmcsr_powerstate;
  wire cfg_received_func_lvl_rst;
  wire cfg_root_control_pme_int_en;
  wire cfg_root_control_syserr_corr_err_en;
  wire cfg_root_control_syserr_fatal_err_en;
  wire cfg_root_control_syserr_non_fatal_err_en;
  wire cfg_slot_control_electromech_il_ctl_pulse;
  wire cfg_to_turnoff;
  wire cfg_to_turnoff_mux;
  wire cfg_trn_pending;
  wire cfg_turnoff_ok;
  wire [6:0]cfg_vc_tcvc_map;
  wire clk_100mhz;
  wire ebp_cfg_turnoff_ok;
  wire [35:0]ext_ch_gt_drpaddr;
  wire [63:0]ext_ch_gt_drpdi;
  wire [63:0]ext_ch_gt_drpdo;
  wire [3:0]ext_ch_gt_drpen;
  wire [3:0]ext_ch_gt_drprdy;
  wire [3:0]ext_ch_gt_drpwe;
  wire [11:0]fc_cpld;
  wire [7:0]fc_cplh;
  wire [11:0]fc_npd;
  wire [7:0]fc_nph;
  wire [11:0]fc_pd;
  wire [7:0]fc_ph;
  wire [2:0]fc_sel;
  wire [3:0]gt_ch_drp_rdy;
  wire gt_rx_phy_status_q;
  wire gt_rxelecidle_q;
  wire gt_top_i_n_10;
  wire gt_top_i_n_11;
  wire gt_top_i_n_136;
  wire gt_top_i_n_137;
  wire gt_top_i_n_138;
  wire gt_top_i_n_139;
  wire gt_top_i_n_140;
  wire gt_top_i_n_141;
  wire gt_top_i_n_142;
  wire gt_top_i_n_143;
  wire gt_top_i_n_144;
  wire gt_top_i_n_145;
  wire gt_top_i_n_146;
  wire gt_top_i_n_147;
  wire gt_top_i_n_424;
  wire gt_top_i_n_6;
  wire gt_top_i_n_7;
  wire gt_top_i_n_70;
  wire gt_top_i_n_8;
  wire gt_top_i_n_9;
  wire icap_clk;
  wire icap_csib;
  wire icap_csib_FPC;
  wire icap_csib_mux;
  wire icap_csib_wire;
  wire [31:0]icap_i;
  wire [31:0]icap_i_FPC;
  wire [31:0]icap_i_mux;
  wire [31:0]icap_i_wire;
  wire [31:0]icap_o;
  wire [31:0]icap_o_wire;
  wire icap_rdwrb;
  wire icap_rdwrb_FPC;
  wire icap_rdwrb_mux;
  wire icap_rdwrb_wire;
  wire int_dclk_out;
  wire int_icap_clk;
  wire int_mmcm_lock_out;
  wire [3:0]int_pclk_sel_slave;
  wire [0:0]int_qplllock_out;
  wire [0:0]int_qplloutclk_out;
  wire [0:0]int_qplloutrefclk_out;
  wire \ltssm_reg1_reg[0]_srl2_n_0 ;
  wire \ltssm_reg1_reg[1]_srl2_n_0 ;
  wire \ltssm_reg1_reg[2]_srl2_n_0 ;
  wire \ltssm_reg1_reg[3]_srl2_n_0 ;
  wire \ltssm_reg1_reg[4]_srl2_n_0 ;
  wire \ltssm_reg1_reg[5]_srl2_n_0 ;
  wire [5:0]ltssm_reg2;
  wire [63:0]m_axis_rx_tdata;
  wire [63:0]m_axis_rx_tdata_mux;
  wire [0:0]m_axis_rx_tkeep;
  wire [7:7]m_axis_rx_tkeep_mux;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tlast_mux;
  wire m_axis_rx_tready;
  wire m_axis_rx_tready_cpler;
  wire [12:0]m_axis_rx_tuser;
  wire [21:0]m_axis_rx_tuser_mux;
  wire m_axis_rx_tvalid;
  wire m_axis_rx_tvalid_mux;
  wire [1:0]out;
  wire [5:0]out0;
  wire [3:0]pci_exp_rxn;
  wire [3:0]pci_exp_rxp;
  wire [3:0]pci_exp_txn;
  wire [3:0]pci_exp_txp;
  wire pcie_block_i_i_62_n_0;
  wire pcie_block_i_i_63_n_0;
  wire pcie_block_i_i_64_n_0;
  wire pcie_block_i_i_65_n_0;
  wire [8:0]pcie_drp_addr;
  wire pcie_drp_clk;
  wire [15:0]pcie_drp_di;
  wire [15:0]pcie_drp_do;
  wire pcie_drp_en;
  wire pcie_drp_rdy;
  wire pcie_drp_we;
  wire pcie_top_i_n_19;
  wire phy_rdy_n_int;
  wire [3:0]pipe_cpll_lock;
  wire [31:0]pipe_dmonitorout;
  wire [3:0]pipe_eyescandataerror;
  wire [2:0]pipe_loopback;
  wire pipe_mmcm_rst_n;
  wire [3:0]pipe_pclk_sel_out;
  wire [2:0]pipe_qrst_fsm;
  wire pipe_qrst_idle;
  wire pipe_rate_idle;
  wire [3:0]pipe_rst_fsm;
  wire pipe_rx0_chanisaligned_gt;
  wire [1:0]pipe_rx0_char_is_k_gt;
  wire [15:0]pipe_rx0_data_gt;
  wire pipe_rx0_polarity_gt;
  wire pipe_rx0_valid_gt;
  wire pipe_rx1_chanisaligned_gt;
  wire [1:0]pipe_rx1_char_is_k_gt;
  wire [15:0]pipe_rx1_data_gt;
  wire pipe_rx1_polarity_gt;
  wire pipe_rx1_valid_gt;
  wire pipe_rx2_chanisaligned_gt;
  wire [1:0]pipe_rx2_char_is_k_gt;
  wire [15:0]pipe_rx2_data_gt;
  wire pipe_rx2_polarity_gt;
  wire pipe_rx2_valid_gt;
  wire pipe_rx3_chanisaligned_gt;
  wire [1:0]pipe_rx3_char_is_k_gt;
  wire [15:0]pipe_rx3_data_gt;
  wire pipe_rx3_polarity_gt;
  wire pipe_rx3_valid_gt;
  wire [11:0]pipe_rxbufstatus;
  wire [3:0]pipe_rxcommadet;
  wire [31:0]pipe_rxdisperr;
  wire [3:0]pipe_rxdlysresetdone;
  wire [31:0]pipe_rxnotintable;
  wire [3:0]pipe_rxoutclk_out;
  wire [3:0]pipe_rxphaligndone;
  wire pipe_rxprbscntreset;
  wire [3:0]pipe_rxprbserr;
  wire [2:0]pipe_rxprbssel;
  wire [11:0]pipe_rxstatus;
  wire [3:0]pipe_sync_fsm_rx;
  wire [1:0]pipe_tx0_char_is_k_gt;
  wire pipe_tx0_compliance_gt;
  wire [15:0]pipe_tx0_data_gt;
  wire pipe_tx0_elec_idle_gt;
  wire [1:0]pipe_tx0_powerdown_gt;
  wire [1:0]pipe_tx1_char_is_k_gt;
  wire pipe_tx1_compliance_gt;
  wire [15:0]pipe_tx1_data_gt;
  wire pipe_tx1_elec_idle_gt;
  wire [1:0]pipe_tx1_powerdown_gt;
  wire [1:0]pipe_tx2_char_is_k_gt;
  wire pipe_tx2_compliance_gt;
  wire [15:0]pipe_tx2_data_gt;
  wire pipe_tx2_elec_idle_gt;
  wire [1:0]pipe_tx2_powerdown_gt;
  wire [1:0]pipe_tx3_char_is_k_gt;
  wire pipe_tx3_compliance_gt;
  wire [15:0]pipe_tx3_data_gt;
  wire pipe_tx3_elec_idle_gt;
  wire [1:0]pipe_tx3_powerdown_gt;
  wire pipe_tx_deemph_gt;
  wire [2:0]pipe_tx_margin_gt;
  wire pipe_tx_rate_gt;
  wire pipe_tx_rcvr_det_gt;
  wire [3:0]pipe_txdlysresetdone;
  wire [3:0]pipe_txinhibit;
  wire pipe_txoutclk_out;
  wire [3:0]pipe_txphaligndone;
  wire [3:0]pipe_txphinitdone;
  wire pipe_txprbsforceerr;
  wire [2:0]pipe_txprbssel;
  wire pl_directed_change_done;
  wire pl_directed_link_auton;
  wire [1:0]pl_directed_link_change;
  wire pl_directed_link_speed;
  wire [1:0]pl_directed_link_width;
  wire pl_downstream_deemph_source;
  wire [2:0]pl_initial_link_width;
  wire [1:0]pl_lane_reversal_mode;
  wire pl_link_gen2_cap;
  wire pl_link_partner_gen2_supported;
  wire pl_link_upcfg_cap;
  wire [5:0]pl_ltssm_state;
  wire [5:0]pl_ltssm_state_int;
  wire pl_phy_lnk_up;
  wire pl_phy_lnk_up_q;
  wire pl_phy_lnk_up_sync;
  wire pl_phy_lnk_up_wire;
  wire pl_received_hot_rst;
  wire pl_received_hot_rst_q;
  wire pl_received_hot_rst_sync;
  wire pl_received_hot_rst_wire;
  wire [1:0]pl_rx_pm_state;
  wire pl_sel_lnk_rate;
  wire [1:0]pl_sel_lnk_width;
  wire pl_transmit_hot_rst;
  wire [2:0]pl_tx_pm_state;
  wire pl_upstream_prefer_deemph;
  wire rate_gen3_reg1_reg;
  wire rx_np_ok;
  wire rx_np_req;
  wire [63:0]s_axis_tx_tdata;
  wire [63:0]s_axis_tx_tdata_cpler;
  wire [0:0]s_axis_tx_tkeep;
  wire [7:0]s_axis_tx_tkeep_cpler;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tlast_cpler;
  wire s_axis_tx_tready;
  wire s_axis_tx_tready_mux;
  wire [3:0]s_axis_tx_tuser;
  wire [3:0]s_axis_tx_tuser_cpler;
  wire s_axis_tx_tvalid;
  wire s_axis_tx_tvalid_cpler;
  wire startup_cfgclk;
  wire startup_cfgmclk;
  wire startup_clk;
  wire startup_eos;
  wire startup_gsr;
  wire startup_gts;
  wire startup_keyclearb;
  wire startup_pack;
  wire startup_preq;
  wire startup_usrcclko;
  wire startup_usrcclkts;
  wire startup_usrdoneo;
  wire startup_usrdonets;
  (* DONT_TOUCH *) wire store_ltssm;
  wire sys_clk;
  wire sys_or_hot_rst;
  wire sys_rst_n;
  wire trn_lnk_up;
  wire [5:0]tx_buf_av;
  wire tx_cfg_gnt;
  wire tx_cfg_req;
  wire tx_err_drop;
  wire [5:0]\txsync_fsm.txdlyen_reg ;
  wire [5:0]\txsync_fsm.txsync_done_reg ;
  wire [5:0]\txsync_fsm.txsync_done_reg_0 ;
  wire user_app_rdy;
  wire user_app_rdy_req;
  wire user_lnk_up;
  (* ASYNC_REG = "true" *) (* RTL_KEEP = "true" *) wire user_lnk_up_int;
  (* ASYNC_REG = "true" *) wire user_lnk_up_mux;
  wire user_reset_out;
  wire NLW_pr_loader_i_pr_done_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* DONT_TOUCH *) 
  ICAPE2 #(
    .DEVICE_ID(32'h04244093),
    .ICAP_WIDTH("X32"),
    .SIM_CFG_FILE_NAME("NONE")) 
    ICAPE2_inst
       (.CLK(int_icap_clk),
        .CSIB(icap_csib_wire),
        .I(icap_i_wire),
        .O(icap_o_wire),
        .RDWRB(icap_rdwrb_wire));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_dstatus[5]_INST_0 
       (.I0(user_app_rdy),
        .I1(cfg_trn_pending),
        .O(cfg_dstatus[4]));
  pcie_7x_0_pcie_7x_0_gt_top gt_top_i
       (.D(pipe_rx0_char_is_k_gt),
        .INT_CLK_100MHZ(clk_100mhz),
        .INT_DCLK_OUT(int_dclk_out),
        .INT_MMCM_LOCK_OUT(int_mmcm_lock_out),
        .INT_RXUSRCLK_OUT(INT_RXUSRCLK_OUT),
        .INT_USERCLK1_OUT(INT_USERCLK1_OUT),
        .PIPE_CPLL_LOCK(pipe_cpll_lock),
        .PIPE_POWERDOWN({pipe_tx3_powerdown_gt,pipe_tx2_powerdown_gt,pipe_tx1_powerdown_gt,pipe_tx0_powerdown_gt}),
        .PIPE_QRST_FSM(\FSM_sequential_fsm_reg[2] ),
        .PIPE_RXCHANISALIGNED({pipe_rx3_chanisaligned_gt,pipe_rx2_chanisaligned_gt,pipe_rx1_chanisaligned_gt,pipe_rx0_chanisaligned_gt}),
        .PIPE_RXPHALIGNDONE(pipe_rxphaligndone),
        .PIPE_RXPOLARITY({pipe_rx3_polarity_gt,pipe_rx2_polarity_gt,pipe_rx1_polarity_gt,pipe_rx0_polarity_gt}),
        .PIPE_SYNC_FSM_TX({\txsync_fsm.txsync_done_reg_0 ,\txsync_fsm.txsync_done_reg ,out0,\txsync_fsm.txdlyen_reg }),
        .PIPE_TXCOMPLIANCE({pipe_tx3_compliance_gt,pipe_tx2_compliance_gt,pipe_tx1_compliance_gt,pipe_tx0_compliance_gt}),
        .PIPE_TXDATA({pipe_tx3_data_gt,pipe_tx2_data_gt,pipe_tx1_data_gt,pipe_tx0_data_gt}),
        .PIPE_TXDATAK({pipe_tx3_char_is_k_gt,pipe_tx2_char_is_k_gt,pipe_tx1_char_is_k_gt,pipe_tx0_char_is_k_gt}),
        .PIPE_TXELECIDLE({pipe_tx3_elec_idle_gt,pipe_tx2_elec_idle_gt,pipe_tx1_elec_idle_gt,pipe_tx0_elec_idle_gt}),
        .Q(PIPE_RATE_FSM[4:0]),
        .QPLL_QPLLLOCK(int_qplllock_out),
        .QPLL_QPLLOUTCLK(int_qplloutclk_out),
        .QPLL_QPLLOUTREFCLK(int_qplloutrefclk_out),
        .USER_RATE_GEN3(rate_gen3_reg1_reg),
        .ext_ch_gt_drpaddr(ext_ch_gt_drpaddr),
        .ext_ch_gt_drpdi(ext_ch_gt_drpdi),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo),
        .ext_ch_gt_drpen(ext_ch_gt_drpen),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy),
        .ext_ch_gt_drpwe(ext_ch_gt_drpwe),
        .\fsm_reg[4] (PIPE_RATE_FSM[9:5]),
        .\fsm_reg[4]_0 (PIPE_RATE_FSM[14:10]),
        .\fsm_reg[4]_1 (PIPE_RATE_FSM[19:15]),
        .gt_ch_drp_rdy(gt_ch_drp_rdy),
        .gt_rx_phy_status_q(gt_rx_phy_status_q),
        .gt_rxelecidle_q(gt_rxelecidle_q),
        .\index_reg[2] (PIPE_DRP_FSM[2:0]),
        .\index_reg[2]_0 (PIPE_DRP_FSM[5:3]),
        .\index_reg[2]_1 (PIPE_DRP_FSM[8:6]),
        .\index_reg[2]_2 (PIPE_DRP_FSM[11:9]),
        .int_pclk_sel_slave(int_pclk_sel_slave),
        .out(out),
        .pci_exp_rxn(pci_exp_rxn),
        .pci_exp_rxp(pci_exp_rxp),
        .pci_exp_txn(pci_exp_txn),
        .pci_exp_txp(pci_exp_txp),
        .pclk_sel_reg1_reg(pipe_pclk_sel_out),
        .phy_rdy_n_int(phy_rdy_n_int),
        .pipe_dmonitorout(pipe_dmonitorout),
        .pipe_eyescandataerror(pipe_eyescandataerror),
        .pipe_loopback(pipe_loopback),
        .pipe_mmcm_rst_n(pipe_mmcm_rst_n),
        .pipe_qrst_fsm(pipe_qrst_fsm),
        .pipe_qrst_idle(pipe_qrst_idle),
        .pipe_rate_idle(pipe_rate_idle),
        .pipe_rst_fsm(pipe_rst_fsm),
        .pipe_rx0_valid_gt(pipe_rx0_valid_gt),
        .pipe_rx1_valid_gt(pipe_rx1_valid_gt),
        .pipe_rx2_valid_gt(pipe_rx2_valid_gt),
        .pipe_rx3_valid_gt(pipe_rx3_valid_gt),
        .pipe_rxbufstatus(pipe_rxbufstatus),
        .pipe_rxcommadet(pipe_rxcommadet),
        .pipe_rxdisperr(pipe_rxdisperr),
        .pipe_rxdlysresetdone(pipe_rxdlysresetdone),
        .pipe_rxnotintable(pipe_rxnotintable),
        .pipe_rxoutclk_out(pipe_rxoutclk_out),
        .pipe_rxprbscntreset(pipe_rxprbscntreset),
        .pipe_rxprbserr(pipe_rxprbserr),
        .pipe_rxprbssel(pipe_rxprbssel),
        .pipe_rxstatus(pipe_rxstatus),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] (pipe_rx1_char_is_k_gt),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 (pipe_rx2_char_is_k_gt),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 (pipe_rx3_char_is_k_gt),
        .\pipe_stages_1.pipe_rx_data_q_reg[15] (pipe_rx0_data_gt),
        .\pipe_stages_1.pipe_rx_data_q_reg[15]_0 (pipe_rx1_data_gt),
        .\pipe_stages_1.pipe_rx_data_q_reg[15]_1 (pipe_rx2_data_gt),
        .\pipe_stages_1.pipe_rx_data_q_reg[15]_2 (pipe_rx3_data_gt),
        .\pipe_stages_1.pipe_rx_elec_idle_q_reg (gt_top_i_n_7),
        .\pipe_stages_1.pipe_rx_elec_idle_q_reg_0 (gt_top_i_n_9),
        .\pipe_stages_1.pipe_rx_elec_idle_q_reg_1 (gt_top_i_n_11),
        .\pipe_stages_1.pipe_rx_phy_status_q_reg (gt_top_i_n_6),
        .\pipe_stages_1.pipe_rx_phy_status_q_reg_0 (gt_top_i_n_8),
        .\pipe_stages_1.pipe_rx_phy_status_q_reg_1 (gt_top_i_n_10),
        .\pipe_stages_1.pipe_rx_status_q_reg[2] ({gt_top_i_n_136,gt_top_i_n_137,gt_top_i_n_138}),
        .\pipe_stages_1.pipe_rx_status_q_reg[2]_0 ({gt_top_i_n_139,gt_top_i_n_140,gt_top_i_n_141}),
        .\pipe_stages_1.pipe_rx_status_q_reg[2]_1 ({gt_top_i_n_142,gt_top_i_n_143,gt_top_i_n_144}),
        .\pipe_stages_1.pipe_rx_status_q_reg[2]_2 ({gt_top_i_n_145,gt_top_i_n_146,gt_top_i_n_147}),
        .\pipe_stages_1.pipe_tx_margin_q_reg[2] (pipe_tx_margin_gt),
        .\pipe_stages_1.pipe_tx_rate_q_reg (pipe_tx_rate_gt),
        .pipe_sync_fsm_rx(pipe_sync_fsm_rx),
        .pipe_tx_deemph_gt(pipe_tx_deemph_gt),
        .pipe_tx_rcvr_det_gt(pipe_tx_rcvr_det_gt),
        .pipe_txdlysresetdone(pipe_txdlysresetdone),
        .pipe_txinhibit(pipe_txinhibit),
        .pipe_txoutclk_out(pipe_txoutclk_out),
        .pipe_txphaligndone(pipe_txphaligndone),
        .pipe_txphinitdone(pipe_txphinitdone),
        .pipe_txprbsforceerr(pipe_txprbsforceerr),
        .pipe_txprbssel(pipe_txprbssel),
        .pl_ltssm_state(pl_ltssm_state_int),
        .reset_n_reg1_reg(gt_top_i_n_424),
        .sys_clk(sys_clk),
        .sys_rst_n(gt_top_i_n_70),
        .sys_rst_n_0(sys_rst_n));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFGCTRL #(
    .INIT_OUT(0),
    .IS_CE0_INVERTED(1'b0),
    .IS_CE1_INVERTED(1'b0),
    .IS_I0_INVERTED(1'b0),
    .IS_I1_INVERTED(1'b0),
    .IS_IGNORE0_INVERTED(1'b0),
    .IS_IGNORE1_INVERTED(1'b0),
    .IS_S0_INVERTED(1'b0),
    .IS_S1_INVERTED(1'b0),
    .PRESELECT_I0("FALSE"),
    .PRESELECT_I1("FALSE")) 
    icap_clock_bufg
       (.CE0(1'b1),
        .CE1(1'b1),
        .I0(clk_100mhz),
        .I1(icap_clk),
        .IGNORE0(1'b0),
        .IGNORE1(1'b0),
        .O(int_icap_clk),
        .S0(S00),
        .S1(user_app_rdy));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT1 #(
    .INIT(2'h1)) 
    icap_clock_bufg_i_1
       (.I0(user_app_rdy),
        .O(S00));
  (* DONT_TOUCH *) 
  (* ICAP_WIDTH = "32" *) 
  (* TCQ = "1" *) 
  pcie_7x_0_pcie_7x_0_icap_pipeline icap_pipeline_i
       (.CLK(int_icap_clk),
        .CSIB_IN(icap_csib_mux),
        .CSIB_OUT(icap_csib_wire),
        .I_IN(icap_i_mux),
        .I_OUT(icap_i_wire),
        .O_IN(icap_o_wire),
        .O_OUT(icap_o),
        .RDWRB_IN(icap_rdwrb_mux),
        .RDWRB_OUT(icap_rdwrb_wire),
        .RST_N(sys_rst_n));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_1
       (.I0(icap_csib),
        .I1(user_app_rdy),
        .I2(icap_csib_FPC),
        .O(icap_csib_mux));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_10
       (.I0(icap_i[24]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[24]),
        .O(icap_i_mux[24]));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_11
       (.I0(icap_i[23]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[23]),
        .O(icap_i_mux[23]));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_12
       (.I0(icap_i[22]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[22]),
        .O(icap_i_mux[22]));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_13
       (.I0(icap_i[21]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[21]),
        .O(icap_i_mux[21]));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_14
       (.I0(icap_i[20]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[20]),
        .O(icap_i_mux[20]));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_15
       (.I0(icap_i[19]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[19]),
        .O(icap_i_mux[19]));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_16
       (.I0(icap_i[18]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[18]),
        .O(icap_i_mux[18]));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_17
       (.I0(icap_i[17]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[17]),
        .O(icap_i_mux[17]));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_18
       (.I0(icap_i[16]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[16]),
        .O(icap_i_mux[16]));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_19
       (.I0(icap_i[15]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[15]),
        .O(icap_i_mux[15]));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_2
       (.I0(icap_rdwrb),
        .I1(user_app_rdy),
        .I2(icap_rdwrb_FPC),
        .O(icap_rdwrb_mux));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_20
       (.I0(icap_i[14]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[14]),
        .O(icap_i_mux[14]));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_21
       (.I0(icap_i[13]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[13]),
        .O(icap_i_mux[13]));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_22
       (.I0(icap_i[12]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[12]),
        .O(icap_i_mux[12]));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_23
       (.I0(icap_i[11]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[11]),
        .O(icap_i_mux[11]));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_24
       (.I0(icap_i[10]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[10]),
        .O(icap_i_mux[10]));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_25
       (.I0(icap_i[9]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[9]),
        .O(icap_i_mux[9]));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_26
       (.I0(icap_i[8]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[8]),
        .O(icap_i_mux[8]));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_27
       (.I0(icap_i[7]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[7]),
        .O(icap_i_mux[7]));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_28
       (.I0(icap_i[6]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[6]),
        .O(icap_i_mux[6]));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_29
       (.I0(icap_i[5]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[5]),
        .O(icap_i_mux[5]));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_3
       (.I0(icap_i[31]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[31]),
        .O(icap_i_mux[31]));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_30
       (.I0(icap_i[4]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[4]),
        .O(icap_i_mux[4]));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_31
       (.I0(icap_i[3]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[3]),
        .O(icap_i_mux[3]));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_32
       (.I0(icap_i[2]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[2]),
        .O(icap_i_mux[2]));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_33
       (.I0(icap_i[1]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[1]),
        .O(icap_i_mux[1]));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_34
       (.I0(icap_i[0]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[0]),
        .O(icap_i_mux[0]));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_4
       (.I0(icap_i[30]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[30]),
        .O(icap_i_mux[30]));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_5
       (.I0(icap_i[29]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[29]),
        .O(icap_i_mux[29]));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_6
       (.I0(icap_i[28]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[28]),
        .O(icap_i_mux[28]));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_7
       (.I0(icap_i[27]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[27]),
        .O(icap_i_mux[27]));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_8
       (.I0(icap_i[26]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[26]),
        .O(icap_i_mux[26]));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    icap_pipeline_i_i_9
       (.I0(icap_i[25]),
        .I1(user_app_rdy),
        .I2(icap_i_FPC[25]),
        .O(icap_i_mux[25]));
  (* srl_bus_name = "U0/\inst/ltssm_reg1_reg " *) 
  (* srl_name = "U0/\inst/ltssm_reg1_reg[0]_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ltssm_reg1_reg[0]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(INT_RXUSRCLK_OUT),
        .D(pl_ltssm_state[0]),
        .Q(\ltssm_reg1_reg[0]_srl2_n_0 ));
  (* srl_bus_name = "U0/\inst/ltssm_reg1_reg " *) 
  (* srl_name = "U0/\inst/ltssm_reg1_reg[1]_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ltssm_reg1_reg[1]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(INT_RXUSRCLK_OUT),
        .D(pl_ltssm_state[1]),
        .Q(\ltssm_reg1_reg[1]_srl2_n_0 ));
  (* srl_bus_name = "U0/\inst/ltssm_reg1_reg " *) 
  (* srl_name = "U0/\inst/ltssm_reg1_reg[2]_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ltssm_reg1_reg[2]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(INT_RXUSRCLK_OUT),
        .D(pl_ltssm_state[2]),
        .Q(\ltssm_reg1_reg[2]_srl2_n_0 ));
  (* srl_bus_name = "U0/\inst/ltssm_reg1_reg " *) 
  (* srl_name = "U0/\inst/ltssm_reg1_reg[3]_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ltssm_reg1_reg[3]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(INT_RXUSRCLK_OUT),
        .D(pl_ltssm_state[3]),
        .Q(\ltssm_reg1_reg[3]_srl2_n_0 ));
  (* srl_bus_name = "U0/\inst/ltssm_reg1_reg " *) 
  (* srl_name = "U0/\inst/ltssm_reg1_reg[4]_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ltssm_reg1_reg[4]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(INT_RXUSRCLK_OUT),
        .D(pl_ltssm_state[4]),
        .Q(\ltssm_reg1_reg[4]_srl2_n_0 ));
  (* srl_bus_name = "U0/\inst/ltssm_reg1_reg " *) 
  (* srl_name = "U0/\inst/ltssm_reg1_reg[5]_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ltssm_reg1_reg[5]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(INT_RXUSRCLK_OUT),
        .D(pl_ltssm_state[5]),
        .Q(\ltssm_reg1_reg[5]_srl2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ltssm_reg2_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\ltssm_reg1_reg[0]_srl2_n_0 ),
        .Q(ltssm_reg2[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ltssm_reg2_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\ltssm_reg1_reg[1]_srl2_n_0 ),
        .Q(ltssm_reg2[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ltssm_reg2_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\ltssm_reg1_reg[2]_srl2_n_0 ),
        .Q(ltssm_reg2[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ltssm_reg2_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\ltssm_reg1_reg[3]_srl2_n_0 ),
        .Q(ltssm_reg2[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ltssm_reg2_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\ltssm_reg1_reg[4]_srl2_n_0 ),
        .Q(ltssm_reg2[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ltssm_reg2_reg[5] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\ltssm_reg1_reg[5]_srl2_n_0 ),
        .Q(ltssm_reg2[5]),
        .R(1'b0));
  pcie_7x_0_pcie_7x_0_fast_cfg_init_cntr pcie_7x_0_fast_cfg_init_cntr_i
       (.out(user_app_rdy_req),
        .startup_cfgclk(startup_cfgclk),
        .startup_cfgmclk(startup_cfgmclk),
        .startup_clk(startup_clk),
        .startup_eos(startup_eos),
        .startup_gsr(startup_gsr),
        .startup_gts(startup_gts),
        .startup_keyclearb(startup_keyclearb),
        .startup_pack(startup_pack),
        .startup_preq(startup_preq),
        .startup_usrcclko(startup_usrcclko),
        .startup_usrcclkts(startup_usrcclkts),
        .startup_usrdoneo(startup_usrdoneo),
        .startup_usrdonets(startup_usrdonets),
        .user_app_rdy_gnt(user_app_rdy),
        .user_clk(INT_USERCLK1_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_62
       (.I0(cfg_mgmt_byte_en[3]),
        .O(pcie_block_i_i_62_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_63
       (.I0(cfg_mgmt_byte_en[2]),
        .O(pcie_block_i_i_63_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_64
       (.I0(cfg_mgmt_byte_en[1]),
        .O(pcie_block_i_i_64_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_65
       (.I0(cfg_mgmt_byte_en[0]),
        .O(pcie_block_i_i_65_n_0));
  pcie_7x_0_pcie_7x_0_pcie_top pcie_top_i
       (.CLK(INT_RXUSRCLK_OUT),
        .D(pipe_rx1_char_is_k_gt),
        .PIPE_POWERDOWN({pipe_tx3_powerdown_gt,pipe_tx2_powerdown_gt,pipe_tx1_powerdown_gt,pipe_tx0_powerdown_gt}),
        .PIPE_RXCHANISALIGNED({pipe_rx3_chanisaligned_gt,pipe_rx2_chanisaligned_gt,pipe_rx1_chanisaligned_gt,pipe_rx0_chanisaligned_gt}),
        .PIPE_RXPOLARITY({pipe_rx3_polarity_gt,pipe_rx2_polarity_gt,pipe_rx1_polarity_gt,pipe_rx0_polarity_gt}),
        .PIPE_TXCOMPLIANCE({pipe_tx3_compliance_gt,pipe_tx2_compliance_gt,pipe_tx1_compliance_gt,pipe_tx0_compliance_gt}),
        .PIPE_TXDATA({pipe_tx3_data_gt,pipe_tx2_data_gt,pipe_tx1_data_gt,pipe_tx0_data_gt}),
        .PIPE_TXDATAK({pipe_tx3_char_is_k_gt,pipe_tx2_char_is_k_gt,pipe_tx1_char_is_k_gt,pipe_tx0_char_is_k_gt}),
        .PIPE_TXELECIDLE({pipe_tx3_elec_idle_gt,pipe_tx2_elec_idle_gt,pipe_tx1_elec_idle_gt,pipe_tx0_elec_idle_gt}),
        .Q(m_axis_rx_tdata_mux),
        .SR(user_reset_out),
        .UNCONN_IN(s_axis_tx_tuser_cpler),
        .bridge_reset_int(bridge_reset_int),
        .cfg_aer_ecrc_check_en(cfg_aer_ecrc_check_en),
        .cfg_aer_ecrc_gen_en(cfg_aer_ecrc_gen_en),
        .cfg_aer_interrupt_msgnum(cfg_aer_interrupt_msgnum),
        .cfg_aer_rooterr_corr_err_received(cfg_aer_rooterr_corr_err_received),
        .cfg_aer_rooterr_corr_err_reporting_en(cfg_aer_rooterr_corr_err_reporting_en),
        .cfg_aer_rooterr_fatal_err_received(cfg_aer_rooterr_fatal_err_received),
        .cfg_aer_rooterr_fatal_err_reporting_en(cfg_aer_rooterr_fatal_err_reporting_en),
        .cfg_aer_rooterr_non_fatal_err_received(cfg_aer_rooterr_non_fatal_err_received),
        .cfg_aer_rooterr_non_fatal_err_reporting_en(cfg_aer_rooterr_non_fatal_err_reporting_en),
        .cfg_bridge_serr_en(cfg_bridge_serr_en),
        .cfg_bus_number(cfg_bus_number),
        .cfg_command(cfg_command),
        .cfg_dcommand(cfg_dcommand),
        .cfg_dcommand2(cfg_dcommand2),
        .cfg_device_number(cfg_device_number),
        .cfg_ds_bus_number(cfg_ds_bus_number),
        .cfg_ds_device_number(cfg_ds_device_number),
        .cfg_ds_function_number(cfg_ds_function_number),
        .cfg_dsn(cfg_dsn),
        .cfg_dstatus(cfg_dstatus[3:0]),
        .cfg_err_aer_headerlog(cfg_err_aer_headerlog),
        .cfg_err_aer_headerlog_set(cfg_err_aer_headerlog_set),
        .cfg_err_atomic_egress_blocked(cfg_err_atomic_egress_blocked),
        .cfg_err_cor(cfg_err_cor),
        .cfg_err_cpl_abort(cfg_err_cpl_abort),
        .cfg_err_cpl_rdy(cfg_err_cpl_rdy),
        .cfg_err_cpl_timeout(cfg_err_cpl_timeout),
        .cfg_err_cpl_unexpect(cfg_err_cpl_unexpect),
        .cfg_err_ecrc(cfg_err_ecrc),
        .cfg_err_internal_cor(cfg_err_internal_cor),
        .cfg_err_internal_uncor(cfg_err_internal_uncor),
        .cfg_err_locked(cfg_err_locked),
        .cfg_err_malformed(cfg_err_malformed),
        .cfg_err_mc_blocked(cfg_err_mc_blocked),
        .cfg_err_norecovery(cfg_err_norecovery),
        .cfg_err_poisoned(cfg_err_poisoned),
        .cfg_err_posted(cfg_err_posted),
        .cfg_err_tlp_cpl_header(cfg_err_tlp_cpl_header),
        .cfg_err_ur(cfg_err_ur),
        .cfg_function_number(cfg_function_number),
        .cfg_interrupt(cfg_interrupt),
        .cfg_interrupt_assert(cfg_interrupt_assert),
        .cfg_interrupt_di(cfg_interrupt_di),
        .cfg_interrupt_do(cfg_interrupt_do),
        .cfg_interrupt_mmenable(cfg_interrupt_mmenable),
        .cfg_interrupt_msienable(cfg_interrupt_msienable),
        .cfg_interrupt_msixenable(cfg_interrupt_msixenable),
        .cfg_interrupt_msixfm(cfg_interrupt_msixfm),
        .cfg_interrupt_rdy(cfg_interrupt_rdy),
        .cfg_interrupt_stat(cfg_interrupt_stat),
        .cfg_lcommand(cfg_lcommand),
        .cfg_lstatus(cfg_lstatus),
        .cfg_mgmt_byte_en_n({pcie_block_i_i_62_n_0,pcie_block_i_i_63_n_0,pcie_block_i_i_64_n_0,pcie_block_i_i_65_n_0}),
        .cfg_mgmt_di(cfg_mgmt_di),
        .cfg_mgmt_do(cfg_mgmt_do),
        .cfg_mgmt_dwaddr(cfg_mgmt_dwaddr),
        .cfg_mgmt_rd_en(cfg_mgmt_rd_en),
        .cfg_mgmt_rd_wr_done(cfg_mgmt_rd_wr_done),
        .cfg_mgmt_wr_en(cfg_mgmt_wr_en),
        .cfg_mgmt_wr_readonly(cfg_mgmt_wr_readonly),
        .cfg_mgmt_wr_rw1c_as_rw(cfg_mgmt_wr_rw1c_as_rw),
        .cfg_msg_data(cfg_msg_data),
        .cfg_msg_received(cfg_msg_received),
        .cfg_msg_received_assert_int_a(cfg_msg_received_assert_int_a),
        .cfg_msg_received_assert_int_b(cfg_msg_received_assert_int_b),
        .cfg_msg_received_assert_int_c(cfg_msg_received_assert_int_c),
        .cfg_msg_received_assert_int_d(cfg_msg_received_assert_int_d),
        .cfg_msg_received_deassert_int_a(cfg_msg_received_deassert_int_a),
        .cfg_msg_received_deassert_int_b(cfg_msg_received_deassert_int_b),
        .cfg_msg_received_deassert_int_c(cfg_msg_received_deassert_int_c),
        .cfg_msg_received_deassert_int_d(cfg_msg_received_deassert_int_d),
        .cfg_msg_received_err_cor(cfg_msg_received_err_cor),
        .cfg_msg_received_err_fatal(cfg_msg_received_err_fatal),
        .cfg_msg_received_err_non_fatal(cfg_msg_received_err_non_fatal),
        .cfg_msg_received_pm_as_nak(cfg_msg_received_pm_as_nak),
        .cfg_msg_received_pm_pme(cfg_msg_received_pm_pme),
        .cfg_msg_received_pme_to(cfg_to_turnoff_mux),
        .cfg_msg_received_pme_to_ack(cfg_msg_received_pme_to_ack),
        .cfg_msg_received_setslotpowerlimit(cfg_msg_received_setslotpowerlimit),
        .cfg_pcie_link_state(cfg_pcie_link_state),
        .cfg_pciecap_interrupt_msgnum(cfg_pciecap_interrupt_msgnum),
        .cfg_pm_force_state(cfg_pm_force_state),
        .cfg_pm_force_state_en(cfg_pm_force_state_en),
        .cfg_pm_halt_aspm_l0s(cfg_pm_halt_aspm_l0s),
        .cfg_pm_halt_aspm_l1(cfg_pm_halt_aspm_l1),
        .cfg_pm_wake(cfg_pm_wake),
        .cfg_pmcsr_pme_en(cfg_pmcsr_pme_en),
        .cfg_pmcsr_pme_status(cfg_pmcsr_pme_status),
        .cfg_pmcsr_powerstate(cfg_pmcsr_powerstate),
        .cfg_received_func_lvl_rst(cfg_received_func_lvl_rst),
        .cfg_root_control_pme_int_en(cfg_root_control_pme_int_en),
        .cfg_root_control_syserr_corr_err_en(cfg_root_control_syserr_corr_err_en),
        .cfg_root_control_syserr_fatal_err_en(cfg_root_control_syserr_fatal_err_en),
        .cfg_root_control_syserr_non_fatal_err_en(cfg_root_control_syserr_non_fatal_err_en),
        .cfg_slot_control_electromech_il_ctl_pulse(cfg_slot_control_electromech_il_ctl_pulse),
        .cfg_to_turnoff(cfg_to_turnoff),
        .cfg_trn_pending(cfg_trn_pending),
        .cfg_turnoff_ok(cfg_turnoff_ok),
        .cfg_turnoff_ok_reg(ebp_cfg_turnoff_ok),
        .cfg_vc_tcvc_map(cfg_vc_tcvc_map),
        .\cplllock_reg1_reg[3] (pipe_tx_margin_gt),
        .fc_cpld(fc_cpld),
        .fc_cplh(fc_cplh),
        .fc_npd(fc_npd),
        .fc_nph(fc_nph),
        .fc_pd(fc_pd),
        .fc_ph(fc_ph),
        .fc_sel(fc_sel),
        .\gen_cpl_64.s_axis_tx_tdata_reg[50] (cfg_function_number_mux),
        .\gen_cpl_64.s_axis_tx_tdata_reg[55] (cfg_device_number_mux),
        .\gen_cpl_64.s_axis_tx_tdata_reg[63] (cfg_bus_number_mux),
        .\gen_cpl_64.s_axis_tx_tdata_reg[63]_0 (s_axis_tx_tdata_cpler),
        .\gen_cpl_64.s_axis_tx_tkeep_reg[7] (s_axis_tx_tkeep_cpler[7]),
        .gt_rx_phy_status_q(gt_rx_phy_status_q),
        .gt_rx_phy_status_q_reg(gt_top_i_n_6),
        .gt_rx_phy_status_q_reg_0(gt_top_i_n_8),
        .gt_rx_phy_status_q_reg_1(gt_top_i_n_10),
        .\gt_rx_status_q_reg[2] ({gt_top_i_n_136,gt_top_i_n_137,gt_top_i_n_138}),
        .\gt_rx_status_q_reg[2]_0 ({gt_top_i_n_139,gt_top_i_n_140,gt_top_i_n_141}),
        .\gt_rx_status_q_reg[2]_1 ({gt_top_i_n_142,gt_top_i_n_143,gt_top_i_n_144}),
        .\gt_rx_status_q_reg[2]_2 ({gt_top_i_n_145,gt_top_i_n_146,gt_top_i_n_147}),
        .\gt_rxcharisk_q_reg[1] (pipe_rx2_char_is_k_gt),
        .\gt_rxcharisk_q_reg[1]_0 (pipe_rx3_char_is_k_gt),
        .\gt_rxcharisk_q_reg[1]_1 (pipe_rx0_char_is_k_gt),
        .\gt_rxdata_q_reg[15] (pipe_rx1_data_gt),
        .\gt_rxdata_q_reg[15]_0 (pipe_rx2_data_gt),
        .\gt_rxdata_q_reg[15]_1 (pipe_rx3_data_gt),
        .\gt_rxdata_q_reg[15]_2 (pipe_rx0_data_gt),
        .gt_rxelecidle_q(gt_rxelecidle_q),
        .gt_rxelecidle_q_reg(gt_top_i_n_7),
        .gt_rxelecidle_q_reg_0(gt_top_i_n_9),
        .gt_rxelecidle_q_reg_1(gt_top_i_n_11),
        .in0(store_ltssm),
        .ltssm_reg2(ltssm_reg2),
        .\ltssm_reg2_reg[5] (pl_ltssm_state),
        .m_axis_rx_tdata(m_axis_rx_tdata),
        .m_axis_rx_tkeep(m_axis_rx_tkeep_mux),
        .\m_axis_rx_tkeep[7] (m_axis_rx_tkeep),
        .m_axis_rx_tlast(m_axis_rx_tlast_mux),
        .m_axis_rx_tlast_0(m_axis_rx_tlast),
        .m_axis_rx_tready(m_axis_rx_tready),
        .m_axis_rx_tuser(m_axis_rx_tuser),
        .m_axis_rx_tuser_mux({m_axis_rx_tuser_mux[21],m_axis_rx_tuser_mux[19:18],m_axis_rx_tuser_mux[14],m_axis_rx_tuser_mux[8:0]}),
        .m_axis_rx_tvalid(m_axis_rx_tvalid),
        .m_axis_rx_tvalid_mux(m_axis_rx_tvalid_mux),
        .out(user_lnk_up_mux),
        .pcie_drp_addr(pcie_drp_addr),
        .pcie_drp_clk(pcie_drp_clk),
        .pcie_drp_di(pcie_drp_di),
        .pcie_drp_do(pcie_drp_do),
        .pcie_drp_en(pcie_drp_en),
        .pcie_drp_rdy(pcie_drp_rdy),
        .pcie_drp_we(pcie_drp_we),
        .phy_rdy_n_int_reg(phy_rdy_n_int),
        .\pio_rx_sm_64.m_axis_rx_tready_reg (m_axis_rx_tready_cpler),
        .pipe_rx0_valid_gt(pipe_rx0_valid_gt),
        .pipe_rx1_valid_gt(pipe_rx1_valid_gt),
        .pipe_rx2_valid_gt(pipe_rx2_valid_gt),
        .pipe_rx3_valid_gt(pipe_rx3_valid_gt),
        .pipe_tx_deemph_gt(pipe_tx_deemph_gt),
        .pipe_tx_rcvr_det_gt(pipe_tx_rcvr_det_gt),
        .pl_directed_change_done(pl_directed_change_done),
        .pl_directed_link_auton(pl_directed_link_auton),
        .pl_directed_link_change(pl_directed_link_change),
        .pl_directed_link_speed(pl_directed_link_speed),
        .pl_directed_link_width(pl_directed_link_width),
        .pl_downstream_deemph_source(pl_downstream_deemph_source),
        .pl_initial_link_width(pl_initial_link_width),
        .pl_lane_reversal_mode(pl_lane_reversal_mode),
        .pl_link_gen2_cap(pl_link_gen2_cap),
        .pl_link_partner_gen2_supported(pl_link_partner_gen2_supported),
        .pl_link_upcfg_cap(pl_link_upcfg_cap),
        .pl_ltssm_state(pl_ltssm_state_int),
        .pl_phy_lnk_up_q(pl_phy_lnk_up_q),
        .pl_received_hot_rst(pl_received_hot_rst_wire),
        .pl_rx_pm_state(pl_rx_pm_state),
        .pl_sel_lnk_rate(pl_sel_lnk_rate),
        .pl_sel_lnk_width(pl_sel_lnk_width),
        .pl_transmit_hot_rst(pl_transmit_hot_rst),
        .pl_tx_pm_state(pl_tx_pm_state),
        .pl_upstream_prefer_deemph(pl_upstream_prefer_deemph),
        .\rate_reg1_reg[0] (pipe_tx_rate_gt),
        .rx_np_ok(rx_np_ok),
        .rx_np_req(rx_np_req),
        .s_axis_tx_tdata(s_axis_tx_tdata),
        .s_axis_tx_tkeep(s_axis_tx_tkeep),
        .s_axis_tx_tlast(s_axis_tx_tlast_cpler),
        .s_axis_tx_tlast_0(s_axis_tx_tlast),
        .s_axis_tx_tready(s_axis_tx_tready),
        .s_axis_tx_tready_mux(s_axis_tx_tready_mux),
        .s_axis_tx_tuser(s_axis_tx_tuser),
        .s_axis_tx_tvalid(s_axis_tx_tvalid_cpler),
        .s_axis_tx_tvalid_0(s_axis_tx_tvalid),
        .src_in(pl_phy_lnk_up_wire),
        .sys_rst_n(gt_top_i_n_70),
        .trn_lnk_up(trn_lnk_up),
        .tx_buf_av(tx_buf_av),
        .tx_cfg_gnt(tx_cfg_gnt),
        .tx_cfg_req(tx_cfg_req),
        .tx_err_drop(tx_err_drop),
        .user_app_rdy_gnt(user_app_rdy),
        .user_clk(INT_USERCLK1_OUT),
        .user_reset_int_reg(pcie_top_i_n_19));
  (* DEST_SYNC_FF = "2" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  pcie_7x_0_xpm_cdc_single__1 phy_lnk_up_cdc
       (.dest_clk(INT_USERCLK1_OUT),
        .dest_out(pl_phy_lnk_up_sync),
        .src_clk(INT_RXUSRCLK_OUT),
        .src_in(pl_phy_lnk_up_wire));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pl_phy_lnk_up_INST_0
       (.I0(pl_phy_lnk_up_q),
        .I1(user_app_rdy),
        .O(pl_phy_lnk_up));
  FDRE pl_phy_lnk_up_q_reg
       (.C(INT_USERCLK1_OUT),
        .CE(1'b1),
        .D(pl_phy_lnk_up_sync),
        .Q(pl_phy_lnk_up_q),
        .R(gt_top_i_n_424));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pl_received_hot_rst_INST_0
       (.I0(user_app_rdy),
        .I1(pl_received_hot_rst_q),
        .O(pl_received_hot_rst));
  (* DEST_SYNC_FF = "2" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  pcie_7x_0_xpm_cdc_single pl_received_hot_rst_cdc
       (.dest_clk(INT_USERCLK1_OUT),
        .dest_out(pl_received_hot_rst_sync),
        .src_clk(INT_RXUSRCLK_OUT),
        .src_in(pl_received_hot_rst_wire));
  FDRE pl_received_hot_rst_q_reg
       (.C(INT_USERCLK1_OUT),
        .CE(1'b1),
        .D(pl_received_hot_rst_sync),
        .Q(pl_received_hot_rst_q),
        .R(gt_top_i_n_424));
  (* C_DATA_WIDTH = "64" *) 
  (* DONT_TOUCH *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* KEEP_WIDTH = "8" *) 
  pcie_7x_0_pcie_7x_0_pr_loader pr_loader_i
       (.ICAP_ceb(icap_csib_FPC),
        .ICAP_din_bs(icap_i_FPC),
        .ICAP_wrb(icap_rdwrb_FPC),
        .cfg_bus_number(cfg_bus_number_mux),
        .cfg_device_number(cfg_device_number_mux),
        .cfg_function_number(cfg_function_number_mux),
        .cfg_to_turnoff(cfg_to_turnoff_mux),
        .cfg_turnoff_ok(ebp_cfg_turnoff_ok),
        .conf_clk(int_icap_clk),
        .lnk_up(user_lnk_up_int),
        .m_axis_rx_tdata(m_axis_rx_tdata_mux),
        .m_axis_rx_tkeep({m_axis_rx_tkeep_mux,m_axis_rx_tkeep_mux,m_axis_rx_tkeep_mux,m_axis_rx_tkeep_mux,1'b1,1'b1,1'b1,1'b1}),
        .m_axis_rx_tlast(m_axis_rx_tlast_mux),
        .m_axis_rx_tready(m_axis_rx_tready_cpler),
        .m_axis_rx_tuser({m_axis_rx_tuser_mux[21],1'b0,m_axis_rx_tuser_mux[19:18],m_axis_rx_tuser_mux[18],1'b0,1'b0,m_axis_rx_tuser_mux[14],1'b0,1'b0,1'b0,1'b0,1'b0,m_axis_rx_tuser_mux[8:0]}),
        .m_axis_rx_tvalid(m_axis_rx_tvalid_mux),
        .pr_done(NLW_pr_loader_i_pr_done_UNCONNECTED),
        .s_axis_tx_tdata(s_axis_tx_tdata_cpler),
        .s_axis_tx_tkeep(s_axis_tx_tkeep_cpler),
        .s_axis_tx_tlast(s_axis_tx_tlast_cpler),
        .s_axis_tx_tready(s_axis_tx_tready_mux),
        .s_axis_tx_tuser(s_axis_tx_tuser_cpler),
        .s_axis_tx_tvalid(s_axis_tx_tvalid_cpler),
        .sys_clk(INT_USERCLK1_OUT),
        .sys_reset(user_reset_out),
        .user_app_rdy_gnt(user_app_rdy),
        .user_app_rdy_req(user_app_rdy_req));
  LUT2 #(
    .INIT(4'h8)) 
    user_lnk_up_INST_0
       (.I0(user_lnk_up_mux),
        .I1(user_app_rdy),
        .O(user_lnk_up));
  (* ASYNC_REG *) 
  FDRE user_lnk_up_int_reg
       (.C(INT_USERCLK1_OUT),
        .CE(1'b1),
        .D(trn_lnk_up),
        .Q(user_lnk_up_int),
        .R(gt_top_i_n_424));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE user_lnk_up_mux_reg
       (.C(INT_USERCLK1_OUT),
        .CE(1'b1),
        .D(user_lnk_up_int),
        .Q(user_lnk_up_mux),
        .R(gt_top_i_n_424));
  FDPE user_reset_int_reg
       (.C(INT_USERCLK1_OUT),
        .CE(1'b1),
        .D(pcie_top_i_n_19),
        .PRE(sys_or_hot_rst),
        .Q(bridge_reset_int));
  LUT2 #(
    .INIT(4'hB)) 
    user_reset_out_i_1
       (.I0(pl_received_hot_rst_q),
        .I1(sys_rst_n),
        .O(sys_or_hot_rst));
  FDPE user_reset_out_reg
       (.C(INT_USERCLK1_OUT),
        .CE(1'b1),
        .D(bridge_reset_int),
        .PRE(sys_or_hot_rst),
        .Q(user_reset_out));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_data_transfer" *) 
module pcie_7x_0_pcie_7x_0_data_transfer
   (dout,
    pause,
    pr_done,
    p_0_in,
    sys_clk,
    conf_clk,
    \pio_rx_sm_64.wr_data_reg[31] ,
    write_en,
    soc_2_fd,
    sys_reset,
    soc_3_fd,
    soc_1_fd);
  output [31:0]dout;
  output pause;
  output pr_done;
  output p_0_in;
  input sys_clk;
  input conf_clk;
  input [31:0]\pio_rx_sm_64.wr_data_reg[31] ;
  input write_en;
  input soc_2_fd;
  input sys_reset;
  input soc_3_fd;
  input soc_1_fd;

  wire FIFO_empty;
  wire FIFO_prog_full;
  wire conf_clk;
  wire conf_enable;
  wire [31:0]dout;
  wire end_config_i_1_n_0;
  wire end_config_reg_n_0;
  wire eoc_1_fd;
  wire eoc_1_fd_1dly;
  wire eoc_1_fd_1dly_i_1_n_0;
  wire eoc_1_fd_2dly;
  wire eoc_1_fd_2dly_i_1_n_0;
  wire eoc_1_fd_i_1_n_0;
  wire eoc_1_fd_i_2_n_0;
  wire eoc_1_fd_i_3_n_0;
  wire eoc_1_fd_i_4_n_0;
  wire eoc_1_fd_i_5_n_0;
  wire eoc_1_fd_i_6_n_0;
  wire eoc_2_fd;
  wire eoc_2_fd_1dly;
  wire eoc_2_fd_1dly_i_1_n_0;
  wire eoc_2_fd_i_1_n_0;
  wire eoc_2_fd_i_2_n_0;
  wire eoc_2_fd_i_3_n_0;
  wire eoc_2_fd_i_4_n_0;
  wire eoc_2_fd_i_5_n_0;
  wire eoc_2_fd_i_6_n_0;
  wire eoc_2_fd_i_7_n_0;
  wire eoc_3_fd_i_1_n_0;
  wire eoc_3_fd_i_2_n_0;
  wire eoc_3_fd_i_3_n_0;
  wire eoc_3_fd_i_4_n_0;
  wire eoc_3_fd_i_5_n_0;
  wire eoc_3_fd_i_6_n_0;
  wire eoc_3_fd_i_7_n_0;
  wire eoc_3_fd_reg_n_0;
  wire fastConfigFIFO_i_i_1_n_0;
  wire p_0_in;
  wire pause;
  wire [31:0]\pio_rx_sm_64.wr_data_reg[31] ;
  wire pr_done;
  wire pr_done_c_i_1_n_0;
  wire soc_1_fd;
  wire soc_1_fd_1dly;
  wire soc_1_fd_2dly;
  wire soc_1_fd__0;
  wire soc_2_fd;
  wire soc_2_fd_1dly;
  wire soc_2_fd__0;
  wire soc_3_fd;
  wire soc_3_fd_reg_n_0;
  wire start_config;
  wire start_config_i_1_n_0;
  wire sys_clk;
  wire sys_reset;
  wire write_en;
  wire NLW_fastConfigFIFO_i_full_UNCONNECTED;

  FDRE FIFO_rd_en_prev_reg
       (.C(conf_clk),
        .CE(1'b1),
        .D(fastConfigFIFO_i_i_1_n_0),
        .Q(conf_enable),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT1 #(
    .INIT(2'h1)) 
    ICAP_ceb_i_1
       (.I0(conf_enable),
        .O(p_0_in));
  LUT5 #(
    .INIT(32'hFF008000)) 
    end_config_i_1
       (.I0(eoc_2_fd_1dly),
        .I1(eoc_1_fd_2dly),
        .I2(eoc_3_fd_reg_n_0),
        .I3(start_config),
        .I4(end_config_reg_n_0),
        .O(end_config_i_1_n_0));
  FDCE end_config_reg
       (.C(sys_clk),
        .CE(1'b1),
        .CLR(sys_reset),
        .D(end_config_i_1_n_0),
        .Q(end_config_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    eoc_1_fd_1dly_i_1
       (.I0(eoc_1_fd),
        .I1(conf_enable),
        .I2(eoc_1_fd_1dly),
        .O(eoc_1_fd_1dly_i_1_n_0));
  FDRE eoc_1_fd_1dly_reg
       (.C(conf_clk),
        .CE(1'b1),
        .D(eoc_1_fd_1dly_i_1_n_0),
        .Q(eoc_1_fd_1dly),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    eoc_1_fd_2dly_i_1
       (.I0(eoc_1_fd_1dly),
        .I1(conf_enable),
        .I2(eoc_1_fd_2dly),
        .O(eoc_1_fd_2dly_i_1_n_0));
  FDRE eoc_1_fd_2dly_reg
       (.C(conf_clk),
        .CE(1'b1),
        .D(eoc_1_fd_2dly_i_1_n_0),
        .Q(eoc_1_fd_2dly),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hF4444444)) 
    eoc_1_fd_i_1
       (.I0(conf_enable),
        .I1(eoc_1_fd),
        .I2(eoc_1_fd_i_2_n_0),
        .I3(eoc_2_fd_i_3_n_0),
        .I4(eoc_1_fd_i_3_n_0),
        .O(eoc_1_fd_i_1_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    eoc_1_fd_i_2
       (.I0(eoc_1_fd_i_4_n_0),
        .I1(eoc_1_fd_i_5_n_0),
        .I2(eoc_1_fd_i_6_n_0),
        .I3(dout[2]),
        .I4(dout[1]),
        .I5(dout[0]),
        .O(eoc_1_fd_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    eoc_1_fd_i_3
       (.I0(dout[24]),
        .I1(dout[23]),
        .I2(dout[22]),
        .I3(dout[21]),
        .I4(dout[25]),
        .I5(dout[26]),
        .O(eoc_1_fd_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    eoc_1_fd_i_4
       (.I0(dout[11]),
        .I1(dout[12]),
        .I2(dout[10]),
        .I3(dout[9]),
        .I4(dout[13]),
        .I5(dout[14]),
        .O(eoc_1_fd_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000800000000)) 
    eoc_1_fd_i_5
       (.I0(dout[17]),
        .I1(dout[18]),
        .I2(dout[15]),
        .I3(dout[16]),
        .I4(dout[20]),
        .I5(dout[19]),
        .O(eoc_1_fd_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000000002000)) 
    eoc_1_fd_i_6
       (.I0(dout[6]),
        .I1(dout[5]),
        .I2(dout[3]),
        .I3(dout[4]),
        .I4(dout[8]),
        .I5(dout[7]),
        .O(eoc_1_fd_i_6_n_0));
  FDRE eoc_1_fd_reg
       (.C(conf_clk),
        .CE(1'b1),
        .D(eoc_1_fd_i_1_n_0),
        .Q(eoc_1_fd),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    eoc_2_fd_1dly_i_1
       (.I0(eoc_2_fd),
        .I1(conf_enable),
        .I2(eoc_2_fd_1dly),
        .O(eoc_2_fd_1dly_i_1_n_0));
  FDRE eoc_2_fd_1dly_reg
       (.C(conf_clk),
        .CE(1'b1),
        .D(eoc_2_fd_1dly_i_1_n_0),
        .Q(eoc_2_fd_1dly),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT5 #(
    .INIT(32'hF4444444)) 
    eoc_2_fd_i_1
       (.I0(conf_enable),
        .I1(eoc_2_fd),
        .I2(eoc_2_fd_i_2_n_0),
        .I3(eoc_2_fd_i_3_n_0),
        .I4(eoc_2_fd_i_4_n_0),
        .O(eoc_2_fd_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000080000000)) 
    eoc_2_fd_i_2
       (.I0(eoc_2_fd_i_5_n_0),
        .I1(eoc_2_fd_i_6_n_0),
        .I2(eoc_2_fd_i_7_n_0),
        .I3(dout[2]),
        .I4(dout[1]),
        .I5(dout[0]),
        .O(eoc_2_fd_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    eoc_2_fd_i_3
       (.I0(dout[30]),
        .I1(dout[29]),
        .I2(dout[27]),
        .I3(dout[28]),
        .I4(dout[31]),
        .I5(conf_enable),
        .O(eoc_2_fd_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    eoc_2_fd_i_4
       (.I0(dout[24]),
        .I1(dout[23]),
        .I2(dout[22]),
        .I3(dout[21]),
        .I4(dout[26]),
        .I5(dout[25]),
        .O(eoc_2_fd_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    eoc_2_fd_i_5
       (.I0(dout[11]),
        .I1(dout[12]),
        .I2(dout[9]),
        .I3(dout[10]),
        .I4(dout[13]),
        .I5(dout[14]),
        .O(eoc_2_fd_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000008000000000)) 
    eoc_2_fd_i_6
       (.I0(dout[17]),
        .I1(dout[18]),
        .I2(dout[16]),
        .I3(dout[15]),
        .I4(dout[20]),
        .I5(dout[19]),
        .O(eoc_2_fd_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    eoc_2_fd_i_7
       (.I0(dout[6]),
        .I1(dout[5]),
        .I2(dout[3]),
        .I3(dout[4]),
        .I4(dout[8]),
        .I5(dout[7]),
        .O(eoc_2_fd_i_7_n_0));
  FDRE eoc_2_fd_reg
       (.C(conf_clk),
        .CE(1'b1),
        .D(eoc_2_fd_i_1_n_0),
        .Q(eoc_2_fd),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hF4444444)) 
    eoc_3_fd_i_1
       (.I0(conf_enable),
        .I1(eoc_3_fd_reg_n_0),
        .I2(eoc_3_fd_i_2_n_0),
        .I3(eoc_3_fd_i_3_n_0),
        .I4(eoc_3_fd_i_4_n_0),
        .O(eoc_3_fd_i_1_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    eoc_3_fd_i_2
       (.I0(eoc_3_fd_i_5_n_0),
        .I1(eoc_3_fd_i_6_n_0),
        .I2(eoc_3_fd_i_7_n_0),
        .I3(dout[1]),
        .I4(dout[2]),
        .I5(dout[0]),
        .O(eoc_3_fd_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    eoc_3_fd_i_3
       (.I0(dout[30]),
        .I1(dout[29]),
        .I2(dout[28]),
        .I3(dout[27]),
        .I4(dout[31]),
        .I5(conf_enable),
        .O(eoc_3_fd_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    eoc_3_fd_i_4
       (.I0(dout[23]),
        .I1(dout[24]),
        .I2(dout[22]),
        .I3(dout[21]),
        .I4(dout[26]),
        .I5(dout[25]),
        .O(eoc_3_fd_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    eoc_3_fd_i_5
       (.I0(dout[11]),
        .I1(dout[12]),
        .I2(dout[9]),
        .I3(dout[10]),
        .I4(dout[13]),
        .I5(dout[14]),
        .O(eoc_3_fd_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    eoc_3_fd_i_6
       (.I0(dout[17]),
        .I1(dout[18]),
        .I2(dout[16]),
        .I3(dout[15]),
        .I4(dout[20]),
        .I5(dout[19]),
        .O(eoc_3_fd_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000000800000000)) 
    eoc_3_fd_i_7
       (.I0(dout[5]),
        .I1(dout[6]),
        .I2(dout[3]),
        .I3(dout[4]),
        .I4(dout[7]),
        .I5(dout[8]),
        .O(eoc_3_fd_i_7_n_0));
  FDRE eoc_3_fd_reg
       (.C(conf_clk),
        .CE(1'b1),
        .D(eoc_3_fd_i_1_n_0),
        .Q(eoc_3_fd_reg_n_0),
        .R(1'b0));
  (* CHECK_LICENSE_TYPE = "pcie_7x_0_fastConfigFIFO,fifo_generator_v13_1_1,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_1_1,Vivado 2016.2" *) 
  pcie_7x_0_pcie_7x_0_fastConfigFIFO fastConfigFIFO_i
       (.din({\pio_rx_sm_64.wr_data_reg[31] [7:0],\pio_rx_sm_64.wr_data_reg[31] [15:8],\pio_rx_sm_64.wr_data_reg[31] [23:16],\pio_rx_sm_64.wr_data_reg[31] [31:24]}),
        .dout(dout),
        .empty(FIFO_empty),
        .full(NLW_fastConfigFIFO_i_full_UNCONNECTED),
        .prog_full(FIFO_prog_full),
        .rd_clk(conf_clk),
        .rd_en(fastConfigFIFO_i_i_1_n_0),
        .rst(1'b0),
        .wr_clk(sys_clk),
        .wr_en(write_en));
  LUT1 #(
    .INIT(2'h1)) 
    fastConfigFIFO_i_i_1
       (.I0(FIFO_empty),
        .O(fastConfigFIFO_i_i_1_n_0));
  FDCE pause_reg
       (.C(sys_clk),
        .CE(1'b1),
        .CLR(sys_reset),
        .D(FIFO_prog_full),
        .Q(pause));
  LUT2 #(
    .INIT(4'hE)) 
    pr_done_c_i_1
       (.I0(end_config_reg_n_0),
        .I1(pr_done),
        .O(pr_done_c_i_1_n_0));
  FDCE pr_done_c_reg
       (.C(sys_clk),
        .CE(1'b1),
        .CLR(sys_reset),
        .D(pr_done_c_i_1_n_0),
        .Q(pr_done));
  FDCE soc_1_fd_1dly_reg
       (.C(sys_clk),
        .CE(write_en),
        .CLR(sys_reset),
        .D(soc_1_fd__0),
        .Q(soc_1_fd_1dly));
  FDCE soc_1_fd_2dly_reg
       (.C(sys_clk),
        .CE(write_en),
        .CLR(sys_reset),
        .D(soc_1_fd_1dly),
        .Q(soc_1_fd_2dly));
  FDCE soc_1_fd_reg
       (.C(sys_clk),
        .CE(write_en),
        .CLR(sys_reset),
        .D(soc_1_fd),
        .Q(soc_1_fd__0));
  FDCE soc_2_fd_1dly_reg
       (.C(sys_clk),
        .CE(write_en),
        .CLR(sys_reset),
        .D(soc_2_fd__0),
        .Q(soc_2_fd_1dly));
  FDCE soc_2_fd_reg
       (.C(sys_clk),
        .CE(write_en),
        .CLR(sys_reset),
        .D(soc_2_fd),
        .Q(soc_2_fd__0));
  FDCE soc_3_fd_reg
       (.C(sys_clk),
        .CE(write_en),
        .CLR(sys_reset),
        .D(soc_3_fd),
        .Q(soc_3_fd_reg_n_0));
  LUT5 #(
    .INIT(32'h80FF8080)) 
    start_config_i_1
       (.I0(soc_2_fd_1dly),
        .I1(soc_1_fd_2dly),
        .I2(soc_3_fd_reg_n_0),
        .I3(end_config_reg_n_0),
        .I4(start_config),
        .O(start_config_i_1_n_0));
  FDCE start_config_reg
       (.C(sys_clk),
        .CE(1'b1),
        .CLR(sys_reset),
        .D(start_config_i_1_n_0),
        .Q(start_config));
endmodule

(* CHECK_LICENSE_TYPE = "pcie_7x_0_fastConfigFIFO,fifo_generator_v13_1_1,{}" *) (* ORIG_REF_NAME = "pcie_7x_0_fastConfigFIFO" *) (* downgradeipidentifiedwarnings = "yes" *) 
(* x_core_info = "fifo_generator_v13_1_1,Vivado 2016.2" *) 
module pcie_7x_0_pcie_7x_0_fastConfigFIFO
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    empty,
    prog_full);
  input rst;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 write_clk CLK" *) input wr_clk;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 read_clk CLK" *) input rd_clk;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [31:0]din;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [31:0]dout;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output prog_full;

  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [8:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [8:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [8:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "9" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "32" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "32" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "kintex7" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "480" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "479" *) 
  (* C_PROG_FULL_TYPE = "1" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "9" *) 
  (* C_RD_DEPTH = "512" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "9" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "9" *) 
  (* C_WR_DEPTH = "512" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "9" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  (* KEEP_HIERARCHY = "true" *) 
  pcie_7x_0_fifo_generator_v13_1_1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[8:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(prog_full),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[8:0]),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[8:0]),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_fast_cfg_init_cntr" *) 
module pcie_7x_0_pcie_7x_0_fast_cfg_init_cntr
   (startup_eos,
    out,
    startup_cfgclk,
    startup_cfgmclk,
    startup_preq,
    user_clk,
    user_app_rdy_gnt,
    startup_clk,
    startup_gsr,
    startup_gts,
    startup_pack,
    startup_usrcclko,
    startup_usrdoneo,
    startup_keyclearb,
    startup_usrcclkts,
    startup_usrdonets);
  output startup_eos;
  output out;
  output startup_cfgclk;
  output startup_cfgmclk;
  output startup_preq;
  input user_clk;
  input user_app_rdy_gnt;
  input startup_clk;
  input startup_gsr;
  input startup_gts;
  input startup_pack;
  input startup_usrcclko;
  input startup_usrdoneo;
  input startup_keyclearb;
  input startup_usrcclkts;
  input startup_usrdonets;

  (* ASYNC_REG = "true" *) wire cdc_reg1;
  (* ASYNC_REG = "true" *) wire cdc_reg2;
  wire stage2_end;
  wire stage2_end_i_1_n_0;
  wire stage2_start;
  wire startup_cfgclk;
  wire startup_cfgclk_mux;
  wire startup_cfgmclk;
  wire startup_cfgmclk_mux;
  wire startup_clk;
  wire startup_clk_mux;
  wire startup_eos;
  wire startup_gsr;
  wire startup_gsr_mux;
  wire startup_gts;
  wire startup_gts_mux;
  wire startup_keyclearb;
  wire startup_keyclearb_mux;
  wire startup_pack;
  wire startup_pack_mux;
  wire startup_preq;
  wire startup_preq_mux;
  wire startup_usrcclko;
  wire startup_usrcclko_mux;
  wire startup_usrcclkts;
  wire startup_usrcclkts_mux;
  wire startup_usrdoneo;
  wire startup_usrdoneo_mux;
  wire startup_usrdonets;
  wire startup_usrdonets_mux;
  wire user_app_rdy_gnt;
  wire user_clk;

  assign out = cdc_reg2;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    cdc_reg1_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(stage2_end),
        .Q(cdc_reg1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    cdc_reg2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(cdc_reg1),
        .Q(cdc_reg2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    stage2_end_i_1
       (.I0(stage2_start),
        .I1(stage2_end),
        .O(stage2_end_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    stage2_end_reg
       (.C(startup_eos),
        .CE(1'b1),
        .D(stage2_end_i_1_n_0),
        .Q(stage2_end),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b1)) 
    stage2_start_reg
       (.C(startup_eos),
        .CE(1'b1),
        .D(1'b1),
        .Q(stage2_start),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'h8)) 
    startup_cfgclk_INST_0
       (.I0(user_app_rdy_gnt),
        .I1(startup_cfgclk_mux),
        .O(startup_cfgclk));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'h8)) 
    startup_cfgmclk_INST_0
       (.I0(user_app_rdy_gnt),
        .I1(startup_cfgmclk_mux),
        .O(startup_cfgmclk));
  (* BOX_TYPE = "PRIMITIVE" *) 
  STARTUPE2 #(
    .PROG_USR("FALSE"),
    .SIM_CCLK_FREQ(0.000000)) 
    startup_inst
       (.CFGCLK(startup_cfgclk_mux),
        .CFGMCLK(startup_cfgmclk_mux),
        .CLK(startup_clk_mux),
        .EOS(startup_eos),
        .GSR(startup_gsr_mux),
        .GTS(startup_gts_mux),
        .KEYCLEARB(startup_keyclearb_mux),
        .PACK(startup_pack_mux),
        .PREQ(startup_preq_mux),
        .USRCCLKO(startup_usrcclko_mux),
        .USRCCLKTS(startup_usrcclkts_mux),
        .USRDONEO(startup_usrdoneo_mux),
        .USRDONETS(startup_usrdonets_mux));
  LUT2 #(
    .INIT(4'h8)) 
    startup_inst_i_1
       (.I0(user_app_rdy_gnt),
        .I1(startup_clk),
        .O(startup_clk_mux));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h8)) 
    startup_inst_i_2
       (.I0(user_app_rdy_gnt),
        .I1(startup_gsr),
        .O(startup_gsr_mux));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT2 #(
    .INIT(4'h8)) 
    startup_inst_i_3
       (.I0(user_app_rdy_gnt),
        .I1(startup_gts),
        .O(startup_gts_mux));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'hB)) 
    startup_inst_i_4
       (.I0(startup_keyclearb),
        .I1(user_app_rdy_gnt),
        .O(startup_keyclearb_mux));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT2 #(
    .INIT(4'h8)) 
    startup_inst_i_5
       (.I0(user_app_rdy_gnt),
        .I1(startup_pack),
        .O(startup_pack_mux));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT2 #(
    .INIT(4'h8)) 
    startup_inst_i_6
       (.I0(user_app_rdy_gnt),
        .I1(startup_usrcclko),
        .O(startup_usrcclko_mux));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'hB)) 
    startup_inst_i_7
       (.I0(startup_usrcclkts),
        .I1(user_app_rdy_gnt),
        .O(startup_usrcclkts_mux));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT2 #(
    .INIT(4'h8)) 
    startup_inst_i_8
       (.I0(user_app_rdy_gnt),
        .I1(startup_usrdoneo),
        .O(startup_usrdoneo_mux));
  LUT2 #(
    .INIT(4'hB)) 
    startup_inst_i_9
       (.I0(startup_usrdonets),
        .I1(user_app_rdy_gnt),
        .O(startup_usrdonets_mux));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h8)) 
    startup_preq_INST_0
       (.I0(user_app_rdy_gnt),
        .I1(startup_preq_mux),
        .O(startup_preq));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_common" *) 
module pcie_7x_0_pcie_7x_0_gt_common
   (QPLL_QPLLLOCK,
    QPLL_QPLLOUTCLK,
    QPLL_QPLLOUTREFCLK,
    QPLL_DRP_DONE,
    gtreset_reg,
    sys_clk,
    QPLL_QPLLPD,
    QPLL_QPLLRESET,
    RST_DCLK_RESET,
    QPLL_DRP_START,
    QPLL_DRP_GEN3);
  output QPLL_QPLLLOCK;
  output QPLL_QPLLOUTCLK;
  output QPLL_QPLLOUTREFCLK;
  output QPLL_DRP_DONE;
  input gtreset_reg;
  input sys_clk;
  input QPLL_QPLLPD;
  input QPLL_QPLLRESET;
  input RST_DCLK_RESET;
  input QPLL_DRP_START;
  input QPLL_DRP_GEN3;

  wire QPLL_DRP_DONE;
  wire QPLL_DRP_GEN3;
  wire QPLL_DRP_START;
  wire QPLL_QPLLLOCK;
  wire QPLL_QPLLOUTCLK;
  wire QPLL_QPLLOUTREFCLK;
  wire QPLL_QPLLPD;
  wire QPLL_QPLLRESET;
  wire RST_DCLK_RESET;
  wire gtreset_reg;
  wire [7:0]qpll_drp_addr;
  wire [15:0]qpll_drp_di;
  wire [15:0]qpll_drp_do;
  wire qpll_drp_en;
  wire qpll_drp_rdy;
  wire qpll_drp_we;
  wire sys_clk;

  pcie_7x_0_pcie_7x_0_qpll_drp qpll_drp_i
       (.D(qpll_drp_do),
        .Q({qpll_drp_addr[7],qpll_drp_addr[5],qpll_drp_addr[2:0]}),
        .QPLL_DRP_DONE(QPLL_DRP_DONE),
        .QPLL_DRP_GEN3(QPLL_DRP_GEN3),
        .QPLL_DRP_START(QPLL_DRP_START),
        .QPLL_QPLLLOCK(QPLL_QPLLLOCK),
        .RST_DCLK_RESET(RST_DCLK_RESET),
        .gtreset_reg(gtreset_reg),
        .qpll_drp_en(qpll_drp_en),
        .qpll_drp_rdy(qpll_drp_rdy),
        .qpll_drp_we(qpll_drp_we),
        .rdy_reg1_reg_0(qpll_drp_di));
  pcie_7x_0_pcie_7x_0_qpll_wrapper qpll_wrapper_i
       (.D(qpll_drp_do),
        .Q({qpll_drp_addr[7],qpll_drp_addr[5],qpll_drp_addr[2:0]}),
        .QPLL_QPLLLOCK(QPLL_QPLLLOCK),
        .QPLL_QPLLOUTCLK(QPLL_QPLLOUTCLK),
        .QPLL_QPLLOUTREFCLK(QPLL_QPLLOUTREFCLK),
        .QPLL_QPLLPD(QPLL_QPLLPD),
        .QPLL_QPLLRESET(QPLL_QPLLRESET),
        .\di_reg[15] (qpll_drp_di),
        .gtreset_reg(gtreset_reg),
        .qpll_drp_en(qpll_drp_en),
        .qpll_drp_rdy(qpll_drp_rdy),
        .qpll_drp_we(qpll_drp_we),
        .sys_clk(sys_clk));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_rx_valid_filter_7x" *) 
module pcie_7x_0_pcie_7x_0_gt_rx_valid_filter_7x
   (\pipe_stages_1.pipe_rx_valid_q_reg ,
    gt_rx_phy_status_q,
    gt_rxelecidle_q,
    \gt_rx_status_q_reg[0]_0 ,
    Q,
    D,
    \pipe_stages_1.pipe_rx_status_q_reg[2] ,
    SR,
    INT_RXUSRCLK_OUT,
    rate_idle_reg2_reg,
    PIPE_RXELECIDLE,
    gt_rxvalid_q_reg_0,
    pipe_rxstatus,
    \pl_ltssm_state_q_reg[5] ,
    PIPE_RXDATAK,
    PIPE_RXDATA);
  output \pipe_stages_1.pipe_rx_valid_q_reg ;
  output gt_rx_phy_status_q;
  output gt_rxelecidle_q;
  output \gt_rx_status_q_reg[0]_0 ;
  output [15:0]Q;
  output [1:0]D;
  output [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  input [0:0]SR;
  input INT_RXUSRCLK_OUT;
  input rate_idle_reg2_reg;
  input [0:0]PIPE_RXELECIDLE;
  input gt_rxvalid_q_reg_0;
  input [2:0]pipe_rxstatus;
  input [5:0]\pl_ltssm_state_q_reg[5] ;
  input [1:0]PIPE_RXDATAK;
  input [15:0]PIPE_RXDATA;

  wire [1:0]D;
  wire INT_RXUSRCLK_OUT;
  wire [15:0]PIPE_RXDATA;
  wire [1:0]PIPE_RXDATAK;
  wire [0:0]PIPE_RXELECIDLE;
  wire [15:0]Q;
  wire [0:0]SR;
  wire gt_rx_phy_status_q;
  wire \gt_rx_status_q[0]_i_1__2_n_0 ;
  wire \gt_rx_status_q[1]_i_1__2_n_0 ;
  wire \gt_rx_status_q[2]_i_1__2_n_0 ;
  wire \gt_rx_status_q_reg[0]_0 ;
  wire \gt_rxcharisk_q_reg_n_0_[0] ;
  wire gt_rxelecidle_q;
  wire gt_rxvalid_q__0;
  wire gt_rxvalid_q_i_2_n_0;
  wire gt_rxvalid_q_n_0;
  wire gt_rxvalid_q_reg_0;
  wire p_1_in;
  wire [2:0]pipe_rxstatus;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  wire \pipe_stages_1.pipe_rx_valid_q_reg ;
  wire [5:0]\pl_ltssm_state_q_reg[5] ;
  wire rate_idle_reg2_reg;
  wire [4:0]reg_state_eios_det;
  wire \reg_state_eios_det[0]_i_2_n_0 ;
  wire \reg_state_eios_det[0]_i_3_n_0 ;
  wire \reg_state_eios_det[0]_i_4_n_0 ;
  wire \reg_state_eios_det[0]_i_5_n_0 ;
  wire \reg_state_eios_det[1]_i_2_n_0 ;
  wire \reg_state_eios_det[1]_i_3_n_0 ;
  wire \reg_state_eios_det[2]_i_2_n_0 ;
  wire \reg_state_eios_det[2]_i_3_n_0 ;
  wire \reg_state_eios_det[3]_i_2_n_0 ;
  wire \reg_state_eios_det[4]_i_1_n_0 ;
  wire \reg_state_eios_det[4]_i_3_n_0 ;
  wire reg_symbol_after_eios_i_1_n_0;
  wire reg_symbol_after_eios_i_2_n_0;
  wire [4:0]state_eios_det;
  wire symbol_after_eios;

  FDRE gt_rx_phy_status_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(rate_idle_reg2_reg),
        .Q(gt_rx_phy_status_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[0]_i_1__2 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\gt_rx_status_q_reg[0]_0 ),
        .I2(pipe_rxstatus[0]),
        .O(\gt_rx_status_q[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[1]_i_1__2 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\gt_rx_status_q_reg[0]_0 ),
        .I2(pipe_rxstatus[1]),
        .O(\gt_rx_status_q[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[2]_i_1__2 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\gt_rx_status_q_reg[0]_0 ),
        .I2(pipe_rxstatus[2]),
        .O(\gt_rx_status_q[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFBFFFFFF)) 
    \gt_rx_status_q[2]_i_2 
       (.I0(\pl_ltssm_state_q_reg[5] [5]),
        .I1(\pl_ltssm_state_q_reg[5] [4]),
        .I2(\pl_ltssm_state_q_reg[5] [3]),
        .I3(\pl_ltssm_state_q_reg[5] [2]),
        .I4(\pl_ltssm_state_q_reg[5] [1]),
        .I5(\pl_ltssm_state_q_reg[5] [0]),
        .O(\gt_rx_status_q_reg[0]_0 ));
  FDRE \gt_rx_status_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[0]_i_1__2_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [0]),
        .R(SR));
  FDRE \gt_rx_status_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[1]_i_1__2_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [1]),
        .R(SR));
  FDRE \gt_rx_status_q_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[2]_i_1__2_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [2]),
        .R(SR));
  FDRE \gt_rxcharisk_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATAK[0]),
        .Q(\gt_rxcharisk_q_reg_n_0_[0] ),
        .R(SR));
  FDRE \gt_rxcharisk_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATAK[1]),
        .Q(p_1_in),
        .R(SR));
  FDRE \gt_rxdata_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[10] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[10]),
        .Q(Q[10]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[11] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[11]),
        .Q(Q[11]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[12] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[12]),
        .Q(Q[12]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[13] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[13]),
        .Q(Q[13]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[14] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[14]),
        .Q(Q[14]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[15] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[15]),
        .Q(Q[15]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[2]),
        .Q(Q[2]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[3]),
        .Q(Q[3]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[4]),
        .Q(Q[4]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[5] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[5]),
        .Q(Q[5]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[6] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[6]),
        .Q(Q[6]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[7] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[7]),
        .Q(Q[7]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[8] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[8]),
        .Q(Q[8]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[9] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[9]),
        .Q(Q[9]),
        .R(SR));
  FDRE gt_rxelecidle_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXELECIDLE),
        .Q(gt_rxelecidle_q),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gt_rxvalid_q
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[1]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[3]),
        .I4(state_eios_det[4]),
        .O(gt_rxvalid_q_n_0));
  LUT5 #(
    .INIT(32'hFFAAEAAA)) 
    gt_rxvalid_q_i_1
       (.I0(gt_rxvalid_q_i_2_n_0),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[3]_i_2_n_0 ),
        .I3(gt_rxvalid_q_reg_0),
        .I4(state_eios_det[0]),
        .O(gt_rxvalid_q__0));
  LUT6 #(
    .INIT(64'hFFF50000CC550000)) 
    gt_rxvalid_q_i_2
       (.I0(gt_rxvalid_q_n_0),
        .I1(\gt_rx_status_q_reg[0]_0 ),
        .I2(\reg_state_eios_det[4]_i_3_n_0 ),
        .I3(state_eios_det[4]),
        .I4(gt_rxvalid_q_reg_0),
        .I5(\reg_state_eios_det[0]_i_3_n_0 ),
        .O(gt_rxvalid_q_i_2_n_0));
  FDRE gt_rxvalid_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(gt_rxvalid_q__0),
        .Q(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pipe_stages_1.pipe_rx_char_is_k_q[0]_i_1 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\gt_rxcharisk_q_reg_n_0_[0] ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \pipe_stages_1.pipe_rx_char_is_k_q[1]_i_1 
       (.I0(p_1_in),
        .I1(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I2(symbol_after_eios),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFEEE)) 
    \reg_state_eios_det[0]_i_1 
       (.I0(state_eios_det[4]),
        .I1(\reg_state_eios_det[0]_i_2_n_0 ),
        .I2(\reg_state_eios_det[1]_i_2_n_0 ),
        .I3(\reg_state_eios_det[0]_i_3_n_0 ),
        .I4(\reg_state_eios_det[0]_i_4_n_0 ),
        .I5(\reg_state_eios_det[0]_i_5_n_0 ),
        .O(reg_state_eios_det[0]));
  LUT6 #(
    .INIT(64'hFFAA8A8AFF00FFAA)) 
    \reg_state_eios_det[0]_i_2 
       (.I0(state_eios_det[0]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(state_eios_det[2]),
        .I4(Q[15]),
        .I5(Q[14]),
        .O(\reg_state_eios_det[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \reg_state_eios_det[0]_i_3 
       (.I0(state_eios_det[3]),
        .I1(state_eios_det[1]),
        .I2(state_eios_det[2]),
        .O(\reg_state_eios_det[0]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \reg_state_eios_det[0]_i_4 
       (.I0(state_eios_det[0]),
        .I1(Q[15]),
        .O(\reg_state_eios_det[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFE0E0E0FFE0FFE0)) 
    \reg_state_eios_det[0]_i_5 
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[2]_i_2_n_0 ),
        .I3(\reg_state_eios_det[0]_i_3_n_0 ),
        .I4(Q[7]),
        .I5(Q[6]),
        .O(\reg_state_eios_det[0]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \reg_state_eios_det[1]_i_1 
       (.I0(\reg_state_eios_det[1]_i_2_n_0 ),
        .I1(state_eios_det[0]),
        .I2(Q[7]),
        .I3(Q[6]),
        .I4(\reg_state_eios_det[3]_i_2_n_0 ),
        .O(reg_state_eios_det[1]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'hBFFF)) 
    \reg_state_eios_det[1]_i_2 
       (.I0(\reg_state_eios_det[1]_i_3_n_0 ),
        .I1(\gt_rxcharisk_q_reg_n_0_[0] ),
        .I2(Q[4]),
        .I3(Q[5]),
        .O(\reg_state_eios_det[1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \reg_state_eios_det[1]_i_3 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(\reg_state_eios_det[1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \reg_state_eios_det[2]_i_1 
       (.I0(Q[14]),
        .I1(Q[15]),
        .I2(state_eios_det[0]),
        .I3(\reg_state_eios_det[2]_i_2_n_0 ),
        .O(reg_state_eios_det[2]));
  LUT4 #(
    .INIT(16'hBFFF)) 
    \reg_state_eios_det[2]_i_2 
       (.I0(\reg_state_eios_det[2]_i_3_n_0 ),
        .I1(p_1_in),
        .I2(Q[12]),
        .I3(Q[13]),
        .O(\reg_state_eios_det[2]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \reg_state_eios_det[2]_i_3 
       (.I0(Q[9]),
        .I1(Q[8]),
        .I2(Q[11]),
        .I3(Q[10]),
        .O(\reg_state_eios_det[2]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \reg_state_eios_det[3]_i_1 
       (.I0(\reg_state_eios_det[3]_i_2_n_0 ),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[4]_i_3_n_0 ),
        .O(reg_state_eios_det[3]));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \reg_state_eios_det[3]_i_2 
       (.I0(Q[14]),
        .I1(Q[15]),
        .I2(\reg_state_eios_det[2]_i_2_n_0 ),
        .O(\reg_state_eios_det[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00010116)) 
    \reg_state_eios_det[4]_i_1 
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[4]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[1]),
        .I4(state_eios_det[3]),
        .O(\reg_state_eios_det[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \reg_state_eios_det[4]_i_2 
       (.I0(state_eios_det[3]),
        .I1(state_eios_det[1]),
        .I2(\reg_state_eios_det[4]_i_3_n_0 ),
        .O(reg_state_eios_det[4]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \reg_state_eios_det[4]_i_3 
       (.I0(Q[6]),
        .I1(Q[7]),
        .I2(\reg_state_eios_det[1]_i_2_n_0 ),
        .O(\reg_state_eios_det[4]_i_3_n_0 ));
  FDSE \reg_state_eios_det_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1_n_0 ),
        .D(reg_state_eios_det[0]),
        .Q(state_eios_det[0]),
        .S(SR));
  FDRE \reg_state_eios_det_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1_n_0 ),
        .D(reg_state_eios_det[1]),
        .Q(state_eios_det[1]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1_n_0 ),
        .D(reg_state_eios_det[2]),
        .Q(state_eios_det[2]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1_n_0 ),
        .D(reg_state_eios_det[3]),
        .Q(state_eios_det[3]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1_n_0 ),
        .D(reg_state_eios_det[4]),
        .Q(state_eios_det[4]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    reg_symbol_after_eios_i_1
       (.I0(\reg_state_eios_det[3]_i_2_n_0 ),
        .I1(state_eios_det[0]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[3]),
        .I4(state_eios_det[1]),
        .I5(reg_symbol_after_eios_i_2_n_0),
        .O(reg_symbol_after_eios_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'hE)) 
    reg_symbol_after_eios_i_2
       (.I0(\reg_state_eios_det[4]_i_3_n_0 ),
        .I1(state_eios_det[4]),
        .O(reg_symbol_after_eios_i_2_n_0));
  FDRE reg_symbol_after_eios_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(reg_symbol_after_eios_i_1_n_0),
        .Q(symbol_after_eios),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_rx_valid_filter_7x" *) 
module pcie_7x_0_pcie_7x_0_gt_rx_valid_filter_7x_18
   (\pipe_stages_1.pipe_rx_valid_q_reg ,
    \pipe_stages_1.pipe_rx_phy_status_q_reg ,
    \pipe_stages_1.pipe_rx_elec_idle_q_reg ,
    Q,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ,
    \pipe_stages_1.pipe_rx_status_q_reg[2] ,
    SR,
    INT_RXUSRCLK_OUT,
    rate_idle_reg2_reg,
    PIPE_RXELECIDLE,
    gt_rxvalid_q_reg_0,
    \pl_ltssm_state_q_reg[5] ,
    pipe_rxstatus,
    PIPE_RXDATAK,
    PIPE_RXDATA);
  output \pipe_stages_1.pipe_rx_valid_q_reg ;
  output \pipe_stages_1.pipe_rx_phy_status_q_reg ;
  output \pipe_stages_1.pipe_rx_elec_idle_q_reg ;
  output [15:0]Q;
  output [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  output [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  input [0:0]SR;
  input INT_RXUSRCLK_OUT;
  input rate_idle_reg2_reg;
  input [0:0]PIPE_RXELECIDLE;
  input gt_rxvalid_q_reg_0;
  input \pl_ltssm_state_q_reg[5] ;
  input [2:0]pipe_rxstatus;
  input [1:0]PIPE_RXDATAK;
  input [15:0]PIPE_RXDATA;

  wire INT_RXUSRCLK_OUT;
  wire [15:0]PIPE_RXDATA;
  wire [1:0]PIPE_RXDATAK;
  wire [0:0]PIPE_RXELECIDLE;
  wire [15:0]Q;
  wire [0:0]SR;
  wire \gt_rx_status_q[0]_i_1__1_n_0 ;
  wire \gt_rx_status_q[1]_i_1__1_n_0 ;
  wire \gt_rx_status_q[2]_i_1__1_n_0 ;
  wire \gt_rxcharisk_q_reg_n_0_[0] ;
  wire gt_rxvalid_q__0;
  wire gt_rxvalid_q_i_2__0_n_0;
  wire gt_rxvalid_q_n_0;
  wire gt_rxvalid_q_reg_0;
  wire p_1_in;
  wire [2:0]pipe_rxstatus;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  wire \pipe_stages_1.pipe_rx_elec_idle_q_reg ;
  wire \pipe_stages_1.pipe_rx_phy_status_q_reg ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  wire \pipe_stages_1.pipe_rx_valid_q_reg ;
  wire \pl_ltssm_state_q_reg[5] ;
  wire rate_idle_reg2_reg;
  wire [4:0]reg_state_eios_det;
  wire \reg_state_eios_det[0]_i_2__0_n_0 ;
  wire \reg_state_eios_det[0]_i_3__0_n_0 ;
  wire \reg_state_eios_det[0]_i_4__0_n_0 ;
  wire \reg_state_eios_det[0]_i_5__0_n_0 ;
  wire \reg_state_eios_det[1]_i_2__0_n_0 ;
  wire \reg_state_eios_det[1]_i_3__0_n_0 ;
  wire \reg_state_eios_det[2]_i_2__0_n_0 ;
  wire \reg_state_eios_det[2]_i_3__0_n_0 ;
  wire \reg_state_eios_det[3]_i_2__0_n_0 ;
  wire \reg_state_eios_det[4]_i_1__0_n_0 ;
  wire \reg_state_eios_det[4]_i_3__0_n_0 ;
  wire reg_symbol_after_eios_i_1__0_n_0;
  wire reg_symbol_after_eios_i_2__0_n_0;
  wire [4:0]state_eios_det;
  wire symbol_after_eios;

  FDRE gt_rx_phy_status_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(rate_idle_reg2_reg),
        .Q(\pipe_stages_1.pipe_rx_phy_status_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[0]_i_1__1 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(pipe_rxstatus[0]),
        .O(\gt_rx_status_q[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[1]_i_1__1 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(pipe_rxstatus[1]),
        .O(\gt_rx_status_q[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[2]_i_1__1 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(pipe_rxstatus[2]),
        .O(\gt_rx_status_q[2]_i_1__1_n_0 ));
  FDRE \gt_rx_status_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[0]_i_1__1_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [0]),
        .R(SR));
  FDRE \gt_rx_status_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[1]_i_1__1_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [1]),
        .R(SR));
  FDRE \gt_rx_status_q_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[2]_i_1__1_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [2]),
        .R(SR));
  FDRE \gt_rxcharisk_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATAK[0]),
        .Q(\gt_rxcharisk_q_reg_n_0_[0] ),
        .R(SR));
  FDRE \gt_rxcharisk_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATAK[1]),
        .Q(p_1_in),
        .R(SR));
  FDRE \gt_rxdata_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[10] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[10]),
        .Q(Q[10]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[11] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[11]),
        .Q(Q[11]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[12] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[12]),
        .Q(Q[12]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[13] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[13]),
        .Q(Q[13]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[14] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[14]),
        .Q(Q[14]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[15] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[15]),
        .Q(Q[15]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[2]),
        .Q(Q[2]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[3]),
        .Q(Q[3]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[4]),
        .Q(Q[4]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[5] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[5]),
        .Q(Q[5]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[6] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[6]),
        .Q(Q[6]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[7] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[7]),
        .Q(Q[7]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[8] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[8]),
        .Q(Q[8]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[9] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[9]),
        .Q(Q[9]),
        .R(SR));
  FDRE gt_rxelecidle_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXELECIDLE),
        .Q(\pipe_stages_1.pipe_rx_elec_idle_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gt_rxvalid_q
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[1]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[3]),
        .I4(state_eios_det[4]),
        .O(gt_rxvalid_q_n_0));
  LUT5 #(
    .INIT(32'hFFAAEAAA)) 
    gt_rxvalid_q_i_1__0
       (.I0(gt_rxvalid_q_i_2__0_n_0),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[3]_i_2__0_n_0 ),
        .I3(gt_rxvalid_q_reg_0),
        .I4(state_eios_det[0]),
        .O(gt_rxvalid_q__0));
  LUT6 #(
    .INIT(64'hFFF50000CC550000)) 
    gt_rxvalid_q_i_2__0
       (.I0(gt_rxvalid_q_n_0),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(\reg_state_eios_det[4]_i_3__0_n_0 ),
        .I3(state_eios_det[4]),
        .I4(gt_rxvalid_q_reg_0),
        .I5(\reg_state_eios_det[0]_i_3__0_n_0 ),
        .O(gt_rxvalid_q_i_2__0_n_0));
  FDRE gt_rxvalid_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(gt_rxvalid_q__0),
        .Q(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pipe_stages_1.pipe_rx_char_is_k_q[0]_i_1__0 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\gt_rxcharisk_q_reg_n_0_[0] ),
        .O(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] [0]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \pipe_stages_1.pipe_rx_char_is_k_q[1]_i_1__0 
       (.I0(p_1_in),
        .I1(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I2(symbol_after_eios),
        .O(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] [1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFEEE)) 
    \reg_state_eios_det[0]_i_1__0 
       (.I0(state_eios_det[4]),
        .I1(\reg_state_eios_det[0]_i_2__0_n_0 ),
        .I2(\reg_state_eios_det[1]_i_2__0_n_0 ),
        .I3(\reg_state_eios_det[0]_i_3__0_n_0 ),
        .I4(\reg_state_eios_det[0]_i_4__0_n_0 ),
        .I5(\reg_state_eios_det[0]_i_5__0_n_0 ),
        .O(reg_state_eios_det[0]));
  LUT6 #(
    .INIT(64'hFFAA8A8AFF00FFAA)) 
    \reg_state_eios_det[0]_i_2__0 
       (.I0(state_eios_det[0]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(state_eios_det[2]),
        .I4(Q[15]),
        .I5(Q[14]),
        .O(\reg_state_eios_det[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \reg_state_eios_det[0]_i_3__0 
       (.I0(state_eios_det[3]),
        .I1(state_eios_det[1]),
        .I2(state_eios_det[2]),
        .O(\reg_state_eios_det[0]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \reg_state_eios_det[0]_i_4__0 
       (.I0(state_eios_det[0]),
        .I1(Q[15]),
        .O(\reg_state_eios_det[0]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFE0E0E0FFE0FFE0)) 
    \reg_state_eios_det[0]_i_5__0 
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[2]_i_2__0_n_0 ),
        .I3(\reg_state_eios_det[0]_i_3__0_n_0 ),
        .I4(Q[7]),
        .I5(Q[6]),
        .O(\reg_state_eios_det[0]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \reg_state_eios_det[1]_i_1__0 
       (.I0(\reg_state_eios_det[1]_i_2__0_n_0 ),
        .I1(state_eios_det[0]),
        .I2(Q[7]),
        .I3(Q[6]),
        .I4(\reg_state_eios_det[3]_i_2__0_n_0 ),
        .O(reg_state_eios_det[1]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'hBFFF)) 
    \reg_state_eios_det[1]_i_2__0 
       (.I0(\reg_state_eios_det[1]_i_3__0_n_0 ),
        .I1(\gt_rxcharisk_q_reg_n_0_[0] ),
        .I2(Q[4]),
        .I3(Q[5]),
        .O(\reg_state_eios_det[1]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \reg_state_eios_det[1]_i_3__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(\reg_state_eios_det[1]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \reg_state_eios_det[2]_i_1__0 
       (.I0(Q[14]),
        .I1(Q[15]),
        .I2(state_eios_det[0]),
        .I3(\reg_state_eios_det[2]_i_2__0_n_0 ),
        .O(reg_state_eios_det[2]));
  LUT4 #(
    .INIT(16'hBFFF)) 
    \reg_state_eios_det[2]_i_2__0 
       (.I0(\reg_state_eios_det[2]_i_3__0_n_0 ),
        .I1(p_1_in),
        .I2(Q[12]),
        .I3(Q[13]),
        .O(\reg_state_eios_det[2]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \reg_state_eios_det[2]_i_3__0 
       (.I0(Q[9]),
        .I1(Q[8]),
        .I2(Q[11]),
        .I3(Q[10]),
        .O(\reg_state_eios_det[2]_i_3__0_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \reg_state_eios_det[3]_i_1__0 
       (.I0(\reg_state_eios_det[3]_i_2__0_n_0 ),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[4]_i_3__0_n_0 ),
        .O(reg_state_eios_det[3]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \reg_state_eios_det[3]_i_2__0 
       (.I0(Q[14]),
        .I1(Q[15]),
        .I2(\reg_state_eios_det[2]_i_2__0_n_0 ),
        .O(\reg_state_eios_det[3]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00010116)) 
    \reg_state_eios_det[4]_i_1__0 
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[4]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[1]),
        .I4(state_eios_det[3]),
        .O(\reg_state_eios_det[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \reg_state_eios_det[4]_i_2__0 
       (.I0(state_eios_det[3]),
        .I1(state_eios_det[1]),
        .I2(\reg_state_eios_det[4]_i_3__0_n_0 ),
        .O(reg_state_eios_det[4]));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \reg_state_eios_det[4]_i_3__0 
       (.I0(Q[6]),
        .I1(Q[7]),
        .I2(\reg_state_eios_det[1]_i_2__0_n_0 ),
        .O(\reg_state_eios_det[4]_i_3__0_n_0 ));
  FDSE \reg_state_eios_det_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__0_n_0 ),
        .D(reg_state_eios_det[0]),
        .Q(state_eios_det[0]),
        .S(SR));
  FDRE \reg_state_eios_det_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__0_n_0 ),
        .D(reg_state_eios_det[1]),
        .Q(state_eios_det[1]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__0_n_0 ),
        .D(reg_state_eios_det[2]),
        .Q(state_eios_det[2]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__0_n_0 ),
        .D(reg_state_eios_det[3]),
        .Q(state_eios_det[3]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__0_n_0 ),
        .D(reg_state_eios_det[4]),
        .Q(state_eios_det[4]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    reg_symbol_after_eios_i_1__0
       (.I0(\reg_state_eios_det[3]_i_2__0_n_0 ),
        .I1(state_eios_det[0]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[3]),
        .I4(state_eios_det[1]),
        .I5(reg_symbol_after_eios_i_2__0_n_0),
        .O(reg_symbol_after_eios_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'hE)) 
    reg_symbol_after_eios_i_2__0
       (.I0(\reg_state_eios_det[4]_i_3__0_n_0 ),
        .I1(state_eios_det[4]),
        .O(reg_symbol_after_eios_i_2__0_n_0));
  FDRE reg_symbol_after_eios_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(reg_symbol_after_eios_i_1__0_n_0),
        .Q(symbol_after_eios),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_rx_valid_filter_7x" *) 
module pcie_7x_0_pcie_7x_0_gt_rx_valid_filter_7x_19
   (\pipe_stages_1.pipe_rx_valid_q_reg ,
    \pipe_stages_1.pipe_rx_phy_status_q_reg ,
    \pipe_stages_1.pipe_rx_elec_idle_q_reg ,
    Q,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ,
    \pipe_stages_1.pipe_rx_status_q_reg[2] ,
    SR,
    INT_RXUSRCLK_OUT,
    rate_idle_reg2_reg,
    PIPE_RXELECIDLE,
    gt_rxvalid_q_reg_0,
    \pl_ltssm_state_q_reg[5] ,
    pipe_rxstatus,
    PIPE_RXDATAK,
    PIPE_RXDATA);
  output \pipe_stages_1.pipe_rx_valid_q_reg ;
  output \pipe_stages_1.pipe_rx_phy_status_q_reg ;
  output \pipe_stages_1.pipe_rx_elec_idle_q_reg ;
  output [15:0]Q;
  output [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  output [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  input [0:0]SR;
  input INT_RXUSRCLK_OUT;
  input rate_idle_reg2_reg;
  input [0:0]PIPE_RXELECIDLE;
  input gt_rxvalid_q_reg_0;
  input \pl_ltssm_state_q_reg[5] ;
  input [2:0]pipe_rxstatus;
  input [1:0]PIPE_RXDATAK;
  input [15:0]PIPE_RXDATA;

  wire INT_RXUSRCLK_OUT;
  wire [15:0]PIPE_RXDATA;
  wire [1:0]PIPE_RXDATAK;
  wire [0:0]PIPE_RXELECIDLE;
  wire [15:0]Q;
  wire [0:0]SR;
  wire \gt_rx_status_q[0]_i_1__0_n_0 ;
  wire \gt_rx_status_q[1]_i_1__0_n_0 ;
  wire \gt_rx_status_q[2]_i_1__0_n_0 ;
  wire \gt_rxcharisk_q_reg_n_0_[0] ;
  wire gt_rxvalid_q__0;
  wire gt_rxvalid_q_i_2__1_n_0;
  wire gt_rxvalid_q_n_0;
  wire gt_rxvalid_q_reg_0;
  wire p_1_in;
  wire [2:0]pipe_rxstatus;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  wire \pipe_stages_1.pipe_rx_elec_idle_q_reg ;
  wire \pipe_stages_1.pipe_rx_phy_status_q_reg ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  wire \pipe_stages_1.pipe_rx_valid_q_reg ;
  wire \pl_ltssm_state_q_reg[5] ;
  wire rate_idle_reg2_reg;
  wire [4:0]reg_state_eios_det;
  wire \reg_state_eios_det[0]_i_2__1_n_0 ;
  wire \reg_state_eios_det[0]_i_3__1_n_0 ;
  wire \reg_state_eios_det[0]_i_4__1_n_0 ;
  wire \reg_state_eios_det[0]_i_5__1_n_0 ;
  wire \reg_state_eios_det[1]_i_2__1_n_0 ;
  wire \reg_state_eios_det[1]_i_3__1_n_0 ;
  wire \reg_state_eios_det[2]_i_2__1_n_0 ;
  wire \reg_state_eios_det[2]_i_3__1_n_0 ;
  wire \reg_state_eios_det[3]_i_2__1_n_0 ;
  wire \reg_state_eios_det[4]_i_1__1_n_0 ;
  wire \reg_state_eios_det[4]_i_3__1_n_0 ;
  wire reg_symbol_after_eios_i_1__1_n_0;
  wire reg_symbol_after_eios_i_2__1_n_0;
  wire [4:0]state_eios_det;
  wire symbol_after_eios;

  FDRE gt_rx_phy_status_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(rate_idle_reg2_reg),
        .Q(\pipe_stages_1.pipe_rx_phy_status_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[0]_i_1__0 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(pipe_rxstatus[0]),
        .O(\gt_rx_status_q[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[1]_i_1__0 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(pipe_rxstatus[1]),
        .O(\gt_rx_status_q[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[2]_i_1__0 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(pipe_rxstatus[2]),
        .O(\gt_rx_status_q[2]_i_1__0_n_0 ));
  FDRE \gt_rx_status_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[0]_i_1__0_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [0]),
        .R(SR));
  FDRE \gt_rx_status_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[1]_i_1__0_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [1]),
        .R(SR));
  FDRE \gt_rx_status_q_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[2]_i_1__0_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [2]),
        .R(SR));
  FDRE \gt_rxcharisk_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATAK[0]),
        .Q(\gt_rxcharisk_q_reg_n_0_[0] ),
        .R(SR));
  FDRE \gt_rxcharisk_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATAK[1]),
        .Q(p_1_in),
        .R(SR));
  FDRE \gt_rxdata_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[10] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[10]),
        .Q(Q[10]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[11] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[11]),
        .Q(Q[11]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[12] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[12]),
        .Q(Q[12]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[13] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[13]),
        .Q(Q[13]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[14] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[14]),
        .Q(Q[14]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[15] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[15]),
        .Q(Q[15]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[2]),
        .Q(Q[2]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[3]),
        .Q(Q[3]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[4]),
        .Q(Q[4]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[5] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[5]),
        .Q(Q[5]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[6] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[6]),
        .Q(Q[6]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[7] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[7]),
        .Q(Q[7]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[8] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[8]),
        .Q(Q[8]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[9] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[9]),
        .Q(Q[9]),
        .R(SR));
  FDRE gt_rxelecidle_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXELECIDLE),
        .Q(\pipe_stages_1.pipe_rx_elec_idle_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gt_rxvalid_q
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[1]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[3]),
        .I4(state_eios_det[4]),
        .O(gt_rxvalid_q_n_0));
  LUT5 #(
    .INIT(32'hFFAAEAAA)) 
    gt_rxvalid_q_i_1__1
       (.I0(gt_rxvalid_q_i_2__1_n_0),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[3]_i_2__1_n_0 ),
        .I3(gt_rxvalid_q_reg_0),
        .I4(state_eios_det[0]),
        .O(gt_rxvalid_q__0));
  LUT6 #(
    .INIT(64'hFFF50000CC550000)) 
    gt_rxvalid_q_i_2__1
       (.I0(gt_rxvalid_q_n_0),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(\reg_state_eios_det[4]_i_3__1_n_0 ),
        .I3(state_eios_det[4]),
        .I4(gt_rxvalid_q_reg_0),
        .I5(\reg_state_eios_det[0]_i_3__1_n_0 ),
        .O(gt_rxvalid_q_i_2__1_n_0));
  FDRE gt_rxvalid_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(gt_rxvalid_q__0),
        .Q(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pipe_stages_1.pipe_rx_char_is_k_q[0]_i_1__1 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\gt_rxcharisk_q_reg_n_0_[0] ),
        .O(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] [0]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \pipe_stages_1.pipe_rx_char_is_k_q[1]_i_1__1 
       (.I0(p_1_in),
        .I1(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I2(symbol_after_eios),
        .O(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] [1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFEEE)) 
    \reg_state_eios_det[0]_i_1__1 
       (.I0(state_eios_det[4]),
        .I1(\reg_state_eios_det[0]_i_2__1_n_0 ),
        .I2(\reg_state_eios_det[1]_i_2__1_n_0 ),
        .I3(\reg_state_eios_det[0]_i_3__1_n_0 ),
        .I4(\reg_state_eios_det[0]_i_4__1_n_0 ),
        .I5(\reg_state_eios_det[0]_i_5__1_n_0 ),
        .O(reg_state_eios_det[0]));
  LUT6 #(
    .INIT(64'hFFAA8A8AFF00FFAA)) 
    \reg_state_eios_det[0]_i_2__1 
       (.I0(state_eios_det[0]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(state_eios_det[2]),
        .I4(Q[15]),
        .I5(Q[14]),
        .O(\reg_state_eios_det[0]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \reg_state_eios_det[0]_i_3__1 
       (.I0(state_eios_det[3]),
        .I1(state_eios_det[1]),
        .I2(state_eios_det[2]),
        .O(\reg_state_eios_det[0]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \reg_state_eios_det[0]_i_4__1 
       (.I0(state_eios_det[0]),
        .I1(Q[15]),
        .O(\reg_state_eios_det[0]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFE0E0E0FFE0FFE0)) 
    \reg_state_eios_det[0]_i_5__1 
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[2]_i_2__1_n_0 ),
        .I3(\reg_state_eios_det[0]_i_3__1_n_0 ),
        .I4(Q[7]),
        .I5(Q[6]),
        .O(\reg_state_eios_det[0]_i_5__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \reg_state_eios_det[1]_i_1__1 
       (.I0(\reg_state_eios_det[1]_i_2__1_n_0 ),
        .I1(state_eios_det[0]),
        .I2(Q[7]),
        .I3(Q[6]),
        .I4(\reg_state_eios_det[3]_i_2__1_n_0 ),
        .O(reg_state_eios_det[1]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'hBFFF)) 
    \reg_state_eios_det[1]_i_2__1 
       (.I0(\reg_state_eios_det[1]_i_3__1_n_0 ),
        .I1(\gt_rxcharisk_q_reg_n_0_[0] ),
        .I2(Q[4]),
        .I3(Q[5]),
        .O(\reg_state_eios_det[1]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \reg_state_eios_det[1]_i_3__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(\reg_state_eios_det[1]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \reg_state_eios_det[2]_i_1__1 
       (.I0(Q[14]),
        .I1(Q[15]),
        .I2(state_eios_det[0]),
        .I3(\reg_state_eios_det[2]_i_2__1_n_0 ),
        .O(reg_state_eios_det[2]));
  LUT4 #(
    .INIT(16'hBFFF)) 
    \reg_state_eios_det[2]_i_2__1 
       (.I0(\reg_state_eios_det[2]_i_3__1_n_0 ),
        .I1(p_1_in),
        .I2(Q[12]),
        .I3(Q[13]),
        .O(\reg_state_eios_det[2]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \reg_state_eios_det[2]_i_3__1 
       (.I0(Q[9]),
        .I1(Q[8]),
        .I2(Q[11]),
        .I3(Q[10]),
        .O(\reg_state_eios_det[2]_i_3__1_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \reg_state_eios_det[3]_i_1__1 
       (.I0(\reg_state_eios_det[3]_i_2__1_n_0 ),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[4]_i_3__1_n_0 ),
        .O(reg_state_eios_det[3]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \reg_state_eios_det[3]_i_2__1 
       (.I0(Q[14]),
        .I1(Q[15]),
        .I2(\reg_state_eios_det[2]_i_2__1_n_0 ),
        .O(\reg_state_eios_det[3]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h00010116)) 
    \reg_state_eios_det[4]_i_1__1 
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[4]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[1]),
        .I4(state_eios_det[3]),
        .O(\reg_state_eios_det[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \reg_state_eios_det[4]_i_2__1 
       (.I0(state_eios_det[3]),
        .I1(state_eios_det[1]),
        .I2(\reg_state_eios_det[4]_i_3__1_n_0 ),
        .O(reg_state_eios_det[4]));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \reg_state_eios_det[4]_i_3__1 
       (.I0(Q[6]),
        .I1(Q[7]),
        .I2(\reg_state_eios_det[1]_i_2__1_n_0 ),
        .O(\reg_state_eios_det[4]_i_3__1_n_0 ));
  FDSE \reg_state_eios_det_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__1_n_0 ),
        .D(reg_state_eios_det[0]),
        .Q(state_eios_det[0]),
        .S(SR));
  FDRE \reg_state_eios_det_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__1_n_0 ),
        .D(reg_state_eios_det[1]),
        .Q(state_eios_det[1]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__1_n_0 ),
        .D(reg_state_eios_det[2]),
        .Q(state_eios_det[2]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__1_n_0 ),
        .D(reg_state_eios_det[3]),
        .Q(state_eios_det[3]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__1_n_0 ),
        .D(reg_state_eios_det[4]),
        .Q(state_eios_det[4]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    reg_symbol_after_eios_i_1__1
       (.I0(\reg_state_eios_det[3]_i_2__1_n_0 ),
        .I1(state_eios_det[0]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[3]),
        .I4(state_eios_det[1]),
        .I5(reg_symbol_after_eios_i_2__1_n_0),
        .O(reg_symbol_after_eios_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'hE)) 
    reg_symbol_after_eios_i_2__1
       (.I0(\reg_state_eios_det[4]_i_3__1_n_0 ),
        .I1(state_eios_det[4]),
        .O(reg_symbol_after_eios_i_2__1_n_0));
  FDRE reg_symbol_after_eios_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(reg_symbol_after_eios_i_1__1_n_0),
        .Q(symbol_after_eios),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_rx_valid_filter_7x" *) 
module pcie_7x_0_pcie_7x_0_gt_rx_valid_filter_7x_20
   (\pipe_stages_1.pipe_rx_valid_q_reg ,
    \pipe_stages_1.pipe_rx_phy_status_q_reg ,
    \pipe_stages_1.pipe_rx_elec_idle_q_reg ,
    Q,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ,
    \pipe_stages_1.pipe_rx_status_q_reg[2] ,
    SR,
    INT_RXUSRCLK_OUT,
    rate_idle_reg2_reg,
    PIPE_RXELECIDLE,
    gt_rxvalid_q_reg_0,
    \pl_ltssm_state_q_reg[5] ,
    pipe_rxstatus,
    PIPE_RXDATAK,
    PIPE_RXDATA);
  output \pipe_stages_1.pipe_rx_valid_q_reg ;
  output \pipe_stages_1.pipe_rx_phy_status_q_reg ;
  output \pipe_stages_1.pipe_rx_elec_idle_q_reg ;
  output [15:0]Q;
  output [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  output [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  input [0:0]SR;
  input INT_RXUSRCLK_OUT;
  input rate_idle_reg2_reg;
  input [0:0]PIPE_RXELECIDLE;
  input gt_rxvalid_q_reg_0;
  input \pl_ltssm_state_q_reg[5] ;
  input [2:0]pipe_rxstatus;
  input [1:0]PIPE_RXDATAK;
  input [15:0]PIPE_RXDATA;

  wire INT_RXUSRCLK_OUT;
  wire [15:0]PIPE_RXDATA;
  wire [1:0]PIPE_RXDATAK;
  wire [0:0]PIPE_RXELECIDLE;
  wire [15:0]Q;
  wire [0:0]SR;
  wire \gt_rx_status_q[0]_i_1_n_0 ;
  wire \gt_rx_status_q[1]_i_1_n_0 ;
  wire \gt_rx_status_q[2]_i_1_n_0 ;
  wire \gt_rxcharisk_q_reg_n_0_[0] ;
  wire gt_rxvalid_q__0;
  wire gt_rxvalid_q_i_2__2_n_0;
  wire gt_rxvalid_q_n_0;
  wire gt_rxvalid_q_reg_0;
  wire p_1_in;
  wire [2:0]pipe_rxstatus;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  wire \pipe_stages_1.pipe_rx_elec_idle_q_reg ;
  wire \pipe_stages_1.pipe_rx_phy_status_q_reg ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  wire \pipe_stages_1.pipe_rx_valid_q_reg ;
  wire \pl_ltssm_state_q_reg[5] ;
  wire rate_idle_reg2_reg;
  wire [4:0]reg_state_eios_det;
  wire \reg_state_eios_det[0]_i_2__2_n_0 ;
  wire \reg_state_eios_det[0]_i_3__2_n_0 ;
  wire \reg_state_eios_det[0]_i_4__2_n_0 ;
  wire \reg_state_eios_det[0]_i_5__2_n_0 ;
  wire \reg_state_eios_det[1]_i_2__2_n_0 ;
  wire \reg_state_eios_det[1]_i_3__2_n_0 ;
  wire \reg_state_eios_det[2]_i_2__2_n_0 ;
  wire \reg_state_eios_det[2]_i_3__2_n_0 ;
  wire \reg_state_eios_det[3]_i_2__2_n_0 ;
  wire \reg_state_eios_det[4]_i_1__2_n_0 ;
  wire \reg_state_eios_det[4]_i_3__2_n_0 ;
  wire reg_symbol_after_eios_i_1__2_n_0;
  wire reg_symbol_after_eios_i_2__2_n_0;
  wire [4:0]state_eios_det;
  wire symbol_after_eios;

  FDRE gt_rx_phy_status_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(rate_idle_reg2_reg),
        .Q(\pipe_stages_1.pipe_rx_phy_status_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[0]_i_1 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(pipe_rxstatus[0]),
        .O(\gt_rx_status_q[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[1]_i_1 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(pipe_rxstatus[1]),
        .O(\gt_rx_status_q[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \gt_rx_status_q[2]_i_1 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(pipe_rxstatus[2]),
        .O(\gt_rx_status_q[2]_i_1_n_0 ));
  FDRE \gt_rx_status_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[0]_i_1_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [0]),
        .R(SR));
  FDRE \gt_rx_status_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[1]_i_1_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [1]),
        .R(SR));
  FDRE \gt_rx_status_q_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(\gt_rx_status_q[2]_i_1_n_0 ),
        .Q(\pipe_stages_1.pipe_rx_status_q_reg[2] [2]),
        .R(SR));
  FDRE \gt_rxcharisk_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATAK[0]),
        .Q(\gt_rxcharisk_q_reg_n_0_[0] ),
        .R(SR));
  FDRE \gt_rxcharisk_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATAK[1]),
        .Q(p_1_in),
        .R(SR));
  FDRE \gt_rxdata_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[0]),
        .Q(Q[0]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[10] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[10]),
        .Q(Q[10]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[11] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[11]),
        .Q(Q[11]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[12] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[12]),
        .Q(Q[12]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[13] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[13]),
        .Q(Q[13]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[14] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[14]),
        .Q(Q[14]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[15] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[15]),
        .Q(Q[15]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[2]),
        .Q(Q[2]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[3]),
        .Q(Q[3]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[4]),
        .Q(Q[4]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[5] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[5]),
        .Q(Q[5]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[6] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[6]),
        .Q(Q[6]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[7] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[7]),
        .Q(Q[7]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[8] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[8]),
        .Q(Q[8]),
        .R(SR));
  FDRE \gt_rxdata_q_reg[9] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXDATA[9]),
        .Q(Q[9]),
        .R(SR));
  FDRE gt_rxelecidle_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(PIPE_RXELECIDLE),
        .Q(\pipe_stages_1.pipe_rx_elec_idle_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'h00010116)) 
    gt_rxvalid_q
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[1]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[3]),
        .I4(state_eios_det[4]),
        .O(gt_rxvalid_q_n_0));
  LUT5 #(
    .INIT(32'hFFAAEAAA)) 
    gt_rxvalid_q_i_1__2
       (.I0(gt_rxvalid_q_i_2__2_n_0),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[3]_i_2__2_n_0 ),
        .I3(gt_rxvalid_q_reg_0),
        .I4(state_eios_det[0]),
        .O(gt_rxvalid_q__0));
  LUT6 #(
    .INIT(64'hFFF50000CC550000)) 
    gt_rxvalid_q_i_2__2
       (.I0(gt_rxvalid_q_n_0),
        .I1(\pl_ltssm_state_q_reg[5] ),
        .I2(\reg_state_eios_det[4]_i_3__2_n_0 ),
        .I3(state_eios_det[4]),
        .I4(gt_rxvalid_q_reg_0),
        .I5(\reg_state_eios_det[0]_i_3__2_n_0 ),
        .O(gt_rxvalid_q_i_2__2_n_0));
  FDRE gt_rxvalid_q_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(gt_rxvalid_q__0),
        .Q(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pipe_stages_1.pipe_rx_char_is_k_q[0]_i_1__2 
       (.I0(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I1(\gt_rxcharisk_q_reg_n_0_[0] ),
        .O(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] [0]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \pipe_stages_1.pipe_rx_char_is_k_q[1]_i_1__2 
       (.I0(p_1_in),
        .I1(\pipe_stages_1.pipe_rx_valid_q_reg ),
        .I2(symbol_after_eios),
        .O(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] [1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFEEE)) 
    \reg_state_eios_det[0]_i_1__2 
       (.I0(state_eios_det[4]),
        .I1(\reg_state_eios_det[0]_i_2__2_n_0 ),
        .I2(\reg_state_eios_det[1]_i_2__2_n_0 ),
        .I3(\reg_state_eios_det[0]_i_3__2_n_0 ),
        .I4(\reg_state_eios_det[0]_i_4__2_n_0 ),
        .I5(\reg_state_eios_det[0]_i_5__2_n_0 ),
        .O(reg_state_eios_det[0]));
  LUT6 #(
    .INIT(64'hFFAA8A8AFF00FFAA)) 
    \reg_state_eios_det[0]_i_2__2 
       (.I0(state_eios_det[0]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(state_eios_det[2]),
        .I4(Q[15]),
        .I5(Q[14]),
        .O(\reg_state_eios_det[0]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \reg_state_eios_det[0]_i_3__2 
       (.I0(state_eios_det[3]),
        .I1(state_eios_det[1]),
        .I2(state_eios_det[2]),
        .O(\reg_state_eios_det[0]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \reg_state_eios_det[0]_i_4__2 
       (.I0(state_eios_det[0]),
        .I1(Q[15]),
        .O(\reg_state_eios_det[0]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFE0E0E0FFE0FFE0)) 
    \reg_state_eios_det[0]_i_5__2 
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[2]_i_2__2_n_0 ),
        .I3(\reg_state_eios_det[0]_i_3__2_n_0 ),
        .I4(Q[7]),
        .I5(Q[6]),
        .O(\reg_state_eios_det[0]_i_5__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \reg_state_eios_det[1]_i_1__2 
       (.I0(\reg_state_eios_det[1]_i_2__2_n_0 ),
        .I1(state_eios_det[0]),
        .I2(Q[7]),
        .I3(Q[6]),
        .I4(\reg_state_eios_det[3]_i_2__2_n_0 ),
        .O(reg_state_eios_det[1]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'hBFFF)) 
    \reg_state_eios_det[1]_i_2__2 
       (.I0(\reg_state_eios_det[1]_i_3__2_n_0 ),
        .I1(\gt_rxcharisk_q_reg_n_0_[0] ),
        .I2(Q[4]),
        .I3(Q[5]),
        .O(\reg_state_eios_det[1]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \reg_state_eios_det[1]_i_3__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(\reg_state_eios_det[1]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \reg_state_eios_det[2]_i_1__2 
       (.I0(Q[14]),
        .I1(Q[15]),
        .I2(state_eios_det[0]),
        .I3(\reg_state_eios_det[2]_i_2__2_n_0 ),
        .O(reg_state_eios_det[2]));
  LUT4 #(
    .INIT(16'hBFFF)) 
    \reg_state_eios_det[2]_i_2__2 
       (.I0(\reg_state_eios_det[2]_i_3__2_n_0 ),
        .I1(p_1_in),
        .I2(Q[12]),
        .I3(Q[13]),
        .O(\reg_state_eios_det[2]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \reg_state_eios_det[2]_i_3__2 
       (.I0(Q[9]),
        .I1(Q[8]),
        .I2(Q[11]),
        .I3(Q[10]),
        .O(\reg_state_eios_det[2]_i_3__2_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \reg_state_eios_det[3]_i_1__2 
       (.I0(\reg_state_eios_det[3]_i_2__2_n_0 ),
        .I1(state_eios_det[2]),
        .I2(\reg_state_eios_det[4]_i_3__2_n_0 ),
        .O(reg_state_eios_det[3]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \reg_state_eios_det[3]_i_2__2 
       (.I0(Q[14]),
        .I1(Q[15]),
        .I2(\reg_state_eios_det[2]_i_2__2_n_0 ),
        .O(\reg_state_eios_det[3]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h00010116)) 
    \reg_state_eios_det[4]_i_1__2 
       (.I0(state_eios_det[0]),
        .I1(state_eios_det[4]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[1]),
        .I4(state_eios_det[3]),
        .O(\reg_state_eios_det[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    \reg_state_eios_det[4]_i_2__2 
       (.I0(state_eios_det[3]),
        .I1(state_eios_det[1]),
        .I2(\reg_state_eios_det[4]_i_3__2_n_0 ),
        .O(reg_state_eios_det[4]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \reg_state_eios_det[4]_i_3__2 
       (.I0(Q[6]),
        .I1(Q[7]),
        .I2(\reg_state_eios_det[1]_i_2__2_n_0 ),
        .O(\reg_state_eios_det[4]_i_3__2_n_0 ));
  FDSE \reg_state_eios_det_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__2_n_0 ),
        .D(reg_state_eios_det[0]),
        .Q(state_eios_det[0]),
        .S(SR));
  FDRE \reg_state_eios_det_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__2_n_0 ),
        .D(reg_state_eios_det[1]),
        .Q(state_eios_det[1]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__2_n_0 ),
        .D(reg_state_eios_det[2]),
        .Q(state_eios_det[2]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__2_n_0 ),
        .D(reg_state_eios_det[3]),
        .Q(state_eios_det[3]),
        .R(SR));
  FDRE \reg_state_eios_det_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(\reg_state_eios_det[4]_i_1__2_n_0 ),
        .D(reg_state_eios_det[4]),
        .Q(state_eios_det[4]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    reg_symbol_after_eios_i_1__2
       (.I0(\reg_state_eios_det[3]_i_2__2_n_0 ),
        .I1(state_eios_det[0]),
        .I2(state_eios_det[2]),
        .I3(state_eios_det[3]),
        .I4(state_eios_det[1]),
        .I5(reg_symbol_after_eios_i_2__2_n_0),
        .O(reg_symbol_after_eios_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'hE)) 
    reg_symbol_after_eios_i_2__2
       (.I0(\reg_state_eios_det[4]_i_3__2_n_0 ),
        .I1(state_eios_det[4]),
        .O(reg_symbol_after_eios_i_2__2_n_0));
  FDRE reg_symbol_after_eios_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(reg_symbol_after_eios_i_1__2_n_0),
        .Q(symbol_after_eios),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_top" *) 
module pcie_7x_0_pcie_7x_0_gt_top
   (INT_RXUSRCLK_OUT,
    pipe_rx0_valid_gt,
    phy_rdy_n_int,
    pipe_rx1_valid_gt,
    pipe_rx2_valid_gt,
    pipe_rx3_valid_gt,
    \pipe_stages_1.pipe_rx_phy_status_q_reg ,
    \pipe_stages_1.pipe_rx_elec_idle_q_reg ,
    \pipe_stages_1.pipe_rx_phy_status_q_reg_0 ,
    \pipe_stages_1.pipe_rx_elec_idle_q_reg_0 ,
    \pipe_stages_1.pipe_rx_phy_status_q_reg_1 ,
    \pipe_stages_1.pipe_rx_elec_idle_q_reg_1 ,
    gt_rx_phy_status_q,
    gt_rxelecidle_q,
    Q,
    \index_reg[2] ,
    \fsm_reg[4] ,
    \index_reg[2]_0 ,
    PIPE_SYNC_FSM_TX,
    \fsm_reg[4]_0 ,
    \index_reg[2]_1 ,
    \fsm_reg[4]_1 ,
    \index_reg[2]_2 ,
    sys_rst_n,
    INT_MMCM_LOCK_OUT,
    \pipe_stages_1.pipe_rx_data_q_reg[15] ,
    \pipe_stages_1.pipe_rx_data_q_reg[15]_0 ,
    \pipe_stages_1.pipe_rx_data_q_reg[15]_1 ,
    \pipe_stages_1.pipe_rx_data_q_reg[15]_2 ,
    \pipe_stages_1.pipe_rx_status_q_reg[2] ,
    \pipe_stages_1.pipe_rx_status_q_reg[2]_0 ,
    \pipe_stages_1.pipe_rx_status_q_reg[2]_1 ,
    \pipe_stages_1.pipe_rx_status_q_reg[2]_2 ,
    pipe_rxstatus,
    D,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 ,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 ,
    pipe_txoutclk_out,
    INT_DCLK_OUT,
    INT_USERCLK1_OUT,
    INT_CLK_100MHZ,
    out,
    pipe_rst_fsm,
    PIPE_CPLL_LOCK,
    pipe_qrst_idle,
    PIPE_QRST_FSM,
    pipe_qrst_fsm,
    QPLL_QPLLLOCK,
    pclk_sel_reg1_reg,
    USER_RATE_GEN3,
    ext_ch_gt_drprdy,
    ext_ch_gt_drpdo,
    QPLL_QPLLOUTCLK,
    QPLL_QPLLOUTREFCLK,
    pipe_sync_fsm_rx,
    PIPE_RXPHALIGNDONE,
    pipe_eyescandataerror,
    pci_exp_txn,
    pci_exp_txp,
    PIPE_RXCHANISALIGNED,
    pipe_rxcommadet,
    pipe_rxdlysresetdone,
    pipe_rxoutclk_out,
    pipe_rxprbserr,
    pipe_txdlysresetdone,
    pipe_txphaligndone,
    pipe_txphinitdone,
    pipe_rxbufstatus,
    pipe_dmonitorout,
    pipe_rxdisperr,
    pipe_rxnotintable,
    pipe_rate_idle,
    reset_n_reg1_reg,
    gt_ch_drp_rdy,
    ext_ch_gt_drpaddr,
    pl_ltssm_state,
    sys_clk,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    pci_exp_rxn,
    pci_exp_rxp,
    PIPE_RXPOLARITY,
    pipe_rxprbscntreset,
    pipe_tx_deemph_gt,
    pipe_tx_rcvr_det_gt,
    pipe_txinhibit,
    pipe_txprbsforceerr,
    PIPE_POWERDOWN,
    pipe_loopback,
    pipe_rxprbssel,
    \pipe_stages_1.pipe_tx_margin_q_reg[2] ,
    pipe_txprbssel,
    PIPE_TXDATA,
    PIPE_TXDATAK,
    int_pclk_sel_slave,
    ext_ch_gt_drpdi,
    ext_ch_gt_drpen,
    ext_ch_gt_drpwe,
    sys_rst_n_0,
    pipe_mmcm_rst_n);
  output INT_RXUSRCLK_OUT;
  output pipe_rx0_valid_gt;
  output phy_rdy_n_int;
  output pipe_rx1_valid_gt;
  output pipe_rx2_valid_gt;
  output pipe_rx3_valid_gt;
  output \pipe_stages_1.pipe_rx_phy_status_q_reg ;
  output \pipe_stages_1.pipe_rx_elec_idle_q_reg ;
  output \pipe_stages_1.pipe_rx_phy_status_q_reg_0 ;
  output \pipe_stages_1.pipe_rx_elec_idle_q_reg_0 ;
  output \pipe_stages_1.pipe_rx_phy_status_q_reg_1 ;
  output \pipe_stages_1.pipe_rx_elec_idle_q_reg_1 ;
  output gt_rx_phy_status_q;
  output gt_rxelecidle_q;
  output [4:0]Q;
  output [2:0]\index_reg[2] ;
  output [4:0]\fsm_reg[4] ;
  output [2:0]\index_reg[2]_0 ;
  output [23:0]PIPE_SYNC_FSM_TX;
  output [4:0]\fsm_reg[4]_0 ;
  output [2:0]\index_reg[2]_1 ;
  output [4:0]\fsm_reg[4]_1 ;
  output [2:0]\index_reg[2]_2 ;
  output sys_rst_n;
  output INT_MMCM_LOCK_OUT;
  output [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15] ;
  output [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_0 ;
  output [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_1 ;
  output [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_2 ;
  output [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  output [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_0 ;
  output [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_1 ;
  output [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_2 ;
  output [11:0]pipe_rxstatus;
  output [1:0]D;
  output [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  output [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 ;
  output [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 ;
  output pipe_txoutclk_out;
  output INT_DCLK_OUT;
  output INT_USERCLK1_OUT;
  output INT_CLK_100MHZ;
  output [1:0]out;
  output [3:0]pipe_rst_fsm;
  output [3:0]PIPE_CPLL_LOCK;
  output pipe_qrst_idle;
  output [0:0]PIPE_QRST_FSM;
  output [2:0]pipe_qrst_fsm;
  output QPLL_QPLLLOCK;
  output [3:0]pclk_sel_reg1_reg;
  output USER_RATE_GEN3;
  output [3:0]ext_ch_gt_drprdy;
  output [63:0]ext_ch_gt_drpdo;
  output QPLL_QPLLOUTCLK;
  output QPLL_QPLLOUTREFCLK;
  output [3:0]pipe_sync_fsm_rx;
  output [3:0]PIPE_RXPHALIGNDONE;
  output [3:0]pipe_eyescandataerror;
  output [3:0]pci_exp_txn;
  output [3:0]pci_exp_txp;
  output [3:0]PIPE_RXCHANISALIGNED;
  output [3:0]pipe_rxcommadet;
  output [3:0]pipe_rxdlysresetdone;
  output [3:0]pipe_rxoutclk_out;
  output [3:0]pipe_rxprbserr;
  output [3:0]pipe_txdlysresetdone;
  output [3:0]pipe_txphaligndone;
  output [3:0]pipe_txphinitdone;
  output [11:0]pipe_rxbufstatus;
  output [31:0]pipe_dmonitorout;
  output [31:0]pipe_rxdisperr;
  output [31:0]pipe_rxnotintable;
  output pipe_rate_idle;
  output reset_n_reg1_reg;
  output [3:0]gt_ch_drp_rdy;
  input [35:0]ext_ch_gt_drpaddr;
  input [5:0]pl_ltssm_state;
  input sys_clk;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input [3:0]PIPE_TXCOMPLIANCE;
  input [3:0]PIPE_TXELECIDLE;
  input [3:0]pci_exp_rxn;
  input [3:0]pci_exp_rxp;
  input [3:0]PIPE_RXPOLARITY;
  input pipe_rxprbscntreset;
  input pipe_tx_deemph_gt;
  input pipe_tx_rcvr_det_gt;
  input [3:0]pipe_txinhibit;
  input pipe_txprbsforceerr;
  input [7:0]PIPE_POWERDOWN;
  input [2:0]pipe_loopback;
  input [2:0]pipe_rxprbssel;
  input [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  input [2:0]pipe_txprbssel;
  input [63:0]PIPE_TXDATA;
  input [7:0]PIPE_TXDATAK;
  input [3:0]int_pclk_sel_slave;
  input [63:0]ext_ch_gt_drpdi;
  input [3:0]ext_ch_gt_drpen;
  input [3:0]ext_ch_gt_drpwe;
  input sys_rst_n_0;
  input pipe_mmcm_rst_n;

  wire [1:0]D;
  wire INT_CLK_100MHZ;
  wire INT_DCLK_OUT;
  wire INT_MMCM_LOCK_OUT;
  wire INT_RXUSRCLK_OUT;
  wire INT_USERCLK1_OUT;
  wire [3:0]PIPE_CPLL_LOCK;
  wire [7:0]PIPE_POWERDOWN;
  wire [0:0]PIPE_QRST_FSM;
  wire [3:0]PIPE_RXCHANISALIGNED;
  wire [3:0]PIPE_RXPHALIGNDONE;
  wire [3:0]PIPE_RXPOLARITY;
  wire [23:0]PIPE_SYNC_FSM_TX;
  wire [3:0]PIPE_TXCOMPLIANCE;
  wire [63:0]PIPE_TXDATA;
  wire [7:0]PIPE_TXDATAK;
  wire [3:0]PIPE_TXELECIDLE;
  wire [4:0]Q;
  wire QPLL_QPLLLOCK;
  wire QPLL_QPLLOUTCLK;
  wire QPLL_QPLLOUTREFCLK;
  wire USER_RATE_GEN3;
  wire [35:0]ext_ch_gt_drpaddr;
  wire [63:0]ext_ch_gt_drpdi;
  wire [63:0]ext_ch_gt_drpdo;
  wire [3:0]ext_ch_gt_drpen;
  wire [3:0]ext_ch_gt_drprdy;
  wire [3:0]ext_ch_gt_drpwe;
  wire [4:0]\fsm_reg[4] ;
  wire [4:0]\fsm_reg[4]_0 ;
  wire [4:0]\fsm_reg[4]_1 ;
  wire [3:0]gt_ch_drp_rdy;
  wire gt_rx_phy_status_q;
  wire \gt_rx_valid_filter[0].GT_RX_VALID_FILTER_7x_inst_n_3 ;
  wire gt_rxelecidle_q;
  wire [2:0]\index_reg[2] ;
  wire [2:0]\index_reg[2]_0 ;
  wire [2:0]\index_reg[2]_1 ;
  wire [2:0]\index_reg[2]_2 ;
  wire [3:0]int_pclk_sel_slave;
  wire [1:0]out;
  wire [3:0]pci_exp_rxn;
  wire [3:0]pci_exp_rxp;
  wire [3:0]pci_exp_txn;
  wire [3:0]pci_exp_txp;
  wire pclk_sel_i_1__3_n_0;
  wire [3:0]pclk_sel_reg1_reg;
  wire phy_rdy_n_int;
  wire \pipe_clock_int.pipe_clock_i/RST0 ;
  wire \pipe_clock_int.pipe_clock_i/S00 ;
  wire [3:0]\pipe_clock_int.pipe_clock_i/p_0_in ;
  wire \pipe_clock_int.pipe_clock_i/pclk_sel ;
  wire [31:0]pipe_dmonitorout;
  wire [3:0]pipe_eyescandataerror;
  wire \pipe_lane[0].gt_wrapper_i/CPLLPD0 ;
  wire \pipe_lane[0].gt_wrapper_i/cpllpd ;
  wire \pipe_lane[1].gt_wrapper_i/CPLLPD0 ;
  wire \pipe_lane[1].gt_wrapper_i/cpllpd ;
  wire \pipe_lane[2].gt_wrapper_i/CPLLPD0 ;
  wire \pipe_lane[2].gt_wrapper_i/cpllpd ;
  wire \pipe_lane[3].gt_wrapper_i/CPLLPD0 ;
  wire \pipe_lane[3].gt_wrapper_i/cpllpd ;
  wire [2:0]pipe_loopback;
  wire pipe_mmcm_rst_n;
  wire [2:0]pipe_qrst_fsm;
  wire pipe_qrst_idle;
  wire pipe_rate_idle;
  wire [3:0]pipe_rst_fsm;
  wire pipe_rx0_valid_gt;
  wire pipe_rx1_valid_gt;
  wire pipe_rx2_valid_gt;
  wire pipe_rx3_valid_gt;
  wire [11:0]pipe_rxbufstatus;
  wire [3:0]pipe_rxcommadet;
  wire [31:0]pipe_rxdisperr;
  wire [3:0]pipe_rxdlysresetdone;
  wire [31:0]pipe_rxnotintable;
  wire [3:0]pipe_rxoutclk_out;
  wire pipe_rxprbscntreset;
  wire [3:0]pipe_rxprbserr;
  wire [2:0]pipe_rxprbssel;
  wire [11:0]pipe_rxstatus;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 ;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 ;
  wire [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15] ;
  wire [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_0 ;
  wire [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_1 ;
  wire [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_2 ;
  wire \pipe_stages_1.pipe_rx_elec_idle_q_reg ;
  wire \pipe_stages_1.pipe_rx_elec_idle_q_reg_0 ;
  wire \pipe_stages_1.pipe_rx_elec_idle_q_reg_1 ;
  wire \pipe_stages_1.pipe_rx_phy_status_q_reg ;
  wire \pipe_stages_1.pipe_rx_phy_status_q_reg_0 ;
  wire \pipe_stages_1.pipe_rx_phy_status_q_reg_1 ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_0 ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_1 ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_2 ;
  wire [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  wire [3:0]pipe_sync_fsm_rx;
  wire pipe_tx_deemph_gt;
  wire pipe_tx_rcvr_det_gt;
  wire [3:0]pipe_txdlysresetdone;
  wire [3:0]pipe_txinhibit;
  wire pipe_txoutclk_out;
  wire [3:0]pipe_txphaligndone;
  wire [3:0]pipe_txphinitdone;
  wire pipe_txprbsforceerr;
  wire [2:0]pipe_txprbssel;
  wire pipe_wrapper_i_n_15;
  wire pipe_wrapper_i_n_16;
  wire pipe_wrapper_i_n_164;
  wire pipe_wrapper_i_n_165;
  wire pipe_wrapper_i_n_166;
  wire pipe_wrapper_i_n_167;
  wire pipe_wrapper_i_n_168;
  wire pipe_wrapper_i_n_169;
  wire pipe_wrapper_i_n_17;
  wire pipe_wrapper_i_n_170;
  wire pipe_wrapper_i_n_171;
  wire pipe_wrapper_i_n_172;
  wire pipe_wrapper_i_n_173;
  wire pipe_wrapper_i_n_174;
  wire pipe_wrapper_i_n_175;
  wire pipe_wrapper_i_n_176;
  wire pipe_wrapper_i_n_177;
  wire pipe_wrapper_i_n_178;
  wire pipe_wrapper_i_n_179;
  wire pipe_wrapper_i_n_18;
  wire pipe_wrapper_i_n_19;
  wire pipe_wrapper_i_n_20;
  wire pipe_wrapper_i_n_21;
  wire pipe_wrapper_i_n_212;
  wire pipe_wrapper_i_n_213;
  wire pipe_wrapper_i_n_286;
  wire pipe_wrapper_i_n_290;
  wire pipe_wrapper_i_n_291;
  wire pipe_wrapper_i_n_292;
  wire pipe_wrapper_i_n_293;
  wire pipe_wrapper_i_n_294;
  wire pipe_wrapper_i_n_295;
  wire pipe_wrapper_i_n_296;
  wire pipe_wrapper_i_n_297;
  wire pipe_wrapper_i_n_298;
  wire pipe_wrapper_i_n_299;
  wire pipe_wrapper_i_n_300;
  wire pipe_wrapper_i_n_301;
  wire pipe_wrapper_i_n_302;
  wire pipe_wrapper_i_n_303;
  wire pipe_wrapper_i_n_304;
  wire pipe_wrapper_i_n_305;
  wire pipe_wrapper_i_n_306;
  wire pipe_wrapper_i_n_307;
  wire pipe_wrapper_i_n_314;
  wire pipe_wrapper_i_n_315;
  wire pipe_wrapper_i_n_316;
  wire pipe_wrapper_i_n_317;
  wire pipe_wrapper_i_n_318;
  wire pipe_wrapper_i_n_319;
  wire pipe_wrapper_i_n_320;
  wire pipe_wrapper_i_n_321;
  wire pipe_wrapper_i_n_322;
  wire pipe_wrapper_i_n_323;
  wire pipe_wrapper_i_n_324;
  wire pipe_wrapper_i_n_325;
  wire pipe_wrapper_i_n_326;
  wire pipe_wrapper_i_n_327;
  wire pipe_wrapper_i_n_328;
  wire pipe_wrapper_i_n_329;
  wire pipe_wrapper_i_n_330;
  wire pipe_wrapper_i_n_331;
  wire pipe_wrapper_i_n_332;
  wire pipe_wrapper_i_n_339;
  wire pipe_wrapper_i_n_340;
  wire pipe_wrapper_i_n_341;
  wire pipe_wrapper_i_n_342;
  wire pipe_wrapper_i_n_343;
  wire pipe_wrapper_i_n_344;
  wire pipe_wrapper_i_n_345;
  wire pipe_wrapper_i_n_346;
  wire pipe_wrapper_i_n_347;
  wire pipe_wrapper_i_n_348;
  wire pipe_wrapper_i_n_349;
  wire pipe_wrapper_i_n_350;
  wire pipe_wrapper_i_n_351;
  wire pipe_wrapper_i_n_352;
  wire pipe_wrapper_i_n_353;
  wire pipe_wrapper_i_n_354;
  wire pipe_wrapper_i_n_355;
  wire pipe_wrapper_i_n_356;
  wire pipe_wrapper_i_n_357;
  wire pipe_wrapper_i_n_365;
  wire pipe_wrapper_i_n_366;
  wire pipe_wrapper_i_n_403;
  wire pipe_wrapper_i_n_404;
  wire pipe_wrapper_i_n_405;
  wire pipe_wrapper_i_n_406;
  wire pipe_wrapper_i_n_407;
  wire pipe_wrapper_i_n_408;
  wire pipe_wrapper_i_n_417;
  wire pipe_wrapper_i_n_418;
  wire pipe_wrapper_i_n_426;
  wire pipe_wrapper_i_n_427;
  wire pipe_wrapper_i_n_428;
  wire pipe_wrapper_i_n_429;
  wire pipe_wrapper_i_n_54;
  wire [5:0]pl_ltssm_state;
  wire [5:0]pl_ltssm_state_q;
  wire \qpll_reset.qpll_reset_i/fsm2 ;
  wire qpllpd;
  wire qpllpd_i_1__3_n_0;
  wire qpllreset_i_1__3_n_0;
  wire qpllreset_i_2_n_0;
  wire qrst_qpllreset;
  wire rate_cpllpd_0;
  wire rate_cpllpd_1;
  wire rate_cpllpd_2;
  wire rate_cpllpd_3;
  wire reg_clock_locked;
  wire reset_n_reg1_reg;
  wire sys_clk;
  wire sys_rst_n;
  wire sys_rst_n_0;

  LUT5 #(
    .INIT(32'h80000000)) 
    \FSM_sequential_fsm[1]_i_2 
       (.I0(pipe_wrapper_i_n_21),
        .I1(pipe_wrapper_i_n_17),
        .I2(pipe_wrapper_i_n_18),
        .I3(pipe_wrapper_i_n_20),
        .I4(pipe_wrapper_i_n_19),
        .O(\qpll_reset.qpll_reset_i/fsm2 ));
  pcie_7x_0_pcie_7x_0_gt_rx_valid_filter_7x \gt_rx_valid_filter[0].GT_RX_VALID_FILTER_7x_inst 
       (.D(D),
        .INT_RXUSRCLK_OUT(INT_RXUSRCLK_OUT),
        .PIPE_RXDATA({pipe_wrapper_i_n_164,pipe_wrapper_i_n_165,pipe_wrapper_i_n_166,pipe_wrapper_i_n_167,pipe_wrapper_i_n_168,pipe_wrapper_i_n_169,pipe_wrapper_i_n_170,pipe_wrapper_i_n_171,pipe_wrapper_i_n_172,pipe_wrapper_i_n_173,pipe_wrapper_i_n_174,pipe_wrapper_i_n_175,pipe_wrapper_i_n_176,pipe_wrapper_i_n_177,pipe_wrapper_i_n_178,pipe_wrapper_i_n_179}),
        .PIPE_RXDATAK({pipe_wrapper_i_n_212,pipe_wrapper_i_n_213}),
        .PIPE_RXELECIDLE(pipe_wrapper_i_n_54),
        .Q(\pipe_stages_1.pipe_rx_data_q_reg[15] ),
        .SR(phy_rdy_n_int),
        .gt_rx_phy_status_q(gt_rx_phy_status_q),
        .\gt_rx_status_q_reg[0]_0 (\gt_rx_valid_filter[0].GT_RX_VALID_FILTER_7x_inst_n_3 ),
        .gt_rxelecidle_q(gt_rxelecidle_q),
        .gt_rxvalid_q_reg_0(pipe_wrapper_i_n_405),
        .pipe_rxstatus(pipe_rxstatus[2:0]),
        .\pipe_stages_1.pipe_rx_status_q_reg[2] (\pipe_stages_1.pipe_rx_status_q_reg[2]_2 ),
        .\pipe_stages_1.pipe_rx_valid_q_reg (pipe_rx0_valid_gt),
        .\pl_ltssm_state_q_reg[5] (pl_ltssm_state_q),
        .rate_idle_reg2_reg(pipe_wrapper_i_n_426));
  pcie_7x_0_pcie_7x_0_gt_rx_valid_filter_7x_18 \gt_rx_valid_filter[1].GT_RX_VALID_FILTER_7x_inst 
       (.INT_RXUSRCLK_OUT(INT_RXUSRCLK_OUT),
        .PIPE_RXDATA({pipe_wrapper_i_n_290,pipe_wrapper_i_n_291,pipe_wrapper_i_n_292,pipe_wrapper_i_n_293,pipe_wrapper_i_n_294,pipe_wrapper_i_n_295,pipe_wrapper_i_n_296,pipe_wrapper_i_n_297,pipe_wrapper_i_n_298,pipe_wrapper_i_n_299,pipe_wrapper_i_n_300,pipe_wrapper_i_n_301,pipe_wrapper_i_n_302,pipe_wrapper_i_n_303,pipe_wrapper_i_n_304,pipe_wrapper_i_n_305}),
        .PIPE_RXDATAK({pipe_wrapper_i_n_306,pipe_wrapper_i_n_307}),
        .PIPE_RXELECIDLE(pipe_wrapper_i_n_286),
        .Q(\pipe_stages_1.pipe_rx_data_q_reg[15]_0 ),
        .SR(phy_rdy_n_int),
        .gt_rxvalid_q_reg_0(pipe_wrapper_i_n_406),
        .pipe_rxstatus(pipe_rxstatus[5:3]),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] (\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ),
        .\pipe_stages_1.pipe_rx_elec_idle_q_reg (\pipe_stages_1.pipe_rx_elec_idle_q_reg ),
        .\pipe_stages_1.pipe_rx_phy_status_q_reg (\pipe_stages_1.pipe_rx_phy_status_q_reg ),
        .\pipe_stages_1.pipe_rx_status_q_reg[2] (\pipe_stages_1.pipe_rx_status_q_reg[2] ),
        .\pipe_stages_1.pipe_rx_valid_q_reg (pipe_rx1_valid_gt),
        .\pl_ltssm_state_q_reg[5] (\gt_rx_valid_filter[0].GT_RX_VALID_FILTER_7x_inst_n_3 ),
        .rate_idle_reg2_reg(pipe_wrapper_i_n_427));
  pcie_7x_0_pcie_7x_0_gt_rx_valid_filter_7x_19 \gt_rx_valid_filter[2].GT_RX_VALID_FILTER_7x_inst 
       (.INT_RXUSRCLK_OUT(INT_RXUSRCLK_OUT),
        .PIPE_RXDATA({pipe_wrapper_i_n_315,pipe_wrapper_i_n_316,pipe_wrapper_i_n_317,pipe_wrapper_i_n_318,pipe_wrapper_i_n_319,pipe_wrapper_i_n_320,pipe_wrapper_i_n_321,pipe_wrapper_i_n_322,pipe_wrapper_i_n_323,pipe_wrapper_i_n_324,pipe_wrapper_i_n_325,pipe_wrapper_i_n_326,pipe_wrapper_i_n_327,pipe_wrapper_i_n_328,pipe_wrapper_i_n_329,pipe_wrapper_i_n_330}),
        .PIPE_RXDATAK({pipe_wrapper_i_n_331,pipe_wrapper_i_n_332}),
        .PIPE_RXELECIDLE(pipe_wrapper_i_n_314),
        .Q(\pipe_stages_1.pipe_rx_data_q_reg[15]_1 ),
        .SR(phy_rdy_n_int),
        .gt_rxvalid_q_reg_0(pipe_wrapper_i_n_407),
        .pipe_rxstatus(pipe_rxstatus[8:6]),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] (\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 ),
        .\pipe_stages_1.pipe_rx_elec_idle_q_reg (\pipe_stages_1.pipe_rx_elec_idle_q_reg_0 ),
        .\pipe_stages_1.pipe_rx_phy_status_q_reg (\pipe_stages_1.pipe_rx_phy_status_q_reg_0 ),
        .\pipe_stages_1.pipe_rx_status_q_reg[2] (\pipe_stages_1.pipe_rx_status_q_reg[2]_0 ),
        .\pipe_stages_1.pipe_rx_valid_q_reg (pipe_rx2_valid_gt),
        .\pl_ltssm_state_q_reg[5] (\gt_rx_valid_filter[0].GT_RX_VALID_FILTER_7x_inst_n_3 ),
        .rate_idle_reg2_reg(pipe_wrapper_i_n_428));
  pcie_7x_0_pcie_7x_0_gt_rx_valid_filter_7x_20 \gt_rx_valid_filter[3].GT_RX_VALID_FILTER_7x_inst 
       (.INT_RXUSRCLK_OUT(INT_RXUSRCLK_OUT),
        .PIPE_RXDATA({pipe_wrapper_i_n_340,pipe_wrapper_i_n_341,pipe_wrapper_i_n_342,pipe_wrapper_i_n_343,pipe_wrapper_i_n_344,pipe_wrapper_i_n_345,pipe_wrapper_i_n_346,pipe_wrapper_i_n_347,pipe_wrapper_i_n_348,pipe_wrapper_i_n_349,pipe_wrapper_i_n_350,pipe_wrapper_i_n_351,pipe_wrapper_i_n_352,pipe_wrapper_i_n_353,pipe_wrapper_i_n_354,pipe_wrapper_i_n_355}),
        .PIPE_RXDATAK({pipe_wrapper_i_n_356,pipe_wrapper_i_n_357}),
        .PIPE_RXELECIDLE(pipe_wrapper_i_n_339),
        .Q(\pipe_stages_1.pipe_rx_data_q_reg[15]_2 ),
        .SR(phy_rdy_n_int),
        .gt_rxvalid_q_reg_0(pipe_wrapper_i_n_408),
        .pipe_rxstatus(pipe_rxstatus[11:9]),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] (\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 ),
        .\pipe_stages_1.pipe_rx_elec_idle_q_reg (\pipe_stages_1.pipe_rx_elec_idle_q_reg_1 ),
        .\pipe_stages_1.pipe_rx_phy_status_q_reg (\pipe_stages_1.pipe_rx_phy_status_q_reg_1 ),
        .\pipe_stages_1.pipe_rx_status_q_reg[2] (\pipe_stages_1.pipe_rx_status_q_reg[2]_1 ),
        .\pipe_stages_1.pipe_rx_valid_q_reg (pipe_rx3_valid_gt),
        .\pl_ltssm_state_q_reg[5] (\gt_rx_valid_filter[0].GT_RX_VALID_FILTER_7x_inst_n_3 ),
        .rate_idle_reg2_reg(pipe_wrapper_i_n_429));
  LUT2 #(
    .INIT(4'hE)) 
    \gtx_channel.gtxe2_channel_i_i_1 
       (.I0(\pipe_lane[0].gt_wrapper_i/cpllpd ),
        .I1(rate_cpllpd_0),
        .O(\pipe_lane[0].gt_wrapper_i/CPLLPD0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \gtx_channel.gtxe2_channel_i_i_1__0 
       (.I0(\pipe_lane[1].gt_wrapper_i/cpllpd ),
        .I1(rate_cpllpd_1),
        .O(\pipe_lane[1].gt_wrapper_i/CPLLPD0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \gtx_channel.gtxe2_channel_i_i_1__1 
       (.I0(\pipe_lane[2].gt_wrapper_i/cpllpd ),
        .I1(rate_cpllpd_2),
        .O(\pipe_lane[2].gt_wrapper_i/CPLLPD0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \gtx_channel.gtxe2_channel_i_i_1__2 
       (.I0(\pipe_lane[3].gt_wrapper_i/cpllpd ),
        .I1(rate_cpllpd_3),
        .O(\pipe_lane[3].gt_wrapper_i/CPLLPD0 ));
  LUT1 #(
    .INIT(2'h1)) 
    mmcm_i_i_1
       (.I0(pipe_mmcm_rst_n),
        .O(\pipe_clock_int.pipe_clock_i/RST0 ));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_33
       (.I0(phy_rdy_n_int),
        .O(sys_rst_n));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \pclk_i1_bufgctrl.pclk_i1_i_1 
       (.I0(\pipe_clock_int.pipe_clock_i/pclk_sel ),
        .O(\pipe_clock_int.pipe_clock_i/S00 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT5 #(
    .INIT(32'hFFFE8000)) 
    pclk_sel_i_1__3
       (.I0(\pipe_clock_int.pipe_clock_i/p_0_in [3]),
        .I1(\pipe_clock_int.pipe_clock_i/p_0_in [2]),
        .I2(\pipe_clock_int.pipe_clock_i/p_0_in [0]),
        .I3(\pipe_clock_int.pipe_clock_i/p_0_in [1]),
        .I4(\pipe_clock_int.pipe_clock_i/pclk_sel ),
        .O(pclk_sel_i_1__3_n_0));
  FDRE phy_rdy_n_int_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .D(pipe_wrapper_i_n_403),
        .Q(phy_rdy_n_int),
        .R(1'b0));
  pcie_7x_0_pcie_7x_0_pipe_wrapper pipe_wrapper_i
       (.CLK(INT_DCLK_OUT),
        .CPLLPD0(\pipe_lane[0].gt_wrapper_i/CPLLPD0 ),
        .CPLLPD0_3(\pipe_lane[1].gt_wrapper_i/CPLLPD0 ),
        .CPLLPD0_4(\pipe_lane[2].gt_wrapper_i/CPLLPD0 ),
        .CPLLPD0_5(\pipe_lane[3].gt_wrapper_i/CPLLPD0 ),
        .D(pclk_sel_reg1_reg),
        .DRP_FSM(\index_reg[2] ),
        .\FSM_sequential_fsm_reg[0] (qpllpd_i_1__3_n_0),
        .\FSM_sequential_fsm_reg[1] ({pipe_wrapper_i_n_17,pipe_wrapper_i_n_18,pipe_wrapper_i_n_19,pipe_wrapper_i_n_20}),
        .\FSM_sequential_fsm_reg[1]_0 (pipe_wrapper_i_n_21),
        .\FSM_sequential_fsm_reg[2] ({pipe_wrapper_i_n_417,pipe_wrapper_i_n_418,PIPE_QRST_FSM}),
        .\FSM_sequential_fsm_reg[2]_0 (qpllreset_i_1__3_n_0),
        .INT_CLK_100MHZ(INT_CLK_100MHZ),
        .INT_RXUSRCLK_OUT(INT_RXUSRCLK_OUT),
        .INT_USERCLK1_OUT(INT_USERCLK1_OUT),
        .PIPE_POWERDOWN(PIPE_POWERDOWN),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED),
        .PIPE_RXDATA({pipe_wrapper_i_n_164,pipe_wrapper_i_n_165,pipe_wrapper_i_n_166,pipe_wrapper_i_n_167,pipe_wrapper_i_n_168,pipe_wrapper_i_n_169,pipe_wrapper_i_n_170,pipe_wrapper_i_n_171,pipe_wrapper_i_n_172,pipe_wrapper_i_n_173,pipe_wrapper_i_n_174,pipe_wrapper_i_n_175,pipe_wrapper_i_n_176,pipe_wrapper_i_n_177,pipe_wrapper_i_n_178,pipe_wrapper_i_n_179}),
        .PIPE_RXDATAK({pipe_wrapper_i_n_212,pipe_wrapper_i_n_213}),
        .PIPE_RXPHALIGNDONE(PIPE_RXPHALIGNDONE[3:1]),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE),
        .PIPE_TXDATA(PIPE_TXDATA),
        .PIPE_TXDATAK(PIPE_TXDATAK),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE),
        .QPLL_QPLLLOCK(QPLL_QPLLLOCK),
        .QPLL_QPLLOUTCLK(QPLL_QPLLOUTCLK),
        .QPLL_QPLLOUTREFCLK(QPLL_QPLLOUTREFCLK),
        .QPLL_QPLLPD(qpllpd),
        .QPLL_QPLLRESET(qrst_qpllreset),
        .RATE_FSM(Q),
        .RATE_MMCM_LOCK(INT_MMCM_LOCK_OUT),
        .RST_CPLLLOCK(PIPE_CPLL_LOCK),
        .S00(\pipe_clock_int.pipe_clock_i/S00 ),
        .SR(\pipe_clock_int.pipe_clock_i/RST0 ),
        .SYNC_RXELECIDLE(pipe_wrapper_i_n_54),
        .SYNC_RXPHALIGNDONE_M(PIPE_RXPHALIGNDONE[0]),
        .cpllpd(\pipe_lane[0].gt_wrapper_i/cpllpd ),
        .cpllpd_0(\pipe_lane[1].gt_wrapper_i/cpllpd ),
        .cpllpd_1(\pipe_lane[2].gt_wrapper_i/cpllpd ),
        .cpllpd_2(\pipe_lane[3].gt_wrapper_i/cpllpd ),
        .cpllreset_reg(out),
        .ext_ch_gt_drpaddr(ext_ch_gt_drpaddr),
        .ext_ch_gt_drpdi(ext_ch_gt_drpdi),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo),
        .ext_ch_gt_drpen(ext_ch_gt_drpen),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy),
        .ext_ch_gt_drpwe(ext_ch_gt_drpwe),
        .fsm2(\qpll_reset.qpll_reset_i/fsm2 ),
        .\fsm_reg[4] (\fsm_reg[4] ),
        .\fsm_reg[4]_0 (\fsm_reg[4]_0 ),
        .\fsm_reg[4]_1 (\fsm_reg[4]_1 ),
        .gt_ch_drp_rdy(gt_ch_drp_rdy),
        .gt_rx_phy_status_q_reg(pipe_wrapper_i_n_426),
        .gt_rx_phy_status_q_reg_0(pipe_wrapper_i_n_427),
        .gt_rx_phy_status_q_reg_1(pipe_wrapper_i_n_428),
        .gt_rx_phy_status_q_reg_2(pipe_wrapper_i_n_429),
        .\gt_rxcharisk_q_reg[1] ({pipe_wrapper_i_n_306,pipe_wrapper_i_n_307}),
        .\gt_rxcharisk_q_reg[1]_0 ({pipe_wrapper_i_n_331,pipe_wrapper_i_n_332}),
        .\gt_rxcharisk_q_reg[1]_1 ({pipe_wrapper_i_n_356,pipe_wrapper_i_n_357}),
        .\gt_rxdata_q_reg[15] ({pipe_wrapper_i_n_290,pipe_wrapper_i_n_291,pipe_wrapper_i_n_292,pipe_wrapper_i_n_293,pipe_wrapper_i_n_294,pipe_wrapper_i_n_295,pipe_wrapper_i_n_296,pipe_wrapper_i_n_297,pipe_wrapper_i_n_298,pipe_wrapper_i_n_299,pipe_wrapper_i_n_300,pipe_wrapper_i_n_301,pipe_wrapper_i_n_302,pipe_wrapper_i_n_303,pipe_wrapper_i_n_304,pipe_wrapper_i_n_305}),
        .\gt_rxdata_q_reg[15]_0 ({pipe_wrapper_i_n_315,pipe_wrapper_i_n_316,pipe_wrapper_i_n_317,pipe_wrapper_i_n_318,pipe_wrapper_i_n_319,pipe_wrapper_i_n_320,pipe_wrapper_i_n_321,pipe_wrapper_i_n_322,pipe_wrapper_i_n_323,pipe_wrapper_i_n_324,pipe_wrapper_i_n_325,pipe_wrapper_i_n_326,pipe_wrapper_i_n_327,pipe_wrapper_i_n_328,pipe_wrapper_i_n_329,pipe_wrapper_i_n_330}),
        .\gt_rxdata_q_reg[15]_1 ({pipe_wrapper_i_n_340,pipe_wrapper_i_n_341,pipe_wrapper_i_n_342,pipe_wrapper_i_n_343,pipe_wrapper_i_n_344,pipe_wrapper_i_n_345,pipe_wrapper_i_n_346,pipe_wrapper_i_n_347,pipe_wrapper_i_n_348,pipe_wrapper_i_n_349,pipe_wrapper_i_n_350,pipe_wrapper_i_n_351,pipe_wrapper_i_n_352,pipe_wrapper_i_n_353,pipe_wrapper_i_n_354,pipe_wrapper_i_n_355}),
        .gt_rxvalid_q_reg(pipe_wrapper_i_n_405),
        .gt_rxvalid_q_reg_0(pipe_wrapper_i_n_406),
        .gt_rxvalid_q_reg_1(pipe_wrapper_i_n_407),
        .gt_rxvalid_q_reg_2(pipe_wrapper_i_n_408),
        .\index_reg[2] (\index_reg[2]_0 ),
        .\index_reg[2]_0 (\index_reg[2]_1 ),
        .\index_reg[2]_1 (\index_reg[2]_2 ),
        .int_pclk_sel_slave(int_pclk_sel_slave),
        .out(\pipe_clock_int.pipe_clock_i/p_0_in ),
        .out0(PIPE_SYNC_FSM_TX[5:0]),
        .pci_exp_rxn(pci_exp_rxn),
        .pci_exp_rxp(pci_exp_rxp),
        .pci_exp_txn(pci_exp_txn),
        .pci_exp_txp(pci_exp_txp),
        .pclk_sel(\pipe_clock_int.pipe_clock_i/pclk_sel ),
        .\pclk_sel_reg2_reg[3] (pclk_sel_i_1__3_n_0),
        .phy_rdy_n_int_reg(pipe_wrapper_i_n_403),
        .pipe_dmonitorout(pipe_dmonitorout),
        .pipe_eyescandataerror(pipe_eyescandataerror),
        .pipe_loopback(pipe_loopback),
        .pipe_qrst_fsm(pipe_qrst_fsm),
        .pipe_qrst_idle(pipe_qrst_idle),
        .pipe_rate_idle(pipe_rate_idle),
        .pipe_rst_fsm(pipe_rst_fsm),
        .pipe_rx0_valid_gt(pipe_rx0_valid_gt),
        .pipe_rx1_valid_gt(pipe_rx1_valid_gt),
        .pipe_rx2_valid_gt(pipe_rx2_valid_gt),
        .pipe_rx3_valid_gt(pipe_rx3_valid_gt),
        .pipe_rxbufstatus(pipe_rxbufstatus),
        .pipe_rxcommadet(pipe_rxcommadet),
        .pipe_rxdisperr(pipe_rxdisperr),
        .pipe_rxdlysresetdone(pipe_rxdlysresetdone),
        .pipe_rxnotintable(pipe_rxnotintable),
        .pipe_rxoutclk_out(pipe_rxoutclk_out),
        .pipe_rxprbscntreset(pipe_rxprbscntreset),
        .pipe_rxprbserr(pipe_rxprbserr),
        .pipe_rxprbssel(pipe_rxprbssel),
        .pipe_rxstatus(pipe_rxstatus),
        .\pipe_stages_1.pipe_tx_margin_q_reg[2] (\pipe_stages_1.pipe_tx_margin_q_reg[2] ),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ),
        .pipe_sync_fsm_rx(pipe_sync_fsm_rx),
        .pipe_tx_deemph_gt(pipe_tx_deemph_gt),
        .pipe_tx_rcvr_det_gt(pipe_tx_rcvr_det_gt),
        .pipe_txdlysresetdone(pipe_txdlysresetdone),
        .pipe_txinhibit(pipe_txinhibit),
        .pipe_txoutclk_out(pipe_txoutclk_out),
        .pipe_txphaligndone(pipe_txphaligndone),
        .pipe_txphinitdone(pipe_txphinitdone),
        .pipe_txprbsforceerr(pipe_txprbsforceerr),
        .pipe_txprbssel(pipe_txprbssel),
        .\pl_ltssm_state_q_reg[0] (pipe_wrapper_i_n_404),
        .qpllpd_reg(pipe_wrapper_i_n_365),
        .qpllreset_reg({pipe_wrapper_i_n_15,pipe_wrapper_i_n_16}),
        .qpllreset_reg_0(pipe_wrapper_i_n_366),
        .rate_cpllpd_0(rate_cpllpd_0),
        .rate_cpllpd_1(rate_cpllpd_1),
        .rate_cpllpd_2(rate_cpllpd_2),
        .rate_cpllpd_3(rate_cpllpd_3),
        .rate_gen3_reg1_reg(USER_RATE_GEN3),
        .reg_clock_locked(reg_clock_locked),
        .rxelecidle_reg1_reg(pipe_wrapper_i_n_286),
        .rxelecidle_reg1_reg_0(pipe_wrapper_i_n_314),
        .rxelecidle_reg1_reg_1(pipe_wrapper_i_n_339),
        .sys_clk(sys_clk),
        .sys_rst_n(reset_n_reg1_reg),
        .\txsync_fsm.txsync_done_reg (PIPE_SYNC_FSM_TX[11:6]),
        .\txsync_fsm.txsync_done_reg_0 (PIPE_SYNC_FSM_TX[17:12]),
        .\txsync_fsm.txsync_done_reg_1 (PIPE_SYNC_FSM_TX[23:18]));
  FDCE \pl_ltssm_state_q_reg[0] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .CLR(pipe_wrapper_i_n_404),
        .D(pl_ltssm_state[0]),
        .Q(pl_ltssm_state_q[0]));
  FDCE \pl_ltssm_state_q_reg[1] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .CLR(pipe_wrapper_i_n_404),
        .D(pl_ltssm_state[1]),
        .Q(pl_ltssm_state_q[1]));
  FDCE \pl_ltssm_state_q_reg[2] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .CLR(pipe_wrapper_i_n_404),
        .D(pl_ltssm_state[2]),
        .Q(pl_ltssm_state_q[2]));
  FDCE \pl_ltssm_state_q_reg[3] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .CLR(pipe_wrapper_i_n_404),
        .D(pl_ltssm_state[3]),
        .Q(pl_ltssm_state_q[3]));
  FDCE \pl_ltssm_state_q_reg[4] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .CLR(pipe_wrapper_i_n_404),
        .D(pl_ltssm_state[4]),
        .Q(pl_ltssm_state_q[4]));
  FDCE \pl_ltssm_state_q_reg[5] 
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .CLR(pipe_wrapper_i_n_404),
        .D(pl_ltssm_state[5]),
        .Q(pl_ltssm_state_q[5]));
  LUT6 #(
    .INIT(64'hB8FFFFFFB8000000)) 
    qpllpd_i_1__3
       (.I0(pipe_wrapper_i_n_365),
        .I1(PIPE_QRST_FSM),
        .I2(qpllreset_i_2_n_0),
        .I3(pipe_wrapper_i_n_418),
        .I4(pipe_wrapper_i_n_417),
        .I5(qpllpd),
        .O(qpllpd_i_1__3_n_0));
  LUT6 #(
    .INIT(64'hCFAFFF0FC0A00000)) 
    qpllreset_i_1__3
       (.I0(qpllreset_i_2_n_0),
        .I1(pipe_wrapper_i_n_366),
        .I2(pipe_wrapper_i_n_417),
        .I3(pipe_wrapper_i_n_418),
        .I4(PIPE_QRST_FSM),
        .I5(qrst_qpllreset),
        .O(qpllreset_i_1__3_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    qpllreset_i_2
       (.I0(pipe_wrapper_i_n_16),
        .I1(pipe_wrapper_i_n_15),
        .O(qpllreset_i_2_n_0));
  FDCE reg_clock_locked_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .CLR(pipe_wrapper_i_n_404),
        .D(1'b1),
        .Q(reg_clock_locked));
  LUT1 #(
    .INIT(2'h1)) 
    reset_n_reg1_i_1
       (.I0(sys_rst_n_0),
        .O(reset_n_reg1_reg));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_wrapper" *) 
module pcie_7x_0_pcie_7x_0_gt_wrapper
   (cpllpd,
    RATE_CPLLLOCK,
    ext_ch_gt_drprdy,
    pipe_eyescandataerror,
    pci_exp_txn,
    pci_exp_txp,
    RATE_PHYSTATUS,
    gt_rxcdrlock_0,
    PIPE_RXCHANISALIGNED,
    pipe_rxcommadet,
    pipe_rxdlysresetdone,
    SYNC_RXELECIDLE,
    pipe_rxoutclk_out,
    SYNC_RXPHALIGNDONE_M,
    pipe_rxprbserr,
    RATE_RXRATEDONE,
    USER_RXRESETDONE,
    gt_rxvalid_0,
    pipe_txdlysresetdone,
    pipe_txoutclk_out,
    pipe_txphaligndone,
    pipe_txphinitdone,
    RATE_TXRATEDONE,
    USER_TXRESETDONE,
    ext_ch_gt_drpdo,
    pipe_rxbufstatus,
    pipe_rxstatus,
    RXCHBONDO,
    PIPE_RXDATA,
    pipe_dmonitorout,
    PIPE_RXDATAK,
    pipe_rxdisperr,
    pipe_rxnotintable,
    gt_cpllpdrefclk,
    CPLLPD0,
    CLK,
    drp_mux_en_0,
    drp_mux_we_0,
    sys_clk,
    DRP_GTXRESET,
    pci_exp_rxn,
    pci_exp_rxp,
    QPLL_QPLLOUTCLK,
    QPLL_QPLLOUTREFCLK,
    rxchbonden_0,
    converge_gen3_reg,
    rate_txpmareset_0,
    PIPE_RXPOLARITY,
    pipe_rxprbscntreset,
    rst_userrdy,
    pclk_sel_reg,
    pipe_tx_deemph_gt,
    pipe_tx_rcvr_det_gt,
    sync_txdlyen_0,
    out0,
    PIPE_TXELECIDLE,
    pipe_txinhibit,
    pipe_txprbsforceerr,
    DRPDI,
    PIPE_POWERDOWN,
    RXSYSCLKSEL,
    pipe_loopback,
    pipe_rxprbssel,
    RXRATE,
    \pipe_stages_1.pipe_tx_margin_q_reg[2] ,
    pipe_txprbssel,
    USER_OOBCLK,
    TXPOSTCURSOR,
    TXPRECURSOR,
    PIPE_TXDATA,
    TXMAINCURSOR,
    PIPE_TXCOMPLIANCE,
    PIPE_TXDATAK,
    DRPADDR,
    rate_cpllreset_0,
    RST_CPLLRESET);
  output cpllpd;
  output RATE_CPLLLOCK;
  output [0:0]ext_ch_gt_drprdy;
  output [0:0]pipe_eyescandataerror;
  output [0:0]pci_exp_txn;
  output [0:0]pci_exp_txp;
  output RATE_PHYSTATUS;
  output gt_rxcdrlock_0;
  output [0:0]PIPE_RXCHANISALIGNED;
  output [0:0]pipe_rxcommadet;
  output [0:0]pipe_rxdlysresetdone;
  output SYNC_RXELECIDLE;
  output [0:0]pipe_rxoutclk_out;
  output SYNC_RXPHALIGNDONE_M;
  output [0:0]pipe_rxprbserr;
  output RATE_RXRATEDONE;
  output USER_RXRESETDONE;
  output gt_rxvalid_0;
  output [0:0]pipe_txdlysresetdone;
  output pipe_txoutclk_out;
  output [0:0]pipe_txphaligndone;
  output [0:0]pipe_txphinitdone;
  output RATE_TXRATEDONE;
  output USER_TXRESETDONE;
  output [15:0]ext_ch_gt_drpdo;
  output [2:0]pipe_rxbufstatus;
  output [2:0]pipe_rxstatus;
  output [4:0]RXCHBONDO;
  output [15:0]PIPE_RXDATA;
  output [7:0]pipe_dmonitorout;
  output [1:0]PIPE_RXDATAK;
  output [7:0]pipe_rxdisperr;
  output [7:0]pipe_rxnotintable;
  input gt_cpllpdrefclk;
  input CPLLPD0;
  input CLK;
  input drp_mux_en_0;
  input drp_mux_we_0;
  input sys_clk;
  input DRP_GTXRESET;
  input [0:0]pci_exp_rxn;
  input [0:0]pci_exp_rxp;
  input QPLL_QPLLOUTCLK;
  input QPLL_QPLLOUTREFCLK;
  input rxchbonden_0;
  input converge_gen3_reg;
  input rate_txpmareset_0;
  input [0:0]PIPE_RXPOLARITY;
  input pipe_rxprbscntreset;
  input rst_userrdy;
  input pclk_sel_reg;
  input pipe_tx_deemph_gt;
  input pipe_tx_rcvr_det_gt;
  input sync_txdlyen_0;
  input [2:0]out0;
  input [0:0]PIPE_TXELECIDLE;
  input [0:0]pipe_txinhibit;
  input pipe_txprbsforceerr;
  input [15:0]DRPDI;
  input [1:0]PIPE_POWERDOWN;
  input [0:0]RXSYSCLKSEL;
  input [2:0]pipe_loopback;
  input [2:0]pipe_rxprbssel;
  input [0:0]RXRATE;
  input [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  input [2:0]pipe_txprbssel;
  input USER_OOBCLK;
  input [4:0]TXPOSTCURSOR;
  input [4:0]TXPRECURSOR;
  input [15:0]PIPE_TXDATA;
  input [6:0]TXMAINCURSOR;
  input [0:0]PIPE_TXCOMPLIANCE;
  input [1:0]PIPE_TXDATAK;
  input [8:0]DRPADDR;
  input rate_cpllreset_0;
  input RST_CPLLRESET;

  wire CLK;
  wire CPLLPD0;
  wire CPLLRESET0;
  wire [8:0]DRPADDR;
  wire [15:0]DRPDI;
  wire DRP_GTXRESET;
  wire [1:0]PIPE_POWERDOWN;
  wire [0:0]PIPE_RXCHANISALIGNED;
  wire [15:0]PIPE_RXDATA;
  wire [1:0]PIPE_RXDATAK;
  wire [0:0]PIPE_RXPOLARITY;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [15:0]PIPE_TXDATA;
  wire [1:0]PIPE_TXDATAK;
  wire [0:0]PIPE_TXELECIDLE;
  wire QPLL_QPLLOUTCLK;
  wire QPLL_QPLLOUTREFCLK;
  wire RATE_CPLLLOCK;
  wire RATE_PHYSTATUS;
  wire RATE_RXRATEDONE;
  wire RATE_TXRATEDONE;
  wire RST_CPLLRESET;
  wire [4:0]RXCHBONDO;
  wire [0:0]RXRATE;
  wire [0:0]RXSYSCLKSEL;
  wire SYNC_RXELECIDLE;
  wire SYNC_RXPHALIGNDONE_M;
  wire [6:0]TXMAINCURSOR;
  wire [4:0]TXPOSTCURSOR;
  wire [4:0]TXPRECURSOR;
  wire USER_OOBCLK;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  wire converge_gen3_reg;
  wire cpllpd;
  wire drp_mux_en_0;
  wire drp_mux_we_0;
  wire [15:0]ext_ch_gt_drpdo;
  wire [0:0]ext_ch_gt_drprdy;
  wire gt_cpllpdrefclk;
  wire gt_rxcdrlock_0;
  wire gt_rxvalid_0;
  wire \gtx_channel.gtxe2_channel_i_n_10 ;
  wire \gtx_channel.gtxe2_channel_i_n_138 ;
  wire \gtx_channel.gtxe2_channel_i_n_139 ;
  wire \gtx_channel.gtxe2_channel_i_n_140 ;
  wire \gtx_channel.gtxe2_channel_i_n_141 ;
  wire \gtx_channel.gtxe2_channel_i_n_142 ;
  wire \gtx_channel.gtxe2_channel_i_n_143 ;
  wire \gtx_channel.gtxe2_channel_i_n_144 ;
  wire \gtx_channel.gtxe2_channel_i_n_145 ;
  wire \gtx_channel.gtxe2_channel_i_n_146 ;
  wire \gtx_channel.gtxe2_channel_i_n_147 ;
  wire \gtx_channel.gtxe2_channel_i_n_148 ;
  wire \gtx_channel.gtxe2_channel_i_n_149 ;
  wire \gtx_channel.gtxe2_channel_i_n_150 ;
  wire \gtx_channel.gtxe2_channel_i_n_151 ;
  wire \gtx_channel.gtxe2_channel_i_n_152 ;
  wire \gtx_channel.gtxe2_channel_i_n_153 ;
  wire \gtx_channel.gtxe2_channel_i_n_189 ;
  wire \gtx_channel.gtxe2_channel_i_n_190 ;
  wire \gtx_channel.gtxe2_channel_i_n_191 ;
  wire \gtx_channel.gtxe2_channel_i_n_192 ;
  wire \gtx_channel.gtxe2_channel_i_n_197 ;
  wire \gtx_channel.gtxe2_channel_i_n_198 ;
  wire \gtx_channel.gtxe2_channel_i_n_9 ;
  wire [2:0]out0;
  wire [0:0]pci_exp_rxn;
  wire [0:0]pci_exp_rxp;
  wire [0:0]pci_exp_txn;
  wire [0:0]pci_exp_txp;
  wire pclk_sel_reg;
  wire [7:0]pipe_dmonitorout;
  wire [0:0]pipe_eyescandataerror;
  wire [2:0]pipe_loopback;
  wire [2:0]pipe_rxbufstatus;
  wire [0:0]pipe_rxcommadet;
  wire [7:0]pipe_rxdisperr;
  wire [0:0]pipe_rxdlysresetdone;
  wire [7:0]pipe_rxnotintable;
  wire [0:0]pipe_rxoutclk_out;
  wire pipe_rxprbscntreset;
  wire [0:0]pipe_rxprbserr;
  wire [2:0]pipe_rxprbssel;
  wire [2:0]pipe_rxstatus;
  wire [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  wire pipe_tx_deemph_gt;
  wire pipe_tx_rcvr_det_gt;
  wire [0:0]pipe_txdlysresetdone;
  wire [0:0]pipe_txinhibit;
  wire pipe_txoutclk_out;
  wire [0:0]pipe_txphaligndone;
  wire [0:0]pipe_txphinitdone;
  wire pipe_txprbsforceerr;
  wire [2:0]pipe_txprbssel;
  wire rate_cpllreset_0;
  wire rate_txpmareset_0;
  wire rst_userrdy;
  wire rxchbonden_0;
  wire sync_txdlyen_0;
  wire sys_clk;
  wire \NLW_gtx_channel.gtxe2_channel_i_CPLLFBCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_CPLLREFCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_GTREFCLKMONITOR_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCHANBONDSEQ_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCHANREALIGN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMINITDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMSASDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMWAKEDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXDATAVALID_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXHEADERVALID_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKFABRIC_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKPCS_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXQPISENN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXQPISENP_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXSTARTOFSEQ_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXCOMFINISH_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXGEARBOXREADY_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKFABRIC_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKPCS_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXQPISENN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXQPISENP_UNCONNECTED ;
  wire [15:0]\NLW_gtx_channel.gtxe2_channel_i_PCSRSVDOUT_UNCONNECTED ;
  wire [7:4]\NLW_gtx_channel.gtxe2_channel_i_RXCHARISCOMMA_UNCONNECTED ;
  wire [7:4]\NLW_gtx_channel.gtxe2_channel_i_RXCHARISK_UNCONNECTED ;
  wire [1:0]\NLW_gtx_channel.gtxe2_channel_i_RXCLKCORCNT_UNCONNECTED ;
  wire [63:32]\NLW_gtx_channel.gtxe2_channel_i_RXDATA_UNCONNECTED ;
  wire [2:0]\NLW_gtx_channel.gtxe2_channel_i_RXHEADER_UNCONNECTED ;
  wire [6:0]\NLW_gtx_channel.gtxe2_channel_i_RXMONITOROUT_UNCONNECTED ;
  wire [4:0]\NLW_gtx_channel.gtxe2_channel_i_RXPHMONITOR_UNCONNECTED ;
  wire [4:0]\NLW_gtx_channel.gtxe2_channel_i_RXPHSLIPMONITOR_UNCONNECTED ;
  wire [9:0]\NLW_gtx_channel.gtxe2_channel_i_TSTOUT_UNCONNECTED ;
  wire [1:0]\NLW_gtx_channel.gtxe2_channel_i_TXBUFSTATUS_UNCONNECTED ;

  pcie_7x_0_pcie_7x_0_gtx_cpllpd_ovrd_44 cpllPDInst
       (.CPLLRESET0(CPLLRESET0),
        .RST_CPLLRESET(RST_CPLLRESET),
        .cpllpd(cpllpd),
        .gt_cpllpdrefclk(gt_cpllpdrefclk),
        .rate_cpllreset_0(rate_cpllreset_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTXE2_CHANNEL #(
    .ALIGN_COMMA_DOUBLE("FALSE"),
    .ALIGN_COMMA_ENABLE(10'b1111111111),
    .ALIGN_COMMA_WORD(1),
    .ALIGN_MCOMMA_DET("TRUE"),
    .ALIGN_MCOMMA_VALUE(10'b1010000011),
    .ALIGN_PCOMMA_DET("TRUE"),
    .ALIGN_PCOMMA_VALUE(10'b0101111100),
    .CBCC_DATA_SOURCE_SEL("DECODED"),
    .CHAN_BOND_KEEP_ALIGN("TRUE"),
    .CHAN_BOND_MAX_SKEW(7),
    .CHAN_BOND_SEQ_1_1(10'b0001001010),
    .CHAN_BOND_SEQ_1_2(10'b0001001010),
    .CHAN_BOND_SEQ_1_3(10'b0001001010),
    .CHAN_BOND_SEQ_1_4(10'b0110111100),
    .CHAN_BOND_SEQ_1_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_1(10'b0001000101),
    .CHAN_BOND_SEQ_2_2(10'b0001000101),
    .CHAN_BOND_SEQ_2_3(10'b0001000101),
    .CHAN_BOND_SEQ_2_4(10'b0110111100),
    .CHAN_BOND_SEQ_2_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_USE("TRUE"),
    .CHAN_BOND_SEQ_LEN(4),
    .CLK_CORRECT_USE("TRUE"),
    .CLK_COR_KEEP_IDLE("TRUE"),
    .CLK_COR_MAX_LAT(20),
    .CLK_COR_MIN_LAT(18),
    .CLK_COR_PRECEDENCE("TRUE"),
    .CLK_COR_REPEAT_WAIT(0),
    .CLK_COR_SEQ_1_1(10'b0100011100),
    .CLK_COR_SEQ_1_2(10'b0000000000),
    .CLK_COR_SEQ_1_3(10'b0000000000),
    .CLK_COR_SEQ_1_4(10'b0000000000),
    .CLK_COR_SEQ_1_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_1(10'b0000000000),
    .CLK_COR_SEQ_2_2(10'b0000000000),
    .CLK_COR_SEQ_2_3(10'b0000000000),
    .CLK_COR_SEQ_2_4(10'b0000000000),
    .CLK_COR_SEQ_2_ENABLE(4'b0000),
    .CLK_COR_SEQ_2_USE("FALSE"),
    .CLK_COR_SEQ_LEN(1),
    .CPLL_CFG(24'hA407CC),
    .CPLL_FBDIV(5),
    .CPLL_FBDIV_45(5),
    .CPLL_INIT_CFG(24'h00001E),
    .CPLL_LOCK_CFG(16'h01E8),
    .CPLL_REFCLK_DIV(1),
    .DEC_MCOMMA_DETECT("TRUE"),
    .DEC_PCOMMA_DETECT("TRUE"),
    .DEC_VALID_COMMA_ONLY("FALSE"),
    .DMONITOR_CFG(24'h000B01),
    .ES_CONTROL(6'b000000),
    .ES_ERRDET_EN("FALSE"),
    .ES_EYE_SCAN_EN("FALSE"),
    .ES_HORZ_OFFSET(12'h000),
    .ES_PMA_CFG(10'b0000000000),
    .ES_PRESCALE(5'b00000),
    .ES_QUALIFIER(80'h00000000000000000000),
    .ES_QUAL_MASK(80'h00000000000000000000),
    .ES_SDATA_MASK(80'h00000000000000000000),
    .ES_VERT_OFFSET(9'b000000000),
    .FTS_DESKEW_SEQ_ENABLE(4'b1111),
    .FTS_LANE_DESKEW_CFG(4'b1111),
    .FTS_LANE_DESKEW_EN("TRUE"),
    .GEARBOX_MODE(3'b000),
    .IS_CPLLLOCKDETCLK_INVERTED(1'b0),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_GTGREFCLK_INVERTED(1'b0),
    .IS_RXUSRCLK2_INVERTED(1'b0),
    .IS_RXUSRCLK_INVERTED(1'b0),
    .IS_TXPHDLYTSTCLK_INVERTED(1'b0),
    .IS_TXUSRCLK2_INVERTED(1'b0),
    .IS_TXUSRCLK_INVERTED(1'b0),
    .OUTREFCLK_SEL_INV(2'b11),
    .PCS_PCIE_EN("TRUE"),
    .PCS_RSVD_ATTR(48'h0000000001CF),
    .PD_TRANS_TIME_FROM_P2(12'h03C),
    .PD_TRANS_TIME_NONE_P2(8'h09),
    .PD_TRANS_TIME_TO_P2(8'h64),
    .PMA_RSV(32'h00018480),
    .PMA_RSV2(16'h2050),
    .PMA_RSV3(2'b00),
    .PMA_RSV4(32'h00000000),
    .RXBUFRESET_TIME(5'b00001),
    .RXBUF_ADDR_MODE("FULL"),
    .RXBUF_EIDLE_HI_CNT(4'b0100),
    .RXBUF_EIDLE_LO_CNT(4'b0000),
    .RXBUF_EN("TRUE"),
    .RXBUF_RESET_ON_CB_CHANGE("TRUE"),
    .RXBUF_RESET_ON_COMMAALIGN("FALSE"),
    .RXBUF_RESET_ON_EIDLE("TRUE"),
    .RXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .RXBUF_THRESH_OVFLW(61),
    .RXBUF_THRESH_OVRD("FALSE"),
    .RXBUF_THRESH_UNDFLW(4),
    .RXCDRFREQRESET_TIME(5'b00001),
    .RXCDRPHRESET_TIME(5'b00001),
    .RXCDR_CFG(72'h03000023FF10200020),
    .RXCDR_FR_RESET_ON_EIDLE(1'b0),
    .RXCDR_HOLD_DURING_EIDLE(1'b1),
    .RXCDR_LOCK_CFG(6'b010101),
    .RXCDR_PH_RESET_ON_EIDLE(1'b0),
    .RXDFELPMRESET_TIME(7'b0001111),
    .RXDLY_CFG(16'h001F),
    .RXDLY_LCFG(9'h030),
    .RXDLY_TAP_CFG(16'h0000),
    .RXGEARBOX_EN("FALSE"),
    .RXISCANRESET_TIME(5'b00001),
    .RXLPM_HF_CFG(14'b00000011110000),
    .RXLPM_LF_CFG(14'b00000011110000),
    .RXOOB_CFG(7'b0000110),
    .RXOUT_DIV(2),
    .RXPCSRESET_TIME(5'b00001),
    .RXPHDLY_CFG(24'h004020),
    .RXPH_CFG(24'h000000),
    .RXPH_MONITOR_SEL(5'b00000),
    .RXPMARESET_TIME(5'b00011),
    .RXPRBS_ERR_LOOPBACK(1'b0),
    .RXSLIDE_AUTO_WAIT(7),
    .RXSLIDE_MODE("PMA"),
    .RX_BIAS_CFG(12'b000000000100),
    .RX_BUFFER_CFG(6'b000000),
    .RX_CLK25_DIV(4),
    .RX_CLKMUX_PD(1'b1),
    .RX_CM_SEL(2'b11),
    .RX_CM_TRIM(3'b010),
    .RX_DATA_WIDTH(20),
    .RX_DDI_SEL(6'b000000),
    .RX_DEBUG_CFG(12'b000000000000),
    .RX_DEFER_RESET_BUF_EN("TRUE"),
    .RX_DFE_GAIN_CFG(23'h020FEA),
    .RX_DFE_H2_CFG(12'b000000000000),
    .RX_DFE_H3_CFG(12'b000001000000),
    .RX_DFE_H4_CFG(11'b00011110000),
    .RX_DFE_H5_CFG(11'b00011100000),
    .RX_DFE_KL_CFG(13'b0000011111110),
    .RX_DFE_KL_CFG2(32'h3290D86C),
    .RX_DFE_LPM_CFG(16'h0954),
    .RX_DFE_LPM_HOLD_DURING_EIDLE(1'b1),
    .RX_DFE_UT_CFG(17'b10001111000000000),
    .RX_DFE_VP_CFG(17'b00011111100000011),
    .RX_DFE_XYD_CFG(13'b0000000000000),
    .RX_DISPERR_SEQ_MATCH("TRUE"),
    .RX_INT_DATAWIDTH(0),
    .RX_OS_CFG(13'b0000010000000),
    .RX_SIG_VALID_DLY(4),
    .RX_XCLK_SEL("RXREC"),
    .SAS_MAX_COM(64),
    .SAS_MIN_COM(36),
    .SATA_BURST_SEQ_LEN(4'b1111),
    .SATA_BURST_VAL(3'b100),
    .SATA_CPLL_CFG("VCO_3000MHZ"),
    .SATA_EIDLE_VAL(3'b100),
    .SATA_MAX_BURST(8),
    .SATA_MAX_INIT(21),
    .SATA_MAX_WAKE(7),
    .SATA_MIN_BURST(4),
    .SATA_MIN_INIT(12),
    .SATA_MIN_WAKE(4),
    .SHOW_REALIGN_COMMA("FALSE"),
    .SIM_CPLLREFCLK_SEL(3'b001),
    .SIM_RECEIVER_DETECT_PASS("TRUE"),
    .SIM_RESET_SPEEDUP("FALSE"),
    .SIM_TX_EIDLE_DRIVE_LEVEL("1"),
    .SIM_VERSION("3.0"),
    .TERM_RCAL_CFG(5'b10000),
    .TERM_RCAL_OVRD(1'b0),
    .TRANS_TIME_RATE(8'h0E),
    .TST_RSV(32'h00000000),
    .TXBUF_EN("FALSE"),
    .TXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .TXDLY_CFG(16'h001F),
    .TXDLY_LCFG(9'h030),
    .TXDLY_TAP_CFG(16'h0000),
    .TXGEARBOX_EN("FALSE"),
    .TXOUT_DIV(2),
    .TXPCSRESET_TIME(5'b00001),
    .TXPHDLY_CFG(24'h084020),
    .TXPH_CFG(16'h0780),
    .TXPH_MONITOR_SEL(5'b00000),
    .TXPMARESET_TIME(5'b00011),
    .TX_CLK25_DIV(4),
    .TX_CLKMUX_PD(1'b1),
    .TX_DATA_WIDTH(20),
    .TX_DEEMPH0(5'b10100),
    .TX_DEEMPH1(5'b01011),
    .TX_DRIVE_MODE("PIPE"),
    .TX_EIDLE_ASSERT_DELAY(3'b010),
    .TX_EIDLE_DEASSERT_DELAY(3'b100),
    .TX_INT_DATAWIDTH(0),
    .TX_LOOPBACK_DRIVE_HIZ("FALSE"),
    .TX_MAINCURSOR_SEL(1'b0),
    .TX_MARGIN_FULL_0(7'b1001111),
    .TX_MARGIN_FULL_1(7'b1001110),
    .TX_MARGIN_FULL_2(7'b1001101),
    .TX_MARGIN_FULL_3(7'b1001100),
    .TX_MARGIN_FULL_4(7'b1000011),
    .TX_MARGIN_LOW_0(7'b1000101),
    .TX_MARGIN_LOW_1(7'b1000110),
    .TX_MARGIN_LOW_2(7'b1000011),
    .TX_MARGIN_LOW_3(7'b1000010),
    .TX_MARGIN_LOW_4(7'b1000000),
    .TX_PREDRIVER_MODE(1'b0),
    .TX_QPI_STATUS_EN(1'b0),
    .TX_RXDETECT_CFG(14'h0064),
    .TX_RXDETECT_REF(3'b011),
    .TX_XCLK_SEL("TXUSR"),
    .UCODEER_CLR(1'b0)) 
    \gtx_channel.gtxe2_channel_i 
       (.CFGRESET(1'b0),
        .CLKRSVD({1'b0,1'b0,1'b0,USER_OOBCLK}),
        .CPLLFBCLKLOST(\NLW_gtx_channel.gtxe2_channel_i_CPLLFBCLKLOST_UNCONNECTED ),
        .CPLLLOCK(RATE_CPLLLOCK),
        .CPLLLOCKDETCLK(1'b0),
        .CPLLLOCKEN(1'b1),
        .CPLLPD(CPLLPD0),
        .CPLLREFCLKLOST(\NLW_gtx_channel.gtxe2_channel_i_CPLLREFCLKLOST_UNCONNECTED ),
        .CPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .CPLLRESET(CPLLRESET0),
        .DMONITOROUT(pipe_dmonitorout),
        .DRPADDR(DRPADDR),
        .DRPCLK(CLK),
        .DRPDI(DRPDI),
        .DRPDO(ext_ch_gt_drpdo),
        .DRPEN(drp_mux_en_0),
        .DRPRDY(ext_ch_gt_drprdy),
        .DRPWE(drp_mux_we_0),
        .EYESCANDATAERROR(pipe_eyescandataerror),
        .EYESCANMODE(1'b0),
        .EYESCANRESET(1'b0),
        .EYESCANTRIGGER(1'b0),
        .GTGREFCLK(1'b0),
        .GTNORTHREFCLK0(1'b0),
        .GTNORTHREFCLK1(1'b0),
        .GTREFCLK0(sys_clk),
        .GTREFCLK1(1'b0),
        .GTREFCLKMONITOR(\NLW_gtx_channel.gtxe2_channel_i_GTREFCLKMONITOR_UNCONNECTED ),
        .GTRESETSEL(1'b0),
        .GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GTRXRESET(DRP_GTXRESET),
        .GTSOUTHREFCLK0(1'b0),
        .GTSOUTHREFCLK1(1'b0),
        .GTTXRESET(DRP_GTXRESET),
        .GTXRXN(pci_exp_rxn),
        .GTXRXP(pci_exp_rxp),
        .GTXTXN(pci_exp_txn),
        .GTXTXP(pci_exp_txp),
        .LOOPBACK(pipe_loopback),
        .PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDOUT(\NLW_gtx_channel.gtxe2_channel_i_PCSRSVDOUT_UNCONNECTED [15:0]),
        .PHYSTATUS(RATE_PHYSTATUS),
        .PMARSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PMARSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLCLK(QPLL_QPLLOUTCLK),
        .QPLLREFCLK(QPLL_QPLLOUTREFCLK),
        .RESETOVRD(1'b0),
        .RX8B10BEN(rxchbonden_0),
        .RXBUFRESET(1'b0),
        .RXBUFSTATUS(pipe_rxbufstatus),
        .RXBYTEISALIGNED(\gtx_channel.gtxe2_channel_i_n_9 ),
        .RXBYTEREALIGN(\gtx_channel.gtxe2_channel_i_n_10 ),
        .RXCDRFREQRESET(1'b0),
        .RXCDRHOLD(1'b0),
        .RXCDRLOCK(gt_rxcdrlock_0),
        .RXCDROVRDEN(1'b0),
        .RXCDRRESET(1'b0),
        .RXCDRRESETRSV(1'b0),
        .RXCHANBONDSEQ(\NLW_gtx_channel.gtxe2_channel_i_RXCHANBONDSEQ_UNCONNECTED ),
        .RXCHANISALIGNED(PIPE_RXCHANISALIGNED),
        .RXCHANREALIGN(\NLW_gtx_channel.gtxe2_channel_i_RXCHANREALIGN_UNCONNECTED ),
        .RXCHARISCOMMA({\NLW_gtx_channel.gtxe2_channel_i_RXCHARISCOMMA_UNCONNECTED [7:4],\gtx_channel.gtxe2_channel_i_n_189 ,\gtx_channel.gtxe2_channel_i_n_190 ,\gtx_channel.gtxe2_channel_i_n_191 ,\gtx_channel.gtxe2_channel_i_n_192 }),
        .RXCHARISK({\NLW_gtx_channel.gtxe2_channel_i_RXCHARISK_UNCONNECTED [7:4],\gtx_channel.gtxe2_channel_i_n_197 ,\gtx_channel.gtxe2_channel_i_n_198 ,PIPE_RXDATAK}),
        .RXCHBONDEN(rxchbonden_0),
        .RXCHBONDI({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .RXCHBONDLEVEL({1'b0,1'b0,1'b1}),
        .RXCHBONDMASTER(rxchbonden_0),
        .RXCHBONDO(RXCHBONDO),
        .RXCHBONDSLAVE(1'b0),
        .RXCLKCORCNT(\NLW_gtx_channel.gtxe2_channel_i_RXCLKCORCNT_UNCONNECTED [1:0]),
        .RXCOMINITDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMINITDET_UNCONNECTED ),
        .RXCOMMADET(pipe_rxcommadet),
        .RXCOMMADETEN(1'b1),
        .RXCOMSASDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMSASDET_UNCONNECTED ),
        .RXCOMWAKEDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMWAKEDET_UNCONNECTED ),
        .RXDATA({\NLW_gtx_channel.gtxe2_channel_i_RXDATA_UNCONNECTED [63:32],\gtx_channel.gtxe2_channel_i_n_138 ,\gtx_channel.gtxe2_channel_i_n_139 ,\gtx_channel.gtxe2_channel_i_n_140 ,\gtx_channel.gtxe2_channel_i_n_141 ,\gtx_channel.gtxe2_channel_i_n_142 ,\gtx_channel.gtxe2_channel_i_n_143 ,\gtx_channel.gtxe2_channel_i_n_144 ,\gtx_channel.gtxe2_channel_i_n_145 ,\gtx_channel.gtxe2_channel_i_n_146 ,\gtx_channel.gtxe2_channel_i_n_147 ,\gtx_channel.gtxe2_channel_i_n_148 ,\gtx_channel.gtxe2_channel_i_n_149 ,\gtx_channel.gtxe2_channel_i_n_150 ,\gtx_channel.gtxe2_channel_i_n_151 ,\gtx_channel.gtxe2_channel_i_n_152 ,\gtx_channel.gtxe2_channel_i_n_153 ,PIPE_RXDATA}),
        .RXDATAVALID(\NLW_gtx_channel.gtxe2_channel_i_RXDATAVALID_UNCONNECTED ),
        .RXDDIEN(1'b0),
        .RXDFEAGCHOLD(converge_gen3_reg),
        .RXDFEAGCOVRDEN(1'b0),
        .RXDFECM1EN(1'b0),
        .RXDFELFHOLD(1'b0),
        .RXDFELFOVRDEN(1'b1),
        .RXDFELPMRESET(1'b0),
        .RXDFETAP2HOLD(1'b0),
        .RXDFETAP2OVRDEN(1'b0),
        .RXDFETAP3HOLD(1'b0),
        .RXDFETAP3OVRDEN(1'b0),
        .RXDFETAP4HOLD(1'b0),
        .RXDFETAP4OVRDEN(1'b0),
        .RXDFETAP5HOLD(1'b0),
        .RXDFETAP5OVRDEN(1'b0),
        .RXDFEUTHOLD(1'b0),
        .RXDFEUTOVRDEN(1'b0),
        .RXDFEVPHOLD(1'b0),
        .RXDFEVPOVRDEN(1'b0),
        .RXDFEVSEN(1'b0),
        .RXDFEXYDEN(1'b0),
        .RXDFEXYDHOLD(1'b0),
        .RXDFEXYDOVRDEN(1'b0),
        .RXDISPERR(pipe_rxdisperr),
        .RXDLYBYPASS(1'b1),
        .RXDLYEN(1'b0),
        .RXDLYOVRDEN(1'b0),
        .RXDLYSRESET(1'b0),
        .RXDLYSRESETDONE(pipe_rxdlysresetdone),
        .RXELECIDLE(SYNC_RXELECIDLE),
        .RXELECIDLEMODE({1'b0,1'b0}),
        .RXGEARBOXSLIP(1'b0),
        .RXHEADER(\NLW_gtx_channel.gtxe2_channel_i_RXHEADER_UNCONNECTED [2:0]),
        .RXHEADERVALID(\NLW_gtx_channel.gtxe2_channel_i_RXHEADERVALID_UNCONNECTED ),
        .RXLPMEN(rxchbonden_0),
        .RXLPMHFHOLD(1'b0),
        .RXLPMHFOVRDEN(1'b0),
        .RXLPMLFHOLD(1'b0),
        .RXLPMLFKLOVRDEN(1'b0),
        .RXMCOMMAALIGNEN(rxchbonden_0),
        .RXMONITOROUT(\NLW_gtx_channel.gtxe2_channel_i_RXMONITOROUT_UNCONNECTED [6:0]),
        .RXMONITORSEL({1'b0,1'b0}),
        .RXNOTINTABLE(pipe_rxnotintable),
        .RXOOBRESET(1'b0),
        .RXOSHOLD(1'b0),
        .RXOSOVRDEN(1'b0),
        .RXOUTCLK(pipe_rxoutclk_out),
        .RXOUTCLKFABRIC(\NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKFABRIC_UNCONNECTED ),
        .RXOUTCLKPCS(\NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKPCS_UNCONNECTED ),
        .RXOUTCLKSEL({1'b0,1'b0,1'b0}),
        .RXPCOMMAALIGNEN(rxchbonden_0),
        .RXPCSRESET(1'b0),
        .RXPD(PIPE_POWERDOWN),
        .RXPHALIGN(1'b0),
        .RXPHALIGNDONE(SYNC_RXPHALIGNDONE_M),
        .RXPHALIGNEN(1'b0),
        .RXPHDLYPD(1'b0),
        .RXPHDLYRESET(1'b0),
        .RXPHMONITOR(\NLW_gtx_channel.gtxe2_channel_i_RXPHMONITOR_UNCONNECTED [4:0]),
        .RXPHOVRDEN(1'b0),
        .RXPHSLIPMONITOR(\NLW_gtx_channel.gtxe2_channel_i_RXPHSLIPMONITOR_UNCONNECTED [4:0]),
        .RXPMARESET(rate_txpmareset_0),
        .RXPOLARITY(PIPE_RXPOLARITY),
        .RXPRBSCNTRESET(pipe_rxprbscntreset),
        .RXPRBSERR(pipe_rxprbserr),
        .RXPRBSSEL(pipe_rxprbssel),
        .RXQPIEN(1'b0),
        .RXQPISENN(\NLW_gtx_channel.gtxe2_channel_i_RXQPISENN_UNCONNECTED ),
        .RXQPISENP(\NLW_gtx_channel.gtxe2_channel_i_RXQPISENP_UNCONNECTED ),
        .RXRATE({1'b0,1'b0,RXRATE}),
        .RXRATEDONE(RATE_RXRATEDONE),
        .RXRESETDONE(USER_RXRESETDONE),
        .RXSLIDE(1'b0),
        .RXSTARTOFSEQ(\NLW_gtx_channel.gtxe2_channel_i_RXSTARTOFSEQ_UNCONNECTED ),
        .RXSTATUS(pipe_rxstatus),
        .RXSYSCLKSEL({1'b0,RXSYSCLKSEL}),
        .RXUSERRDY(rst_userrdy),
        .RXUSRCLK(pclk_sel_reg),
        .RXUSRCLK2(pclk_sel_reg),
        .RXVALID(gt_rxvalid_0),
        .SETERRSTATUS(1'b0),
        .TSTIN({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .TSTOUT(\NLW_gtx_channel.gtxe2_channel_i_TSTOUT_UNCONNECTED [9:0]),
        .TX8B10BBYPASS({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TX8B10BEN(rxchbonden_0),
        .TXBUFDIFFCTRL({1'b1,1'b0,1'b0}),
        .TXBUFSTATUS(\NLW_gtx_channel.gtxe2_channel_i_TXBUFSTATUS_UNCONNECTED [1:0]),
        .TXCHARDISPMODE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXCOMPLIANCE}),
        .TXCHARDISPVAL({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXCHARISK({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXDATAK}),
        .TXCOMFINISH(\NLW_gtx_channel.gtxe2_channel_i_TXCOMFINISH_UNCONNECTED ),
        .TXCOMINIT(1'b0),
        .TXCOMSAS(1'b0),
        .TXCOMWAKE(1'b0),
        .TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXDATA}),
        .TXDEEMPH(pipe_tx_deemph_gt),
        .TXDETECTRX(pipe_tx_rcvr_det_gt),
        .TXDIFFCTRL({1'b1,1'b1,1'b0,1'b0}),
        .TXDIFFPD(1'b0),
        .TXDLYBYPASS(1'b0),
        .TXDLYEN(sync_txdlyen_0),
        .TXDLYHOLD(1'b0),
        .TXDLYOVRDEN(1'b0),
        .TXDLYSRESET(out0[0]),
        .TXDLYSRESETDONE(pipe_txdlysresetdone),
        .TXDLYUPDOWN(1'b0),
        .TXELECIDLE(PIPE_TXELECIDLE),
        .TXGEARBOXREADY(\NLW_gtx_channel.gtxe2_channel_i_TXGEARBOXREADY_UNCONNECTED ),
        .TXHEADER({1'b0,1'b0,1'b0}),
        .TXINHIBIT(pipe_txinhibit),
        .TXMAINCURSOR(TXMAINCURSOR),
        .TXMARGIN(\pipe_stages_1.pipe_tx_margin_q_reg[2] ),
        .TXOUTCLK(pipe_txoutclk_out),
        .TXOUTCLKFABRIC(\NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKFABRIC_UNCONNECTED ),
        .TXOUTCLKPCS(\NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKPCS_UNCONNECTED ),
        .TXOUTCLKSEL({1'b0,1'b1,1'b1}),
        .TXPCSRESET(1'b0),
        .TXPD(PIPE_POWERDOWN),
        .TXPDELECIDLEMODE(1'b0),
        .TXPHALIGN(out0[2]),
        .TXPHALIGNDONE(pipe_txphaligndone),
        .TXPHALIGNEN(1'b1),
        .TXPHDLYPD(1'b0),
        .TXPHDLYRESET(1'b0),
        .TXPHDLYTSTCLK(1'b0),
        .TXPHINIT(out0[1]),
        .TXPHINITDONE(pipe_txphinitdone),
        .TXPHOVRDEN(1'b0),
        .TXPISOPD(1'b0),
        .TXPMARESET(rate_txpmareset_0),
        .TXPOLARITY(1'b0),
        .TXPOSTCURSOR(TXPOSTCURSOR),
        .TXPOSTCURSORINV(1'b0),
        .TXPRBSFORCEERR(pipe_txprbsforceerr),
        .TXPRBSSEL(pipe_txprbssel),
        .TXPRECURSOR(TXPRECURSOR),
        .TXPRECURSORINV(1'b0),
        .TXQPIBIASEN(1'b0),
        .TXQPISENN(\NLW_gtx_channel.gtxe2_channel_i_TXQPISENN_UNCONNECTED ),
        .TXQPISENP(\NLW_gtx_channel.gtxe2_channel_i_TXQPISENP_UNCONNECTED ),
        .TXQPISTRONGPDOWN(1'b0),
        .TXQPIWEAKPUP(1'b0),
        .TXRATE({1'b0,1'b0,RXRATE}),
        .TXRATEDONE(RATE_TXRATEDONE),
        .TXRESETDONE(USER_TXRESETDONE),
        .TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXSTARTSEQ(1'b0),
        .TXSWING(1'b0),
        .TXSYSCLKSEL({1'b0,RXSYSCLKSEL}),
        .TXUSERRDY(rst_userrdy),
        .TXUSRCLK(pclk_sel_reg),
        .TXUSRCLK2(pclk_sel_reg));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_wrapper" *) 
module pcie_7x_0_pcie_7x_0_gt_wrapper_21
   (cpllpd_0,
    RATE_CPLLLOCK,
    ext_ch_gt_drprdy,
    pipe_eyescandataerror,
    pci_exp_txn,
    pci_exp_txp,
    RATE_PHYSTATUS,
    gt_rxcdrlock_1,
    PIPE_RXCHANISALIGNED,
    pipe_rxcommadet,
    pipe_rxdlysresetdone,
    rxelecidle_reg1_reg,
    pipe_rxoutclk_out,
    PIPE_RXPHALIGNDONE,
    pipe_rxprbserr,
    RATE_RXRATEDONE,
    USER_RXRESETDONE,
    gt_rxvalid_1,
    pipe_txdlysresetdone,
    pipe_txphaligndone,
    pipe_txphinitdone,
    RATE_TXRATEDONE,
    USER_TXRESETDONE,
    ext_ch_gt_drpdo,
    pipe_rxbufstatus,
    pipe_rxstatus,
    \gt_rxdata_q_reg[15] ,
    pipe_dmonitorout,
    \gt_rxcharisk_q_reg[1] ,
    pipe_rxdisperr,
    pipe_rxnotintable,
    gt_cpllpdrefclk,
    CPLLPD0_3,
    gtreset_reg,
    drp_mux_en_1,
    drp_mux_we_1,
    sys_clk,
    DRP_GTXRESET,
    pci_exp_rxn,
    pci_exp_rxp,
    QPLL_QPLLOUTCLK,
    QPLL_QPLLOUTREFCLK,
    rxchbonden_1,
    converge_gen3_reg,
    rate_txpmareset_1,
    PIPE_RXPOLARITY,
    pipe_rxprbscntreset,
    rst_userrdy,
    CLK,
    pipe_tx_deemph_gt,
    pipe_tx_rcvr_det_gt,
    out0,
    PIPE_TXELECIDLE,
    pipe_txinhibit,
    pipe_txprbsforceerr,
    DRPDI,
    PIPE_POWERDOWN,
    RXSYSCLKSEL,
    pipe_loopback,
    pipe_rxprbssel,
    RXRATE,
    \pipe_stages_1.pipe_tx_margin_q_reg[2] ,
    pipe_txprbssel,
    USER_OOBCLK,
    RXCHBONDO,
    TXPOSTCURSOR,
    TXPRECURSOR,
    PIPE_TXDATA,
    TXMAINCURSOR,
    PIPE_TXCOMPLIANCE,
    PIPE_TXDATAK,
    DRPADDR,
    rate_cpllreset_1,
    RST_CPLLRESET);
  output cpllpd_0;
  output RATE_CPLLLOCK;
  output [0:0]ext_ch_gt_drprdy;
  output [0:0]pipe_eyescandataerror;
  output [0:0]pci_exp_txn;
  output [0:0]pci_exp_txp;
  output RATE_PHYSTATUS;
  output gt_rxcdrlock_1;
  output [0:0]PIPE_RXCHANISALIGNED;
  output [0:0]pipe_rxcommadet;
  output [0:0]pipe_rxdlysresetdone;
  output rxelecidle_reg1_reg;
  output [0:0]pipe_rxoutclk_out;
  output [0:0]PIPE_RXPHALIGNDONE;
  output [0:0]pipe_rxprbserr;
  output RATE_RXRATEDONE;
  output USER_RXRESETDONE;
  output gt_rxvalid_1;
  output [0:0]pipe_txdlysresetdone;
  output [0:0]pipe_txphaligndone;
  output [0:0]pipe_txphinitdone;
  output RATE_TXRATEDONE;
  output USER_TXRESETDONE;
  output [15:0]ext_ch_gt_drpdo;
  output [2:0]pipe_rxbufstatus;
  output [2:0]pipe_rxstatus;
  output [15:0]\gt_rxdata_q_reg[15] ;
  output [7:0]pipe_dmonitorout;
  output [1:0]\gt_rxcharisk_q_reg[1] ;
  output [7:0]pipe_rxdisperr;
  output [7:0]pipe_rxnotintable;
  input gt_cpllpdrefclk;
  input CPLLPD0_3;
  input gtreset_reg;
  input drp_mux_en_1;
  input drp_mux_we_1;
  input sys_clk;
  input DRP_GTXRESET;
  input [0:0]pci_exp_rxn;
  input [0:0]pci_exp_rxp;
  input QPLL_QPLLOUTCLK;
  input QPLL_QPLLOUTREFCLK;
  input rxchbonden_1;
  input converge_gen3_reg;
  input rate_txpmareset_1;
  input [0:0]PIPE_RXPOLARITY;
  input pipe_rxprbscntreset;
  input rst_userrdy;
  input CLK;
  input pipe_tx_deemph_gt;
  input pipe_tx_rcvr_det_gt;
  input [2:0]out0;
  input [0:0]PIPE_TXELECIDLE;
  input [0:0]pipe_txinhibit;
  input pipe_txprbsforceerr;
  input [15:0]DRPDI;
  input [1:0]PIPE_POWERDOWN;
  input [0:0]RXSYSCLKSEL;
  input [2:0]pipe_loopback;
  input [2:0]pipe_rxprbssel;
  input [0:0]RXRATE;
  input [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  input [2:0]pipe_txprbssel;
  input USER_OOBCLK;
  input [4:0]RXCHBONDO;
  input [4:0]TXPOSTCURSOR;
  input [4:0]TXPRECURSOR;
  input [15:0]PIPE_TXDATA;
  input [6:0]TXMAINCURSOR;
  input [0:0]PIPE_TXCOMPLIANCE;
  input [1:0]PIPE_TXDATAK;
  input [8:0]DRPADDR;
  input rate_cpllreset_1;
  input RST_CPLLRESET;

  wire CLK;
  wire CPLLPD0_3;
  wire CPLLRESET0;
  wire [8:0]DRPADDR;
  wire [15:0]DRPDI;
  wire DRP_GTXRESET;
  wire [1:0]PIPE_POWERDOWN;
  wire [0:0]PIPE_RXCHANISALIGNED;
  wire [0:0]PIPE_RXPHALIGNDONE;
  wire [0:0]PIPE_RXPOLARITY;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [15:0]PIPE_TXDATA;
  wire [1:0]PIPE_TXDATAK;
  wire [0:0]PIPE_TXELECIDLE;
  wire QPLL_QPLLOUTCLK;
  wire QPLL_QPLLOUTREFCLK;
  wire RATE_CPLLLOCK;
  wire RATE_PHYSTATUS;
  wire RATE_RXRATEDONE;
  wire RATE_TXRATEDONE;
  wire RST_CPLLRESET;
  wire [4:0]RXCHBONDO;
  wire [0:0]RXRATE;
  wire [0:0]RXSYSCLKSEL;
  wire [6:0]TXMAINCURSOR;
  wire [4:0]TXPOSTCURSOR;
  wire [4:0]TXPRECURSOR;
  wire USER_OOBCLK;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  wire converge_gen3_reg;
  wire cpllpd_0;
  wire drp_mux_en_1;
  wire drp_mux_we_1;
  wire [15:0]ext_ch_gt_drpdo;
  wire [0:0]ext_ch_gt_drprdy;
  wire gt_cpllpdrefclk;
  wire gt_rxcdrlock_1;
  wire [1:0]\gt_rxcharisk_q_reg[1] ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire gt_rxvalid_1;
  wire gtreset_reg;
  wire \gtx_channel.gtxe2_channel_i_n_10 ;
  wire \gtx_channel.gtxe2_channel_i_n_138 ;
  wire \gtx_channel.gtxe2_channel_i_n_139 ;
  wire \gtx_channel.gtxe2_channel_i_n_140 ;
  wire \gtx_channel.gtxe2_channel_i_n_141 ;
  wire \gtx_channel.gtxe2_channel_i_n_142 ;
  wire \gtx_channel.gtxe2_channel_i_n_143 ;
  wire \gtx_channel.gtxe2_channel_i_n_144 ;
  wire \gtx_channel.gtxe2_channel_i_n_145 ;
  wire \gtx_channel.gtxe2_channel_i_n_146 ;
  wire \gtx_channel.gtxe2_channel_i_n_147 ;
  wire \gtx_channel.gtxe2_channel_i_n_148 ;
  wire \gtx_channel.gtxe2_channel_i_n_149 ;
  wire \gtx_channel.gtxe2_channel_i_n_150 ;
  wire \gtx_channel.gtxe2_channel_i_n_151 ;
  wire \gtx_channel.gtxe2_channel_i_n_152 ;
  wire \gtx_channel.gtxe2_channel_i_n_153 ;
  wire \gtx_channel.gtxe2_channel_i_n_189 ;
  wire \gtx_channel.gtxe2_channel_i_n_190 ;
  wire \gtx_channel.gtxe2_channel_i_n_191 ;
  wire \gtx_channel.gtxe2_channel_i_n_192 ;
  wire \gtx_channel.gtxe2_channel_i_n_197 ;
  wire \gtx_channel.gtxe2_channel_i_n_198 ;
  wire \gtx_channel.gtxe2_channel_i_n_37 ;
  wire \gtx_channel.gtxe2_channel_i_n_9 ;
  wire \gtx_channel.gtxe2_channel_i_n_91 ;
  wire \gtx_channel.gtxe2_channel_i_n_92 ;
  wire \gtx_channel.gtxe2_channel_i_n_93 ;
  wire \gtx_channel.gtxe2_channel_i_n_94 ;
  wire \gtx_channel.gtxe2_channel_i_n_95 ;
  wire [2:0]out0;
  wire [0:0]pci_exp_rxn;
  wire [0:0]pci_exp_rxp;
  wire [0:0]pci_exp_txn;
  wire [0:0]pci_exp_txp;
  wire [7:0]pipe_dmonitorout;
  wire [0:0]pipe_eyescandataerror;
  wire [2:0]pipe_loopback;
  wire [2:0]pipe_rxbufstatus;
  wire [0:0]pipe_rxcommadet;
  wire [7:0]pipe_rxdisperr;
  wire [0:0]pipe_rxdlysresetdone;
  wire [7:0]pipe_rxnotintable;
  wire [0:0]pipe_rxoutclk_out;
  wire pipe_rxprbscntreset;
  wire [0:0]pipe_rxprbserr;
  wire [2:0]pipe_rxprbssel;
  wire [2:0]pipe_rxstatus;
  wire [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  wire pipe_tx_deemph_gt;
  wire pipe_tx_rcvr_det_gt;
  wire [0:0]pipe_txdlysresetdone;
  wire [0:0]pipe_txinhibit;
  wire [0:0]pipe_txphaligndone;
  wire [0:0]pipe_txphinitdone;
  wire pipe_txprbsforceerr;
  wire [2:0]pipe_txprbssel;
  wire rate_cpllreset_1;
  wire rate_txpmareset_1;
  wire rst_userrdy;
  wire rxchbonden_1;
  wire rxelecidle_reg1_reg;
  wire sys_clk;
  wire \NLW_gtx_channel.gtxe2_channel_i_CPLLFBCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_CPLLREFCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_GTREFCLKMONITOR_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCHANBONDSEQ_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCHANREALIGN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMINITDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMSASDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMWAKEDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXDATAVALID_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXHEADERVALID_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKFABRIC_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKPCS_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXQPISENN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXQPISENP_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXSTARTOFSEQ_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXCOMFINISH_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXGEARBOXREADY_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKFABRIC_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKPCS_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXQPISENN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXQPISENP_UNCONNECTED ;
  wire [15:0]\NLW_gtx_channel.gtxe2_channel_i_PCSRSVDOUT_UNCONNECTED ;
  wire [7:4]\NLW_gtx_channel.gtxe2_channel_i_RXCHARISCOMMA_UNCONNECTED ;
  wire [7:4]\NLW_gtx_channel.gtxe2_channel_i_RXCHARISK_UNCONNECTED ;
  wire [1:0]\NLW_gtx_channel.gtxe2_channel_i_RXCLKCORCNT_UNCONNECTED ;
  wire [63:32]\NLW_gtx_channel.gtxe2_channel_i_RXDATA_UNCONNECTED ;
  wire [2:0]\NLW_gtx_channel.gtxe2_channel_i_RXHEADER_UNCONNECTED ;
  wire [6:0]\NLW_gtx_channel.gtxe2_channel_i_RXMONITOROUT_UNCONNECTED ;
  wire [4:0]\NLW_gtx_channel.gtxe2_channel_i_RXPHMONITOR_UNCONNECTED ;
  wire [4:0]\NLW_gtx_channel.gtxe2_channel_i_RXPHSLIPMONITOR_UNCONNECTED ;
  wire [9:0]\NLW_gtx_channel.gtxe2_channel_i_TSTOUT_UNCONNECTED ;
  wire [1:0]\NLW_gtx_channel.gtxe2_channel_i_TXBUFSTATUS_UNCONNECTED ;

  pcie_7x_0_pcie_7x_0_gtx_cpllpd_ovrd_42 cpllPDInst
       (.CPLLRESET0(CPLLRESET0),
        .RST_CPLLRESET(RST_CPLLRESET),
        .cpllpd_0(cpllpd_0),
        .gt_cpllpdrefclk(gt_cpllpdrefclk),
        .rate_cpllreset_1(rate_cpllreset_1));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTXE2_CHANNEL #(
    .ALIGN_COMMA_DOUBLE("FALSE"),
    .ALIGN_COMMA_ENABLE(10'b1111111111),
    .ALIGN_COMMA_WORD(1),
    .ALIGN_MCOMMA_DET("TRUE"),
    .ALIGN_MCOMMA_VALUE(10'b1010000011),
    .ALIGN_PCOMMA_DET("TRUE"),
    .ALIGN_PCOMMA_VALUE(10'b0101111100),
    .CBCC_DATA_SOURCE_SEL("DECODED"),
    .CHAN_BOND_KEEP_ALIGN("TRUE"),
    .CHAN_BOND_MAX_SKEW(7),
    .CHAN_BOND_SEQ_1_1(10'b0001001010),
    .CHAN_BOND_SEQ_1_2(10'b0001001010),
    .CHAN_BOND_SEQ_1_3(10'b0001001010),
    .CHAN_BOND_SEQ_1_4(10'b0110111100),
    .CHAN_BOND_SEQ_1_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_1(10'b0001000101),
    .CHAN_BOND_SEQ_2_2(10'b0001000101),
    .CHAN_BOND_SEQ_2_3(10'b0001000101),
    .CHAN_BOND_SEQ_2_4(10'b0110111100),
    .CHAN_BOND_SEQ_2_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_USE("TRUE"),
    .CHAN_BOND_SEQ_LEN(4),
    .CLK_CORRECT_USE("TRUE"),
    .CLK_COR_KEEP_IDLE("TRUE"),
    .CLK_COR_MAX_LAT(20),
    .CLK_COR_MIN_LAT(18),
    .CLK_COR_PRECEDENCE("TRUE"),
    .CLK_COR_REPEAT_WAIT(0),
    .CLK_COR_SEQ_1_1(10'b0100011100),
    .CLK_COR_SEQ_1_2(10'b0000000000),
    .CLK_COR_SEQ_1_3(10'b0000000000),
    .CLK_COR_SEQ_1_4(10'b0000000000),
    .CLK_COR_SEQ_1_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_1(10'b0000000000),
    .CLK_COR_SEQ_2_2(10'b0000000000),
    .CLK_COR_SEQ_2_3(10'b0000000000),
    .CLK_COR_SEQ_2_4(10'b0000000000),
    .CLK_COR_SEQ_2_ENABLE(4'b0000),
    .CLK_COR_SEQ_2_USE("FALSE"),
    .CLK_COR_SEQ_LEN(1),
    .CPLL_CFG(24'hA407CC),
    .CPLL_FBDIV(5),
    .CPLL_FBDIV_45(5),
    .CPLL_INIT_CFG(24'h00001E),
    .CPLL_LOCK_CFG(16'h01E8),
    .CPLL_REFCLK_DIV(1),
    .DEC_MCOMMA_DETECT("TRUE"),
    .DEC_PCOMMA_DETECT("TRUE"),
    .DEC_VALID_COMMA_ONLY("FALSE"),
    .DMONITOR_CFG(24'h000B01),
    .ES_CONTROL(6'b000000),
    .ES_ERRDET_EN("FALSE"),
    .ES_EYE_SCAN_EN("FALSE"),
    .ES_HORZ_OFFSET(12'h000),
    .ES_PMA_CFG(10'b0000000000),
    .ES_PRESCALE(5'b00000),
    .ES_QUALIFIER(80'h00000000000000000000),
    .ES_QUAL_MASK(80'h00000000000000000000),
    .ES_SDATA_MASK(80'h00000000000000000000),
    .ES_VERT_OFFSET(9'b000000000),
    .FTS_DESKEW_SEQ_ENABLE(4'b1111),
    .FTS_LANE_DESKEW_CFG(4'b1111),
    .FTS_LANE_DESKEW_EN("TRUE"),
    .GEARBOX_MODE(3'b000),
    .IS_CPLLLOCKDETCLK_INVERTED(1'b0),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_GTGREFCLK_INVERTED(1'b0),
    .IS_RXUSRCLK2_INVERTED(1'b0),
    .IS_RXUSRCLK_INVERTED(1'b0),
    .IS_TXPHDLYTSTCLK_INVERTED(1'b0),
    .IS_TXUSRCLK2_INVERTED(1'b0),
    .IS_TXUSRCLK_INVERTED(1'b0),
    .OUTREFCLK_SEL_INV(2'b11),
    .PCS_PCIE_EN("TRUE"),
    .PCS_RSVD_ATTR(48'h0000000001CF),
    .PD_TRANS_TIME_FROM_P2(12'h03C),
    .PD_TRANS_TIME_NONE_P2(8'h09),
    .PD_TRANS_TIME_TO_P2(8'h64),
    .PMA_RSV(32'h00018480),
    .PMA_RSV2(16'h2050),
    .PMA_RSV3(2'b00),
    .PMA_RSV4(32'h00000000),
    .RXBUFRESET_TIME(5'b00001),
    .RXBUF_ADDR_MODE("FULL"),
    .RXBUF_EIDLE_HI_CNT(4'b0100),
    .RXBUF_EIDLE_LO_CNT(4'b0000),
    .RXBUF_EN("TRUE"),
    .RXBUF_RESET_ON_CB_CHANGE("TRUE"),
    .RXBUF_RESET_ON_COMMAALIGN("FALSE"),
    .RXBUF_RESET_ON_EIDLE("TRUE"),
    .RXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .RXBUF_THRESH_OVFLW(61),
    .RXBUF_THRESH_OVRD("FALSE"),
    .RXBUF_THRESH_UNDFLW(4),
    .RXCDRFREQRESET_TIME(5'b00001),
    .RXCDRPHRESET_TIME(5'b00001),
    .RXCDR_CFG(72'h03000023FF10200020),
    .RXCDR_FR_RESET_ON_EIDLE(1'b0),
    .RXCDR_HOLD_DURING_EIDLE(1'b1),
    .RXCDR_LOCK_CFG(6'b010101),
    .RXCDR_PH_RESET_ON_EIDLE(1'b0),
    .RXDFELPMRESET_TIME(7'b0001111),
    .RXDLY_CFG(16'h001F),
    .RXDLY_LCFG(9'h030),
    .RXDLY_TAP_CFG(16'h0000),
    .RXGEARBOX_EN("FALSE"),
    .RXISCANRESET_TIME(5'b00001),
    .RXLPM_HF_CFG(14'b00000011110000),
    .RXLPM_LF_CFG(14'b00000011110000),
    .RXOOB_CFG(7'b0000110),
    .RXOUT_DIV(2),
    .RXPCSRESET_TIME(5'b00001),
    .RXPHDLY_CFG(24'h004020),
    .RXPH_CFG(24'h000000),
    .RXPH_MONITOR_SEL(5'b00000),
    .RXPMARESET_TIME(5'b00011),
    .RXPRBS_ERR_LOOPBACK(1'b0),
    .RXSLIDE_AUTO_WAIT(7),
    .RXSLIDE_MODE("PMA"),
    .RX_BIAS_CFG(12'b000000000100),
    .RX_BUFFER_CFG(6'b000000),
    .RX_CLK25_DIV(4),
    .RX_CLKMUX_PD(1'b1),
    .RX_CM_SEL(2'b11),
    .RX_CM_TRIM(3'b010),
    .RX_DATA_WIDTH(20),
    .RX_DDI_SEL(6'b000000),
    .RX_DEBUG_CFG(12'b000000000000),
    .RX_DEFER_RESET_BUF_EN("TRUE"),
    .RX_DFE_GAIN_CFG(23'h020FEA),
    .RX_DFE_H2_CFG(12'b000000000000),
    .RX_DFE_H3_CFG(12'b000001000000),
    .RX_DFE_H4_CFG(11'b00011110000),
    .RX_DFE_H5_CFG(11'b00011100000),
    .RX_DFE_KL_CFG(13'b0000011111110),
    .RX_DFE_KL_CFG2(32'h3290D86C),
    .RX_DFE_LPM_CFG(16'h0954),
    .RX_DFE_LPM_HOLD_DURING_EIDLE(1'b1),
    .RX_DFE_UT_CFG(17'b10001111000000000),
    .RX_DFE_VP_CFG(17'b00011111100000011),
    .RX_DFE_XYD_CFG(13'b0000000000000),
    .RX_DISPERR_SEQ_MATCH("TRUE"),
    .RX_INT_DATAWIDTH(0),
    .RX_OS_CFG(13'b0000010000000),
    .RX_SIG_VALID_DLY(4),
    .RX_XCLK_SEL("RXREC"),
    .SAS_MAX_COM(64),
    .SAS_MIN_COM(36),
    .SATA_BURST_SEQ_LEN(4'b1111),
    .SATA_BURST_VAL(3'b100),
    .SATA_CPLL_CFG("VCO_3000MHZ"),
    .SATA_EIDLE_VAL(3'b100),
    .SATA_MAX_BURST(8),
    .SATA_MAX_INIT(21),
    .SATA_MAX_WAKE(7),
    .SATA_MIN_BURST(4),
    .SATA_MIN_INIT(12),
    .SATA_MIN_WAKE(4),
    .SHOW_REALIGN_COMMA("FALSE"),
    .SIM_CPLLREFCLK_SEL(3'b001),
    .SIM_RECEIVER_DETECT_PASS("TRUE"),
    .SIM_RESET_SPEEDUP("FALSE"),
    .SIM_TX_EIDLE_DRIVE_LEVEL("1"),
    .SIM_VERSION("3.0"),
    .TERM_RCAL_CFG(5'b10000),
    .TERM_RCAL_OVRD(1'b0),
    .TRANS_TIME_RATE(8'h0E),
    .TST_RSV(32'h00000000),
    .TXBUF_EN("FALSE"),
    .TXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .TXDLY_CFG(16'h001F),
    .TXDLY_LCFG(9'h030),
    .TXDLY_TAP_CFG(16'h0000),
    .TXGEARBOX_EN("FALSE"),
    .TXOUT_DIV(2),
    .TXPCSRESET_TIME(5'b00001),
    .TXPHDLY_CFG(24'h084020),
    .TXPH_CFG(16'h0780),
    .TXPH_MONITOR_SEL(5'b00000),
    .TXPMARESET_TIME(5'b00011),
    .TX_CLK25_DIV(4),
    .TX_CLKMUX_PD(1'b1),
    .TX_DATA_WIDTH(20),
    .TX_DEEMPH0(5'b10100),
    .TX_DEEMPH1(5'b01011),
    .TX_DRIVE_MODE("PIPE"),
    .TX_EIDLE_ASSERT_DELAY(3'b010),
    .TX_EIDLE_DEASSERT_DELAY(3'b100),
    .TX_INT_DATAWIDTH(0),
    .TX_LOOPBACK_DRIVE_HIZ("FALSE"),
    .TX_MAINCURSOR_SEL(1'b0),
    .TX_MARGIN_FULL_0(7'b1001111),
    .TX_MARGIN_FULL_1(7'b1001110),
    .TX_MARGIN_FULL_2(7'b1001101),
    .TX_MARGIN_FULL_3(7'b1001100),
    .TX_MARGIN_FULL_4(7'b1000011),
    .TX_MARGIN_LOW_0(7'b1000101),
    .TX_MARGIN_LOW_1(7'b1000110),
    .TX_MARGIN_LOW_2(7'b1000011),
    .TX_MARGIN_LOW_3(7'b1000010),
    .TX_MARGIN_LOW_4(7'b1000000),
    .TX_PREDRIVER_MODE(1'b0),
    .TX_QPI_STATUS_EN(1'b0),
    .TX_RXDETECT_CFG(14'h0064),
    .TX_RXDETECT_REF(3'b011),
    .TX_XCLK_SEL("TXUSR"),
    .UCODEER_CLR(1'b0)) 
    \gtx_channel.gtxe2_channel_i 
       (.CFGRESET(1'b0),
        .CLKRSVD({1'b0,1'b0,1'b0,USER_OOBCLK}),
        .CPLLFBCLKLOST(\NLW_gtx_channel.gtxe2_channel_i_CPLLFBCLKLOST_UNCONNECTED ),
        .CPLLLOCK(RATE_CPLLLOCK),
        .CPLLLOCKDETCLK(1'b0),
        .CPLLLOCKEN(1'b1),
        .CPLLPD(CPLLPD0_3),
        .CPLLREFCLKLOST(\NLW_gtx_channel.gtxe2_channel_i_CPLLREFCLKLOST_UNCONNECTED ),
        .CPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .CPLLRESET(CPLLRESET0),
        .DMONITOROUT(pipe_dmonitorout),
        .DRPADDR(DRPADDR),
        .DRPCLK(gtreset_reg),
        .DRPDI(DRPDI),
        .DRPDO(ext_ch_gt_drpdo),
        .DRPEN(drp_mux_en_1),
        .DRPRDY(ext_ch_gt_drprdy),
        .DRPWE(drp_mux_we_1),
        .EYESCANDATAERROR(pipe_eyescandataerror),
        .EYESCANMODE(1'b0),
        .EYESCANRESET(1'b0),
        .EYESCANTRIGGER(1'b0),
        .GTGREFCLK(1'b0),
        .GTNORTHREFCLK0(1'b0),
        .GTNORTHREFCLK1(1'b0),
        .GTREFCLK0(sys_clk),
        .GTREFCLK1(1'b0),
        .GTREFCLKMONITOR(\NLW_gtx_channel.gtxe2_channel_i_GTREFCLKMONITOR_UNCONNECTED ),
        .GTRESETSEL(1'b0),
        .GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GTRXRESET(DRP_GTXRESET),
        .GTSOUTHREFCLK0(1'b0),
        .GTSOUTHREFCLK1(1'b0),
        .GTTXRESET(DRP_GTXRESET),
        .GTXRXN(pci_exp_rxn),
        .GTXRXP(pci_exp_rxp),
        .GTXTXN(pci_exp_txn),
        .GTXTXP(pci_exp_txp),
        .LOOPBACK(pipe_loopback),
        .PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDOUT(\NLW_gtx_channel.gtxe2_channel_i_PCSRSVDOUT_UNCONNECTED [15:0]),
        .PHYSTATUS(RATE_PHYSTATUS),
        .PMARSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PMARSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLCLK(QPLL_QPLLOUTCLK),
        .QPLLREFCLK(QPLL_QPLLOUTREFCLK),
        .RESETOVRD(1'b0),
        .RX8B10BEN(rxchbonden_1),
        .RXBUFRESET(1'b0),
        .RXBUFSTATUS(pipe_rxbufstatus),
        .RXBYTEISALIGNED(\gtx_channel.gtxe2_channel_i_n_9 ),
        .RXBYTEREALIGN(\gtx_channel.gtxe2_channel_i_n_10 ),
        .RXCDRFREQRESET(1'b0),
        .RXCDRHOLD(1'b0),
        .RXCDRLOCK(gt_rxcdrlock_1),
        .RXCDROVRDEN(1'b0),
        .RXCDRRESET(1'b0),
        .RXCDRRESETRSV(1'b0),
        .RXCHANBONDSEQ(\NLW_gtx_channel.gtxe2_channel_i_RXCHANBONDSEQ_UNCONNECTED ),
        .RXCHANISALIGNED(PIPE_RXCHANISALIGNED),
        .RXCHANREALIGN(\NLW_gtx_channel.gtxe2_channel_i_RXCHANREALIGN_UNCONNECTED ),
        .RXCHARISCOMMA({\NLW_gtx_channel.gtxe2_channel_i_RXCHARISCOMMA_UNCONNECTED [7:4],\gtx_channel.gtxe2_channel_i_n_189 ,\gtx_channel.gtxe2_channel_i_n_190 ,\gtx_channel.gtxe2_channel_i_n_191 ,\gtx_channel.gtxe2_channel_i_n_192 }),
        .RXCHARISK({\NLW_gtx_channel.gtxe2_channel_i_RXCHARISK_UNCONNECTED [7:4],\gtx_channel.gtxe2_channel_i_n_197 ,\gtx_channel.gtxe2_channel_i_n_198 ,\gt_rxcharisk_q_reg[1] }),
        .RXCHBONDEN(rxchbonden_1),
        .RXCHBONDI(RXCHBONDO),
        .RXCHBONDLEVEL({1'b0,1'b0,1'b0}),
        .RXCHBONDMASTER(1'b0),
        .RXCHBONDO({\gtx_channel.gtxe2_channel_i_n_91 ,\gtx_channel.gtxe2_channel_i_n_92 ,\gtx_channel.gtxe2_channel_i_n_93 ,\gtx_channel.gtxe2_channel_i_n_94 ,\gtx_channel.gtxe2_channel_i_n_95 }),
        .RXCHBONDSLAVE(rxchbonden_1),
        .RXCLKCORCNT(\NLW_gtx_channel.gtxe2_channel_i_RXCLKCORCNT_UNCONNECTED [1:0]),
        .RXCOMINITDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMINITDET_UNCONNECTED ),
        .RXCOMMADET(pipe_rxcommadet),
        .RXCOMMADETEN(1'b1),
        .RXCOMSASDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMSASDET_UNCONNECTED ),
        .RXCOMWAKEDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMWAKEDET_UNCONNECTED ),
        .RXDATA({\NLW_gtx_channel.gtxe2_channel_i_RXDATA_UNCONNECTED [63:32],\gtx_channel.gtxe2_channel_i_n_138 ,\gtx_channel.gtxe2_channel_i_n_139 ,\gtx_channel.gtxe2_channel_i_n_140 ,\gtx_channel.gtxe2_channel_i_n_141 ,\gtx_channel.gtxe2_channel_i_n_142 ,\gtx_channel.gtxe2_channel_i_n_143 ,\gtx_channel.gtxe2_channel_i_n_144 ,\gtx_channel.gtxe2_channel_i_n_145 ,\gtx_channel.gtxe2_channel_i_n_146 ,\gtx_channel.gtxe2_channel_i_n_147 ,\gtx_channel.gtxe2_channel_i_n_148 ,\gtx_channel.gtxe2_channel_i_n_149 ,\gtx_channel.gtxe2_channel_i_n_150 ,\gtx_channel.gtxe2_channel_i_n_151 ,\gtx_channel.gtxe2_channel_i_n_152 ,\gtx_channel.gtxe2_channel_i_n_153 ,\gt_rxdata_q_reg[15] }),
        .RXDATAVALID(\NLW_gtx_channel.gtxe2_channel_i_RXDATAVALID_UNCONNECTED ),
        .RXDDIEN(1'b0),
        .RXDFEAGCHOLD(converge_gen3_reg),
        .RXDFEAGCOVRDEN(1'b0),
        .RXDFECM1EN(1'b0),
        .RXDFELFHOLD(1'b0),
        .RXDFELFOVRDEN(1'b1),
        .RXDFELPMRESET(1'b0),
        .RXDFETAP2HOLD(1'b0),
        .RXDFETAP2OVRDEN(1'b0),
        .RXDFETAP3HOLD(1'b0),
        .RXDFETAP3OVRDEN(1'b0),
        .RXDFETAP4HOLD(1'b0),
        .RXDFETAP4OVRDEN(1'b0),
        .RXDFETAP5HOLD(1'b0),
        .RXDFETAP5OVRDEN(1'b0),
        .RXDFEUTHOLD(1'b0),
        .RXDFEUTOVRDEN(1'b0),
        .RXDFEVPHOLD(1'b0),
        .RXDFEVPOVRDEN(1'b0),
        .RXDFEVSEN(1'b0),
        .RXDFEXYDEN(1'b0),
        .RXDFEXYDHOLD(1'b0),
        .RXDFEXYDOVRDEN(1'b0),
        .RXDISPERR(pipe_rxdisperr),
        .RXDLYBYPASS(1'b1),
        .RXDLYEN(1'b0),
        .RXDLYOVRDEN(1'b0),
        .RXDLYSRESET(1'b0),
        .RXDLYSRESETDONE(pipe_rxdlysresetdone),
        .RXELECIDLE(rxelecidle_reg1_reg),
        .RXELECIDLEMODE({1'b0,1'b0}),
        .RXGEARBOXSLIP(1'b0),
        .RXHEADER(\NLW_gtx_channel.gtxe2_channel_i_RXHEADER_UNCONNECTED [2:0]),
        .RXHEADERVALID(\NLW_gtx_channel.gtxe2_channel_i_RXHEADERVALID_UNCONNECTED ),
        .RXLPMEN(rxchbonden_1),
        .RXLPMHFHOLD(1'b0),
        .RXLPMHFOVRDEN(1'b0),
        .RXLPMLFHOLD(1'b0),
        .RXLPMLFKLOVRDEN(1'b0),
        .RXMCOMMAALIGNEN(rxchbonden_1),
        .RXMONITOROUT(\NLW_gtx_channel.gtxe2_channel_i_RXMONITOROUT_UNCONNECTED [6:0]),
        .RXMONITORSEL({1'b0,1'b0}),
        .RXNOTINTABLE(pipe_rxnotintable),
        .RXOOBRESET(1'b0),
        .RXOSHOLD(1'b0),
        .RXOSOVRDEN(1'b0),
        .RXOUTCLK(pipe_rxoutclk_out),
        .RXOUTCLKFABRIC(\NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKFABRIC_UNCONNECTED ),
        .RXOUTCLKPCS(\NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKPCS_UNCONNECTED ),
        .RXOUTCLKSEL({1'b0,1'b0,1'b0}),
        .RXPCOMMAALIGNEN(rxchbonden_1),
        .RXPCSRESET(1'b0),
        .RXPD(PIPE_POWERDOWN),
        .RXPHALIGN(1'b0),
        .RXPHALIGNDONE(PIPE_RXPHALIGNDONE),
        .RXPHALIGNEN(1'b0),
        .RXPHDLYPD(1'b0),
        .RXPHDLYRESET(1'b0),
        .RXPHMONITOR(\NLW_gtx_channel.gtxe2_channel_i_RXPHMONITOR_UNCONNECTED [4:0]),
        .RXPHOVRDEN(1'b0),
        .RXPHSLIPMONITOR(\NLW_gtx_channel.gtxe2_channel_i_RXPHSLIPMONITOR_UNCONNECTED [4:0]),
        .RXPMARESET(rate_txpmareset_1),
        .RXPOLARITY(PIPE_RXPOLARITY),
        .RXPRBSCNTRESET(pipe_rxprbscntreset),
        .RXPRBSERR(pipe_rxprbserr),
        .RXPRBSSEL(pipe_rxprbssel),
        .RXQPIEN(1'b0),
        .RXQPISENN(\NLW_gtx_channel.gtxe2_channel_i_RXQPISENN_UNCONNECTED ),
        .RXQPISENP(\NLW_gtx_channel.gtxe2_channel_i_RXQPISENP_UNCONNECTED ),
        .RXRATE({1'b0,1'b0,RXRATE}),
        .RXRATEDONE(RATE_RXRATEDONE),
        .RXRESETDONE(USER_RXRESETDONE),
        .RXSLIDE(1'b0),
        .RXSTARTOFSEQ(\NLW_gtx_channel.gtxe2_channel_i_RXSTARTOFSEQ_UNCONNECTED ),
        .RXSTATUS(pipe_rxstatus),
        .RXSYSCLKSEL({1'b0,RXSYSCLKSEL}),
        .RXUSERRDY(rst_userrdy),
        .RXUSRCLK(CLK),
        .RXUSRCLK2(CLK),
        .RXVALID(gt_rxvalid_1),
        .SETERRSTATUS(1'b0),
        .TSTIN({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .TSTOUT(\NLW_gtx_channel.gtxe2_channel_i_TSTOUT_UNCONNECTED [9:0]),
        .TX8B10BBYPASS({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TX8B10BEN(rxchbonden_1),
        .TXBUFDIFFCTRL({1'b1,1'b0,1'b0}),
        .TXBUFSTATUS(\NLW_gtx_channel.gtxe2_channel_i_TXBUFSTATUS_UNCONNECTED [1:0]),
        .TXCHARDISPMODE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXCOMPLIANCE}),
        .TXCHARDISPVAL({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXCHARISK({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXDATAK}),
        .TXCOMFINISH(\NLW_gtx_channel.gtxe2_channel_i_TXCOMFINISH_UNCONNECTED ),
        .TXCOMINIT(1'b0),
        .TXCOMSAS(1'b0),
        .TXCOMWAKE(1'b0),
        .TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXDATA}),
        .TXDEEMPH(pipe_tx_deemph_gt),
        .TXDETECTRX(pipe_tx_rcvr_det_gt),
        .TXDIFFCTRL({1'b1,1'b1,1'b0,1'b0}),
        .TXDIFFPD(1'b0),
        .TXDLYBYPASS(1'b0),
        .TXDLYEN(1'b0),
        .TXDLYHOLD(1'b0),
        .TXDLYOVRDEN(1'b0),
        .TXDLYSRESET(out0[0]),
        .TXDLYSRESETDONE(pipe_txdlysresetdone),
        .TXDLYUPDOWN(1'b0),
        .TXELECIDLE(PIPE_TXELECIDLE),
        .TXGEARBOXREADY(\NLW_gtx_channel.gtxe2_channel_i_TXGEARBOXREADY_UNCONNECTED ),
        .TXHEADER({1'b0,1'b0,1'b0}),
        .TXINHIBIT(pipe_txinhibit),
        .TXMAINCURSOR(TXMAINCURSOR),
        .TXMARGIN(\pipe_stages_1.pipe_tx_margin_q_reg[2] ),
        .TXOUTCLK(\gtx_channel.gtxe2_channel_i_n_37 ),
        .TXOUTCLKFABRIC(\NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKFABRIC_UNCONNECTED ),
        .TXOUTCLKPCS(\NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKPCS_UNCONNECTED ),
        .TXOUTCLKSEL({1'b0,1'b0,1'b0}),
        .TXPCSRESET(1'b0),
        .TXPD(PIPE_POWERDOWN),
        .TXPDELECIDLEMODE(1'b0),
        .TXPHALIGN(out0[2]),
        .TXPHALIGNDONE(pipe_txphaligndone),
        .TXPHALIGNEN(1'b1),
        .TXPHDLYPD(1'b0),
        .TXPHDLYRESET(1'b0),
        .TXPHDLYTSTCLK(1'b0),
        .TXPHINIT(out0[1]),
        .TXPHINITDONE(pipe_txphinitdone),
        .TXPHOVRDEN(1'b0),
        .TXPISOPD(1'b0),
        .TXPMARESET(rate_txpmareset_1),
        .TXPOLARITY(1'b0),
        .TXPOSTCURSOR(TXPOSTCURSOR),
        .TXPOSTCURSORINV(1'b0),
        .TXPRBSFORCEERR(pipe_txprbsforceerr),
        .TXPRBSSEL(pipe_txprbssel),
        .TXPRECURSOR(TXPRECURSOR),
        .TXPRECURSORINV(1'b0),
        .TXQPIBIASEN(1'b0),
        .TXQPISENN(\NLW_gtx_channel.gtxe2_channel_i_TXQPISENN_UNCONNECTED ),
        .TXQPISENP(\NLW_gtx_channel.gtxe2_channel_i_TXQPISENP_UNCONNECTED ),
        .TXQPISTRONGPDOWN(1'b0),
        .TXQPIWEAKPUP(1'b0),
        .TXRATE({1'b0,1'b0,RXRATE}),
        .TXRATEDONE(RATE_TXRATEDONE),
        .TXRESETDONE(USER_TXRESETDONE),
        .TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXSTARTSEQ(1'b0),
        .TXSWING(1'b0),
        .TXSYSCLKSEL({1'b0,RXSYSCLKSEL}),
        .TXUSERRDY(rst_userrdy),
        .TXUSRCLK(CLK),
        .TXUSRCLK2(CLK));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_wrapper" *) 
module pcie_7x_0_pcie_7x_0_gt_wrapper_27
   (cpllpd_1,
    RATE_CPLLLOCK,
    ext_ch_gt_drprdy,
    pipe_eyescandataerror,
    pci_exp_txn,
    pci_exp_txp,
    RATE_PHYSTATUS,
    gt_rxcdrlock_2,
    PIPE_RXCHANISALIGNED,
    pipe_rxcommadet,
    pipe_rxdlysresetdone,
    rxelecidle_reg1_reg,
    pipe_rxoutclk_out,
    PIPE_RXPHALIGNDONE,
    pipe_rxprbserr,
    RATE_RXRATEDONE,
    USER_RXRESETDONE,
    gt_rxvalid_2,
    pipe_txdlysresetdone,
    pipe_txphaligndone,
    pipe_txphinitdone,
    RATE_TXRATEDONE,
    USER_TXRESETDONE,
    ext_ch_gt_drpdo,
    pipe_rxbufstatus,
    pipe_rxstatus,
    \gt_rxdata_q_reg[15] ,
    pipe_dmonitorout,
    \gt_rxcharisk_q_reg[1] ,
    pipe_rxdisperr,
    pipe_rxnotintable,
    gt_cpllpdrefclk,
    CPLLPD0_4,
    gtreset_reg,
    drp_mux_en_2,
    drp_mux_we_2,
    sys_clk,
    DRP_GTXRESET,
    pci_exp_rxn,
    pci_exp_rxp,
    QPLL_QPLLOUTCLK,
    QPLL_QPLLOUTREFCLK,
    rxchbonden_2,
    converge_gen3_reg,
    rate_txpmareset_2,
    PIPE_RXPOLARITY,
    pipe_rxprbscntreset,
    rst_userrdy,
    CLK,
    pipe_tx_deemph_gt,
    pipe_tx_rcvr_det_gt,
    out0,
    PIPE_TXELECIDLE,
    pipe_txinhibit,
    pipe_txprbsforceerr,
    DRPDI,
    PIPE_POWERDOWN,
    RXSYSCLKSEL,
    pipe_loopback,
    pipe_rxprbssel,
    RXRATE,
    \pipe_stages_1.pipe_tx_margin_q_reg[2] ,
    pipe_txprbssel,
    USER_OOBCLK,
    RXCHBONDO,
    TXPOSTCURSOR,
    TXPRECURSOR,
    PIPE_TXDATA,
    TXMAINCURSOR,
    PIPE_TXCOMPLIANCE,
    PIPE_TXDATAK,
    DRPADDR,
    rate_cpllreset_2,
    RST_CPLLRESET);
  output cpllpd_1;
  output RATE_CPLLLOCK;
  output [0:0]ext_ch_gt_drprdy;
  output [0:0]pipe_eyescandataerror;
  output [0:0]pci_exp_txn;
  output [0:0]pci_exp_txp;
  output RATE_PHYSTATUS;
  output gt_rxcdrlock_2;
  output [0:0]PIPE_RXCHANISALIGNED;
  output [0:0]pipe_rxcommadet;
  output [0:0]pipe_rxdlysresetdone;
  output rxelecidle_reg1_reg;
  output [0:0]pipe_rxoutclk_out;
  output [0:0]PIPE_RXPHALIGNDONE;
  output [0:0]pipe_rxprbserr;
  output RATE_RXRATEDONE;
  output USER_RXRESETDONE;
  output gt_rxvalid_2;
  output [0:0]pipe_txdlysresetdone;
  output [0:0]pipe_txphaligndone;
  output [0:0]pipe_txphinitdone;
  output RATE_TXRATEDONE;
  output USER_TXRESETDONE;
  output [15:0]ext_ch_gt_drpdo;
  output [2:0]pipe_rxbufstatus;
  output [2:0]pipe_rxstatus;
  output [15:0]\gt_rxdata_q_reg[15] ;
  output [7:0]pipe_dmonitorout;
  output [1:0]\gt_rxcharisk_q_reg[1] ;
  output [7:0]pipe_rxdisperr;
  output [7:0]pipe_rxnotintable;
  input gt_cpllpdrefclk;
  input CPLLPD0_4;
  input gtreset_reg;
  input drp_mux_en_2;
  input drp_mux_we_2;
  input sys_clk;
  input DRP_GTXRESET;
  input [0:0]pci_exp_rxn;
  input [0:0]pci_exp_rxp;
  input QPLL_QPLLOUTCLK;
  input QPLL_QPLLOUTREFCLK;
  input rxchbonden_2;
  input converge_gen3_reg;
  input rate_txpmareset_2;
  input [0:0]PIPE_RXPOLARITY;
  input pipe_rxprbscntreset;
  input rst_userrdy;
  input CLK;
  input pipe_tx_deemph_gt;
  input pipe_tx_rcvr_det_gt;
  input [2:0]out0;
  input [0:0]PIPE_TXELECIDLE;
  input [0:0]pipe_txinhibit;
  input pipe_txprbsforceerr;
  input [15:0]DRPDI;
  input [1:0]PIPE_POWERDOWN;
  input [0:0]RXSYSCLKSEL;
  input [2:0]pipe_loopback;
  input [2:0]pipe_rxprbssel;
  input [0:0]RXRATE;
  input [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  input [2:0]pipe_txprbssel;
  input USER_OOBCLK;
  input [4:0]RXCHBONDO;
  input [4:0]TXPOSTCURSOR;
  input [4:0]TXPRECURSOR;
  input [15:0]PIPE_TXDATA;
  input [6:0]TXMAINCURSOR;
  input [0:0]PIPE_TXCOMPLIANCE;
  input [1:0]PIPE_TXDATAK;
  input [8:0]DRPADDR;
  input rate_cpllreset_2;
  input RST_CPLLRESET;

  wire CLK;
  wire CPLLPD0_4;
  wire CPLLRESET0;
  wire [8:0]DRPADDR;
  wire [15:0]DRPDI;
  wire DRP_GTXRESET;
  wire [1:0]PIPE_POWERDOWN;
  wire [0:0]PIPE_RXCHANISALIGNED;
  wire [0:0]PIPE_RXPHALIGNDONE;
  wire [0:0]PIPE_RXPOLARITY;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [15:0]PIPE_TXDATA;
  wire [1:0]PIPE_TXDATAK;
  wire [0:0]PIPE_TXELECIDLE;
  wire QPLL_QPLLOUTCLK;
  wire QPLL_QPLLOUTREFCLK;
  wire RATE_CPLLLOCK;
  wire RATE_PHYSTATUS;
  wire RATE_RXRATEDONE;
  wire RATE_TXRATEDONE;
  wire RST_CPLLRESET;
  wire [4:0]RXCHBONDO;
  wire [0:0]RXRATE;
  wire [0:0]RXSYSCLKSEL;
  wire [6:0]TXMAINCURSOR;
  wire [4:0]TXPOSTCURSOR;
  wire [4:0]TXPRECURSOR;
  wire USER_OOBCLK;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  wire converge_gen3_reg;
  wire cpllpd_1;
  wire drp_mux_en_2;
  wire drp_mux_we_2;
  wire [15:0]ext_ch_gt_drpdo;
  wire [0:0]ext_ch_gt_drprdy;
  wire gt_cpllpdrefclk;
  wire gt_rxcdrlock_2;
  wire [1:0]\gt_rxcharisk_q_reg[1] ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire gt_rxvalid_2;
  wire gtreset_reg;
  wire \gtx_channel.gtxe2_channel_i_n_10 ;
  wire \gtx_channel.gtxe2_channel_i_n_138 ;
  wire \gtx_channel.gtxe2_channel_i_n_139 ;
  wire \gtx_channel.gtxe2_channel_i_n_140 ;
  wire \gtx_channel.gtxe2_channel_i_n_141 ;
  wire \gtx_channel.gtxe2_channel_i_n_142 ;
  wire \gtx_channel.gtxe2_channel_i_n_143 ;
  wire \gtx_channel.gtxe2_channel_i_n_144 ;
  wire \gtx_channel.gtxe2_channel_i_n_145 ;
  wire \gtx_channel.gtxe2_channel_i_n_146 ;
  wire \gtx_channel.gtxe2_channel_i_n_147 ;
  wire \gtx_channel.gtxe2_channel_i_n_148 ;
  wire \gtx_channel.gtxe2_channel_i_n_149 ;
  wire \gtx_channel.gtxe2_channel_i_n_150 ;
  wire \gtx_channel.gtxe2_channel_i_n_151 ;
  wire \gtx_channel.gtxe2_channel_i_n_152 ;
  wire \gtx_channel.gtxe2_channel_i_n_153 ;
  wire \gtx_channel.gtxe2_channel_i_n_189 ;
  wire \gtx_channel.gtxe2_channel_i_n_190 ;
  wire \gtx_channel.gtxe2_channel_i_n_191 ;
  wire \gtx_channel.gtxe2_channel_i_n_192 ;
  wire \gtx_channel.gtxe2_channel_i_n_197 ;
  wire \gtx_channel.gtxe2_channel_i_n_198 ;
  wire \gtx_channel.gtxe2_channel_i_n_37 ;
  wire \gtx_channel.gtxe2_channel_i_n_9 ;
  wire \gtx_channel.gtxe2_channel_i_n_91 ;
  wire \gtx_channel.gtxe2_channel_i_n_92 ;
  wire \gtx_channel.gtxe2_channel_i_n_93 ;
  wire \gtx_channel.gtxe2_channel_i_n_94 ;
  wire \gtx_channel.gtxe2_channel_i_n_95 ;
  wire [2:0]out0;
  wire [0:0]pci_exp_rxn;
  wire [0:0]pci_exp_rxp;
  wire [0:0]pci_exp_txn;
  wire [0:0]pci_exp_txp;
  wire [7:0]pipe_dmonitorout;
  wire [0:0]pipe_eyescandataerror;
  wire [2:0]pipe_loopback;
  wire [2:0]pipe_rxbufstatus;
  wire [0:0]pipe_rxcommadet;
  wire [7:0]pipe_rxdisperr;
  wire [0:0]pipe_rxdlysresetdone;
  wire [7:0]pipe_rxnotintable;
  wire [0:0]pipe_rxoutclk_out;
  wire pipe_rxprbscntreset;
  wire [0:0]pipe_rxprbserr;
  wire [2:0]pipe_rxprbssel;
  wire [2:0]pipe_rxstatus;
  wire [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  wire pipe_tx_deemph_gt;
  wire pipe_tx_rcvr_det_gt;
  wire [0:0]pipe_txdlysresetdone;
  wire [0:0]pipe_txinhibit;
  wire [0:0]pipe_txphaligndone;
  wire [0:0]pipe_txphinitdone;
  wire pipe_txprbsforceerr;
  wire [2:0]pipe_txprbssel;
  wire rate_cpllreset_2;
  wire rate_txpmareset_2;
  wire rst_userrdy;
  wire rxchbonden_2;
  wire rxelecidle_reg1_reg;
  wire sys_clk;
  wire \NLW_gtx_channel.gtxe2_channel_i_CPLLFBCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_CPLLREFCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_GTREFCLKMONITOR_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCHANBONDSEQ_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCHANREALIGN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMINITDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMSASDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMWAKEDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXDATAVALID_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXHEADERVALID_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKFABRIC_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKPCS_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXQPISENN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXQPISENP_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXSTARTOFSEQ_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXCOMFINISH_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXGEARBOXREADY_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKFABRIC_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKPCS_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXQPISENN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXQPISENP_UNCONNECTED ;
  wire [15:0]\NLW_gtx_channel.gtxe2_channel_i_PCSRSVDOUT_UNCONNECTED ;
  wire [7:4]\NLW_gtx_channel.gtxe2_channel_i_RXCHARISCOMMA_UNCONNECTED ;
  wire [7:4]\NLW_gtx_channel.gtxe2_channel_i_RXCHARISK_UNCONNECTED ;
  wire [1:0]\NLW_gtx_channel.gtxe2_channel_i_RXCLKCORCNT_UNCONNECTED ;
  wire [63:32]\NLW_gtx_channel.gtxe2_channel_i_RXDATA_UNCONNECTED ;
  wire [2:0]\NLW_gtx_channel.gtxe2_channel_i_RXHEADER_UNCONNECTED ;
  wire [6:0]\NLW_gtx_channel.gtxe2_channel_i_RXMONITOROUT_UNCONNECTED ;
  wire [4:0]\NLW_gtx_channel.gtxe2_channel_i_RXPHMONITOR_UNCONNECTED ;
  wire [4:0]\NLW_gtx_channel.gtxe2_channel_i_RXPHSLIPMONITOR_UNCONNECTED ;
  wire [9:0]\NLW_gtx_channel.gtxe2_channel_i_TSTOUT_UNCONNECTED ;
  wire [1:0]\NLW_gtx_channel.gtxe2_channel_i_TXBUFSTATUS_UNCONNECTED ;

  pcie_7x_0_pcie_7x_0_gtx_cpllpd_ovrd_40 cpllPDInst
       (.CPLLRESET0(CPLLRESET0),
        .RST_CPLLRESET(RST_CPLLRESET),
        .cpllpd_1(cpllpd_1),
        .gt_cpllpdrefclk(gt_cpllpdrefclk),
        .rate_cpllreset_2(rate_cpllreset_2));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTXE2_CHANNEL #(
    .ALIGN_COMMA_DOUBLE("FALSE"),
    .ALIGN_COMMA_ENABLE(10'b1111111111),
    .ALIGN_COMMA_WORD(1),
    .ALIGN_MCOMMA_DET("TRUE"),
    .ALIGN_MCOMMA_VALUE(10'b1010000011),
    .ALIGN_PCOMMA_DET("TRUE"),
    .ALIGN_PCOMMA_VALUE(10'b0101111100),
    .CBCC_DATA_SOURCE_SEL("DECODED"),
    .CHAN_BOND_KEEP_ALIGN("TRUE"),
    .CHAN_BOND_MAX_SKEW(7),
    .CHAN_BOND_SEQ_1_1(10'b0001001010),
    .CHAN_BOND_SEQ_1_2(10'b0001001010),
    .CHAN_BOND_SEQ_1_3(10'b0001001010),
    .CHAN_BOND_SEQ_1_4(10'b0110111100),
    .CHAN_BOND_SEQ_1_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_1(10'b0001000101),
    .CHAN_BOND_SEQ_2_2(10'b0001000101),
    .CHAN_BOND_SEQ_2_3(10'b0001000101),
    .CHAN_BOND_SEQ_2_4(10'b0110111100),
    .CHAN_BOND_SEQ_2_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_USE("TRUE"),
    .CHAN_BOND_SEQ_LEN(4),
    .CLK_CORRECT_USE("TRUE"),
    .CLK_COR_KEEP_IDLE("TRUE"),
    .CLK_COR_MAX_LAT(20),
    .CLK_COR_MIN_LAT(18),
    .CLK_COR_PRECEDENCE("TRUE"),
    .CLK_COR_REPEAT_WAIT(0),
    .CLK_COR_SEQ_1_1(10'b0100011100),
    .CLK_COR_SEQ_1_2(10'b0000000000),
    .CLK_COR_SEQ_1_3(10'b0000000000),
    .CLK_COR_SEQ_1_4(10'b0000000000),
    .CLK_COR_SEQ_1_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_1(10'b0000000000),
    .CLK_COR_SEQ_2_2(10'b0000000000),
    .CLK_COR_SEQ_2_3(10'b0000000000),
    .CLK_COR_SEQ_2_4(10'b0000000000),
    .CLK_COR_SEQ_2_ENABLE(4'b0000),
    .CLK_COR_SEQ_2_USE("FALSE"),
    .CLK_COR_SEQ_LEN(1),
    .CPLL_CFG(24'hA407CC),
    .CPLL_FBDIV(5),
    .CPLL_FBDIV_45(5),
    .CPLL_INIT_CFG(24'h00001E),
    .CPLL_LOCK_CFG(16'h01E8),
    .CPLL_REFCLK_DIV(1),
    .DEC_MCOMMA_DETECT("TRUE"),
    .DEC_PCOMMA_DETECT("TRUE"),
    .DEC_VALID_COMMA_ONLY("FALSE"),
    .DMONITOR_CFG(24'h000B01),
    .ES_CONTROL(6'b000000),
    .ES_ERRDET_EN("FALSE"),
    .ES_EYE_SCAN_EN("FALSE"),
    .ES_HORZ_OFFSET(12'h000),
    .ES_PMA_CFG(10'b0000000000),
    .ES_PRESCALE(5'b00000),
    .ES_QUALIFIER(80'h00000000000000000000),
    .ES_QUAL_MASK(80'h00000000000000000000),
    .ES_SDATA_MASK(80'h00000000000000000000),
    .ES_VERT_OFFSET(9'b000000000),
    .FTS_DESKEW_SEQ_ENABLE(4'b1111),
    .FTS_LANE_DESKEW_CFG(4'b1111),
    .FTS_LANE_DESKEW_EN("TRUE"),
    .GEARBOX_MODE(3'b000),
    .IS_CPLLLOCKDETCLK_INVERTED(1'b0),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_GTGREFCLK_INVERTED(1'b0),
    .IS_RXUSRCLK2_INVERTED(1'b0),
    .IS_RXUSRCLK_INVERTED(1'b0),
    .IS_TXPHDLYTSTCLK_INVERTED(1'b0),
    .IS_TXUSRCLK2_INVERTED(1'b0),
    .IS_TXUSRCLK_INVERTED(1'b0),
    .OUTREFCLK_SEL_INV(2'b11),
    .PCS_PCIE_EN("TRUE"),
    .PCS_RSVD_ATTR(48'h0000000001CF),
    .PD_TRANS_TIME_FROM_P2(12'h03C),
    .PD_TRANS_TIME_NONE_P2(8'h09),
    .PD_TRANS_TIME_TO_P2(8'h64),
    .PMA_RSV(32'h00018480),
    .PMA_RSV2(16'h2050),
    .PMA_RSV3(2'b00),
    .PMA_RSV4(32'h00000000),
    .RXBUFRESET_TIME(5'b00001),
    .RXBUF_ADDR_MODE("FULL"),
    .RXBUF_EIDLE_HI_CNT(4'b0100),
    .RXBUF_EIDLE_LO_CNT(4'b0000),
    .RXBUF_EN("TRUE"),
    .RXBUF_RESET_ON_CB_CHANGE("TRUE"),
    .RXBUF_RESET_ON_COMMAALIGN("FALSE"),
    .RXBUF_RESET_ON_EIDLE("TRUE"),
    .RXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .RXBUF_THRESH_OVFLW(61),
    .RXBUF_THRESH_OVRD("FALSE"),
    .RXBUF_THRESH_UNDFLW(4),
    .RXCDRFREQRESET_TIME(5'b00001),
    .RXCDRPHRESET_TIME(5'b00001),
    .RXCDR_CFG(72'h03000023FF10200020),
    .RXCDR_FR_RESET_ON_EIDLE(1'b0),
    .RXCDR_HOLD_DURING_EIDLE(1'b1),
    .RXCDR_LOCK_CFG(6'b010101),
    .RXCDR_PH_RESET_ON_EIDLE(1'b0),
    .RXDFELPMRESET_TIME(7'b0001111),
    .RXDLY_CFG(16'h001F),
    .RXDLY_LCFG(9'h030),
    .RXDLY_TAP_CFG(16'h0000),
    .RXGEARBOX_EN("FALSE"),
    .RXISCANRESET_TIME(5'b00001),
    .RXLPM_HF_CFG(14'b00000011110000),
    .RXLPM_LF_CFG(14'b00000011110000),
    .RXOOB_CFG(7'b0000110),
    .RXOUT_DIV(2),
    .RXPCSRESET_TIME(5'b00001),
    .RXPHDLY_CFG(24'h004020),
    .RXPH_CFG(24'h000000),
    .RXPH_MONITOR_SEL(5'b00000),
    .RXPMARESET_TIME(5'b00011),
    .RXPRBS_ERR_LOOPBACK(1'b0),
    .RXSLIDE_AUTO_WAIT(7),
    .RXSLIDE_MODE("PMA"),
    .RX_BIAS_CFG(12'b000000000100),
    .RX_BUFFER_CFG(6'b000000),
    .RX_CLK25_DIV(4),
    .RX_CLKMUX_PD(1'b1),
    .RX_CM_SEL(2'b11),
    .RX_CM_TRIM(3'b010),
    .RX_DATA_WIDTH(20),
    .RX_DDI_SEL(6'b000000),
    .RX_DEBUG_CFG(12'b000000000000),
    .RX_DEFER_RESET_BUF_EN("TRUE"),
    .RX_DFE_GAIN_CFG(23'h020FEA),
    .RX_DFE_H2_CFG(12'b000000000000),
    .RX_DFE_H3_CFG(12'b000001000000),
    .RX_DFE_H4_CFG(11'b00011110000),
    .RX_DFE_H5_CFG(11'b00011100000),
    .RX_DFE_KL_CFG(13'b0000011111110),
    .RX_DFE_KL_CFG2(32'h3290D86C),
    .RX_DFE_LPM_CFG(16'h0954),
    .RX_DFE_LPM_HOLD_DURING_EIDLE(1'b1),
    .RX_DFE_UT_CFG(17'b10001111000000000),
    .RX_DFE_VP_CFG(17'b00011111100000011),
    .RX_DFE_XYD_CFG(13'b0000000000000),
    .RX_DISPERR_SEQ_MATCH("TRUE"),
    .RX_INT_DATAWIDTH(0),
    .RX_OS_CFG(13'b0000010000000),
    .RX_SIG_VALID_DLY(4),
    .RX_XCLK_SEL("RXREC"),
    .SAS_MAX_COM(64),
    .SAS_MIN_COM(36),
    .SATA_BURST_SEQ_LEN(4'b1111),
    .SATA_BURST_VAL(3'b100),
    .SATA_CPLL_CFG("VCO_3000MHZ"),
    .SATA_EIDLE_VAL(3'b100),
    .SATA_MAX_BURST(8),
    .SATA_MAX_INIT(21),
    .SATA_MAX_WAKE(7),
    .SATA_MIN_BURST(4),
    .SATA_MIN_INIT(12),
    .SATA_MIN_WAKE(4),
    .SHOW_REALIGN_COMMA("FALSE"),
    .SIM_CPLLREFCLK_SEL(3'b001),
    .SIM_RECEIVER_DETECT_PASS("TRUE"),
    .SIM_RESET_SPEEDUP("FALSE"),
    .SIM_TX_EIDLE_DRIVE_LEVEL("1"),
    .SIM_VERSION("3.0"),
    .TERM_RCAL_CFG(5'b10000),
    .TERM_RCAL_OVRD(1'b0),
    .TRANS_TIME_RATE(8'h0E),
    .TST_RSV(32'h00000000),
    .TXBUF_EN("FALSE"),
    .TXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .TXDLY_CFG(16'h001F),
    .TXDLY_LCFG(9'h030),
    .TXDLY_TAP_CFG(16'h0000),
    .TXGEARBOX_EN("FALSE"),
    .TXOUT_DIV(2),
    .TXPCSRESET_TIME(5'b00001),
    .TXPHDLY_CFG(24'h084020),
    .TXPH_CFG(16'h0780),
    .TXPH_MONITOR_SEL(5'b00000),
    .TXPMARESET_TIME(5'b00011),
    .TX_CLK25_DIV(4),
    .TX_CLKMUX_PD(1'b1),
    .TX_DATA_WIDTH(20),
    .TX_DEEMPH0(5'b10100),
    .TX_DEEMPH1(5'b01011),
    .TX_DRIVE_MODE("PIPE"),
    .TX_EIDLE_ASSERT_DELAY(3'b010),
    .TX_EIDLE_DEASSERT_DELAY(3'b100),
    .TX_INT_DATAWIDTH(0),
    .TX_LOOPBACK_DRIVE_HIZ("FALSE"),
    .TX_MAINCURSOR_SEL(1'b0),
    .TX_MARGIN_FULL_0(7'b1001111),
    .TX_MARGIN_FULL_1(7'b1001110),
    .TX_MARGIN_FULL_2(7'b1001101),
    .TX_MARGIN_FULL_3(7'b1001100),
    .TX_MARGIN_FULL_4(7'b1000011),
    .TX_MARGIN_LOW_0(7'b1000101),
    .TX_MARGIN_LOW_1(7'b1000110),
    .TX_MARGIN_LOW_2(7'b1000011),
    .TX_MARGIN_LOW_3(7'b1000010),
    .TX_MARGIN_LOW_4(7'b1000000),
    .TX_PREDRIVER_MODE(1'b0),
    .TX_QPI_STATUS_EN(1'b0),
    .TX_RXDETECT_CFG(14'h0064),
    .TX_RXDETECT_REF(3'b011),
    .TX_XCLK_SEL("TXUSR"),
    .UCODEER_CLR(1'b0)) 
    \gtx_channel.gtxe2_channel_i 
       (.CFGRESET(1'b0),
        .CLKRSVD({1'b0,1'b0,1'b0,USER_OOBCLK}),
        .CPLLFBCLKLOST(\NLW_gtx_channel.gtxe2_channel_i_CPLLFBCLKLOST_UNCONNECTED ),
        .CPLLLOCK(RATE_CPLLLOCK),
        .CPLLLOCKDETCLK(1'b0),
        .CPLLLOCKEN(1'b1),
        .CPLLPD(CPLLPD0_4),
        .CPLLREFCLKLOST(\NLW_gtx_channel.gtxe2_channel_i_CPLLREFCLKLOST_UNCONNECTED ),
        .CPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .CPLLRESET(CPLLRESET0),
        .DMONITOROUT(pipe_dmonitorout),
        .DRPADDR(DRPADDR),
        .DRPCLK(gtreset_reg),
        .DRPDI(DRPDI),
        .DRPDO(ext_ch_gt_drpdo),
        .DRPEN(drp_mux_en_2),
        .DRPRDY(ext_ch_gt_drprdy),
        .DRPWE(drp_mux_we_2),
        .EYESCANDATAERROR(pipe_eyescandataerror),
        .EYESCANMODE(1'b0),
        .EYESCANRESET(1'b0),
        .EYESCANTRIGGER(1'b0),
        .GTGREFCLK(1'b0),
        .GTNORTHREFCLK0(1'b0),
        .GTNORTHREFCLK1(1'b0),
        .GTREFCLK0(sys_clk),
        .GTREFCLK1(1'b0),
        .GTREFCLKMONITOR(\NLW_gtx_channel.gtxe2_channel_i_GTREFCLKMONITOR_UNCONNECTED ),
        .GTRESETSEL(1'b0),
        .GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GTRXRESET(DRP_GTXRESET),
        .GTSOUTHREFCLK0(1'b0),
        .GTSOUTHREFCLK1(1'b0),
        .GTTXRESET(DRP_GTXRESET),
        .GTXRXN(pci_exp_rxn),
        .GTXRXP(pci_exp_rxp),
        .GTXTXN(pci_exp_txn),
        .GTXTXP(pci_exp_txp),
        .LOOPBACK(pipe_loopback),
        .PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDOUT(\NLW_gtx_channel.gtxe2_channel_i_PCSRSVDOUT_UNCONNECTED [15:0]),
        .PHYSTATUS(RATE_PHYSTATUS),
        .PMARSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PMARSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLCLK(QPLL_QPLLOUTCLK),
        .QPLLREFCLK(QPLL_QPLLOUTREFCLK),
        .RESETOVRD(1'b0),
        .RX8B10BEN(rxchbonden_2),
        .RXBUFRESET(1'b0),
        .RXBUFSTATUS(pipe_rxbufstatus),
        .RXBYTEISALIGNED(\gtx_channel.gtxe2_channel_i_n_9 ),
        .RXBYTEREALIGN(\gtx_channel.gtxe2_channel_i_n_10 ),
        .RXCDRFREQRESET(1'b0),
        .RXCDRHOLD(1'b0),
        .RXCDRLOCK(gt_rxcdrlock_2),
        .RXCDROVRDEN(1'b0),
        .RXCDRRESET(1'b0),
        .RXCDRRESETRSV(1'b0),
        .RXCHANBONDSEQ(\NLW_gtx_channel.gtxe2_channel_i_RXCHANBONDSEQ_UNCONNECTED ),
        .RXCHANISALIGNED(PIPE_RXCHANISALIGNED),
        .RXCHANREALIGN(\NLW_gtx_channel.gtxe2_channel_i_RXCHANREALIGN_UNCONNECTED ),
        .RXCHARISCOMMA({\NLW_gtx_channel.gtxe2_channel_i_RXCHARISCOMMA_UNCONNECTED [7:4],\gtx_channel.gtxe2_channel_i_n_189 ,\gtx_channel.gtxe2_channel_i_n_190 ,\gtx_channel.gtxe2_channel_i_n_191 ,\gtx_channel.gtxe2_channel_i_n_192 }),
        .RXCHARISK({\NLW_gtx_channel.gtxe2_channel_i_RXCHARISK_UNCONNECTED [7:4],\gtx_channel.gtxe2_channel_i_n_197 ,\gtx_channel.gtxe2_channel_i_n_198 ,\gt_rxcharisk_q_reg[1] }),
        .RXCHBONDEN(rxchbonden_2),
        .RXCHBONDI(RXCHBONDO),
        .RXCHBONDLEVEL({1'b0,1'b0,1'b0}),
        .RXCHBONDMASTER(1'b0),
        .RXCHBONDO({\gtx_channel.gtxe2_channel_i_n_91 ,\gtx_channel.gtxe2_channel_i_n_92 ,\gtx_channel.gtxe2_channel_i_n_93 ,\gtx_channel.gtxe2_channel_i_n_94 ,\gtx_channel.gtxe2_channel_i_n_95 }),
        .RXCHBONDSLAVE(rxchbonden_2),
        .RXCLKCORCNT(\NLW_gtx_channel.gtxe2_channel_i_RXCLKCORCNT_UNCONNECTED [1:0]),
        .RXCOMINITDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMINITDET_UNCONNECTED ),
        .RXCOMMADET(pipe_rxcommadet),
        .RXCOMMADETEN(1'b1),
        .RXCOMSASDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMSASDET_UNCONNECTED ),
        .RXCOMWAKEDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMWAKEDET_UNCONNECTED ),
        .RXDATA({\NLW_gtx_channel.gtxe2_channel_i_RXDATA_UNCONNECTED [63:32],\gtx_channel.gtxe2_channel_i_n_138 ,\gtx_channel.gtxe2_channel_i_n_139 ,\gtx_channel.gtxe2_channel_i_n_140 ,\gtx_channel.gtxe2_channel_i_n_141 ,\gtx_channel.gtxe2_channel_i_n_142 ,\gtx_channel.gtxe2_channel_i_n_143 ,\gtx_channel.gtxe2_channel_i_n_144 ,\gtx_channel.gtxe2_channel_i_n_145 ,\gtx_channel.gtxe2_channel_i_n_146 ,\gtx_channel.gtxe2_channel_i_n_147 ,\gtx_channel.gtxe2_channel_i_n_148 ,\gtx_channel.gtxe2_channel_i_n_149 ,\gtx_channel.gtxe2_channel_i_n_150 ,\gtx_channel.gtxe2_channel_i_n_151 ,\gtx_channel.gtxe2_channel_i_n_152 ,\gtx_channel.gtxe2_channel_i_n_153 ,\gt_rxdata_q_reg[15] }),
        .RXDATAVALID(\NLW_gtx_channel.gtxe2_channel_i_RXDATAVALID_UNCONNECTED ),
        .RXDDIEN(1'b0),
        .RXDFEAGCHOLD(converge_gen3_reg),
        .RXDFEAGCOVRDEN(1'b0),
        .RXDFECM1EN(1'b0),
        .RXDFELFHOLD(1'b0),
        .RXDFELFOVRDEN(1'b1),
        .RXDFELPMRESET(1'b0),
        .RXDFETAP2HOLD(1'b0),
        .RXDFETAP2OVRDEN(1'b0),
        .RXDFETAP3HOLD(1'b0),
        .RXDFETAP3OVRDEN(1'b0),
        .RXDFETAP4HOLD(1'b0),
        .RXDFETAP4OVRDEN(1'b0),
        .RXDFETAP5HOLD(1'b0),
        .RXDFETAP5OVRDEN(1'b0),
        .RXDFEUTHOLD(1'b0),
        .RXDFEUTOVRDEN(1'b0),
        .RXDFEVPHOLD(1'b0),
        .RXDFEVPOVRDEN(1'b0),
        .RXDFEVSEN(1'b0),
        .RXDFEXYDEN(1'b0),
        .RXDFEXYDHOLD(1'b0),
        .RXDFEXYDOVRDEN(1'b0),
        .RXDISPERR(pipe_rxdisperr),
        .RXDLYBYPASS(1'b1),
        .RXDLYEN(1'b0),
        .RXDLYOVRDEN(1'b0),
        .RXDLYSRESET(1'b0),
        .RXDLYSRESETDONE(pipe_rxdlysresetdone),
        .RXELECIDLE(rxelecidle_reg1_reg),
        .RXELECIDLEMODE({1'b0,1'b0}),
        .RXGEARBOXSLIP(1'b0),
        .RXHEADER(\NLW_gtx_channel.gtxe2_channel_i_RXHEADER_UNCONNECTED [2:0]),
        .RXHEADERVALID(\NLW_gtx_channel.gtxe2_channel_i_RXHEADERVALID_UNCONNECTED ),
        .RXLPMEN(rxchbonden_2),
        .RXLPMHFHOLD(1'b0),
        .RXLPMHFOVRDEN(1'b0),
        .RXLPMLFHOLD(1'b0),
        .RXLPMLFKLOVRDEN(1'b0),
        .RXMCOMMAALIGNEN(rxchbonden_2),
        .RXMONITOROUT(\NLW_gtx_channel.gtxe2_channel_i_RXMONITOROUT_UNCONNECTED [6:0]),
        .RXMONITORSEL({1'b0,1'b0}),
        .RXNOTINTABLE(pipe_rxnotintable),
        .RXOOBRESET(1'b0),
        .RXOSHOLD(1'b0),
        .RXOSOVRDEN(1'b0),
        .RXOUTCLK(pipe_rxoutclk_out),
        .RXOUTCLKFABRIC(\NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKFABRIC_UNCONNECTED ),
        .RXOUTCLKPCS(\NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKPCS_UNCONNECTED ),
        .RXOUTCLKSEL({1'b0,1'b0,1'b0}),
        .RXPCOMMAALIGNEN(rxchbonden_2),
        .RXPCSRESET(1'b0),
        .RXPD(PIPE_POWERDOWN),
        .RXPHALIGN(1'b0),
        .RXPHALIGNDONE(PIPE_RXPHALIGNDONE),
        .RXPHALIGNEN(1'b0),
        .RXPHDLYPD(1'b0),
        .RXPHDLYRESET(1'b0),
        .RXPHMONITOR(\NLW_gtx_channel.gtxe2_channel_i_RXPHMONITOR_UNCONNECTED [4:0]),
        .RXPHOVRDEN(1'b0),
        .RXPHSLIPMONITOR(\NLW_gtx_channel.gtxe2_channel_i_RXPHSLIPMONITOR_UNCONNECTED [4:0]),
        .RXPMARESET(rate_txpmareset_2),
        .RXPOLARITY(PIPE_RXPOLARITY),
        .RXPRBSCNTRESET(pipe_rxprbscntreset),
        .RXPRBSERR(pipe_rxprbserr),
        .RXPRBSSEL(pipe_rxprbssel),
        .RXQPIEN(1'b0),
        .RXQPISENN(\NLW_gtx_channel.gtxe2_channel_i_RXQPISENN_UNCONNECTED ),
        .RXQPISENP(\NLW_gtx_channel.gtxe2_channel_i_RXQPISENP_UNCONNECTED ),
        .RXRATE({1'b0,1'b0,RXRATE}),
        .RXRATEDONE(RATE_RXRATEDONE),
        .RXRESETDONE(USER_RXRESETDONE),
        .RXSLIDE(1'b0),
        .RXSTARTOFSEQ(\NLW_gtx_channel.gtxe2_channel_i_RXSTARTOFSEQ_UNCONNECTED ),
        .RXSTATUS(pipe_rxstatus),
        .RXSYSCLKSEL({1'b0,RXSYSCLKSEL}),
        .RXUSERRDY(rst_userrdy),
        .RXUSRCLK(CLK),
        .RXUSRCLK2(CLK),
        .RXVALID(gt_rxvalid_2),
        .SETERRSTATUS(1'b0),
        .TSTIN({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .TSTOUT(\NLW_gtx_channel.gtxe2_channel_i_TSTOUT_UNCONNECTED [9:0]),
        .TX8B10BBYPASS({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TX8B10BEN(rxchbonden_2),
        .TXBUFDIFFCTRL({1'b1,1'b0,1'b0}),
        .TXBUFSTATUS(\NLW_gtx_channel.gtxe2_channel_i_TXBUFSTATUS_UNCONNECTED [1:0]),
        .TXCHARDISPMODE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXCOMPLIANCE}),
        .TXCHARDISPVAL({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXCHARISK({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXDATAK}),
        .TXCOMFINISH(\NLW_gtx_channel.gtxe2_channel_i_TXCOMFINISH_UNCONNECTED ),
        .TXCOMINIT(1'b0),
        .TXCOMSAS(1'b0),
        .TXCOMWAKE(1'b0),
        .TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXDATA}),
        .TXDEEMPH(pipe_tx_deemph_gt),
        .TXDETECTRX(pipe_tx_rcvr_det_gt),
        .TXDIFFCTRL({1'b1,1'b1,1'b0,1'b0}),
        .TXDIFFPD(1'b0),
        .TXDLYBYPASS(1'b0),
        .TXDLYEN(1'b0),
        .TXDLYHOLD(1'b0),
        .TXDLYOVRDEN(1'b0),
        .TXDLYSRESET(out0[0]),
        .TXDLYSRESETDONE(pipe_txdlysresetdone),
        .TXDLYUPDOWN(1'b0),
        .TXELECIDLE(PIPE_TXELECIDLE),
        .TXGEARBOXREADY(\NLW_gtx_channel.gtxe2_channel_i_TXGEARBOXREADY_UNCONNECTED ),
        .TXHEADER({1'b0,1'b0,1'b0}),
        .TXINHIBIT(pipe_txinhibit),
        .TXMAINCURSOR(TXMAINCURSOR),
        .TXMARGIN(\pipe_stages_1.pipe_tx_margin_q_reg[2] ),
        .TXOUTCLK(\gtx_channel.gtxe2_channel_i_n_37 ),
        .TXOUTCLKFABRIC(\NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKFABRIC_UNCONNECTED ),
        .TXOUTCLKPCS(\NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKPCS_UNCONNECTED ),
        .TXOUTCLKSEL({1'b0,1'b0,1'b0}),
        .TXPCSRESET(1'b0),
        .TXPD(PIPE_POWERDOWN),
        .TXPDELECIDLEMODE(1'b0),
        .TXPHALIGN(out0[2]),
        .TXPHALIGNDONE(pipe_txphaligndone),
        .TXPHALIGNEN(1'b1),
        .TXPHDLYPD(1'b0),
        .TXPHDLYRESET(1'b0),
        .TXPHDLYTSTCLK(1'b0),
        .TXPHINIT(out0[1]),
        .TXPHINITDONE(pipe_txphinitdone),
        .TXPHOVRDEN(1'b0),
        .TXPISOPD(1'b0),
        .TXPMARESET(rate_txpmareset_2),
        .TXPOLARITY(1'b0),
        .TXPOSTCURSOR(TXPOSTCURSOR),
        .TXPOSTCURSORINV(1'b0),
        .TXPRBSFORCEERR(pipe_txprbsforceerr),
        .TXPRBSSEL(pipe_txprbssel),
        .TXPRECURSOR(TXPRECURSOR),
        .TXPRECURSORINV(1'b0),
        .TXQPIBIASEN(1'b0),
        .TXQPISENN(\NLW_gtx_channel.gtxe2_channel_i_TXQPISENN_UNCONNECTED ),
        .TXQPISENP(\NLW_gtx_channel.gtxe2_channel_i_TXQPISENP_UNCONNECTED ),
        .TXQPISTRONGPDOWN(1'b0),
        .TXQPIWEAKPUP(1'b0),
        .TXRATE({1'b0,1'b0,RXRATE}),
        .TXRATEDONE(RATE_TXRATEDONE),
        .TXRESETDONE(USER_TXRESETDONE),
        .TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXSTARTSEQ(1'b0),
        .TXSWING(1'b0),
        .TXSYSCLKSEL({1'b0,RXSYSCLKSEL}),
        .TXUSERRDY(rst_userrdy),
        .TXUSRCLK(CLK),
        .TXUSRCLK2(CLK));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gt_wrapper" *) 
module pcie_7x_0_pcie_7x_0_gt_wrapper_33
   (cpllpd_2,
    RATE_CPLLLOCK,
    ext_ch_gt_drprdy,
    pipe_eyescandataerror,
    pci_exp_txn,
    pci_exp_txp,
    RATE_PHYSTATUS,
    gt_rxcdrlock_3,
    PIPE_RXCHANISALIGNED,
    pipe_rxcommadet,
    pipe_rxdlysresetdone,
    rxelecidle_reg1_reg,
    pipe_rxoutclk_out,
    PIPE_RXPHALIGNDONE,
    pipe_rxprbserr,
    RATE_RXRATEDONE,
    USER_RXRESETDONE,
    gt_rxvalid_3,
    pipe_txdlysresetdone,
    pipe_txphaligndone,
    pipe_txphinitdone,
    RATE_TXRATEDONE,
    USER_TXRESETDONE,
    ext_ch_gt_drpdo,
    pipe_rxbufstatus,
    pipe_rxstatus,
    \gt_rxdata_q_reg[15] ,
    pipe_dmonitorout,
    \gt_rxcharisk_q_reg[1] ,
    pipe_rxdisperr,
    pipe_rxnotintable,
    gt_cpllpdrefclk,
    CPLLPD0_5,
    gtreset_reg,
    drp_mux_en_3,
    drp_mux_we_3,
    sys_clk,
    DRP_GTXRESET,
    pci_exp_rxn,
    pci_exp_rxp,
    QPLL_QPLLOUTCLK,
    QPLL_QPLLOUTREFCLK,
    rxchbonden_3,
    converge_gen3_reg,
    rate_txpmareset_3,
    PIPE_RXPOLARITY,
    pipe_rxprbscntreset,
    rst_userrdy,
    CLK,
    pipe_tx_deemph_gt,
    pipe_tx_rcvr_det_gt,
    out0,
    PIPE_TXELECIDLE,
    pipe_txinhibit,
    pipe_txprbsforceerr,
    DRPDI,
    PIPE_POWERDOWN,
    RXSYSCLKSEL,
    pipe_loopback,
    pipe_rxprbssel,
    RXRATE,
    \pipe_stages_1.pipe_tx_margin_q_reg[2] ,
    pipe_txprbssel,
    USER_OOBCLK,
    RXCHBONDO,
    TXPOSTCURSOR,
    TXPRECURSOR,
    PIPE_TXDATA,
    TXMAINCURSOR,
    PIPE_TXCOMPLIANCE,
    PIPE_TXDATAK,
    DRPADDR,
    rate_cpllreset_3,
    RST_CPLLRESET);
  output cpllpd_2;
  output RATE_CPLLLOCK;
  output [0:0]ext_ch_gt_drprdy;
  output [0:0]pipe_eyescandataerror;
  output [0:0]pci_exp_txn;
  output [0:0]pci_exp_txp;
  output RATE_PHYSTATUS;
  output gt_rxcdrlock_3;
  output [0:0]PIPE_RXCHANISALIGNED;
  output [0:0]pipe_rxcommadet;
  output [0:0]pipe_rxdlysresetdone;
  output rxelecidle_reg1_reg;
  output [0:0]pipe_rxoutclk_out;
  output [0:0]PIPE_RXPHALIGNDONE;
  output [0:0]pipe_rxprbserr;
  output RATE_RXRATEDONE;
  output USER_RXRESETDONE;
  output gt_rxvalid_3;
  output [0:0]pipe_txdlysresetdone;
  output [0:0]pipe_txphaligndone;
  output [0:0]pipe_txphinitdone;
  output RATE_TXRATEDONE;
  output USER_TXRESETDONE;
  output [15:0]ext_ch_gt_drpdo;
  output [2:0]pipe_rxbufstatus;
  output [2:0]pipe_rxstatus;
  output [15:0]\gt_rxdata_q_reg[15] ;
  output [7:0]pipe_dmonitorout;
  output [1:0]\gt_rxcharisk_q_reg[1] ;
  output [7:0]pipe_rxdisperr;
  output [7:0]pipe_rxnotintable;
  input gt_cpllpdrefclk;
  input CPLLPD0_5;
  input gtreset_reg;
  input drp_mux_en_3;
  input drp_mux_we_3;
  input sys_clk;
  input DRP_GTXRESET;
  input [0:0]pci_exp_rxn;
  input [0:0]pci_exp_rxp;
  input QPLL_QPLLOUTCLK;
  input QPLL_QPLLOUTREFCLK;
  input rxchbonden_3;
  input converge_gen3_reg;
  input rate_txpmareset_3;
  input [0:0]PIPE_RXPOLARITY;
  input pipe_rxprbscntreset;
  input rst_userrdy;
  input CLK;
  input pipe_tx_deemph_gt;
  input pipe_tx_rcvr_det_gt;
  input [2:0]out0;
  input [0:0]PIPE_TXELECIDLE;
  input [0:0]pipe_txinhibit;
  input pipe_txprbsforceerr;
  input [15:0]DRPDI;
  input [1:0]PIPE_POWERDOWN;
  input [0:0]RXSYSCLKSEL;
  input [2:0]pipe_loopback;
  input [2:0]pipe_rxprbssel;
  input [0:0]RXRATE;
  input [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  input [2:0]pipe_txprbssel;
  input USER_OOBCLK;
  input [4:0]RXCHBONDO;
  input [4:0]TXPOSTCURSOR;
  input [4:0]TXPRECURSOR;
  input [15:0]PIPE_TXDATA;
  input [6:0]TXMAINCURSOR;
  input [0:0]PIPE_TXCOMPLIANCE;
  input [1:0]PIPE_TXDATAK;
  input [8:0]DRPADDR;
  input rate_cpllreset_3;
  input RST_CPLLRESET;

  wire CLK;
  wire CPLLPD0_5;
  wire CPLLRESET0;
  wire [8:0]DRPADDR;
  wire [15:0]DRPDI;
  wire DRP_GTXRESET;
  wire [1:0]PIPE_POWERDOWN;
  wire [0:0]PIPE_RXCHANISALIGNED;
  wire [0:0]PIPE_RXPHALIGNDONE;
  wire [0:0]PIPE_RXPOLARITY;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [15:0]PIPE_TXDATA;
  wire [1:0]PIPE_TXDATAK;
  wire [0:0]PIPE_TXELECIDLE;
  wire QPLL_QPLLOUTCLK;
  wire QPLL_QPLLOUTREFCLK;
  wire RATE_CPLLLOCK;
  wire RATE_PHYSTATUS;
  wire RATE_RXRATEDONE;
  wire RATE_TXRATEDONE;
  wire RST_CPLLRESET;
  wire [4:0]RXCHBONDO;
  wire [0:0]RXRATE;
  wire [0:0]RXSYSCLKSEL;
  wire [6:0]TXMAINCURSOR;
  wire [4:0]TXPOSTCURSOR;
  wire [4:0]TXPRECURSOR;
  wire USER_OOBCLK;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  wire converge_gen3_reg;
  wire cpllpd_2;
  wire drp_mux_en_3;
  wire drp_mux_we_3;
  wire [15:0]ext_ch_gt_drpdo;
  wire [0:0]ext_ch_gt_drprdy;
  wire gt_cpllpdrefclk;
  wire gt_rxcdrlock_3;
  wire [1:0]\gt_rxcharisk_q_reg[1] ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire gt_rxvalid_3;
  wire gtreset_reg;
  wire \gtx_channel.gtxe2_channel_i_n_10 ;
  wire \gtx_channel.gtxe2_channel_i_n_138 ;
  wire \gtx_channel.gtxe2_channel_i_n_139 ;
  wire \gtx_channel.gtxe2_channel_i_n_140 ;
  wire \gtx_channel.gtxe2_channel_i_n_141 ;
  wire \gtx_channel.gtxe2_channel_i_n_142 ;
  wire \gtx_channel.gtxe2_channel_i_n_143 ;
  wire \gtx_channel.gtxe2_channel_i_n_144 ;
  wire \gtx_channel.gtxe2_channel_i_n_145 ;
  wire \gtx_channel.gtxe2_channel_i_n_146 ;
  wire \gtx_channel.gtxe2_channel_i_n_147 ;
  wire \gtx_channel.gtxe2_channel_i_n_148 ;
  wire \gtx_channel.gtxe2_channel_i_n_149 ;
  wire \gtx_channel.gtxe2_channel_i_n_150 ;
  wire \gtx_channel.gtxe2_channel_i_n_151 ;
  wire \gtx_channel.gtxe2_channel_i_n_152 ;
  wire \gtx_channel.gtxe2_channel_i_n_153 ;
  wire \gtx_channel.gtxe2_channel_i_n_189 ;
  wire \gtx_channel.gtxe2_channel_i_n_190 ;
  wire \gtx_channel.gtxe2_channel_i_n_191 ;
  wire \gtx_channel.gtxe2_channel_i_n_192 ;
  wire \gtx_channel.gtxe2_channel_i_n_197 ;
  wire \gtx_channel.gtxe2_channel_i_n_198 ;
  wire \gtx_channel.gtxe2_channel_i_n_37 ;
  wire \gtx_channel.gtxe2_channel_i_n_9 ;
  wire \gtx_channel.gtxe2_channel_i_n_91 ;
  wire \gtx_channel.gtxe2_channel_i_n_92 ;
  wire \gtx_channel.gtxe2_channel_i_n_93 ;
  wire \gtx_channel.gtxe2_channel_i_n_94 ;
  wire \gtx_channel.gtxe2_channel_i_n_95 ;
  wire [2:0]out0;
  wire [0:0]pci_exp_rxn;
  wire [0:0]pci_exp_rxp;
  wire [0:0]pci_exp_txn;
  wire [0:0]pci_exp_txp;
  wire [7:0]pipe_dmonitorout;
  wire [0:0]pipe_eyescandataerror;
  wire [2:0]pipe_loopback;
  wire [2:0]pipe_rxbufstatus;
  wire [0:0]pipe_rxcommadet;
  wire [7:0]pipe_rxdisperr;
  wire [0:0]pipe_rxdlysresetdone;
  wire [7:0]pipe_rxnotintable;
  wire [0:0]pipe_rxoutclk_out;
  wire pipe_rxprbscntreset;
  wire [0:0]pipe_rxprbserr;
  wire [2:0]pipe_rxprbssel;
  wire [2:0]pipe_rxstatus;
  wire [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  wire pipe_tx_deemph_gt;
  wire pipe_tx_rcvr_det_gt;
  wire [0:0]pipe_txdlysresetdone;
  wire [0:0]pipe_txinhibit;
  wire [0:0]pipe_txphaligndone;
  wire [0:0]pipe_txphinitdone;
  wire pipe_txprbsforceerr;
  wire [2:0]pipe_txprbssel;
  wire rate_cpllreset_3;
  wire rate_txpmareset_3;
  wire rst_userrdy;
  wire rxchbonden_3;
  wire rxelecidle_reg1_reg;
  wire sys_clk;
  wire \NLW_gtx_channel.gtxe2_channel_i_CPLLFBCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_CPLLREFCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_GTREFCLKMONITOR_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCHANBONDSEQ_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCHANREALIGN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMINITDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMSASDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXCOMWAKEDET_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXDATAVALID_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXHEADERVALID_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKFABRIC_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKPCS_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXQPISENN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXQPISENP_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_RXSTARTOFSEQ_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXCOMFINISH_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXGEARBOXREADY_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKFABRIC_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKPCS_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXQPISENN_UNCONNECTED ;
  wire \NLW_gtx_channel.gtxe2_channel_i_TXQPISENP_UNCONNECTED ;
  wire [15:0]\NLW_gtx_channel.gtxe2_channel_i_PCSRSVDOUT_UNCONNECTED ;
  wire [7:4]\NLW_gtx_channel.gtxe2_channel_i_RXCHARISCOMMA_UNCONNECTED ;
  wire [7:4]\NLW_gtx_channel.gtxe2_channel_i_RXCHARISK_UNCONNECTED ;
  wire [1:0]\NLW_gtx_channel.gtxe2_channel_i_RXCLKCORCNT_UNCONNECTED ;
  wire [63:32]\NLW_gtx_channel.gtxe2_channel_i_RXDATA_UNCONNECTED ;
  wire [2:0]\NLW_gtx_channel.gtxe2_channel_i_RXHEADER_UNCONNECTED ;
  wire [6:0]\NLW_gtx_channel.gtxe2_channel_i_RXMONITOROUT_UNCONNECTED ;
  wire [4:0]\NLW_gtx_channel.gtxe2_channel_i_RXPHMONITOR_UNCONNECTED ;
  wire [4:0]\NLW_gtx_channel.gtxe2_channel_i_RXPHSLIPMONITOR_UNCONNECTED ;
  wire [9:0]\NLW_gtx_channel.gtxe2_channel_i_TSTOUT_UNCONNECTED ;
  wire [1:0]\NLW_gtx_channel.gtxe2_channel_i_TXBUFSTATUS_UNCONNECTED ;

  pcie_7x_0_pcie_7x_0_gtx_cpllpd_ovrd cpllPDInst
       (.CPLLRESET0(CPLLRESET0),
        .RST_CPLLRESET(RST_CPLLRESET),
        .cpllpd_2(cpllpd_2),
        .gt_cpllpdrefclk(gt_cpllpdrefclk),
        .rate_cpllreset_3(rate_cpllreset_3));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTXE2_CHANNEL #(
    .ALIGN_COMMA_DOUBLE("FALSE"),
    .ALIGN_COMMA_ENABLE(10'b1111111111),
    .ALIGN_COMMA_WORD(1),
    .ALIGN_MCOMMA_DET("TRUE"),
    .ALIGN_MCOMMA_VALUE(10'b1010000011),
    .ALIGN_PCOMMA_DET("TRUE"),
    .ALIGN_PCOMMA_VALUE(10'b0101111100),
    .CBCC_DATA_SOURCE_SEL("DECODED"),
    .CHAN_BOND_KEEP_ALIGN("TRUE"),
    .CHAN_BOND_MAX_SKEW(7),
    .CHAN_BOND_SEQ_1_1(10'b0001001010),
    .CHAN_BOND_SEQ_1_2(10'b0001001010),
    .CHAN_BOND_SEQ_1_3(10'b0001001010),
    .CHAN_BOND_SEQ_1_4(10'b0110111100),
    .CHAN_BOND_SEQ_1_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_1(10'b0001000101),
    .CHAN_BOND_SEQ_2_2(10'b0001000101),
    .CHAN_BOND_SEQ_2_3(10'b0001000101),
    .CHAN_BOND_SEQ_2_4(10'b0110111100),
    .CHAN_BOND_SEQ_2_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_USE("TRUE"),
    .CHAN_BOND_SEQ_LEN(4),
    .CLK_CORRECT_USE("TRUE"),
    .CLK_COR_KEEP_IDLE("TRUE"),
    .CLK_COR_MAX_LAT(20),
    .CLK_COR_MIN_LAT(18),
    .CLK_COR_PRECEDENCE("TRUE"),
    .CLK_COR_REPEAT_WAIT(0),
    .CLK_COR_SEQ_1_1(10'b0100011100),
    .CLK_COR_SEQ_1_2(10'b0000000000),
    .CLK_COR_SEQ_1_3(10'b0000000000),
    .CLK_COR_SEQ_1_4(10'b0000000000),
    .CLK_COR_SEQ_1_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_1(10'b0000000000),
    .CLK_COR_SEQ_2_2(10'b0000000000),
    .CLK_COR_SEQ_2_3(10'b0000000000),
    .CLK_COR_SEQ_2_4(10'b0000000000),
    .CLK_COR_SEQ_2_ENABLE(4'b0000),
    .CLK_COR_SEQ_2_USE("FALSE"),
    .CLK_COR_SEQ_LEN(1),
    .CPLL_CFG(24'hA407CC),
    .CPLL_FBDIV(5),
    .CPLL_FBDIV_45(5),
    .CPLL_INIT_CFG(24'h00001E),
    .CPLL_LOCK_CFG(16'h01E8),
    .CPLL_REFCLK_DIV(1),
    .DEC_MCOMMA_DETECT("TRUE"),
    .DEC_PCOMMA_DETECT("TRUE"),
    .DEC_VALID_COMMA_ONLY("FALSE"),
    .DMONITOR_CFG(24'h000B01),
    .ES_CONTROL(6'b000000),
    .ES_ERRDET_EN("FALSE"),
    .ES_EYE_SCAN_EN("FALSE"),
    .ES_HORZ_OFFSET(12'h000),
    .ES_PMA_CFG(10'b0000000000),
    .ES_PRESCALE(5'b00000),
    .ES_QUALIFIER(80'h00000000000000000000),
    .ES_QUAL_MASK(80'h00000000000000000000),
    .ES_SDATA_MASK(80'h00000000000000000000),
    .ES_VERT_OFFSET(9'b000000000),
    .FTS_DESKEW_SEQ_ENABLE(4'b1111),
    .FTS_LANE_DESKEW_CFG(4'b1111),
    .FTS_LANE_DESKEW_EN("TRUE"),
    .GEARBOX_MODE(3'b000),
    .IS_CPLLLOCKDETCLK_INVERTED(1'b0),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_GTGREFCLK_INVERTED(1'b0),
    .IS_RXUSRCLK2_INVERTED(1'b0),
    .IS_RXUSRCLK_INVERTED(1'b0),
    .IS_TXPHDLYTSTCLK_INVERTED(1'b0),
    .IS_TXUSRCLK2_INVERTED(1'b0),
    .IS_TXUSRCLK_INVERTED(1'b0),
    .OUTREFCLK_SEL_INV(2'b11),
    .PCS_PCIE_EN("TRUE"),
    .PCS_RSVD_ATTR(48'h0000000001CF),
    .PD_TRANS_TIME_FROM_P2(12'h03C),
    .PD_TRANS_TIME_NONE_P2(8'h09),
    .PD_TRANS_TIME_TO_P2(8'h64),
    .PMA_RSV(32'h00018480),
    .PMA_RSV2(16'h2050),
    .PMA_RSV3(2'b00),
    .PMA_RSV4(32'h00000000),
    .RXBUFRESET_TIME(5'b00001),
    .RXBUF_ADDR_MODE("FULL"),
    .RXBUF_EIDLE_HI_CNT(4'b0100),
    .RXBUF_EIDLE_LO_CNT(4'b0000),
    .RXBUF_EN("TRUE"),
    .RXBUF_RESET_ON_CB_CHANGE("TRUE"),
    .RXBUF_RESET_ON_COMMAALIGN("FALSE"),
    .RXBUF_RESET_ON_EIDLE("TRUE"),
    .RXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .RXBUF_THRESH_OVFLW(61),
    .RXBUF_THRESH_OVRD("FALSE"),
    .RXBUF_THRESH_UNDFLW(4),
    .RXCDRFREQRESET_TIME(5'b00001),
    .RXCDRPHRESET_TIME(5'b00001),
    .RXCDR_CFG(72'h03000023FF10200020),
    .RXCDR_FR_RESET_ON_EIDLE(1'b0),
    .RXCDR_HOLD_DURING_EIDLE(1'b1),
    .RXCDR_LOCK_CFG(6'b010101),
    .RXCDR_PH_RESET_ON_EIDLE(1'b0),
    .RXDFELPMRESET_TIME(7'b0001111),
    .RXDLY_CFG(16'h001F),
    .RXDLY_LCFG(9'h030),
    .RXDLY_TAP_CFG(16'h0000),
    .RXGEARBOX_EN("FALSE"),
    .RXISCANRESET_TIME(5'b00001),
    .RXLPM_HF_CFG(14'b00000011110000),
    .RXLPM_LF_CFG(14'b00000011110000),
    .RXOOB_CFG(7'b0000110),
    .RXOUT_DIV(2),
    .RXPCSRESET_TIME(5'b00001),
    .RXPHDLY_CFG(24'h004020),
    .RXPH_CFG(24'h000000),
    .RXPH_MONITOR_SEL(5'b00000),
    .RXPMARESET_TIME(5'b00011),
    .RXPRBS_ERR_LOOPBACK(1'b0),
    .RXSLIDE_AUTO_WAIT(7),
    .RXSLIDE_MODE("PMA"),
    .RX_BIAS_CFG(12'b000000000100),
    .RX_BUFFER_CFG(6'b000000),
    .RX_CLK25_DIV(4),
    .RX_CLKMUX_PD(1'b1),
    .RX_CM_SEL(2'b11),
    .RX_CM_TRIM(3'b010),
    .RX_DATA_WIDTH(20),
    .RX_DDI_SEL(6'b000000),
    .RX_DEBUG_CFG(12'b000000000000),
    .RX_DEFER_RESET_BUF_EN("TRUE"),
    .RX_DFE_GAIN_CFG(23'h020FEA),
    .RX_DFE_H2_CFG(12'b000000000000),
    .RX_DFE_H3_CFG(12'b000001000000),
    .RX_DFE_H4_CFG(11'b00011110000),
    .RX_DFE_H5_CFG(11'b00011100000),
    .RX_DFE_KL_CFG(13'b0000011111110),
    .RX_DFE_KL_CFG2(32'h3290D86C),
    .RX_DFE_LPM_CFG(16'h0954),
    .RX_DFE_LPM_HOLD_DURING_EIDLE(1'b1),
    .RX_DFE_UT_CFG(17'b10001111000000000),
    .RX_DFE_VP_CFG(17'b00011111100000011),
    .RX_DFE_XYD_CFG(13'b0000000000000),
    .RX_DISPERR_SEQ_MATCH("TRUE"),
    .RX_INT_DATAWIDTH(0),
    .RX_OS_CFG(13'b0000010000000),
    .RX_SIG_VALID_DLY(4),
    .RX_XCLK_SEL("RXREC"),
    .SAS_MAX_COM(64),
    .SAS_MIN_COM(36),
    .SATA_BURST_SEQ_LEN(4'b1111),
    .SATA_BURST_VAL(3'b100),
    .SATA_CPLL_CFG("VCO_3000MHZ"),
    .SATA_EIDLE_VAL(3'b100),
    .SATA_MAX_BURST(8),
    .SATA_MAX_INIT(21),
    .SATA_MAX_WAKE(7),
    .SATA_MIN_BURST(4),
    .SATA_MIN_INIT(12),
    .SATA_MIN_WAKE(4),
    .SHOW_REALIGN_COMMA("FALSE"),
    .SIM_CPLLREFCLK_SEL(3'b001),
    .SIM_RECEIVER_DETECT_PASS("TRUE"),
    .SIM_RESET_SPEEDUP("FALSE"),
    .SIM_TX_EIDLE_DRIVE_LEVEL("1"),
    .SIM_VERSION("3.0"),
    .TERM_RCAL_CFG(5'b10000),
    .TERM_RCAL_OVRD(1'b0),
    .TRANS_TIME_RATE(8'h0E),
    .TST_RSV(32'h00000000),
    .TXBUF_EN("FALSE"),
    .TXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .TXDLY_CFG(16'h001F),
    .TXDLY_LCFG(9'h030),
    .TXDLY_TAP_CFG(16'h0000),
    .TXGEARBOX_EN("FALSE"),
    .TXOUT_DIV(2),
    .TXPCSRESET_TIME(5'b00001),
    .TXPHDLY_CFG(24'h084020),
    .TXPH_CFG(16'h0780),
    .TXPH_MONITOR_SEL(5'b00000),
    .TXPMARESET_TIME(5'b00011),
    .TX_CLK25_DIV(4),
    .TX_CLKMUX_PD(1'b1),
    .TX_DATA_WIDTH(20),
    .TX_DEEMPH0(5'b10100),
    .TX_DEEMPH1(5'b01011),
    .TX_DRIVE_MODE("PIPE"),
    .TX_EIDLE_ASSERT_DELAY(3'b010),
    .TX_EIDLE_DEASSERT_DELAY(3'b100),
    .TX_INT_DATAWIDTH(0),
    .TX_LOOPBACK_DRIVE_HIZ("FALSE"),
    .TX_MAINCURSOR_SEL(1'b0),
    .TX_MARGIN_FULL_0(7'b1001111),
    .TX_MARGIN_FULL_1(7'b1001110),
    .TX_MARGIN_FULL_2(7'b1001101),
    .TX_MARGIN_FULL_3(7'b1001100),
    .TX_MARGIN_FULL_4(7'b1000011),
    .TX_MARGIN_LOW_0(7'b1000101),
    .TX_MARGIN_LOW_1(7'b1000110),
    .TX_MARGIN_LOW_2(7'b1000011),
    .TX_MARGIN_LOW_3(7'b1000010),
    .TX_MARGIN_LOW_4(7'b1000000),
    .TX_PREDRIVER_MODE(1'b0),
    .TX_QPI_STATUS_EN(1'b0),
    .TX_RXDETECT_CFG(14'h0064),
    .TX_RXDETECT_REF(3'b011),
    .TX_XCLK_SEL("TXUSR"),
    .UCODEER_CLR(1'b0)) 
    \gtx_channel.gtxe2_channel_i 
       (.CFGRESET(1'b0),
        .CLKRSVD({1'b0,1'b0,1'b0,USER_OOBCLK}),
        .CPLLFBCLKLOST(\NLW_gtx_channel.gtxe2_channel_i_CPLLFBCLKLOST_UNCONNECTED ),
        .CPLLLOCK(RATE_CPLLLOCK),
        .CPLLLOCKDETCLK(1'b0),
        .CPLLLOCKEN(1'b1),
        .CPLLPD(CPLLPD0_5),
        .CPLLREFCLKLOST(\NLW_gtx_channel.gtxe2_channel_i_CPLLREFCLKLOST_UNCONNECTED ),
        .CPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .CPLLRESET(CPLLRESET0),
        .DMONITOROUT(pipe_dmonitorout),
        .DRPADDR(DRPADDR),
        .DRPCLK(gtreset_reg),
        .DRPDI(DRPDI),
        .DRPDO(ext_ch_gt_drpdo),
        .DRPEN(drp_mux_en_3),
        .DRPRDY(ext_ch_gt_drprdy),
        .DRPWE(drp_mux_we_3),
        .EYESCANDATAERROR(pipe_eyescandataerror),
        .EYESCANMODE(1'b0),
        .EYESCANRESET(1'b0),
        .EYESCANTRIGGER(1'b0),
        .GTGREFCLK(1'b0),
        .GTNORTHREFCLK0(1'b0),
        .GTNORTHREFCLK1(1'b0),
        .GTREFCLK0(sys_clk),
        .GTREFCLK1(1'b0),
        .GTREFCLKMONITOR(\NLW_gtx_channel.gtxe2_channel_i_GTREFCLKMONITOR_UNCONNECTED ),
        .GTRESETSEL(1'b0),
        .GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GTRXRESET(DRP_GTXRESET),
        .GTSOUTHREFCLK0(1'b0),
        .GTSOUTHREFCLK1(1'b0),
        .GTTXRESET(DRP_GTXRESET),
        .GTXRXN(pci_exp_rxn),
        .GTXRXP(pci_exp_rxp),
        .GTXTXN(pci_exp_txn),
        .GTXTXP(pci_exp_txp),
        .LOOPBACK(pipe_loopback),
        .PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDOUT(\NLW_gtx_channel.gtxe2_channel_i_PCSRSVDOUT_UNCONNECTED [15:0]),
        .PHYSTATUS(RATE_PHYSTATUS),
        .PMARSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PMARSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLCLK(QPLL_QPLLOUTCLK),
        .QPLLREFCLK(QPLL_QPLLOUTREFCLK),
        .RESETOVRD(1'b0),
        .RX8B10BEN(rxchbonden_3),
        .RXBUFRESET(1'b0),
        .RXBUFSTATUS(pipe_rxbufstatus),
        .RXBYTEISALIGNED(\gtx_channel.gtxe2_channel_i_n_9 ),
        .RXBYTEREALIGN(\gtx_channel.gtxe2_channel_i_n_10 ),
        .RXCDRFREQRESET(1'b0),
        .RXCDRHOLD(1'b0),
        .RXCDRLOCK(gt_rxcdrlock_3),
        .RXCDROVRDEN(1'b0),
        .RXCDRRESET(1'b0),
        .RXCDRRESETRSV(1'b0),
        .RXCHANBONDSEQ(\NLW_gtx_channel.gtxe2_channel_i_RXCHANBONDSEQ_UNCONNECTED ),
        .RXCHANISALIGNED(PIPE_RXCHANISALIGNED),
        .RXCHANREALIGN(\NLW_gtx_channel.gtxe2_channel_i_RXCHANREALIGN_UNCONNECTED ),
        .RXCHARISCOMMA({\NLW_gtx_channel.gtxe2_channel_i_RXCHARISCOMMA_UNCONNECTED [7:4],\gtx_channel.gtxe2_channel_i_n_189 ,\gtx_channel.gtxe2_channel_i_n_190 ,\gtx_channel.gtxe2_channel_i_n_191 ,\gtx_channel.gtxe2_channel_i_n_192 }),
        .RXCHARISK({\NLW_gtx_channel.gtxe2_channel_i_RXCHARISK_UNCONNECTED [7:4],\gtx_channel.gtxe2_channel_i_n_197 ,\gtx_channel.gtxe2_channel_i_n_198 ,\gt_rxcharisk_q_reg[1] }),
        .RXCHBONDEN(rxchbonden_3),
        .RXCHBONDI(RXCHBONDO),
        .RXCHBONDLEVEL({1'b0,1'b0,1'b0}),
        .RXCHBONDMASTER(1'b0),
        .RXCHBONDO({\gtx_channel.gtxe2_channel_i_n_91 ,\gtx_channel.gtxe2_channel_i_n_92 ,\gtx_channel.gtxe2_channel_i_n_93 ,\gtx_channel.gtxe2_channel_i_n_94 ,\gtx_channel.gtxe2_channel_i_n_95 }),
        .RXCHBONDSLAVE(rxchbonden_3),
        .RXCLKCORCNT(\NLW_gtx_channel.gtxe2_channel_i_RXCLKCORCNT_UNCONNECTED [1:0]),
        .RXCOMINITDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMINITDET_UNCONNECTED ),
        .RXCOMMADET(pipe_rxcommadet),
        .RXCOMMADETEN(1'b1),
        .RXCOMSASDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMSASDET_UNCONNECTED ),
        .RXCOMWAKEDET(\NLW_gtx_channel.gtxe2_channel_i_RXCOMWAKEDET_UNCONNECTED ),
        .RXDATA({\NLW_gtx_channel.gtxe2_channel_i_RXDATA_UNCONNECTED [63:32],\gtx_channel.gtxe2_channel_i_n_138 ,\gtx_channel.gtxe2_channel_i_n_139 ,\gtx_channel.gtxe2_channel_i_n_140 ,\gtx_channel.gtxe2_channel_i_n_141 ,\gtx_channel.gtxe2_channel_i_n_142 ,\gtx_channel.gtxe2_channel_i_n_143 ,\gtx_channel.gtxe2_channel_i_n_144 ,\gtx_channel.gtxe2_channel_i_n_145 ,\gtx_channel.gtxe2_channel_i_n_146 ,\gtx_channel.gtxe2_channel_i_n_147 ,\gtx_channel.gtxe2_channel_i_n_148 ,\gtx_channel.gtxe2_channel_i_n_149 ,\gtx_channel.gtxe2_channel_i_n_150 ,\gtx_channel.gtxe2_channel_i_n_151 ,\gtx_channel.gtxe2_channel_i_n_152 ,\gtx_channel.gtxe2_channel_i_n_153 ,\gt_rxdata_q_reg[15] }),
        .RXDATAVALID(\NLW_gtx_channel.gtxe2_channel_i_RXDATAVALID_UNCONNECTED ),
        .RXDDIEN(1'b0),
        .RXDFEAGCHOLD(converge_gen3_reg),
        .RXDFEAGCOVRDEN(1'b0),
        .RXDFECM1EN(1'b0),
        .RXDFELFHOLD(1'b0),
        .RXDFELFOVRDEN(1'b1),
        .RXDFELPMRESET(1'b0),
        .RXDFETAP2HOLD(1'b0),
        .RXDFETAP2OVRDEN(1'b0),
        .RXDFETAP3HOLD(1'b0),
        .RXDFETAP3OVRDEN(1'b0),
        .RXDFETAP4HOLD(1'b0),
        .RXDFETAP4OVRDEN(1'b0),
        .RXDFETAP5HOLD(1'b0),
        .RXDFETAP5OVRDEN(1'b0),
        .RXDFEUTHOLD(1'b0),
        .RXDFEUTOVRDEN(1'b0),
        .RXDFEVPHOLD(1'b0),
        .RXDFEVPOVRDEN(1'b0),
        .RXDFEVSEN(1'b0),
        .RXDFEXYDEN(1'b0),
        .RXDFEXYDHOLD(1'b0),
        .RXDFEXYDOVRDEN(1'b0),
        .RXDISPERR(pipe_rxdisperr),
        .RXDLYBYPASS(1'b1),
        .RXDLYEN(1'b0),
        .RXDLYOVRDEN(1'b0),
        .RXDLYSRESET(1'b0),
        .RXDLYSRESETDONE(pipe_rxdlysresetdone),
        .RXELECIDLE(rxelecidle_reg1_reg),
        .RXELECIDLEMODE({1'b0,1'b0}),
        .RXGEARBOXSLIP(1'b0),
        .RXHEADER(\NLW_gtx_channel.gtxe2_channel_i_RXHEADER_UNCONNECTED [2:0]),
        .RXHEADERVALID(\NLW_gtx_channel.gtxe2_channel_i_RXHEADERVALID_UNCONNECTED ),
        .RXLPMEN(rxchbonden_3),
        .RXLPMHFHOLD(1'b0),
        .RXLPMHFOVRDEN(1'b0),
        .RXLPMLFHOLD(1'b0),
        .RXLPMLFKLOVRDEN(1'b0),
        .RXMCOMMAALIGNEN(rxchbonden_3),
        .RXMONITOROUT(\NLW_gtx_channel.gtxe2_channel_i_RXMONITOROUT_UNCONNECTED [6:0]),
        .RXMONITORSEL({1'b0,1'b0}),
        .RXNOTINTABLE(pipe_rxnotintable),
        .RXOOBRESET(1'b0),
        .RXOSHOLD(1'b0),
        .RXOSOVRDEN(1'b0),
        .RXOUTCLK(pipe_rxoutclk_out),
        .RXOUTCLKFABRIC(\NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKFABRIC_UNCONNECTED ),
        .RXOUTCLKPCS(\NLW_gtx_channel.gtxe2_channel_i_RXOUTCLKPCS_UNCONNECTED ),
        .RXOUTCLKSEL({1'b0,1'b0,1'b0}),
        .RXPCOMMAALIGNEN(rxchbonden_3),
        .RXPCSRESET(1'b0),
        .RXPD(PIPE_POWERDOWN),
        .RXPHALIGN(1'b0),
        .RXPHALIGNDONE(PIPE_RXPHALIGNDONE),
        .RXPHALIGNEN(1'b0),
        .RXPHDLYPD(1'b0),
        .RXPHDLYRESET(1'b0),
        .RXPHMONITOR(\NLW_gtx_channel.gtxe2_channel_i_RXPHMONITOR_UNCONNECTED [4:0]),
        .RXPHOVRDEN(1'b0),
        .RXPHSLIPMONITOR(\NLW_gtx_channel.gtxe2_channel_i_RXPHSLIPMONITOR_UNCONNECTED [4:0]),
        .RXPMARESET(rate_txpmareset_3),
        .RXPOLARITY(PIPE_RXPOLARITY),
        .RXPRBSCNTRESET(pipe_rxprbscntreset),
        .RXPRBSERR(pipe_rxprbserr),
        .RXPRBSSEL(pipe_rxprbssel),
        .RXQPIEN(1'b0),
        .RXQPISENN(\NLW_gtx_channel.gtxe2_channel_i_RXQPISENN_UNCONNECTED ),
        .RXQPISENP(\NLW_gtx_channel.gtxe2_channel_i_RXQPISENP_UNCONNECTED ),
        .RXRATE({1'b0,1'b0,RXRATE}),
        .RXRATEDONE(RATE_RXRATEDONE),
        .RXRESETDONE(USER_RXRESETDONE),
        .RXSLIDE(1'b0),
        .RXSTARTOFSEQ(\NLW_gtx_channel.gtxe2_channel_i_RXSTARTOFSEQ_UNCONNECTED ),
        .RXSTATUS(pipe_rxstatus),
        .RXSYSCLKSEL({1'b0,RXSYSCLKSEL}),
        .RXUSERRDY(rst_userrdy),
        .RXUSRCLK(CLK),
        .RXUSRCLK2(CLK),
        .RXVALID(gt_rxvalid_3),
        .SETERRSTATUS(1'b0),
        .TSTIN({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .TSTOUT(\NLW_gtx_channel.gtxe2_channel_i_TSTOUT_UNCONNECTED [9:0]),
        .TX8B10BBYPASS({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TX8B10BEN(rxchbonden_3),
        .TXBUFDIFFCTRL({1'b1,1'b0,1'b0}),
        .TXBUFSTATUS(\NLW_gtx_channel.gtxe2_channel_i_TXBUFSTATUS_UNCONNECTED [1:0]),
        .TXCHARDISPMODE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXCOMPLIANCE}),
        .TXCHARDISPVAL({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXCHARISK({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXDATAK}),
        .TXCOMFINISH(\NLW_gtx_channel.gtxe2_channel_i_TXCOMFINISH_UNCONNECTED ),
        .TXCOMINIT(1'b0),
        .TXCOMSAS(1'b0),
        .TXCOMWAKE(1'b0),
        .TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,PIPE_TXDATA}),
        .TXDEEMPH(pipe_tx_deemph_gt),
        .TXDETECTRX(pipe_tx_rcvr_det_gt),
        .TXDIFFCTRL({1'b1,1'b1,1'b0,1'b0}),
        .TXDIFFPD(1'b0),
        .TXDLYBYPASS(1'b0),
        .TXDLYEN(1'b0),
        .TXDLYHOLD(1'b0),
        .TXDLYOVRDEN(1'b0),
        .TXDLYSRESET(out0[0]),
        .TXDLYSRESETDONE(pipe_txdlysresetdone),
        .TXDLYUPDOWN(1'b0),
        .TXELECIDLE(PIPE_TXELECIDLE),
        .TXGEARBOXREADY(\NLW_gtx_channel.gtxe2_channel_i_TXGEARBOXREADY_UNCONNECTED ),
        .TXHEADER({1'b0,1'b0,1'b0}),
        .TXINHIBIT(pipe_txinhibit),
        .TXMAINCURSOR(TXMAINCURSOR),
        .TXMARGIN(\pipe_stages_1.pipe_tx_margin_q_reg[2] ),
        .TXOUTCLK(\gtx_channel.gtxe2_channel_i_n_37 ),
        .TXOUTCLKFABRIC(\NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKFABRIC_UNCONNECTED ),
        .TXOUTCLKPCS(\NLW_gtx_channel.gtxe2_channel_i_TXOUTCLKPCS_UNCONNECTED ),
        .TXOUTCLKSEL({1'b0,1'b0,1'b0}),
        .TXPCSRESET(1'b0),
        .TXPD(PIPE_POWERDOWN),
        .TXPDELECIDLEMODE(1'b0),
        .TXPHALIGN(out0[2]),
        .TXPHALIGNDONE(pipe_txphaligndone),
        .TXPHALIGNEN(1'b1),
        .TXPHDLYPD(1'b0),
        .TXPHDLYRESET(1'b0),
        .TXPHDLYTSTCLK(1'b0),
        .TXPHINIT(out0[1]),
        .TXPHINITDONE(pipe_txphinitdone),
        .TXPHOVRDEN(1'b0),
        .TXPISOPD(1'b0),
        .TXPMARESET(rate_txpmareset_3),
        .TXPOLARITY(1'b0),
        .TXPOSTCURSOR(TXPOSTCURSOR),
        .TXPOSTCURSORINV(1'b0),
        .TXPRBSFORCEERR(pipe_txprbsforceerr),
        .TXPRBSSEL(pipe_txprbssel),
        .TXPRECURSOR(TXPRECURSOR),
        .TXPRECURSORINV(1'b0),
        .TXQPIBIASEN(1'b0),
        .TXQPISENN(\NLW_gtx_channel.gtxe2_channel_i_TXQPISENN_UNCONNECTED ),
        .TXQPISENP(\NLW_gtx_channel.gtxe2_channel_i_TXQPISENP_UNCONNECTED ),
        .TXQPISTRONGPDOWN(1'b0),
        .TXQPIWEAKPUP(1'b0),
        .TXRATE({1'b0,1'b0,RXRATE}),
        .TXRATEDONE(RATE_TXRATEDONE),
        .TXRESETDONE(USER_TXRESETDONE),
        .TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXSTARTSEQ(1'b0),
        .TXSWING(1'b0),
        .TXSYSCLKSEL({1'b0,RXSYSCLKSEL}),
        .TXUSERRDY(rst_userrdy),
        .TXUSRCLK(CLK),
        .TXUSRCLK2(CLK));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gtx_cpllpd_ovrd" *) 
module pcie_7x_0_pcie_7x_0_gtx_cpllpd_ovrd
   (cpllpd_2,
    CPLLRESET0,
    gt_cpllpdrefclk,
    rate_cpllreset_3,
    RST_CPLLRESET);
  output cpllpd_2;
  output CPLLRESET0;
  input gt_cpllpdrefclk;
  input rate_cpllreset_3;
  input RST_CPLLRESET;

  wire CPLLRESET0;
  wire RST_CPLLRESET;
  wire cpllpd_2;
  wire \cpllpd_wait_reg[31]_srl32_n_1 ;
  wire \cpllpd_wait_reg[63]_srl32_n_1 ;
  wire \cpllpd_wait_reg[94]_srl31_n_0 ;
  wire \cpllreset_wait_reg[126]_srl31_n_0 ;
  wire \cpllreset_wait_reg[31]_srl32_n_1 ;
  wire \cpllreset_wait_reg[63]_srl32_n_1 ;
  wire \cpllreset_wait_reg[95]_srl32_n_1 ;
  wire cpllrst;
  wire gt_cpllpdrefclk;
  wire rate_cpllreset_3;
  wire \NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ;

  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(1'b0),
        .Q(\NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllpd_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[94]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h7FFFFFFF)) 
    \cpllpd_wait_reg[94]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllpd_wait_reg[63]_srl32_n_1 ),
        .Q(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q31(\NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    \cpllpd_wait_reg[95] 
       (.C(gt_cpllpdrefclk),
        .CE(1'b1),
        .D(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q(cpllpd_2),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[126]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[126]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[95]_srl32_n_1 ),
        .Q(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q31(\NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cpllreset_wait_reg[127] 
       (.C(gt_cpllpdrefclk),
        .CE(1'b1),
        .D(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q(cpllrst),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h000000FF)) 
    \cpllreset_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(1'b0),
        .Q(\NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[3].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[95]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[95]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[63]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[95]_srl32_n_1 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \gtx_channel.gtxe2_channel_i_i_2__2 
       (.I0(cpllrst),
        .I1(rate_cpllreset_3),
        .I2(RST_CPLLRESET),
        .O(CPLLRESET0));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gtx_cpllpd_ovrd" *) 
module pcie_7x_0_pcie_7x_0_gtx_cpllpd_ovrd_40
   (cpllpd_1,
    CPLLRESET0,
    gt_cpllpdrefclk,
    rate_cpllreset_2,
    RST_CPLLRESET);
  output cpllpd_1;
  output CPLLRESET0;
  input gt_cpllpdrefclk;
  input rate_cpllreset_2;
  input RST_CPLLRESET;

  wire CPLLRESET0;
  wire RST_CPLLRESET;
  wire cpllpd_1;
  wire \cpllpd_wait_reg[31]_srl32_n_1 ;
  wire \cpllpd_wait_reg[63]_srl32_n_1 ;
  wire \cpllpd_wait_reg[94]_srl31_n_0 ;
  wire \cpllreset_wait_reg[126]_srl31_n_0 ;
  wire \cpllreset_wait_reg[31]_srl32_n_1 ;
  wire \cpllreset_wait_reg[63]_srl32_n_1 ;
  wire \cpllreset_wait_reg[95]_srl32_n_1 ;
  wire cpllrst;
  wire gt_cpllpdrefclk;
  wire rate_cpllreset_2;
  wire \NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ;

  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(1'b0),
        .Q(\NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllpd_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[94]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h7FFFFFFF)) 
    \cpllpd_wait_reg[94]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllpd_wait_reg[63]_srl32_n_1 ),
        .Q(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q31(\NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    \cpllpd_wait_reg[95] 
       (.C(gt_cpllpdrefclk),
        .CE(1'b1),
        .D(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q(cpllpd_1),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[126]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[126]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[95]_srl32_n_1 ),
        .Q(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q31(\NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cpllreset_wait_reg[127] 
       (.C(gt_cpllpdrefclk),
        .CE(1'b1),
        .D(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q(cpllrst),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h000000FF)) 
    \cpllreset_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(1'b0),
        .Q(\NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[2].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[95]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[95]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[63]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[95]_srl32_n_1 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \gtx_channel.gtxe2_channel_i_i_2__1 
       (.I0(cpllrst),
        .I1(rate_cpllreset_2),
        .I2(RST_CPLLRESET),
        .O(CPLLRESET0));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gtx_cpllpd_ovrd" *) 
module pcie_7x_0_pcie_7x_0_gtx_cpllpd_ovrd_42
   (cpllpd_0,
    CPLLRESET0,
    gt_cpllpdrefclk,
    rate_cpllreset_1,
    RST_CPLLRESET);
  output cpllpd_0;
  output CPLLRESET0;
  input gt_cpllpdrefclk;
  input rate_cpllreset_1;
  input RST_CPLLRESET;

  wire CPLLRESET0;
  wire RST_CPLLRESET;
  wire cpllpd_0;
  wire \cpllpd_wait_reg[31]_srl32_n_1 ;
  wire \cpllpd_wait_reg[63]_srl32_n_1 ;
  wire \cpllpd_wait_reg[94]_srl31_n_0 ;
  wire \cpllreset_wait_reg[126]_srl31_n_0 ;
  wire \cpllreset_wait_reg[31]_srl32_n_1 ;
  wire \cpllreset_wait_reg[63]_srl32_n_1 ;
  wire \cpllreset_wait_reg[95]_srl32_n_1 ;
  wire cpllrst;
  wire gt_cpllpdrefclk;
  wire rate_cpllreset_1;
  wire \NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ;

  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(1'b0),
        .Q(\NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllpd_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[94]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h7FFFFFFF)) 
    \cpllpd_wait_reg[94]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllpd_wait_reg[63]_srl32_n_1 ),
        .Q(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q31(\NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    \cpllpd_wait_reg[95] 
       (.C(gt_cpllpdrefclk),
        .CE(1'b1),
        .D(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q(cpllpd_0),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[126]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[126]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[95]_srl32_n_1 ),
        .Q(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q31(\NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cpllreset_wait_reg[127] 
       (.C(gt_cpllpdrefclk),
        .CE(1'b1),
        .D(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q(cpllrst),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h000000FF)) 
    \cpllreset_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(1'b0),
        .Q(\NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[1].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[95]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[95]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[63]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[95]_srl32_n_1 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \gtx_channel.gtxe2_channel_i_i_2__0 
       (.I0(cpllrst),
        .I1(rate_cpllreset_1),
        .I2(RST_CPLLRESET),
        .O(CPLLRESET0));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_gtx_cpllpd_ovrd" *) 
module pcie_7x_0_pcie_7x_0_gtx_cpllpd_ovrd_44
   (cpllpd,
    CPLLRESET0,
    gt_cpllpdrefclk,
    rate_cpllreset_0,
    RST_CPLLRESET);
  output cpllpd;
  output CPLLRESET0;
  input gt_cpllpdrefclk;
  input rate_cpllreset_0;
  input RST_CPLLRESET;

  wire CPLLRESET0;
  wire RST_CPLLRESET;
  wire cpllpd;
  wire \cpllpd_wait_reg[31]_srl32_n_1 ;
  wire \cpllpd_wait_reg[63]_srl32_n_1 ;
  wire \cpllpd_wait_reg[94]_srl31_n_0 ;
  wire \cpllreset_wait_reg[126]_srl31_n_0 ;
  wire \cpllreset_wait_reg[31]_srl32_n_1 ;
  wire \cpllreset_wait_reg[63]_srl32_n_1 ;
  wire \cpllreset_wait_reg[95]_srl32_n_1 ;
  wire cpllrst;
  wire gt_cpllpdrefclk;
  wire rate_cpllreset_0;
  wire \NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ;

  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(1'b0),
        .Q(\NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllpd_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllpd_wait_reg[94]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h7FFFFFFF)) 
    \cpllpd_wait_reg[94]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllpd_wait_reg[63]_srl32_n_1 ),
        .Q(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q31(\NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    \cpllpd_wait_reg[95] 
       (.C(gt_cpllpdrefclk),
        .CE(1'b1),
        .D(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q(cpllpd),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[126]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[126]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[95]_srl32_n_1 ),
        .Q(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q31(\NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cpllreset_wait_reg[127] 
       (.C(gt_cpllpdrefclk),
        .CE(1'b1),
        .D(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q(cpllrst),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h000000FF)) 
    \cpllreset_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(1'b0),
        .Q(\NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg " *) 
  (* srl_name = "U0/\inst/gt_top_i/pipe_wrapper_i/pipe_lane[0].gt_wrapper_i/cpllPDInst/cpllreset_wait_reg[95]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[95]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_cpllpdrefclk),
        .D(\cpllreset_wait_reg[63]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[95]_srl32_n_1 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \gtx_channel.gtxe2_channel_i_i_2 
       (.I0(cpllrst),
        .I1(rate_cpllreset_0),
        .I2(RST_CPLLRESET),
        .O(CPLLRESET0));
endmodule

(* ICAP_WIDTH = "32" *) (* ORIG_REF_NAME = "pcie_7x_0_icap_pipeline" *) (* TCQ = "1" *) 
module pcie_7x_0_pcie_7x_0_icap_pipeline
   (CLK,
    RST_N,
    CSIB_IN,
    RDWRB_IN,
    I_IN,
    O_IN,
    CSIB_OUT,
    RDWRB_OUT,
    I_OUT,
    O_OUT);
  input CLK;
  input RST_N;
  input CSIB_IN;
  input RDWRB_IN;
  input [31:0]I_IN;
  input [31:0]O_IN;
  (* shreg_extract = "no" *) output CSIB_OUT;
  (* shreg_extract = "no" *) output RDWRB_OUT;
  (* shreg_extract = "no" *) output [31:0]I_OUT;
  (* shreg_extract = "no" *) output [31:0]O_OUT;

  wire CLK;
  wire CSIB_IN;
  wire CSIB_OUT;
  wire CSIB_OUT_i_1_n_0;
  wire [31:0]I_IN;
  wire [31:0]I_OUT;
  wire [31:0]O_IN;
  wire [31:0]O_OUT;
  wire RDWRB_IN;
  wire RDWRB_OUT;
  wire RST_N;
  (* ASYNC_REG = "true" *) (* shreg_extract = "no" *) wire rst_n_reg1;
  (* ASYNC_REG = "true" *) (* shreg_extract = "no" *) wire rst_n_reg2;

  LUT1 #(
    .INIT(2'h1)) 
    CSIB_OUT_i_1
       (.I0(rst_n_reg2),
        .O(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE CSIB_OUT_reg
       (.C(CLK),
        .CE(1'b1),
        .D(CSIB_IN),
        .Q(CSIB_OUT),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[0]),
        .Q(I_OUT[0]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[10]),
        .Q(I_OUT[10]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[11]),
        .Q(I_OUT[11]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[12]),
        .Q(I_OUT[12]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[13]),
        .Q(I_OUT[13]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[14]),
        .Q(I_OUT[14]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[15]),
        .Q(I_OUT[15]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[16]),
        .Q(I_OUT[16]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[17]),
        .Q(I_OUT[17]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[18]),
        .Q(I_OUT[18]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[19]),
        .Q(I_OUT[19]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[1]),
        .Q(I_OUT[1]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[20]),
        .Q(I_OUT[20]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[21]),
        .Q(I_OUT[21]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[22] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[22]),
        .Q(I_OUT[22]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[23] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[23]),
        .Q(I_OUT[23]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[24] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[24]),
        .Q(I_OUT[24]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[25] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[25]),
        .Q(I_OUT[25]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[26] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[26]),
        .Q(I_OUT[26]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[27] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[27]),
        .Q(I_OUT[27]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[28] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[28]),
        .Q(I_OUT[28]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[29] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[29]),
        .Q(I_OUT[29]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[2]),
        .Q(I_OUT[2]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[30] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[30]),
        .Q(I_OUT[30]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[31] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[31]),
        .Q(I_OUT[31]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[3]),
        .Q(I_OUT[3]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[4]),
        .Q(I_OUT[4]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[5]),
        .Q(I_OUT[5]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[6]),
        .Q(I_OUT[6]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[7]),
        .Q(I_OUT[7]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[8]),
        .Q(I_OUT[8]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \I_OUT_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(I_IN[9]),
        .Q(I_OUT[9]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[0]),
        .Q(O_OUT[0]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[10]),
        .Q(O_OUT[10]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[11]),
        .Q(O_OUT[11]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[12]),
        .Q(O_OUT[12]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[13]),
        .Q(O_OUT[13]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[14]),
        .Q(O_OUT[14]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[15]),
        .Q(O_OUT[15]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[16]),
        .Q(O_OUT[16]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[17]),
        .Q(O_OUT[17]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[18]),
        .Q(O_OUT[18]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[19]),
        .Q(O_OUT[19]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[1]),
        .Q(O_OUT[1]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[20]),
        .Q(O_OUT[20]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[21]),
        .Q(O_OUT[21]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[22] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[22]),
        .Q(O_OUT[22]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[23] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[23]),
        .Q(O_OUT[23]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[24] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[24]),
        .Q(O_OUT[24]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[25] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[25]),
        .Q(O_OUT[25]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[26] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[26]),
        .Q(O_OUT[26]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[27] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[27]),
        .Q(O_OUT[27]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[28] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[28]),
        .Q(O_OUT[28]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[29] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[29]),
        .Q(O_OUT[29]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[2]),
        .Q(O_OUT[2]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[30] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[30]),
        .Q(O_OUT[30]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[31] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[31]),
        .Q(O_OUT[31]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[3]),
        .Q(O_OUT[3]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[4]),
        .Q(O_OUT[4]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[5]),
        .Q(O_OUT[5]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[6]),
        .Q(O_OUT[6]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[7]),
        .Q(O_OUT[7]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[8]),
        .Q(O_OUT[8]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE \O_OUT_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(O_IN[9]),
        .Q(O_OUT[9]),
        .R(CSIB_OUT_i_1_n_0));
  (* SHREG_EXTRACT = "no" *) 
  FDRE RDWRB_OUT_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RDWRB_IN),
        .Q(RDWRB_OUT),
        .R(CSIB_OUT_i_1_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE rst_n_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RST_N),
        .Q(rst_n_reg1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE rst_n_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rst_n_reg1),
        .Q(rst_n_reg2),
        .R(1'b0));
endmodule

(* CFG_CTL_IF = "FALSE" *) (* CFG_FC_IF = "FALSE" *) (* CFG_MGMT_IF = "FALSE" *) 
(* CFG_STATUS_IF = "TRUE" *) (* C_DATA_WIDTH = "64" *) (* ERR_REPORTING_IF = "FALSE" *) 
(* EXT_CH_GT_DRP = "FALSE" *) (* EXT_PIPE_INTERFACE = "FALSE" *) (* EXT_STARTUP_PRIMITIVE = "FALSE" *) 
(* KEEP_WIDTH = "8" *) (* LINK_CAP_MAX_LINK_WIDTH = "4" *) (* ORIG_REF_NAME = "pcie_7x_0_pcie2_top" *) 
(* PCIE_ASYNC_EN = "FALSE" *) (* PCIE_EXT_CLK = "FALSE" *) (* PCIE_EXT_GT_COMMON = "FALSE" *) 
(* PIPE_SIM = "FALSE" *) (* PL_INTERFACE = "FALSE" *) (* RCV_MSG_IF = "TRUE" *) 
(* SHARED_LOGIC_IN_CORE = "FALSE" *) (* TRANSCEIVER_CTRL_STATUS_PORTS = "FALSE" *) (* bar_0 = "FFF00000" *) 
(* bar_1 = "FFE00000" *) (* bar_2 = "FFE00000" *) (* bar_3 = "FFE00000" *) 
(* bar_4 = "FFE00000" *) (* bar_5 = "FFE00000" *) (* bram_lat = "0" *) 
(* c_aer_base_ptr = "000" *) (* c_aer_cap_ecrc_check_capable = "FALSE" *) (* c_aer_cap_ecrc_gen_capable = "FALSE" *) 
(* c_aer_cap_multiheader = "FALSE" *) (* c_aer_cap_nextptr = "000" *) (* c_aer_cap_on = "FALSE" *) 
(* c_aer_cap_optional_err_support = "000000" *) (* c_aer_cap_permit_rooterr_update = "FALSE" *) (* c_buf_opt_bma = "TRUE" *) 
(* c_component_name = "pcie_7x_0" *) (* c_cpl_inf = "TRUE" *) (* c_cpl_infinite = "TRUE" *) 
(* c_cpl_timeout_disable_sup = "FALSE" *) (* c_cpl_timeout_range = "0010" *) (* c_cpl_timeout_ranges_sup = "2" *) 
(* c_d1_support = "FALSE" *) (* c_d2_support = "FALSE" *) (* c_de_emph = "FALSE" *) 
(* c_dev_cap2_ari_forwarding_supported = "FALSE" *) (* c_dev_cap2_atomicop32_completer_supported = "FALSE" *) (* c_dev_cap2_atomicop64_completer_supported = "FALSE" *) 
(* c_dev_cap2_atomicop_routing_supported = "FALSE" *) (* c_dev_cap2_cas128_completer_supported = "FALSE" *) (* c_dev_cap2_tph_completer_supported = "00" *) 
(* c_dev_control_ext_tag_default = "FALSE" *) (* c_dev_port_type = "0" *) (* c_dis_lane_reverse = "TRUE" *) 
(* c_disable_rx_poisoned_resp = "FALSE" *) (* c_disable_scrambling = "FALSE" *) (* c_disable_tx_aspm_l0s = "FALSE" *) 
(* c_dll_lnk_actv_cap = "FALSE" *) (* c_dsi_bool = "FALSE" *) (* c_dsn_base_ptr = "100" *) 
(* c_dsn_cap_enabled = "TRUE" *) (* c_dsn_next_ptr = "000" *) (* c_enable_msg_route = "00000000000" *) 
(* c_ep_l0s_accpt_lat = "0" *) (* c_ep_l1_accpt_lat = "7" *) (* c_ext_pci_cfg_space_addr = "3FF" *) 
(* c_external_clocking = "TRUE" *) (* c_fc_cpld = "461" *) (* c_fc_cplh = "36" *) 
(* c_fc_npd = "24" *) (* c_fc_nph = "12" *) (* c_fc_pd = "437" *) 
(* c_fc_ph = "32" *) (* c_gen1 = "TRUE" *) (* c_header_type = "00" *) 
(* c_hw_auton_spd_disable = "FALSE" *) (* c_int_width = "64" *) (* c_last_cfg_dw = "10C" *) 
(* c_link_cap_aspm_optionality = "FALSE" *) (* c_ll_ack_timeout = "0000" *) (* c_ll_ack_timeout_enable = "FALSE" *) 
(* c_ll_ack_timeout_function = "0" *) (* c_ll_replay_timeout = "0000" *) (* c_ll_replay_timeout_enable = "FALSE" *) 
(* c_ll_replay_timeout_func = "1" *) (* c_lnk_bndwdt_notif = "FALSE" *) (* c_msi = "0" *) 
(* c_msi_64b_addr = "TRUE" *) (* c_msi_cap_on = "TRUE" *) (* c_msi_mult_msg_extn = "0" *) 
(* c_msi_per_vctr_mask_cap = "FALSE" *) (* c_msix_cap_on = "FALSE" *) (* c_msix_next_ptr = "00" *) 
(* c_msix_pba_bir = "0" *) (* c_msix_pba_offset = "0" *) (* c_msix_table_bir = "0" *) 
(* c_msix_table_offset = "0" *) (* c_msix_table_size = "000" *) (* c_pci_cfg_space_addr = "3F" *) 
(* c_pcie_blk_locn = "0" *) (* c_pcie_cap_next_ptr = "00" *) (* c_pcie_cap_slot_implemented = "FALSE" *) 
(* c_pcie_dbg_ports = "FALSE" *) (* c_pcie_fast_config = "2" *) (* c_perf_level_high = "TRUE" *) 
(* c_phantom_functions = "0" *) (* c_pm_cap_next_ptr = "48" *) (* c_pme_support = "0F" *) 
(* c_rbar_base_ptr = "000" *) (* c_rbar_cap_control_encodedbar0 = "00" *) (* c_rbar_cap_control_encodedbar1 = "00" *) 
(* c_rbar_cap_control_encodedbar2 = "00" *) (* c_rbar_cap_control_encodedbar3 = "00" *) (* c_rbar_cap_control_encodedbar4 = "00" *) 
(* c_rbar_cap_control_encodedbar5 = "00" *) (* c_rbar_cap_index0 = "0" *) (* c_rbar_cap_index1 = "0" *) 
(* c_rbar_cap_index2 = "0" *) (* c_rbar_cap_index3 = "0" *) (* c_rbar_cap_index4 = "0" *) 
(* c_rbar_cap_index5 = "0" *) (* c_rbar_cap_nextptr = "000" *) (* c_rbar_cap_on = "FALSE" *) 
(* c_rbar_cap_sup0 = "00001" *) (* c_rbar_cap_sup1 = "00001" *) (* c_rbar_cap_sup2 = "00001" *) 
(* c_rbar_cap_sup3 = "00001" *) (* c_rbar_cap_sup4 = "00001" *) (* c_rbar_cap_sup5 = "00001" *) 
(* c_rbar_num = "0" *) (* c_rcb = "0" *) (* c_recrc_check = "0" *) 
(* c_recrc_check_trim = "FALSE" *) (* c_rev_gt_order = "FALSE" *) (* c_root_cap_crs = "FALSE" *) 
(* c_rx_raddr_lat = "0" *) (* c_rx_ram_limit = "7FF" *) (* c_rx_rdata_lat = "2" *) 
(* c_rx_write_lat = "0" *) (* c_silicon_rev = "2" *) (* c_slot_cap_attn_butn = "FALSE" *) 
(* c_slot_cap_attn_ind = "FALSE" *) (* c_slot_cap_elec_interlock = "FALSE" *) (* c_slot_cap_hotplug_cap = "FALSE" *) 
(* c_slot_cap_hotplug_surprise = "FALSE" *) (* c_slot_cap_mrl = "FALSE" *) (* c_slot_cap_no_cmd_comp_sup = "FALSE" *) 
(* c_slot_cap_physical_slot_num = "0" *) (* c_slot_cap_pwr_ctrl = "FALSE" *) (* c_slot_cap_pwr_ind = "FALSE" *) 
(* c_slot_cap_pwr_limit_scale = "0" *) (* c_slot_cap_pwr_limit_value = "0" *) (* c_surprise_dn_err_cap = "FALSE" *) 
(* c_trgt_lnk_spd = "2" *) (* c_trn_np_fc = "TRUE" *) (* c_tx_last_tlp = "29" *) 
(* c_tx_raddr_lat = "0" *) (* c_tx_rdata_lat = "2" *) (* c_tx_write_lat = "0" *) 
(* c_upconfig_capable = "TRUE" *) (* c_upstream_facing = "TRUE" *) (* c_ur_atomic = "FALSE" *) 
(* c_ur_inv_req = "TRUE" *) (* c_ur_prs_response = "TRUE" *) (* c_vc_base_ptr = "000" *) 
(* c_vc_cap_enabled = "FALSE" *) (* c_vc_cap_reject_snoop = "FALSE" *) (* c_vc_next_ptr = "000" *) 
(* c_vsec_base_ptr = "000" *) (* c_vsec_cap_enabled = "FALSE" *) (* c_vsec_next_ptr = "000" *) 
(* c_xlnx_ref_board = "NONE" *) (* cap_ver = "2" *) (* cardbus_cis_ptr = "00000000" *) 
(* class_code = "058000" *) (* cmps = "2" *) (* con_scl_fctr_d0_state = "0" *) 
(* con_scl_fctr_d1_state = "0" *) (* con_scl_fctr_d2_state = "0" *) (* con_scl_fctr_d3_state = "0" *) 
(* cost_table = "1" *) (* d1_sup = "0" *) (* d2_sup = "0" *) 
(* dev_id = "7024" *) (* dev_port_type = "0000" *) (* dis_scl_fctr_d0_state = "0" *) 
(* dis_scl_fctr_d1_state = "0" *) (* dis_scl_fctr_d2_state = "0" *) (* dis_scl_fctr_d3_state = "0" *) 
(* downgradeipidentifiedwarnings = "yes" *) (* dsi = "0" *) (* ep_l0s_accpt_lat = "000" *) 
(* ep_l1_accpt_lat = "111" *) (* ext_tag_fld_sup = "FALSE" *) (* int_pin = "0" *) 
(* intx = "FALSE" *) (* max_lnk_spd = "2" *) (* max_lnk_wdt = "000100" *) 
(* mps = "010" *) (* no_soft_rst = "TRUE" *) (* pci_exp_int_freq = "3" *) 
(* pci_exp_ref_freq = "0" *) (* phantm_func_sup = "00" *) (* pme_sup = "0F" *) 
(* pwr_con_d0_state = "00" *) (* pwr_con_d1_state = "00" *) (* pwr_con_d2_state = "00" *) 
(* pwr_con_d3_state = "00" *) (* pwr_dis_d0_state = "00" *) (* pwr_dis_d1_state = "00" *) 
(* pwr_dis_d2_state = "00" *) (* pwr_dis_d3_state = "00" *) (* rev_id = "00" *) 
(* slot_clk = "TRUE" *) (* subsys_id = "0007" *) (* subsys_ven_id = "10EE" *) 
(* ven_id = "10EE" *) (* xrom_bar = "00000000" *) 
module pcie_7x_0_pcie_7x_0_pcie2_top
   (pci_exp_txn,
    pci_exp_txp,
    pci_exp_rxn,
    pci_exp_rxp,
    int_pclk_out_slave,
    int_pipe_rxusrclk_out,
    int_rxoutclk_out,
    int_dclk_out,
    int_userclk1_out,
    int_userclk2_out,
    int_oobclk_out,
    int_mmcm_lock_out,
    int_qplllock_out,
    int_qplloutclk_out,
    int_qplloutrefclk_out,
    int_pclk_sel_slave,
    pipe_pclk_in,
    pipe_rxusrclk_in,
    pipe_rxoutclk_in,
    pipe_dclk_in,
    pipe_userclk1_in,
    pipe_userclk2_in,
    pipe_oobclk_in,
    pipe_mmcm_lock_in,
    pipe_txoutclk_out,
    pipe_rxoutclk_out,
    pipe_pclk_sel_out,
    pipe_gen3_out,
    qpll_drp_crscode,
    qpll_drp_fsm,
    qpll_drp_done,
    qpll_drp_reset,
    qpll_qplllock,
    qpll_qplloutclk,
    qpll_qplloutrefclk,
    qpll_qplld,
    qpll_qpllreset,
    qpll_drp_clk,
    qpll_drp_rst_n,
    qpll_drp_ovrd,
    qpll_drp_gen3,
    qpll_drp_start,
    user_clk_out,
    user_reset_out,
    user_lnk_up,
    user_app_rdy,
    tx_buf_av,
    tx_err_drop,
    tx_cfg_req,
    s_axis_tx_tdata,
    s_axis_tx_tvalid,
    s_axis_tx_tready,
    s_axis_tx_tkeep,
    s_axis_tx_tlast,
    s_axis_tx_tuser,
    tx_cfg_gnt,
    m_axis_rx_tdata,
    m_axis_rx_tvalid,
    m_axis_rx_tready,
    m_axis_rx_tkeep,
    m_axis_rx_tlast,
    m_axis_rx_tuser,
    rx_np_ok,
    rx_np_req,
    fc_cpld,
    fc_cplh,
    fc_npd,
    fc_nph,
    fc_pd,
    fc_ph,
    fc_sel,
    cfg_mgmt_do,
    cfg_mgmt_rd_wr_done,
    cfg_status,
    cfg_command,
    cfg_dstatus,
    cfg_dcommand,
    cfg_lstatus,
    cfg_lcommand,
    cfg_dcommand2,
    cfg_pcie_link_state,
    cfg_pmcsr_pme_en,
    cfg_pmcsr_powerstate,
    cfg_pmcsr_pme_status,
    cfg_received_func_lvl_rst,
    cfg_mgmt_di,
    cfg_mgmt_byte_en,
    cfg_mgmt_dwaddr,
    cfg_mgmt_wr_en,
    cfg_mgmt_rd_en,
    cfg_mgmt_wr_readonly,
    cfg_err_ecrc,
    cfg_err_ur,
    cfg_err_cpl_timeout,
    cfg_err_cpl_unexpect,
    cfg_err_cpl_abort,
    cfg_err_posted,
    cfg_err_cor,
    cfg_err_atomic_egress_blocked,
    cfg_err_internal_cor,
    cfg_err_malformed,
    cfg_err_mc_blocked,
    cfg_err_poisoned,
    cfg_err_norecovery,
    cfg_err_tlp_cpl_header,
    cfg_err_cpl_rdy,
    cfg_err_locked,
    cfg_err_acs,
    cfg_err_internal_uncor,
    cfg_trn_pending,
    cfg_pm_halt_aspm_l0s,
    cfg_pm_halt_aspm_l1,
    cfg_pm_force_state_en,
    cfg_pm_force_state,
    cfg_dsn,
    cfg_msg_received,
    cfg_msg_data,
    cfg_interrupt,
    cfg_interrupt_rdy,
    cfg_interrupt_assert,
    cfg_interrupt_di,
    cfg_interrupt_do,
    cfg_interrupt_mmenable,
    cfg_interrupt_msienable,
    cfg_interrupt_msixenable,
    cfg_interrupt_msixfm,
    cfg_interrupt_stat,
    cfg_pciecap_interrupt_msgnum,
    cfg_to_turnoff,
    cfg_turnoff_ok,
    cfg_bus_number,
    cfg_device_number,
    cfg_function_number,
    cfg_pm_wake,
    cfg_msg_received_pm_as_nak,
    cfg_msg_received_setslotpowerlimit,
    cfg_pm_send_pme_to,
    cfg_ds_bus_number,
    cfg_ds_device_number,
    cfg_ds_function_number,
    cfg_mgmt_wr_rw1c_as_rw,
    cfg_bridge_serr_en,
    cfg_slot_control_electromech_il_ctl_pulse,
    cfg_root_control_syserr_corr_err_en,
    cfg_root_control_syserr_non_fatal_err_en,
    cfg_root_control_syserr_fatal_err_en,
    cfg_root_control_pme_int_en,
    cfg_aer_rooterr_corr_err_reporting_en,
    cfg_aer_rooterr_non_fatal_err_reporting_en,
    cfg_aer_rooterr_fatal_err_reporting_en,
    cfg_aer_rooterr_corr_err_received,
    cfg_aer_rooterr_non_fatal_err_received,
    cfg_aer_rooterr_fatal_err_received,
    cfg_msg_received_err_cor,
    cfg_msg_received_err_non_fatal,
    cfg_msg_received_err_fatal,
    cfg_msg_received_pm_pme,
    cfg_msg_received_pme_to_ack,
    cfg_msg_received_assert_int_a,
    cfg_msg_received_assert_int_b,
    cfg_msg_received_assert_int_c,
    cfg_msg_received_assert_int_d,
    cfg_msg_received_deassert_int_a,
    cfg_msg_received_deassert_int_b,
    cfg_msg_received_deassert_int_c,
    cfg_msg_received_deassert_int_d,
    pl_directed_link_change,
    pl_directed_link_width,
    pl_directed_link_speed,
    pl_directed_link_auton,
    pl_upstream_prefer_deemph,
    pl_sel_lnk_rate,
    pl_sel_lnk_width,
    pl_ltssm_state,
    pl_lane_reversal_mode,
    pl_phy_lnk_up,
    pl_tx_pm_state,
    pl_rx_pm_state,
    pl_link_upcfg_cap,
    pl_link_gen2_cap,
    pl_link_partner_gen2_supported,
    pl_initial_link_width,
    pl_directed_change_done,
    pl_received_hot_rst,
    pl_transmit_hot_rst,
    pl_downstream_deemph_source,
    cfg_err_aer_headerlog,
    cfg_aer_interrupt_msgnum,
    cfg_err_aer_headerlog_set,
    cfg_aer_ecrc_check_en,
    cfg_aer_ecrc_gen_en,
    cfg_vc_tcvc_map,
    pcie_drp_clk,
    pcie_drp_en,
    pcie_drp_we,
    pcie_drp_addr,
    pcie_drp_di,
    pcie_drp_rdy,
    pcie_drp_do,
    startup_eos_in,
    startup_cfgclk,
    startup_cfgmclk,
    startup_eos,
    startup_preq,
    startup_clk,
    startup_gsr,
    startup_gts,
    startup_keyclearb,
    startup_pack,
    startup_usrcclko,
    startup_usrcclkts,
    startup_usrdoneo,
    startup_usrdonets,
    icap_clk,
    icap_csib,
    icap_rdwrb,
    icap_i,
    icap_o,
    pipe_txprbssel,
    pipe_rxprbssel,
    pipe_txprbsforceerr,
    pipe_rxprbscntreset,
    pipe_loopback,
    pipe_rxprbserr,
    pipe_txinhibit,
    pipe_rst_fsm,
    pipe_qrst_fsm,
    pipe_rate_fsm,
    pipe_sync_fsm_tx,
    pipe_sync_fsm_rx,
    pipe_drp_fsm,
    pipe_rst_idle,
    pipe_qrst_idle,
    pipe_rate_idle,
    pipe_eyescandataerror,
    pipe_rxstatus,
    pipe_dmonitorout,
    pipe_cpll_lock,
    pipe_qpll_lock,
    pipe_rxpmaresetdone,
    pipe_rxbufstatus,
    pipe_txphaligndone,
    pipe_txphinitdone,
    pipe_txdlysresetdone,
    pipe_rxphaligndone,
    pipe_rxdlysresetdone,
    pipe_rxsyncdone,
    pipe_rxdisperr,
    pipe_rxnotintable,
    pipe_rxcommadet,
    gt_ch_drp_rdy,
    pipe_debug_0,
    pipe_debug_1,
    pipe_debug_2,
    pipe_debug_3,
    pipe_debug_4,
    pipe_debug_5,
    pipe_debug_6,
    pipe_debug_7,
    pipe_debug_8,
    pipe_debug_9,
    pipe_debug,
    ext_ch_gt_drpclk,
    ext_ch_gt_drpaddr,
    ext_ch_gt_drpen,
    ext_ch_gt_drpdi,
    ext_ch_gt_drpwe,
    ext_ch_gt_drpdo,
    ext_ch_gt_drprdy,
    common_commands_in,
    pipe_rx_0_sigs,
    pipe_rx_1_sigs,
    pipe_rx_2_sigs,
    pipe_rx_3_sigs,
    pipe_rx_4_sigs,
    pipe_rx_5_sigs,
    pipe_rx_6_sigs,
    pipe_rx_7_sigs,
    common_commands_out,
    pipe_tx_0_sigs,
    pipe_tx_1_sigs,
    pipe_tx_2_sigs,
    pipe_tx_3_sigs,
    pipe_tx_4_sigs,
    pipe_tx_5_sigs,
    pipe_tx_6_sigs,
    pipe_tx_7_sigs,
    pipe_mmcm_rst_n,
    sys_clk,
    sys_rst_n);
  output [3:0]pci_exp_txn;
  output [3:0]pci_exp_txp;
  input [3:0]pci_exp_rxn;
  input [3:0]pci_exp_rxp;
  output int_pclk_out_slave;
  output int_pipe_rxusrclk_out;
  output [3:0]int_rxoutclk_out;
  output int_dclk_out;
  output int_userclk1_out;
  output int_userclk2_out;
  output int_oobclk_out;
  output int_mmcm_lock_out;
  output [1:0]int_qplllock_out;
  output [1:0]int_qplloutclk_out;
  output [1:0]int_qplloutrefclk_out;
  input [3:0]int_pclk_sel_slave;
  input pipe_pclk_in;
  input pipe_rxusrclk_in;
  input [3:0]pipe_rxoutclk_in;
  input pipe_dclk_in;
  input pipe_userclk1_in;
  input pipe_userclk2_in;
  input pipe_oobclk_in;
  input pipe_mmcm_lock_in;
  output pipe_txoutclk_out;
  output [3:0]pipe_rxoutclk_out;
  output [3:0]pipe_pclk_sel_out;
  output pipe_gen3_out;
  input [11:0]qpll_drp_crscode;
  input [17:0]qpll_drp_fsm;
  input [1:0]qpll_drp_done;
  input [1:0]qpll_drp_reset;
  input [1:0]qpll_qplllock;
  input [1:0]qpll_qplloutclk;
  input [1:0]qpll_qplloutrefclk;
  output qpll_qplld;
  output [1:0]qpll_qpllreset;
  output qpll_drp_clk;
  output qpll_drp_rst_n;
  output qpll_drp_ovrd;
  output qpll_drp_gen3;
  output qpll_drp_start;
  output user_clk_out;
  output user_reset_out;
  output user_lnk_up;
  output user_app_rdy;
  output [5:0]tx_buf_av;
  output tx_err_drop;
  output tx_cfg_req;
  input [63:0]s_axis_tx_tdata;
  input s_axis_tx_tvalid;
  output s_axis_tx_tready;
  input [7:0]s_axis_tx_tkeep;
  input s_axis_tx_tlast;
  input [3:0]s_axis_tx_tuser;
  input tx_cfg_gnt;
  output [63:0]m_axis_rx_tdata;
  output m_axis_rx_tvalid;
  input m_axis_rx_tready;
  output [7:0]m_axis_rx_tkeep;
  output m_axis_rx_tlast;
  output [21:0]m_axis_rx_tuser;
  input rx_np_ok;
  input rx_np_req;
  output [11:0]fc_cpld;
  output [7:0]fc_cplh;
  output [11:0]fc_npd;
  output [7:0]fc_nph;
  output [11:0]fc_pd;
  output [7:0]fc_ph;
  input [2:0]fc_sel;
  output [31:0]cfg_mgmt_do;
  output cfg_mgmt_rd_wr_done;
  output [15:0]cfg_status;
  output [15:0]cfg_command;
  output [15:0]cfg_dstatus;
  output [15:0]cfg_dcommand;
  output [15:0]cfg_lstatus;
  output [15:0]cfg_lcommand;
  output [15:0]cfg_dcommand2;
  output [2:0]cfg_pcie_link_state;
  output cfg_pmcsr_pme_en;
  output [1:0]cfg_pmcsr_powerstate;
  output cfg_pmcsr_pme_status;
  output cfg_received_func_lvl_rst;
  input [31:0]cfg_mgmt_di;
  input [3:0]cfg_mgmt_byte_en;
  input [9:0]cfg_mgmt_dwaddr;
  input cfg_mgmt_wr_en;
  input cfg_mgmt_rd_en;
  input cfg_mgmt_wr_readonly;
  input cfg_err_ecrc;
  input cfg_err_ur;
  input cfg_err_cpl_timeout;
  input cfg_err_cpl_unexpect;
  input cfg_err_cpl_abort;
  input cfg_err_posted;
  input cfg_err_cor;
  input cfg_err_atomic_egress_blocked;
  input cfg_err_internal_cor;
  input cfg_err_malformed;
  input cfg_err_mc_blocked;
  input cfg_err_poisoned;
  input cfg_err_norecovery;
  input [47:0]cfg_err_tlp_cpl_header;
  output cfg_err_cpl_rdy;
  input cfg_err_locked;
  input cfg_err_acs;
  input cfg_err_internal_uncor;
  input cfg_trn_pending;
  input cfg_pm_halt_aspm_l0s;
  input cfg_pm_halt_aspm_l1;
  input cfg_pm_force_state_en;
  input [1:0]cfg_pm_force_state;
  input [63:0]cfg_dsn;
  output cfg_msg_received;
  output [15:0]cfg_msg_data;
  input cfg_interrupt;
  output cfg_interrupt_rdy;
  input cfg_interrupt_assert;
  input [7:0]cfg_interrupt_di;
  output [7:0]cfg_interrupt_do;
  output [2:0]cfg_interrupt_mmenable;
  output cfg_interrupt_msienable;
  output cfg_interrupt_msixenable;
  output cfg_interrupt_msixfm;
  input cfg_interrupt_stat;
  input [4:0]cfg_pciecap_interrupt_msgnum;
  output cfg_to_turnoff;
  input cfg_turnoff_ok;
  output [7:0]cfg_bus_number;
  output [4:0]cfg_device_number;
  output [2:0]cfg_function_number;
  input cfg_pm_wake;
  output cfg_msg_received_pm_as_nak;
  output cfg_msg_received_setslotpowerlimit;
  input cfg_pm_send_pme_to;
  input [7:0]cfg_ds_bus_number;
  input [4:0]cfg_ds_device_number;
  input [2:0]cfg_ds_function_number;
  input cfg_mgmt_wr_rw1c_as_rw;
  output cfg_bridge_serr_en;
  output cfg_slot_control_electromech_il_ctl_pulse;
  output cfg_root_control_syserr_corr_err_en;
  output cfg_root_control_syserr_non_fatal_err_en;
  output cfg_root_control_syserr_fatal_err_en;
  output cfg_root_control_pme_int_en;
  output cfg_aer_rooterr_corr_err_reporting_en;
  output cfg_aer_rooterr_non_fatal_err_reporting_en;
  output cfg_aer_rooterr_fatal_err_reporting_en;
  output cfg_aer_rooterr_corr_err_received;
  output cfg_aer_rooterr_non_fatal_err_received;
  output cfg_aer_rooterr_fatal_err_received;
  output cfg_msg_received_err_cor;
  output cfg_msg_received_err_non_fatal;
  output cfg_msg_received_err_fatal;
  output cfg_msg_received_pm_pme;
  output cfg_msg_received_pme_to_ack;
  output cfg_msg_received_assert_int_a;
  output cfg_msg_received_assert_int_b;
  output cfg_msg_received_assert_int_c;
  output cfg_msg_received_assert_int_d;
  output cfg_msg_received_deassert_int_a;
  output cfg_msg_received_deassert_int_b;
  output cfg_msg_received_deassert_int_c;
  output cfg_msg_received_deassert_int_d;
  input [1:0]pl_directed_link_change;
  input [1:0]pl_directed_link_width;
  input pl_directed_link_speed;
  input pl_directed_link_auton;
  input pl_upstream_prefer_deemph;
  output pl_sel_lnk_rate;
  output [1:0]pl_sel_lnk_width;
  output [5:0]pl_ltssm_state;
  output [1:0]pl_lane_reversal_mode;
  output pl_phy_lnk_up;
  output [2:0]pl_tx_pm_state;
  output [1:0]pl_rx_pm_state;
  output pl_link_upcfg_cap;
  output pl_link_gen2_cap;
  output pl_link_partner_gen2_supported;
  output [2:0]pl_initial_link_width;
  output pl_directed_change_done;
  output pl_received_hot_rst;
  input pl_transmit_hot_rst;
  input pl_downstream_deemph_source;
  input [127:0]cfg_err_aer_headerlog;
  input [4:0]cfg_aer_interrupt_msgnum;
  output cfg_err_aer_headerlog_set;
  output cfg_aer_ecrc_check_en;
  output cfg_aer_ecrc_gen_en;
  output [6:0]cfg_vc_tcvc_map;
  input pcie_drp_clk;
  input pcie_drp_en;
  input pcie_drp_we;
  input [8:0]pcie_drp_addr;
  input [15:0]pcie_drp_di;
  output pcie_drp_rdy;
  output [15:0]pcie_drp_do;
  input startup_eos_in;
  output startup_cfgclk;
  output startup_cfgmclk;
  output startup_eos;
  output startup_preq;
  input startup_clk;
  input startup_gsr;
  input startup_gts;
  input startup_keyclearb;
  input startup_pack;
  input startup_usrcclko;
  input startup_usrcclkts;
  input startup_usrdoneo;
  input startup_usrdonets;
  input icap_clk;
  input icap_csib;
  input icap_rdwrb;
  input [31:0]icap_i;
  output [31:0]icap_o;
  input [2:0]pipe_txprbssel;
  input [2:0]pipe_rxprbssel;
  input pipe_txprbsforceerr;
  input pipe_rxprbscntreset;
  input [2:0]pipe_loopback;
  output [3:0]pipe_rxprbserr;
  input [3:0]pipe_txinhibit;
  output [4:0]pipe_rst_fsm;
  output [11:0]pipe_qrst_fsm;
  output [19:0]pipe_rate_fsm;
  output [23:0]pipe_sync_fsm_tx;
  output [27:0]pipe_sync_fsm_rx;
  output [27:0]pipe_drp_fsm;
  output pipe_rst_idle;
  output pipe_qrst_idle;
  output pipe_rate_idle;
  output [3:0]pipe_eyescandataerror;
  output [11:0]pipe_rxstatus;
  output [59:0]pipe_dmonitorout;
  output [3:0]pipe_cpll_lock;
  output [0:0]pipe_qpll_lock;
  output [3:0]pipe_rxpmaresetdone;
  output [11:0]pipe_rxbufstatus;
  output [3:0]pipe_txphaligndone;
  output [3:0]pipe_txphinitdone;
  output [3:0]pipe_txdlysresetdone;
  output [3:0]pipe_rxphaligndone;
  output [3:0]pipe_rxdlysresetdone;
  output [3:0]pipe_rxsyncdone;
  output [31:0]pipe_rxdisperr;
  output [31:0]pipe_rxnotintable;
  output [3:0]pipe_rxcommadet;
  output [3:0]gt_ch_drp_rdy;
  output [3:0]pipe_debug_0;
  output [3:0]pipe_debug_1;
  output [3:0]pipe_debug_2;
  output [3:0]pipe_debug_3;
  output [3:0]pipe_debug_4;
  output [3:0]pipe_debug_5;
  output [3:0]pipe_debug_6;
  output [3:0]pipe_debug_7;
  output [3:0]pipe_debug_8;
  output [3:0]pipe_debug_9;
  output [31:0]pipe_debug;
  output ext_ch_gt_drpclk;
  input [35:0]ext_ch_gt_drpaddr;
  input [3:0]ext_ch_gt_drpen;
  input [63:0]ext_ch_gt_drpdi;
  input [3:0]ext_ch_gt_drpwe;
  output [63:0]ext_ch_gt_drpdo;
  output [3:0]ext_ch_gt_drprdy;
  input [11:0]common_commands_in;
  input [24:0]pipe_rx_0_sigs;
  input [24:0]pipe_rx_1_sigs;
  input [24:0]pipe_rx_2_sigs;
  input [24:0]pipe_rx_3_sigs;
  input [24:0]pipe_rx_4_sigs;
  input [24:0]pipe_rx_5_sigs;
  input [24:0]pipe_rx_6_sigs;
  input [24:0]pipe_rx_7_sigs;
  output [11:0]common_commands_out;
  output [24:0]pipe_tx_0_sigs;
  output [24:0]pipe_tx_1_sigs;
  output [24:0]pipe_tx_2_sigs;
  output [24:0]pipe_tx_3_sigs;
  output [24:0]pipe_tx_4_sigs;
  output [24:0]pipe_tx_5_sigs;
  output [24:0]pipe_tx_6_sigs;
  output [24:0]pipe_tx_7_sigs;
  input pipe_mmcm_rst_n;
  input sys_clk;
  input sys_rst_n;

  wire \<const0> ;
  wire \<const1> ;
  wire cfg_aer_ecrc_check_en;
  wire cfg_aer_ecrc_gen_en;
  wire [4:0]cfg_aer_interrupt_msgnum;
  wire cfg_aer_rooterr_corr_err_received;
  wire cfg_aer_rooterr_corr_err_reporting_en;
  wire cfg_aer_rooterr_fatal_err_received;
  wire cfg_aer_rooterr_fatal_err_reporting_en;
  wire cfg_aer_rooterr_non_fatal_err_received;
  wire cfg_aer_rooterr_non_fatal_err_reporting_en;
  wire cfg_bridge_serr_en;
  wire [7:0]cfg_bus_number;
  wire [10:0]\^cfg_command ;
  wire [14:0]\^cfg_dcommand ;
  wire [11:0]\^cfg_dcommand2 ;
  wire [4:0]cfg_device_number;
  wire [7:0]cfg_ds_bus_number;
  wire [4:0]cfg_ds_device_number;
  wire [2:0]cfg_ds_function_number;
  wire [63:0]cfg_dsn;
  wire [5:0]\^cfg_dstatus ;
  wire [127:0]cfg_err_aer_headerlog;
  wire cfg_err_aer_headerlog_set;
  wire cfg_err_atomic_egress_blocked;
  wire cfg_err_cor;
  wire cfg_err_cpl_abort;
  wire cfg_err_cpl_rdy;
  wire cfg_err_cpl_timeout;
  wire cfg_err_cpl_unexpect;
  wire cfg_err_ecrc;
  wire cfg_err_internal_cor;
  wire cfg_err_internal_uncor;
  wire cfg_err_locked;
  wire cfg_err_malformed;
  wire cfg_err_mc_blocked;
  wire cfg_err_norecovery;
  wire cfg_err_poisoned;
  wire cfg_err_posted;
  wire [47:0]cfg_err_tlp_cpl_header;
  wire cfg_err_ur;
  wire [2:0]cfg_function_number;
  wire cfg_interrupt;
  wire cfg_interrupt_assert;
  wire [7:0]cfg_interrupt_di;
  wire [7:0]cfg_interrupt_do;
  wire [2:0]cfg_interrupt_mmenable;
  wire cfg_interrupt_msienable;
  wire cfg_interrupt_msixenable;
  wire cfg_interrupt_msixfm;
  wire cfg_interrupt_rdy;
  wire cfg_interrupt_stat;
  wire [11:0]\^cfg_lcommand ;
  wire [15:0]\^cfg_lstatus ;
  wire [3:0]cfg_mgmt_byte_en;
  wire [31:0]cfg_mgmt_di;
  wire [31:0]cfg_mgmt_do;
  wire [9:0]cfg_mgmt_dwaddr;
  wire cfg_mgmt_rd_en;
  wire cfg_mgmt_rd_wr_done;
  wire cfg_mgmt_wr_en;
  wire cfg_mgmt_wr_readonly;
  wire cfg_mgmt_wr_rw1c_as_rw;
  wire [15:0]cfg_msg_data;
  wire cfg_msg_received;
  wire cfg_msg_received_assert_int_a;
  wire cfg_msg_received_assert_int_b;
  wire cfg_msg_received_assert_int_c;
  wire cfg_msg_received_assert_int_d;
  wire cfg_msg_received_deassert_int_a;
  wire cfg_msg_received_deassert_int_b;
  wire cfg_msg_received_deassert_int_c;
  wire cfg_msg_received_deassert_int_d;
  wire cfg_msg_received_err_cor;
  wire cfg_msg_received_err_fatal;
  wire cfg_msg_received_err_non_fatal;
  wire cfg_msg_received_pm_as_nak;
  wire cfg_msg_received_pm_pme;
  wire cfg_msg_received_pme_to_ack;
  wire cfg_msg_received_setslotpowerlimit;
  wire [2:0]cfg_pcie_link_state;
  wire [4:0]cfg_pciecap_interrupt_msgnum;
  wire [1:0]cfg_pm_force_state;
  wire cfg_pm_force_state_en;
  wire cfg_pm_halt_aspm_l0s;
  wire cfg_pm_halt_aspm_l1;
  wire cfg_pm_wake;
  wire cfg_pmcsr_pme_en;
  wire cfg_pmcsr_pme_status;
  wire [1:0]cfg_pmcsr_powerstate;
  wire cfg_received_func_lvl_rst;
  wire cfg_root_control_pme_int_en;
  wire cfg_root_control_syserr_corr_err_en;
  wire cfg_root_control_syserr_fatal_err_en;
  wire cfg_root_control_syserr_non_fatal_err_en;
  wire cfg_slot_control_electromech_il_ctl_pulse;
  wire cfg_to_turnoff;
  wire cfg_trn_pending;
  wire cfg_turnoff_ok;
  wire [6:0]cfg_vc_tcvc_map;
  wire [35:0]ext_ch_gt_drpaddr;
  wire [63:0]ext_ch_gt_drpdi;
  wire [63:0]ext_ch_gt_drpdo;
  wire [3:0]ext_ch_gt_drpen;
  wire [3:0]ext_ch_gt_drprdy;
  wire [3:0]ext_ch_gt_drpwe;
  wire [11:0]fc_cpld;
  wire [7:0]fc_cplh;
  wire [11:0]fc_npd;
  wire [7:0]fc_nph;
  wire [11:0]fc_pd;
  wire [7:0]fc_ph;
  wire [2:0]fc_sel;
  wire [3:0]gt_ch_drp_rdy;
  wire icap_clk;
  wire icap_csib;
  wire [31:0]icap_i;
  wire [31:0]icap_o;
  wire icap_rdwrb;
  wire int_dclk_out;
  wire int_mmcm_lock_out;
  wire int_oobclk_out;
  wire [3:0]int_pclk_sel_slave;
  wire [0:0]\^int_qplllock_out ;
  wire [0:0]\^int_qplloutclk_out ;
  wire [0:0]\^int_qplloutrefclk_out ;
  wire int_userclk1_out;
  wire [63:0]m_axis_rx_tdata;
  wire [7:7]\^m_axis_rx_tkeep ;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tready;
  wire [21:0]\^m_axis_rx_tuser ;
  wire m_axis_rx_tvalid;
  wire [3:0]pci_exp_rxn;
  wire [3:0]pci_exp_rxp;
  wire [3:0]pci_exp_txn;
  wire [3:0]pci_exp_txp;
  wire [8:0]pcie_drp_addr;
  wire pcie_drp_clk;
  wire [15:0]pcie_drp_di;
  wire [15:0]pcie_drp_do;
  wire pcie_drp_en;
  wire pcie_drp_rdy;
  wire pcie_drp_we;
  wire [3:0]pipe_cpll_lock;
  wire [52:0]\^pipe_dmonitorout ;
  wire [11:0]\^pipe_drp_fsm ;
  wire [3:0]pipe_eyescandataerror;
  wire pipe_gen3_out;
  wire [2:0]pipe_loopback;
  wire pipe_mmcm_rst_n;
  wire [3:0]pipe_pclk_sel_out;
  wire [3:0]\^pipe_qrst_fsm ;
  wire pipe_qrst_idle;
  wire [19:0]pipe_rate_fsm;
  wire pipe_rate_idle;
  wire [4:0]pipe_rst_fsm;
  wire pipe_rst_idle;
  wire [11:0]pipe_rxbufstatus;
  wire [3:0]pipe_rxcommadet;
  wire [31:0]pipe_rxdisperr;
  wire [3:0]pipe_rxdlysresetdone;
  wire [31:0]pipe_rxnotintable;
  wire [3:0]pipe_rxoutclk_out;
  wire [3:0]pipe_rxphaligndone;
  wire pipe_rxprbscntreset;
  wire [3:0]pipe_rxprbserr;
  wire [2:0]pipe_rxprbssel;
  wire [11:0]pipe_rxstatus;
  wire [21:0]\^pipe_sync_fsm_rx ;
  wire [23:0]pipe_sync_fsm_tx;
  wire [3:0]pipe_txdlysresetdone;
  wire [3:0]pipe_txinhibit;
  wire pipe_txoutclk_out;
  wire [3:0]pipe_txphaligndone;
  wire [3:0]pipe_txphinitdone;
  wire pipe_txprbsforceerr;
  wire [2:0]pipe_txprbssel;
  wire pl_directed_change_done;
  wire pl_directed_link_auton;
  wire [1:0]pl_directed_link_change;
  wire pl_directed_link_speed;
  wire [1:0]pl_directed_link_width;
  wire pl_downstream_deemph_source;
  wire [2:0]pl_initial_link_width;
  wire [1:0]pl_lane_reversal_mode;
  wire pl_link_gen2_cap;
  wire pl_link_partner_gen2_supported;
  wire pl_link_upcfg_cap;
  wire [5:0]pl_ltssm_state;
  wire pl_phy_lnk_up;
  wire pl_received_hot_rst;
  wire [1:0]pl_rx_pm_state;
  wire pl_sel_lnk_rate;
  wire [1:0]pl_sel_lnk_width;
  wire pl_transmit_hot_rst;
  wire [2:0]pl_tx_pm_state;
  wire pl_upstream_prefer_deemph;
  wire rx_np_ok;
  wire rx_np_req;
  wire [63:0]s_axis_tx_tdata;
  wire [7:0]s_axis_tx_tkeep;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tready;
  wire [3:0]s_axis_tx_tuser;
  wire s_axis_tx_tvalid;
  wire startup_cfgclk;
  wire startup_cfgmclk;
  wire startup_clk;
  wire startup_eos;
  wire startup_gsr;
  wire startup_gts;
  wire startup_keyclearb;
  wire startup_pack;
  wire startup_preq;
  wire startup_usrcclko;
  wire startup_usrcclkts;
  wire startup_usrdoneo;
  wire startup_usrdonets;
  wire sys_clk;
  wire sys_rst_n;
  wire [5:0]tx_buf_av;
  wire tx_cfg_gnt;
  wire tx_cfg_req;
  wire tx_err_drop;
  wire user_app_rdy;
  wire user_lnk_up;
  wire user_reset_out;

  assign cfg_command[15] = \<const0> ;
  assign cfg_command[14] = \<const0> ;
  assign cfg_command[13] = \<const0> ;
  assign cfg_command[12] = \<const0> ;
  assign cfg_command[11] = \<const0> ;
  assign cfg_command[10] = \^cfg_command [10];
  assign cfg_command[9] = \<const0> ;
  assign cfg_command[8] = \^cfg_command [8];
  assign cfg_command[7] = \<const0> ;
  assign cfg_command[6] = \<const0> ;
  assign cfg_command[5] = \<const0> ;
  assign cfg_command[4] = \<const0> ;
  assign cfg_command[3] = \<const0> ;
  assign cfg_command[2:0] = \^cfg_command [2:0];
  assign cfg_dcommand[15] = \<const0> ;
  assign cfg_dcommand[14:0] = \^cfg_dcommand [14:0];
  assign cfg_dcommand2[15] = \<const0> ;
  assign cfg_dcommand2[14] = \<const0> ;
  assign cfg_dcommand2[13] = \<const0> ;
  assign cfg_dcommand2[12] = \<const0> ;
  assign cfg_dcommand2[11:0] = \^cfg_dcommand2 [11:0];
  assign cfg_dstatus[15] = \<const0> ;
  assign cfg_dstatus[14] = \<const0> ;
  assign cfg_dstatus[13] = \<const0> ;
  assign cfg_dstatus[12] = \<const0> ;
  assign cfg_dstatus[11] = \<const0> ;
  assign cfg_dstatus[10] = \<const0> ;
  assign cfg_dstatus[9] = \<const0> ;
  assign cfg_dstatus[8] = \<const0> ;
  assign cfg_dstatus[7] = \<const0> ;
  assign cfg_dstatus[6] = \<const0> ;
  assign cfg_dstatus[5] = \^cfg_dstatus [5];
  assign cfg_dstatus[4] = \<const0> ;
  assign cfg_dstatus[3:0] = \^cfg_dstatus [3:0];
  assign cfg_lcommand[15] = \<const0> ;
  assign cfg_lcommand[14] = \<const0> ;
  assign cfg_lcommand[13] = \<const0> ;
  assign cfg_lcommand[12] = \<const0> ;
  assign cfg_lcommand[11:3] = \^cfg_lcommand [11:3];
  assign cfg_lcommand[2] = \<const0> ;
  assign cfg_lcommand[1:0] = \^cfg_lcommand [1:0];
  assign cfg_lstatus[15:13] = \^cfg_lstatus [15:13];
  assign cfg_lstatus[12] = \<const1> ;
  assign cfg_lstatus[11] = \^cfg_lstatus [11];
  assign cfg_lstatus[10] = \<const0> ;
  assign cfg_lstatus[9] = \<const0> ;
  assign cfg_lstatus[8] = \<const0> ;
  assign cfg_lstatus[7:4] = \^cfg_lstatus [7:4];
  assign cfg_lstatus[3] = \<const0> ;
  assign cfg_lstatus[2] = \<const0> ;
  assign cfg_lstatus[1:0] = \^cfg_lstatus [1:0];
  assign cfg_status[15] = \<const0> ;
  assign cfg_status[14] = \<const0> ;
  assign cfg_status[13] = \<const0> ;
  assign cfg_status[12] = \<const0> ;
  assign cfg_status[11] = \<const0> ;
  assign cfg_status[10] = \<const0> ;
  assign cfg_status[9] = \<const0> ;
  assign cfg_status[8] = \<const0> ;
  assign cfg_status[7] = \<const0> ;
  assign cfg_status[6] = \<const0> ;
  assign cfg_status[5] = \<const0> ;
  assign cfg_status[4] = \<const0> ;
  assign cfg_status[3] = \<const0> ;
  assign cfg_status[2] = \<const0> ;
  assign cfg_status[1] = \<const0> ;
  assign cfg_status[0] = \<const0> ;
  assign common_commands_out[11] = \<const0> ;
  assign common_commands_out[10] = \<const0> ;
  assign common_commands_out[9] = \<const0> ;
  assign common_commands_out[8] = \<const0> ;
  assign common_commands_out[7] = \<const0> ;
  assign common_commands_out[6] = \<const0> ;
  assign common_commands_out[5] = \<const0> ;
  assign common_commands_out[4] = \<const0> ;
  assign common_commands_out[3] = \<const0> ;
  assign common_commands_out[2] = \<const0> ;
  assign common_commands_out[1] = \<const0> ;
  assign common_commands_out[0] = \<const0> ;
  assign ext_ch_gt_drpclk = int_dclk_out;
  assign int_pclk_out_slave = \<const0> ;
  assign int_pipe_rxusrclk_out = int_oobclk_out;
  assign int_qplllock_out[1] = \<const0> ;
  assign int_qplllock_out[0] = \^int_qplllock_out [0];
  assign int_qplloutclk_out[1] = \<const0> ;
  assign int_qplloutclk_out[0] = \^int_qplloutclk_out [0];
  assign int_qplloutrefclk_out[1] = \<const0> ;
  assign int_qplloutrefclk_out[0] = \^int_qplloutrefclk_out [0];
  assign int_rxoutclk_out[3] = \<const0> ;
  assign int_rxoutclk_out[2] = \<const0> ;
  assign int_rxoutclk_out[1] = \<const0> ;
  assign int_rxoutclk_out[0] = \<const0> ;
  assign int_userclk2_out = int_userclk1_out;
  assign m_axis_rx_tkeep[7] = \^m_axis_rx_tkeep [7];
  assign m_axis_rx_tkeep[6] = \^m_axis_rx_tkeep [7];
  assign m_axis_rx_tkeep[5] = \^m_axis_rx_tkeep [7];
  assign m_axis_rx_tkeep[4] = \^m_axis_rx_tkeep [7];
  assign m_axis_rx_tkeep[3] = user_app_rdy;
  assign m_axis_rx_tkeep[2] = user_app_rdy;
  assign m_axis_rx_tkeep[1] = user_app_rdy;
  assign m_axis_rx_tkeep[0] = user_app_rdy;
  assign m_axis_rx_tuser[21] = \^m_axis_rx_tuser [21];
  assign m_axis_rx_tuser[20] = \<const0> ;
  assign m_axis_rx_tuser[19:18] = \^m_axis_rx_tuser [19:18];
  assign m_axis_rx_tuser[17] = \^m_axis_rx_tuser [18];
  assign m_axis_rx_tuser[16] = \<const0> ;
  assign m_axis_rx_tuser[15] = \<const0> ;
  assign m_axis_rx_tuser[14] = \^m_axis_rx_tuser [14];
  assign m_axis_rx_tuser[13] = \<const0> ;
  assign m_axis_rx_tuser[12] = \<const0> ;
  assign m_axis_rx_tuser[11] = \<const0> ;
  assign m_axis_rx_tuser[10] = \<const0> ;
  assign m_axis_rx_tuser[9] = \<const0> ;
  assign m_axis_rx_tuser[8:0] = \^m_axis_rx_tuser [8:0];
  assign pipe_debug[31] = \<const0> ;
  assign pipe_debug[30] = \<const0> ;
  assign pipe_debug[29] = \<const0> ;
  assign pipe_debug[28] = \<const0> ;
  assign pipe_debug[27] = \<const0> ;
  assign pipe_debug[26] = \<const0> ;
  assign pipe_debug[25] = \<const0> ;
  assign pipe_debug[24] = \<const0> ;
  assign pipe_debug[23] = \<const0> ;
  assign pipe_debug[22] = \<const0> ;
  assign pipe_debug[21] = \<const0> ;
  assign pipe_debug[20] = \<const0> ;
  assign pipe_debug[19] = \<const0> ;
  assign pipe_debug[18] = \<const0> ;
  assign pipe_debug[17] = \<const0> ;
  assign pipe_debug[16] = \<const0> ;
  assign pipe_debug[15] = \<const0> ;
  assign pipe_debug[14] = \<const0> ;
  assign pipe_debug[13] = \<const0> ;
  assign pipe_debug[12] = \<const0> ;
  assign pipe_debug[11] = \<const0> ;
  assign pipe_debug[10] = \<const0> ;
  assign pipe_debug[9] = \<const0> ;
  assign pipe_debug[8] = \<const0> ;
  assign pipe_debug[7] = \<const0> ;
  assign pipe_debug[6] = \<const0> ;
  assign pipe_debug[5] = \<const0> ;
  assign pipe_debug[4] = \<const0> ;
  assign pipe_debug[3] = \<const0> ;
  assign pipe_debug[2] = \<const0> ;
  assign pipe_debug[1] = \<const0> ;
  assign pipe_debug[0] = \<const0> ;
  assign pipe_debug_0[3] = \<const0> ;
  assign pipe_debug_0[2] = \<const0> ;
  assign pipe_debug_0[1] = \<const0> ;
  assign pipe_debug_0[0] = \<const0> ;
  assign pipe_debug_1[3] = \<const0> ;
  assign pipe_debug_1[2] = \<const0> ;
  assign pipe_debug_1[1] = \<const0> ;
  assign pipe_debug_1[0] = \<const0> ;
  assign pipe_debug_2[3] = \<const0> ;
  assign pipe_debug_2[2] = \<const0> ;
  assign pipe_debug_2[1] = \<const0> ;
  assign pipe_debug_2[0] = \<const0> ;
  assign pipe_debug_3[3] = \<const0> ;
  assign pipe_debug_3[2] = \<const0> ;
  assign pipe_debug_3[1] = \<const0> ;
  assign pipe_debug_3[0] = \<const0> ;
  assign pipe_debug_4[3] = \<const0> ;
  assign pipe_debug_4[2] = \<const0> ;
  assign pipe_debug_4[1] = \<const0> ;
  assign pipe_debug_4[0] = \<const0> ;
  assign pipe_debug_5[3] = \<const0> ;
  assign pipe_debug_5[2] = \<const0> ;
  assign pipe_debug_5[1] = \<const0> ;
  assign pipe_debug_5[0] = \<const0> ;
  assign pipe_debug_6[3] = \<const0> ;
  assign pipe_debug_6[2] = \<const0> ;
  assign pipe_debug_6[1] = \<const0> ;
  assign pipe_debug_6[0] = \<const0> ;
  assign pipe_debug_7[3] = \<const0> ;
  assign pipe_debug_7[2] = \<const0> ;
  assign pipe_debug_7[1] = \<const0> ;
  assign pipe_debug_7[0] = \<const0> ;
  assign pipe_debug_8[3] = \<const0> ;
  assign pipe_debug_8[2] = \<const0> ;
  assign pipe_debug_8[1] = \<const0> ;
  assign pipe_debug_8[0] = \<const0> ;
  assign pipe_debug_9[3] = \<const0> ;
  assign pipe_debug_9[2] = \<const0> ;
  assign pipe_debug_9[1] = \<const0> ;
  assign pipe_debug_9[0] = \<const0> ;
  assign pipe_dmonitorout[59] = \<const0> ;
  assign pipe_dmonitorout[58] = \<const0> ;
  assign pipe_dmonitorout[57] = \<const0> ;
  assign pipe_dmonitorout[56] = \<const0> ;
  assign pipe_dmonitorout[55] = \<const0> ;
  assign pipe_dmonitorout[54] = \<const0> ;
  assign pipe_dmonitorout[53] = \<const0> ;
  assign pipe_dmonitorout[52:45] = \^pipe_dmonitorout [52:45];
  assign pipe_dmonitorout[44] = \<const0> ;
  assign pipe_dmonitorout[43] = \<const0> ;
  assign pipe_dmonitorout[42] = \<const0> ;
  assign pipe_dmonitorout[41] = \<const0> ;
  assign pipe_dmonitorout[40] = \<const0> ;
  assign pipe_dmonitorout[39] = \<const0> ;
  assign pipe_dmonitorout[38] = \<const0> ;
  assign pipe_dmonitorout[37:30] = \^pipe_dmonitorout [37:30];
  assign pipe_dmonitorout[29] = \<const0> ;
  assign pipe_dmonitorout[28] = \<const0> ;
  assign pipe_dmonitorout[27] = \<const0> ;
  assign pipe_dmonitorout[26] = \<const0> ;
  assign pipe_dmonitorout[25] = \<const0> ;
  assign pipe_dmonitorout[24] = \<const0> ;
  assign pipe_dmonitorout[23] = \<const0> ;
  assign pipe_dmonitorout[22:15] = \^pipe_dmonitorout [22:15];
  assign pipe_dmonitorout[14] = \<const0> ;
  assign pipe_dmonitorout[13] = \<const0> ;
  assign pipe_dmonitorout[12] = \<const0> ;
  assign pipe_dmonitorout[11] = \<const0> ;
  assign pipe_dmonitorout[10] = \<const0> ;
  assign pipe_dmonitorout[9] = \<const0> ;
  assign pipe_dmonitorout[8] = \<const0> ;
  assign pipe_dmonitorout[7:0] = \^pipe_dmonitorout [7:0];
  assign pipe_drp_fsm[27] = \<const0> ;
  assign pipe_drp_fsm[26] = \<const0> ;
  assign pipe_drp_fsm[25] = \<const0> ;
  assign pipe_drp_fsm[24] = \<const0> ;
  assign pipe_drp_fsm[23] = \<const0> ;
  assign pipe_drp_fsm[22] = \<const0> ;
  assign pipe_drp_fsm[21] = \<const0> ;
  assign pipe_drp_fsm[20] = \<const0> ;
  assign pipe_drp_fsm[19] = \<const0> ;
  assign pipe_drp_fsm[18] = \<const0> ;
  assign pipe_drp_fsm[17] = \<const0> ;
  assign pipe_drp_fsm[16] = \<const0> ;
  assign pipe_drp_fsm[15] = \<const0> ;
  assign pipe_drp_fsm[14] = \<const0> ;
  assign pipe_drp_fsm[13] = \<const0> ;
  assign pipe_drp_fsm[12] = \<const0> ;
  assign pipe_drp_fsm[11:0] = \^pipe_drp_fsm [11:0];
  assign pipe_qpll_lock[0] = \^int_qplllock_out [0];
  assign pipe_qrst_fsm[11] = \<const0> ;
  assign pipe_qrst_fsm[10] = \<const0> ;
  assign pipe_qrst_fsm[9] = \<const0> ;
  assign pipe_qrst_fsm[8] = \<const0> ;
  assign pipe_qrst_fsm[7] = \<const0> ;
  assign pipe_qrst_fsm[6] = \<const0> ;
  assign pipe_qrst_fsm[5] = \<const0> ;
  assign pipe_qrst_fsm[4] = \<const0> ;
  assign pipe_qrst_fsm[3:0] = \^pipe_qrst_fsm [3:0];
  assign pipe_rxpmaresetdone[3] = \<const0> ;
  assign pipe_rxpmaresetdone[2] = \<const0> ;
  assign pipe_rxpmaresetdone[1] = \<const0> ;
  assign pipe_rxpmaresetdone[0] = \<const0> ;
  assign pipe_rxsyncdone[3] = \<const0> ;
  assign pipe_rxsyncdone[2] = \<const0> ;
  assign pipe_rxsyncdone[1] = \<const0> ;
  assign pipe_rxsyncdone[0] = \<const0> ;
  assign pipe_sync_fsm_rx[27] = \<const0> ;
  assign pipe_sync_fsm_rx[26] = \<const0> ;
  assign pipe_sync_fsm_rx[25] = \<const0> ;
  assign pipe_sync_fsm_rx[24] = \<const0> ;
  assign pipe_sync_fsm_rx[23] = \<const0> ;
  assign pipe_sync_fsm_rx[22] = \<const0> ;
  assign pipe_sync_fsm_rx[21] = \^pipe_sync_fsm_rx [21];
  assign pipe_sync_fsm_rx[20] = \<const0> ;
  assign pipe_sync_fsm_rx[19] = \<const0> ;
  assign pipe_sync_fsm_rx[18] = \<const0> ;
  assign pipe_sync_fsm_rx[17] = \<const0> ;
  assign pipe_sync_fsm_rx[16] = \<const0> ;
  assign pipe_sync_fsm_rx[15] = \<const0> ;
  assign pipe_sync_fsm_rx[14] = \^pipe_sync_fsm_rx [14];
  assign pipe_sync_fsm_rx[13] = \<const0> ;
  assign pipe_sync_fsm_rx[12] = \<const0> ;
  assign pipe_sync_fsm_rx[11] = \<const0> ;
  assign pipe_sync_fsm_rx[10] = \<const0> ;
  assign pipe_sync_fsm_rx[9] = \<const0> ;
  assign pipe_sync_fsm_rx[8] = \<const0> ;
  assign pipe_sync_fsm_rx[7] = \^pipe_sync_fsm_rx [7];
  assign pipe_sync_fsm_rx[6] = \<const0> ;
  assign pipe_sync_fsm_rx[5] = \<const0> ;
  assign pipe_sync_fsm_rx[4] = \<const0> ;
  assign pipe_sync_fsm_rx[3] = \<const0> ;
  assign pipe_sync_fsm_rx[2] = \<const0> ;
  assign pipe_sync_fsm_rx[1] = \<const0> ;
  assign pipe_sync_fsm_rx[0] = \^pipe_sync_fsm_rx [0];
  assign pipe_tx_0_sigs[24] = \<const0> ;
  assign pipe_tx_0_sigs[23] = \<const0> ;
  assign pipe_tx_0_sigs[22] = \<const0> ;
  assign pipe_tx_0_sigs[21] = \<const0> ;
  assign pipe_tx_0_sigs[20] = \<const0> ;
  assign pipe_tx_0_sigs[19] = \<const0> ;
  assign pipe_tx_0_sigs[18] = \<const0> ;
  assign pipe_tx_0_sigs[17] = \<const0> ;
  assign pipe_tx_0_sigs[16] = \<const0> ;
  assign pipe_tx_0_sigs[15] = \<const0> ;
  assign pipe_tx_0_sigs[14] = \<const0> ;
  assign pipe_tx_0_sigs[13] = \<const0> ;
  assign pipe_tx_0_sigs[12] = \<const0> ;
  assign pipe_tx_0_sigs[11] = \<const0> ;
  assign pipe_tx_0_sigs[10] = \<const0> ;
  assign pipe_tx_0_sigs[9] = \<const0> ;
  assign pipe_tx_0_sigs[8] = \<const0> ;
  assign pipe_tx_0_sigs[7] = \<const0> ;
  assign pipe_tx_0_sigs[6] = \<const0> ;
  assign pipe_tx_0_sigs[5] = \<const0> ;
  assign pipe_tx_0_sigs[4] = \<const0> ;
  assign pipe_tx_0_sigs[3] = \<const0> ;
  assign pipe_tx_0_sigs[2] = \<const0> ;
  assign pipe_tx_0_sigs[1] = \<const0> ;
  assign pipe_tx_0_sigs[0] = \<const0> ;
  assign pipe_tx_1_sigs[24] = \<const0> ;
  assign pipe_tx_1_sigs[23] = \<const0> ;
  assign pipe_tx_1_sigs[22] = \<const0> ;
  assign pipe_tx_1_sigs[21] = \<const0> ;
  assign pipe_tx_1_sigs[20] = \<const0> ;
  assign pipe_tx_1_sigs[19] = \<const0> ;
  assign pipe_tx_1_sigs[18] = \<const0> ;
  assign pipe_tx_1_sigs[17] = \<const0> ;
  assign pipe_tx_1_sigs[16] = \<const0> ;
  assign pipe_tx_1_sigs[15] = \<const0> ;
  assign pipe_tx_1_sigs[14] = \<const0> ;
  assign pipe_tx_1_sigs[13] = \<const0> ;
  assign pipe_tx_1_sigs[12] = \<const0> ;
  assign pipe_tx_1_sigs[11] = \<const0> ;
  assign pipe_tx_1_sigs[10] = \<const0> ;
  assign pipe_tx_1_sigs[9] = \<const0> ;
  assign pipe_tx_1_sigs[8] = \<const0> ;
  assign pipe_tx_1_sigs[7] = \<const0> ;
  assign pipe_tx_1_sigs[6] = \<const0> ;
  assign pipe_tx_1_sigs[5] = \<const0> ;
  assign pipe_tx_1_sigs[4] = \<const0> ;
  assign pipe_tx_1_sigs[3] = \<const0> ;
  assign pipe_tx_1_sigs[2] = \<const0> ;
  assign pipe_tx_1_sigs[1] = \<const0> ;
  assign pipe_tx_1_sigs[0] = \<const0> ;
  assign pipe_tx_2_sigs[24] = \<const0> ;
  assign pipe_tx_2_sigs[23] = \<const0> ;
  assign pipe_tx_2_sigs[22] = \<const0> ;
  assign pipe_tx_2_sigs[21] = \<const0> ;
  assign pipe_tx_2_sigs[20] = \<const0> ;
  assign pipe_tx_2_sigs[19] = \<const0> ;
  assign pipe_tx_2_sigs[18] = \<const0> ;
  assign pipe_tx_2_sigs[17] = \<const0> ;
  assign pipe_tx_2_sigs[16] = \<const0> ;
  assign pipe_tx_2_sigs[15] = \<const0> ;
  assign pipe_tx_2_sigs[14] = \<const0> ;
  assign pipe_tx_2_sigs[13] = \<const0> ;
  assign pipe_tx_2_sigs[12] = \<const0> ;
  assign pipe_tx_2_sigs[11] = \<const0> ;
  assign pipe_tx_2_sigs[10] = \<const0> ;
  assign pipe_tx_2_sigs[9] = \<const0> ;
  assign pipe_tx_2_sigs[8] = \<const0> ;
  assign pipe_tx_2_sigs[7] = \<const0> ;
  assign pipe_tx_2_sigs[6] = \<const0> ;
  assign pipe_tx_2_sigs[5] = \<const0> ;
  assign pipe_tx_2_sigs[4] = \<const0> ;
  assign pipe_tx_2_sigs[3] = \<const0> ;
  assign pipe_tx_2_sigs[2] = \<const0> ;
  assign pipe_tx_2_sigs[1] = \<const0> ;
  assign pipe_tx_2_sigs[0] = \<const0> ;
  assign pipe_tx_3_sigs[24] = \<const0> ;
  assign pipe_tx_3_sigs[23] = \<const0> ;
  assign pipe_tx_3_sigs[22] = \<const0> ;
  assign pipe_tx_3_sigs[21] = \<const0> ;
  assign pipe_tx_3_sigs[20] = \<const0> ;
  assign pipe_tx_3_sigs[19] = \<const0> ;
  assign pipe_tx_3_sigs[18] = \<const0> ;
  assign pipe_tx_3_sigs[17] = \<const0> ;
  assign pipe_tx_3_sigs[16] = \<const0> ;
  assign pipe_tx_3_sigs[15] = \<const0> ;
  assign pipe_tx_3_sigs[14] = \<const0> ;
  assign pipe_tx_3_sigs[13] = \<const0> ;
  assign pipe_tx_3_sigs[12] = \<const0> ;
  assign pipe_tx_3_sigs[11] = \<const0> ;
  assign pipe_tx_3_sigs[10] = \<const0> ;
  assign pipe_tx_3_sigs[9] = \<const0> ;
  assign pipe_tx_3_sigs[8] = \<const0> ;
  assign pipe_tx_3_sigs[7] = \<const0> ;
  assign pipe_tx_3_sigs[6] = \<const0> ;
  assign pipe_tx_3_sigs[5] = \<const0> ;
  assign pipe_tx_3_sigs[4] = \<const0> ;
  assign pipe_tx_3_sigs[3] = \<const0> ;
  assign pipe_tx_3_sigs[2] = \<const0> ;
  assign pipe_tx_3_sigs[1] = \<const0> ;
  assign pipe_tx_3_sigs[0] = \<const0> ;
  assign pipe_tx_4_sigs[24] = \<const0> ;
  assign pipe_tx_4_sigs[23] = \<const0> ;
  assign pipe_tx_4_sigs[22] = \<const0> ;
  assign pipe_tx_4_sigs[21] = \<const0> ;
  assign pipe_tx_4_sigs[20] = \<const0> ;
  assign pipe_tx_4_sigs[19] = \<const0> ;
  assign pipe_tx_4_sigs[18] = \<const0> ;
  assign pipe_tx_4_sigs[17] = \<const0> ;
  assign pipe_tx_4_sigs[16] = \<const0> ;
  assign pipe_tx_4_sigs[15] = \<const0> ;
  assign pipe_tx_4_sigs[14] = \<const0> ;
  assign pipe_tx_4_sigs[13] = \<const0> ;
  assign pipe_tx_4_sigs[12] = \<const0> ;
  assign pipe_tx_4_sigs[11] = \<const0> ;
  assign pipe_tx_4_sigs[10] = \<const0> ;
  assign pipe_tx_4_sigs[9] = \<const0> ;
  assign pipe_tx_4_sigs[8] = \<const0> ;
  assign pipe_tx_4_sigs[7] = \<const0> ;
  assign pipe_tx_4_sigs[6] = \<const0> ;
  assign pipe_tx_4_sigs[5] = \<const0> ;
  assign pipe_tx_4_sigs[4] = \<const0> ;
  assign pipe_tx_4_sigs[3] = \<const0> ;
  assign pipe_tx_4_sigs[2] = \<const0> ;
  assign pipe_tx_4_sigs[1] = \<const0> ;
  assign pipe_tx_4_sigs[0] = \<const0> ;
  assign pipe_tx_5_sigs[24] = \<const0> ;
  assign pipe_tx_5_sigs[23] = \<const0> ;
  assign pipe_tx_5_sigs[22] = \<const0> ;
  assign pipe_tx_5_sigs[21] = \<const0> ;
  assign pipe_tx_5_sigs[20] = \<const0> ;
  assign pipe_tx_5_sigs[19] = \<const0> ;
  assign pipe_tx_5_sigs[18] = \<const0> ;
  assign pipe_tx_5_sigs[17] = \<const0> ;
  assign pipe_tx_5_sigs[16] = \<const0> ;
  assign pipe_tx_5_sigs[15] = \<const0> ;
  assign pipe_tx_5_sigs[14] = \<const0> ;
  assign pipe_tx_5_sigs[13] = \<const0> ;
  assign pipe_tx_5_sigs[12] = \<const0> ;
  assign pipe_tx_5_sigs[11] = \<const0> ;
  assign pipe_tx_5_sigs[10] = \<const0> ;
  assign pipe_tx_5_sigs[9] = \<const0> ;
  assign pipe_tx_5_sigs[8] = \<const0> ;
  assign pipe_tx_5_sigs[7] = \<const0> ;
  assign pipe_tx_5_sigs[6] = \<const0> ;
  assign pipe_tx_5_sigs[5] = \<const0> ;
  assign pipe_tx_5_sigs[4] = \<const0> ;
  assign pipe_tx_5_sigs[3] = \<const0> ;
  assign pipe_tx_5_sigs[2] = \<const0> ;
  assign pipe_tx_5_sigs[1] = \<const0> ;
  assign pipe_tx_5_sigs[0] = \<const0> ;
  assign pipe_tx_6_sigs[24] = \<const0> ;
  assign pipe_tx_6_sigs[23] = \<const0> ;
  assign pipe_tx_6_sigs[22] = \<const0> ;
  assign pipe_tx_6_sigs[21] = \<const0> ;
  assign pipe_tx_6_sigs[20] = \<const0> ;
  assign pipe_tx_6_sigs[19] = \<const0> ;
  assign pipe_tx_6_sigs[18] = \<const0> ;
  assign pipe_tx_6_sigs[17] = \<const0> ;
  assign pipe_tx_6_sigs[16] = \<const0> ;
  assign pipe_tx_6_sigs[15] = \<const0> ;
  assign pipe_tx_6_sigs[14] = \<const0> ;
  assign pipe_tx_6_sigs[13] = \<const0> ;
  assign pipe_tx_6_sigs[12] = \<const0> ;
  assign pipe_tx_6_sigs[11] = \<const0> ;
  assign pipe_tx_6_sigs[10] = \<const0> ;
  assign pipe_tx_6_sigs[9] = \<const0> ;
  assign pipe_tx_6_sigs[8] = \<const0> ;
  assign pipe_tx_6_sigs[7] = \<const0> ;
  assign pipe_tx_6_sigs[6] = \<const0> ;
  assign pipe_tx_6_sigs[5] = \<const0> ;
  assign pipe_tx_6_sigs[4] = \<const0> ;
  assign pipe_tx_6_sigs[3] = \<const0> ;
  assign pipe_tx_6_sigs[2] = \<const0> ;
  assign pipe_tx_6_sigs[1] = \<const0> ;
  assign pipe_tx_6_sigs[0] = \<const0> ;
  assign pipe_tx_7_sigs[24] = \<const0> ;
  assign pipe_tx_7_sigs[23] = \<const0> ;
  assign pipe_tx_7_sigs[22] = \<const0> ;
  assign pipe_tx_7_sigs[21] = \<const0> ;
  assign pipe_tx_7_sigs[20] = \<const0> ;
  assign pipe_tx_7_sigs[19] = \<const0> ;
  assign pipe_tx_7_sigs[18] = \<const0> ;
  assign pipe_tx_7_sigs[17] = \<const0> ;
  assign pipe_tx_7_sigs[16] = \<const0> ;
  assign pipe_tx_7_sigs[15] = \<const0> ;
  assign pipe_tx_7_sigs[14] = \<const0> ;
  assign pipe_tx_7_sigs[13] = \<const0> ;
  assign pipe_tx_7_sigs[12] = \<const0> ;
  assign pipe_tx_7_sigs[11] = \<const0> ;
  assign pipe_tx_7_sigs[10] = \<const0> ;
  assign pipe_tx_7_sigs[9] = \<const0> ;
  assign pipe_tx_7_sigs[8] = \<const0> ;
  assign pipe_tx_7_sigs[7] = \<const0> ;
  assign pipe_tx_7_sigs[6] = \<const0> ;
  assign pipe_tx_7_sigs[5] = \<const0> ;
  assign pipe_tx_7_sigs[4] = \<const0> ;
  assign pipe_tx_7_sigs[3] = \<const0> ;
  assign pipe_tx_7_sigs[2] = \<const0> ;
  assign pipe_tx_7_sigs[1] = \<const0> ;
  assign pipe_tx_7_sigs[0] = \<const0> ;
  assign qpll_drp_clk = \<const0> ;
  assign qpll_drp_gen3 = \<const0> ;
  assign qpll_drp_ovrd = \<const0> ;
  assign qpll_drp_rst_n = \<const0> ;
  assign qpll_drp_start = \<const0> ;
  assign qpll_qplld = \<const0> ;
  assign qpll_qpllreset[1] = \<const0> ;
  assign qpll_qpllreset[0] = \<const0> ;
  assign user_clk_out = int_userclk1_out;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  pcie_7x_0_pcie_7x_0_core_top inst
       (.\FSM_sequential_fsm_reg[2] (\^pipe_qrst_fsm [0]),
        .INT_RXUSRCLK_OUT(int_oobclk_out),
        .INT_USERCLK1_OUT(int_userclk1_out),
        .PIPE_DRP_FSM(\^pipe_drp_fsm ),
        .PIPE_RATE_FSM(pipe_rate_fsm),
        .cfg_aer_ecrc_check_en(cfg_aer_ecrc_check_en),
        .cfg_aer_ecrc_gen_en(cfg_aer_ecrc_gen_en),
        .cfg_aer_interrupt_msgnum(cfg_aer_interrupt_msgnum),
        .cfg_aer_rooterr_corr_err_received(cfg_aer_rooterr_corr_err_received),
        .cfg_aer_rooterr_corr_err_reporting_en(cfg_aer_rooterr_corr_err_reporting_en),
        .cfg_aer_rooterr_fatal_err_received(cfg_aer_rooterr_fatal_err_received),
        .cfg_aer_rooterr_fatal_err_reporting_en(cfg_aer_rooterr_fatal_err_reporting_en),
        .cfg_aer_rooterr_non_fatal_err_received(cfg_aer_rooterr_non_fatal_err_received),
        .cfg_aer_rooterr_non_fatal_err_reporting_en(cfg_aer_rooterr_non_fatal_err_reporting_en),
        .cfg_bridge_serr_en(cfg_bridge_serr_en),
        .cfg_bus_number(cfg_bus_number),
        .cfg_command({\^cfg_command [10],\^cfg_command [8],\^cfg_command [2:0]}),
        .cfg_dcommand(\^cfg_dcommand ),
        .cfg_dcommand2(\^cfg_dcommand2 ),
        .cfg_device_number(cfg_device_number),
        .cfg_ds_bus_number(cfg_ds_bus_number),
        .cfg_ds_device_number(cfg_ds_device_number),
        .cfg_ds_function_number(cfg_ds_function_number),
        .cfg_dsn(cfg_dsn),
        .cfg_dstatus({\^cfg_dstatus [5],\^cfg_dstatus [3:0]}),
        .cfg_err_aer_headerlog(cfg_err_aer_headerlog),
        .cfg_err_aer_headerlog_set(cfg_err_aer_headerlog_set),
        .cfg_err_atomic_egress_blocked(cfg_err_atomic_egress_blocked),
        .cfg_err_cor(cfg_err_cor),
        .cfg_err_cpl_abort(cfg_err_cpl_abort),
        .cfg_err_cpl_rdy(cfg_err_cpl_rdy),
        .cfg_err_cpl_timeout(cfg_err_cpl_timeout),
        .cfg_err_cpl_unexpect(cfg_err_cpl_unexpect),
        .cfg_err_ecrc(cfg_err_ecrc),
        .cfg_err_internal_cor(cfg_err_internal_cor),
        .cfg_err_internal_uncor(cfg_err_internal_uncor),
        .cfg_err_locked(cfg_err_locked),
        .cfg_err_malformed(cfg_err_malformed),
        .cfg_err_mc_blocked(cfg_err_mc_blocked),
        .cfg_err_norecovery(cfg_err_norecovery),
        .cfg_err_poisoned(cfg_err_poisoned),
        .cfg_err_posted(cfg_err_posted),
        .cfg_err_tlp_cpl_header(cfg_err_tlp_cpl_header),
        .cfg_err_ur(cfg_err_ur),
        .cfg_function_number(cfg_function_number),
        .cfg_interrupt(cfg_interrupt),
        .cfg_interrupt_assert(cfg_interrupt_assert),
        .cfg_interrupt_di(cfg_interrupt_di),
        .cfg_interrupt_do(cfg_interrupt_do),
        .cfg_interrupt_mmenable(cfg_interrupt_mmenable),
        .cfg_interrupt_msienable(cfg_interrupt_msienable),
        .cfg_interrupt_msixenable(cfg_interrupt_msixenable),
        .cfg_interrupt_msixfm(cfg_interrupt_msixfm),
        .cfg_interrupt_rdy(cfg_interrupt_rdy),
        .cfg_interrupt_stat(cfg_interrupt_stat),
        .cfg_lcommand({\^cfg_lcommand [11:3],\^cfg_lcommand [1:0]}),
        .cfg_lstatus({\^cfg_lstatus [15:13],\^cfg_lstatus [11],\^cfg_lstatus [7:4],\^cfg_lstatus [1:0]}),
        .cfg_mgmt_byte_en(cfg_mgmt_byte_en),
        .cfg_mgmt_di(cfg_mgmt_di),
        .cfg_mgmt_do(cfg_mgmt_do),
        .cfg_mgmt_dwaddr(cfg_mgmt_dwaddr),
        .cfg_mgmt_rd_en(cfg_mgmt_rd_en),
        .cfg_mgmt_rd_wr_done(cfg_mgmt_rd_wr_done),
        .cfg_mgmt_wr_en(cfg_mgmt_wr_en),
        .cfg_mgmt_wr_readonly(cfg_mgmt_wr_readonly),
        .cfg_mgmt_wr_rw1c_as_rw(cfg_mgmt_wr_rw1c_as_rw),
        .cfg_msg_data(cfg_msg_data),
        .cfg_msg_received(cfg_msg_received),
        .cfg_msg_received_assert_int_a(cfg_msg_received_assert_int_a),
        .cfg_msg_received_assert_int_b(cfg_msg_received_assert_int_b),
        .cfg_msg_received_assert_int_c(cfg_msg_received_assert_int_c),
        .cfg_msg_received_assert_int_d(cfg_msg_received_assert_int_d),
        .cfg_msg_received_deassert_int_a(cfg_msg_received_deassert_int_a),
        .cfg_msg_received_deassert_int_b(cfg_msg_received_deassert_int_b),
        .cfg_msg_received_deassert_int_c(cfg_msg_received_deassert_int_c),
        .cfg_msg_received_deassert_int_d(cfg_msg_received_deassert_int_d),
        .cfg_msg_received_err_cor(cfg_msg_received_err_cor),
        .cfg_msg_received_err_fatal(cfg_msg_received_err_fatal),
        .cfg_msg_received_err_non_fatal(cfg_msg_received_err_non_fatal),
        .cfg_msg_received_pm_as_nak(cfg_msg_received_pm_as_nak),
        .cfg_msg_received_pm_pme(cfg_msg_received_pm_pme),
        .cfg_msg_received_pme_to_ack(cfg_msg_received_pme_to_ack),
        .cfg_msg_received_setslotpowerlimit(cfg_msg_received_setslotpowerlimit),
        .cfg_pcie_link_state(cfg_pcie_link_state),
        .cfg_pciecap_interrupt_msgnum(cfg_pciecap_interrupt_msgnum),
        .cfg_pm_force_state(cfg_pm_force_state),
        .cfg_pm_force_state_en(cfg_pm_force_state_en),
        .cfg_pm_halt_aspm_l0s(cfg_pm_halt_aspm_l0s),
        .cfg_pm_halt_aspm_l1(cfg_pm_halt_aspm_l1),
        .cfg_pm_wake(cfg_pm_wake),
        .cfg_pmcsr_pme_en(cfg_pmcsr_pme_en),
        .cfg_pmcsr_pme_status(cfg_pmcsr_pme_status),
        .cfg_pmcsr_powerstate(cfg_pmcsr_powerstate),
        .cfg_received_func_lvl_rst(cfg_received_func_lvl_rst),
        .cfg_root_control_pme_int_en(cfg_root_control_pme_int_en),
        .cfg_root_control_syserr_corr_err_en(cfg_root_control_syserr_corr_err_en),
        .cfg_root_control_syserr_fatal_err_en(cfg_root_control_syserr_fatal_err_en),
        .cfg_root_control_syserr_non_fatal_err_en(cfg_root_control_syserr_non_fatal_err_en),
        .cfg_slot_control_electromech_il_ctl_pulse(cfg_slot_control_electromech_il_ctl_pulse),
        .cfg_to_turnoff(cfg_to_turnoff),
        .cfg_trn_pending(cfg_trn_pending),
        .cfg_turnoff_ok(cfg_turnoff_ok),
        .cfg_vc_tcvc_map(cfg_vc_tcvc_map),
        .ext_ch_gt_drpaddr(ext_ch_gt_drpaddr),
        .ext_ch_gt_drpdi(ext_ch_gt_drpdi),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo),
        .ext_ch_gt_drpen(ext_ch_gt_drpen),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy),
        .ext_ch_gt_drpwe(ext_ch_gt_drpwe),
        .fc_cpld(fc_cpld),
        .fc_cplh(fc_cplh),
        .fc_npd(fc_npd),
        .fc_nph(fc_nph),
        .fc_pd(fc_pd),
        .fc_ph(fc_ph),
        .fc_sel(fc_sel),
        .gt_ch_drp_rdy(gt_ch_drp_rdy),
        .icap_clk(icap_clk),
        .icap_csib(icap_csib),
        .icap_i(icap_i),
        .icap_o(icap_o),
        .icap_rdwrb(icap_rdwrb),
        .int_dclk_out(int_dclk_out),
        .int_mmcm_lock_out(int_mmcm_lock_out),
        .int_pclk_sel_slave(int_pclk_sel_slave),
        .int_qplllock_out(\^int_qplllock_out ),
        .int_qplloutclk_out(\^int_qplloutclk_out ),
        .int_qplloutrefclk_out(\^int_qplloutrefclk_out ),
        .m_axis_rx_tdata(m_axis_rx_tdata),
        .m_axis_rx_tkeep(\^m_axis_rx_tkeep ),
        .m_axis_rx_tlast(m_axis_rx_tlast),
        .m_axis_rx_tready(m_axis_rx_tready),
        .m_axis_rx_tuser({\^m_axis_rx_tuser [21],\^m_axis_rx_tuser [19:18],\^m_axis_rx_tuser [14],\^m_axis_rx_tuser [8:0]}),
        .m_axis_rx_tvalid(m_axis_rx_tvalid),
        .out({pipe_rst_fsm[4],pipe_rst_idle}),
        .out0(pipe_sync_fsm_tx[11:6]),
        .pci_exp_rxn(pci_exp_rxn),
        .pci_exp_rxp(pci_exp_rxp),
        .pci_exp_txn(pci_exp_txn),
        .pci_exp_txp(pci_exp_txp),
        .pcie_drp_addr(pcie_drp_addr),
        .pcie_drp_clk(pcie_drp_clk),
        .pcie_drp_di(pcie_drp_di),
        .pcie_drp_do(pcie_drp_do),
        .pcie_drp_en(pcie_drp_en),
        .pcie_drp_rdy(pcie_drp_rdy),
        .pcie_drp_we(pcie_drp_we),
        .pipe_cpll_lock(pipe_cpll_lock),
        .pipe_dmonitorout({\^pipe_dmonitorout [52:45],\^pipe_dmonitorout [37:30],\^pipe_dmonitorout [22:15],\^pipe_dmonitorout [7:0]}),
        .pipe_eyescandataerror(pipe_eyescandataerror),
        .pipe_loopback(pipe_loopback),
        .pipe_mmcm_rst_n(pipe_mmcm_rst_n),
        .pipe_pclk_sel_out(pipe_pclk_sel_out),
        .pipe_qrst_fsm(\^pipe_qrst_fsm [3:1]),
        .pipe_qrst_idle(pipe_qrst_idle),
        .pipe_rate_idle(pipe_rate_idle),
        .pipe_rst_fsm(pipe_rst_fsm[3:0]),
        .pipe_rxbufstatus(pipe_rxbufstatus),
        .pipe_rxcommadet(pipe_rxcommadet),
        .pipe_rxdisperr(pipe_rxdisperr),
        .pipe_rxdlysresetdone(pipe_rxdlysresetdone),
        .pipe_rxnotintable(pipe_rxnotintable),
        .pipe_rxoutclk_out(pipe_rxoutclk_out),
        .pipe_rxphaligndone(pipe_rxphaligndone),
        .pipe_rxprbscntreset(pipe_rxprbscntreset),
        .pipe_rxprbserr(pipe_rxprbserr),
        .pipe_rxprbssel(pipe_rxprbssel),
        .pipe_rxstatus(pipe_rxstatus),
        .pipe_sync_fsm_rx({\^pipe_sync_fsm_rx [21],\^pipe_sync_fsm_rx [14],\^pipe_sync_fsm_rx [7],\^pipe_sync_fsm_rx [0]}),
        .pipe_txdlysresetdone(pipe_txdlysresetdone),
        .pipe_txinhibit(pipe_txinhibit),
        .pipe_txoutclk_out(pipe_txoutclk_out),
        .pipe_txphaligndone(pipe_txphaligndone),
        .pipe_txphinitdone(pipe_txphinitdone),
        .pipe_txprbsforceerr(pipe_txprbsforceerr),
        .pipe_txprbssel(pipe_txprbssel),
        .pl_directed_change_done(pl_directed_change_done),
        .pl_directed_link_auton(pl_directed_link_auton),
        .pl_directed_link_change(pl_directed_link_change),
        .pl_directed_link_speed(pl_directed_link_speed),
        .pl_directed_link_width(pl_directed_link_width),
        .pl_downstream_deemph_source(pl_downstream_deemph_source),
        .pl_initial_link_width(pl_initial_link_width),
        .pl_lane_reversal_mode(pl_lane_reversal_mode),
        .pl_link_gen2_cap(pl_link_gen2_cap),
        .pl_link_partner_gen2_supported(pl_link_partner_gen2_supported),
        .pl_link_upcfg_cap(pl_link_upcfg_cap),
        .pl_ltssm_state(pl_ltssm_state),
        .pl_phy_lnk_up(pl_phy_lnk_up),
        .pl_received_hot_rst(pl_received_hot_rst),
        .pl_rx_pm_state(pl_rx_pm_state),
        .pl_sel_lnk_rate(pl_sel_lnk_rate),
        .pl_sel_lnk_width(pl_sel_lnk_width),
        .pl_transmit_hot_rst(pl_transmit_hot_rst),
        .pl_tx_pm_state(pl_tx_pm_state),
        .pl_upstream_prefer_deemph(pl_upstream_prefer_deemph),
        .rate_gen3_reg1_reg(pipe_gen3_out),
        .rx_np_ok(rx_np_ok),
        .rx_np_req(rx_np_req),
        .s_axis_tx_tdata(s_axis_tx_tdata),
        .s_axis_tx_tkeep(s_axis_tx_tkeep[7]),
        .s_axis_tx_tlast(s_axis_tx_tlast),
        .s_axis_tx_tready(s_axis_tx_tready),
        .s_axis_tx_tuser(s_axis_tx_tuser),
        .s_axis_tx_tvalid(s_axis_tx_tvalid),
        .startup_cfgclk(startup_cfgclk),
        .startup_cfgmclk(startup_cfgmclk),
        .startup_clk(startup_clk),
        .startup_eos(startup_eos),
        .startup_gsr(startup_gsr),
        .startup_gts(startup_gts),
        .startup_keyclearb(startup_keyclearb),
        .startup_pack(startup_pack),
        .startup_preq(startup_preq),
        .startup_usrcclko(startup_usrcclko),
        .startup_usrcclkts(startup_usrcclkts),
        .startup_usrdoneo(startup_usrdoneo),
        .startup_usrdonets(startup_usrdonets),
        .sys_clk(sys_clk),
        .sys_rst_n(sys_rst_n),
        .tx_buf_av(tx_buf_av),
        .tx_cfg_gnt(tx_cfg_gnt),
        .tx_cfg_req(tx_cfg_req),
        .tx_err_drop(tx_err_drop),
        .\txsync_fsm.txdlyen_reg (pipe_sync_fsm_tx[5:0]),
        .\txsync_fsm.txsync_done_reg (pipe_sync_fsm_tx[17:12]),
        .\txsync_fsm.txsync_done_reg_0 (pipe_sync_fsm_tx[23:18]),
        .user_app_rdy(user_app_rdy),
        .user_lnk_up(user_lnk_up),
        .user_reset_out(user_reset_out));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_7x
   (user_reset_int_reg,
    dsc_detect,
    trn_reof,
    trn_rsof,
    trn_rsrc_dsc,
    tcfg_req_trig,
    trn_tcfg_req,
    tbuf_av_gap_thrtl_reg,
    trn_tbuf_av,
    tbuf_av_min_trig,
    tx_err_drop,
    tx_cfg_req,
    cfg_msg_received,
    cfg_to_turnoff,
    cfg_msg_received_pme_to,
    pcie_drp_rdy,
    E,
    rsrc_rdy_filtered,
    tx_buf_av,
    cfg_pcie_link_state,
    \cfg_pcie_link_state_d_reg[2] ,
    cfg_pmcsr_powerstate,
    in0,
    pl_ltssm_state,
    \ltssm_reg2_reg[5] ,
    cfg_msg_data,
    \cfg_bus_number_d_reg[7] ,
    pcie_drp_do,
    src_in,
    cfg_mgmt_rd_wr_done,
    cfg_err_aer_headerlog_set,
    cfg_err_cpl_rdy,
    cfg_interrupt_rdy,
    cfg_received_func_lvl_rst,
    trn_in_packet_reg,
    lnk_up_thrtl_reg,
    trn_tdst_rdy,
    ppm_L1_thrtl_reg,
    \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ,
    cfg_aer_ecrc_check_en,
    cfg_aer_ecrc_gen_en,
    cfg_aer_rooterr_corr_err_received,
    cfg_aer_rooterr_corr_err_reporting_en,
    cfg_aer_rooterr_fatal_err_received,
    cfg_aer_rooterr_fatal_err_reporting_en,
    cfg_aer_rooterr_non_fatal_err_received,
    cfg_aer_rooterr_non_fatal_err_reporting_en,
    cfg_bridge_serr_en,
    cfg_command,
    cfg_dcommand2,
    cfg_dcommand,
    cfg_dstatus,
    cfg_interrupt_msienable,
    cfg_interrupt_msixenable,
    cfg_interrupt_msixfm,
    cfg_lcommand,
    cfg_lstatus,
    cfg_msg_received_assert_int_a,
    cfg_msg_received_assert_int_b,
    cfg_msg_received_assert_int_c,
    cfg_msg_received_assert_int_d,
    cfg_msg_received_deassert_int_a,
    cfg_msg_received_deassert_int_b,
    cfg_msg_received_deassert_int_c,
    cfg_msg_received_deassert_int_d,
    cfg_msg_received_err_cor,
    cfg_msg_received_err_fatal,
    cfg_msg_received_err_non_fatal,
    cfg_msg_received_pm_as_nak,
    cfg_msg_received_pme_to_ack,
    cfg_msg_received_pm_pme,
    cfg_msg_received_setslotpowerlimit,
    cfg_pmcsr_pme_en,
    cfg_pmcsr_pme_status,
    cfg_root_control_pme_int_en,
    cfg_root_control_syserr_corr_err_en,
    cfg_root_control_syserr_fatal_err_en,
    cfg_root_control_syserr_non_fatal_err_en,
    cfg_slot_control_electromech_il_ctl_pulse,
    pipe_rx0_polarity,
    pipe_rx1_polarity,
    pipe_rx2_polarity,
    pipe_rx3_polarity,
    pipe_tx0_compliance,
    pipe_tx0_elec_idle,
    pipe_tx1_compliance,
    pipe_tx1_elec_idle,
    pipe_tx2_compliance,
    pipe_tx2_elec_idle,
    pipe_tx3_compliance,
    pipe_tx3_elec_idle,
    pipe_tx_deemph,
    pipe_tx_rate,
    pipe_tx_rcvr_det,
    pl_directed_change_done,
    pl_link_gen2_cap,
    pl_link_partner_gen2_supported,
    pl_link_upcfg_cap,
    pl_received_hot_rst,
    pl_sel_lnk_rate,
    trn_lnk_up,
    trn_recrc_err,
    trn_rerrfwd,
    fc_cpld,
    fc_npd,
    fc_pd,
    \trn_rd_prev_reg[31] ,
    pipe_tx0_data,
    pipe_tx1_data,
    pipe_tx2_data,
    pipe_tx3_data,
    pipe_tx0_char_is_k,
    pipe_tx0_powerdown,
    pipe_tx1_char_is_k,
    pipe_tx1_powerdown,
    pipe_tx2_char_is_k,
    pipe_tx2_powerdown,
    pipe_tx3_char_is_k,
    pipe_tx3_powerdown,
    pl_lane_reversal_mode,
    pl_rx_pm_state,
    pl_sel_lnk_width,
    \trn_rrem_prev_reg[0] ,
    cfg_interrupt_mmenable,
    pipe_tx_margin,
    pl_initial_link_width,
    pl_tx_pm_state,
    cfg_mgmt_do,
    cfg_vc_tcvc_map,
    cfg_interrupt_do,
    fc_cplh,
    fc_nph,
    fc_ph,
    trn_rbar_hit,
    bridge_reset_int,
    pl_phy_lnk_up_q,
    trn_rdst_rdy,
    trn_in_packet,
    trn_rsrc_dsc_d,
    reg_tcfg_gnt,
    user_app_rdy_gnt,
    pl_transmit_hot_rst,
    cfg_mgmt_wr_en,
    cfg_mgmt_rd_en,
    cfg_err_malformed,
    cfg_err_cor,
    cfg_err_ur,
    cfg_err_ecrc,
    cfg_err_cpl_timeout,
    cfg_err_cpl_abort,
    cfg_err_cpl_unexpect,
    cfg_err_poisoned,
    cfg_err_atomic_egress_blocked,
    cfg_err_mc_blocked,
    cfg_err_internal_uncor,
    cfg_err_internal_cor,
    cfg_interrupt,
    cfg_pm_halt_aspm_l0s,
    cfg_pm_halt_aspm_l1,
    cfg_pm_force_state_en,
    cfg_pm_wake,
    cfg_trn_pending,
    pcie_drp_en,
    pcie_drp_we,
    ltssm_reg2,
    rx_np_ok,
    rx_np_req,
    fc_sel,
    pl_directed_link_change,
    pl_upstream_prefer_deemph,
    cfg_ds_device_number,
    cfg_ds_function_number,
    cfg_ds_bus_number,
    cfg_dsn,
    pcie_drp_addr,
    pcie_drp_di,
    cfg_mgmt_wr_rw1c_as_rw,
    cfg_mgmt_wr_readonly,
    cfg_err_posted,
    cfg_err_locked,
    cfg_err_norecovery,
    cfg_interrupt_assert,
    cfg_interrupt_stat,
    lnk_up_thrtl,
    out,
    SR,
    ppm_L1_trig,
    ppm_L1_thrtl,
    reg_to_turnoff,
    user_clk,
    cfg_pm_turnoff_ok_n,
    pcie_drp_clk,
    CLK,
    pipe_rx0_chanisaligned,
    pipe_rx0_elec_idle,
    pipe_rx0_phy_status,
    pipe_rx0_valid,
    pipe_rx1_chanisaligned,
    pipe_rx1_elec_idle,
    pipe_rx1_phy_status,
    pipe_rx1_valid,
    pipe_rx2_chanisaligned,
    pipe_rx2_elec_idle,
    pipe_rx2_phy_status,
    pipe_rx2_valid,
    pipe_rx3_chanisaligned,
    pipe_rx3_elec_idle,
    pipe_rx3_phy_status,
    pipe_rx3_valid,
    pl_directed_link_auton,
    pl_directed_link_speed,
    pl_downstream_deemph_source,
    sys_rst_n,
    trn_tcfg_gnt,
    \throttle_ctl_pipeline.reg_tuser_reg[3] ,
    trn_teof,
    trn_tsof,
    trn_tsrc_rdy,
    cfg_err_aer_headerlog,
    trn_td,
    Q,
    \pipe_stages_1.pipe_rx_data_q_reg[15] ,
    \pipe_stages_1.pipe_rx_data_q_reg[15]_0 ,
    \pipe_stages_1.pipe_rx_data_q_reg[15]_1 ,
    cfg_pm_force_state,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 ,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 ,
    \pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_2 ,
    pl_directed_link_width,
    trn_trem,
    \pipe_stages_1.pipe_rx_status_q_reg[2] ,
    \pipe_stages_1.pipe_rx_status_q_reg[2]_0 ,
    \pipe_stages_1.pipe_rx_status_q_reg[2]_1 ,
    \pipe_stages_1.pipe_rx_status_q_reg[2]_2 ,
    cfg_mgmt_di,
    cfg_mgmt_byte_en_n,
    cfg_err_tlp_cpl_header,
    cfg_aer_interrupt_msgnum,
    cfg_pciecap_interrupt_msgnum,
    cfg_interrupt_di,
    cfg_mgmt_dwaddr);
  output user_reset_int_reg;
  output dsc_detect;
  output trn_reof;
  output trn_rsof;
  output trn_rsrc_dsc;
  output tcfg_req_trig;
  output trn_tcfg_req;
  output tbuf_av_gap_thrtl_reg;
  output [5:0]trn_tbuf_av;
  output tbuf_av_min_trig;
  output tx_err_drop;
  output tx_cfg_req;
  output cfg_msg_received;
  output cfg_to_turnoff;
  output cfg_msg_received_pme_to;
  output pcie_drp_rdy;
  output [0:0]E;
  output rsrc_rdy_filtered;
  output [5:0]tx_buf_av;
  output [2:0]cfg_pcie_link_state;
  output [2:0]\cfg_pcie_link_state_d_reg[2] ;
  output [1:0]cfg_pmcsr_powerstate;
  output in0;
  output [5:0]pl_ltssm_state;
  output [5:0]\ltssm_reg2_reg[5] ;
  output [15:0]cfg_msg_data;
  output [15:0]\cfg_bus_number_d_reg[7] ;
  output [15:0]pcie_drp_do;
  output src_in;
  output cfg_mgmt_rd_wr_done;
  output cfg_err_aer_headerlog_set;
  output cfg_err_cpl_rdy;
  output cfg_interrupt_rdy;
  output cfg_received_func_lvl_rst;
  output trn_in_packet_reg;
  output lnk_up_thrtl_reg;
  output trn_tdst_rdy;
  output ppm_L1_thrtl_reg;
  output \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ;
  output cfg_aer_ecrc_check_en;
  output cfg_aer_ecrc_gen_en;
  output cfg_aer_rooterr_corr_err_received;
  output cfg_aer_rooterr_corr_err_reporting_en;
  output cfg_aer_rooterr_fatal_err_received;
  output cfg_aer_rooterr_fatal_err_reporting_en;
  output cfg_aer_rooterr_non_fatal_err_received;
  output cfg_aer_rooterr_non_fatal_err_reporting_en;
  output cfg_bridge_serr_en;
  output [4:0]cfg_command;
  output [11:0]cfg_dcommand2;
  output [14:0]cfg_dcommand;
  output [3:0]cfg_dstatus;
  output cfg_interrupt_msienable;
  output cfg_interrupt_msixenable;
  output cfg_interrupt_msixfm;
  output [10:0]cfg_lcommand;
  output [9:0]cfg_lstatus;
  output cfg_msg_received_assert_int_a;
  output cfg_msg_received_assert_int_b;
  output cfg_msg_received_assert_int_c;
  output cfg_msg_received_assert_int_d;
  output cfg_msg_received_deassert_int_a;
  output cfg_msg_received_deassert_int_b;
  output cfg_msg_received_deassert_int_c;
  output cfg_msg_received_deassert_int_d;
  output cfg_msg_received_err_cor;
  output cfg_msg_received_err_fatal;
  output cfg_msg_received_err_non_fatal;
  output cfg_msg_received_pm_as_nak;
  output cfg_msg_received_pme_to_ack;
  output cfg_msg_received_pm_pme;
  output cfg_msg_received_setslotpowerlimit;
  output cfg_pmcsr_pme_en;
  output cfg_pmcsr_pme_status;
  output cfg_root_control_pme_int_en;
  output cfg_root_control_syserr_corr_err_en;
  output cfg_root_control_syserr_fatal_err_en;
  output cfg_root_control_syserr_non_fatal_err_en;
  output cfg_slot_control_electromech_il_ctl_pulse;
  output pipe_rx0_polarity;
  output pipe_rx1_polarity;
  output pipe_rx2_polarity;
  output pipe_rx3_polarity;
  output pipe_tx0_compliance;
  output pipe_tx0_elec_idle;
  output pipe_tx1_compliance;
  output pipe_tx1_elec_idle;
  output pipe_tx2_compliance;
  output pipe_tx2_elec_idle;
  output pipe_tx3_compliance;
  output pipe_tx3_elec_idle;
  output pipe_tx_deemph;
  output pipe_tx_rate;
  output pipe_tx_rcvr_det;
  output pl_directed_change_done;
  output pl_link_gen2_cap;
  output pl_link_partner_gen2_supported;
  output pl_link_upcfg_cap;
  output pl_received_hot_rst;
  output pl_sel_lnk_rate;
  output trn_lnk_up;
  output trn_recrc_err;
  output trn_rerrfwd;
  output [11:0]fc_cpld;
  output [11:0]fc_npd;
  output [11:0]fc_pd;
  output [63:0]\trn_rd_prev_reg[31] ;
  output [15:0]pipe_tx0_data;
  output [15:0]pipe_tx1_data;
  output [15:0]pipe_tx2_data;
  output [15:0]pipe_tx3_data;
  output [1:0]pipe_tx0_char_is_k;
  output [1:0]pipe_tx0_powerdown;
  output [1:0]pipe_tx1_char_is_k;
  output [1:0]pipe_tx1_powerdown;
  output [1:0]pipe_tx2_char_is_k;
  output [1:0]pipe_tx2_powerdown;
  output [1:0]pipe_tx3_char_is_k;
  output [1:0]pipe_tx3_powerdown;
  output [1:0]pl_lane_reversal_mode;
  output [1:0]pl_rx_pm_state;
  output [1:0]pl_sel_lnk_width;
  output [0:0]\trn_rrem_prev_reg[0] ;
  output [2:0]cfg_interrupt_mmenable;
  output [2:0]pipe_tx_margin;
  output [2:0]pl_initial_link_width;
  output [2:0]pl_tx_pm_state;
  output [31:0]cfg_mgmt_do;
  output [6:0]cfg_vc_tcvc_map;
  output [7:0]cfg_interrupt_do;
  output [7:0]fc_cplh;
  output [7:0]fc_nph;
  output [7:0]fc_ph;
  output [6:0]trn_rbar_hit;
  input bridge_reset_int;
  input pl_phy_lnk_up_q;
  input trn_rdst_rdy;
  input trn_in_packet;
  input trn_rsrc_dsc_d;
  input reg_tcfg_gnt;
  input user_app_rdy_gnt;
  input pl_transmit_hot_rst;
  input cfg_mgmt_wr_en;
  input cfg_mgmt_rd_en;
  input cfg_err_malformed;
  input cfg_err_cor;
  input cfg_err_ur;
  input cfg_err_ecrc;
  input cfg_err_cpl_timeout;
  input cfg_err_cpl_abort;
  input cfg_err_cpl_unexpect;
  input cfg_err_poisoned;
  input cfg_err_atomic_egress_blocked;
  input cfg_err_mc_blocked;
  input cfg_err_internal_uncor;
  input cfg_err_internal_cor;
  input cfg_interrupt;
  input cfg_pm_halt_aspm_l0s;
  input cfg_pm_halt_aspm_l1;
  input cfg_pm_force_state_en;
  input cfg_pm_wake;
  input cfg_trn_pending;
  input pcie_drp_en;
  input pcie_drp_we;
  input [5:0]ltssm_reg2;
  input rx_np_ok;
  input rx_np_req;
  input [2:0]fc_sel;
  input [1:0]pl_directed_link_change;
  input pl_upstream_prefer_deemph;
  input [4:0]cfg_ds_device_number;
  input [2:0]cfg_ds_function_number;
  input [7:0]cfg_ds_bus_number;
  input [63:0]cfg_dsn;
  input [8:0]pcie_drp_addr;
  input [15:0]pcie_drp_di;
  input cfg_mgmt_wr_rw1c_as_rw;
  input cfg_mgmt_wr_readonly;
  input cfg_err_posted;
  input cfg_err_locked;
  input cfg_err_norecovery;
  input cfg_interrupt_assert;
  input cfg_interrupt_stat;
  input lnk_up_thrtl;
  input out;
  input [0:0]SR;
  input ppm_L1_trig;
  input ppm_L1_thrtl;
  input reg_to_turnoff;
  input user_clk;
  input cfg_pm_turnoff_ok_n;
  input pcie_drp_clk;
  input CLK;
  input pipe_rx0_chanisaligned;
  input pipe_rx0_elec_idle;
  input pipe_rx0_phy_status;
  input pipe_rx0_valid;
  input pipe_rx1_chanisaligned;
  input pipe_rx1_elec_idle;
  input pipe_rx1_phy_status;
  input pipe_rx1_valid;
  input pipe_rx2_chanisaligned;
  input pipe_rx2_elec_idle;
  input pipe_rx2_phy_status;
  input pipe_rx2_valid;
  input pipe_rx3_chanisaligned;
  input pipe_rx3_elec_idle;
  input pipe_rx3_phy_status;
  input pipe_rx3_valid;
  input pl_directed_link_auton;
  input pl_directed_link_speed;
  input pl_downstream_deemph_source;
  input sys_rst_n;
  input trn_tcfg_gnt;
  input [3:0]\throttle_ctl_pipeline.reg_tuser_reg[3] ;
  input trn_teof;
  input trn_tsof;
  input trn_tsrc_rdy;
  input [127:0]cfg_err_aer_headerlog;
  input [63:0]trn_td;
  input [15:0]Q;
  input [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15] ;
  input [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_0 ;
  input [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_1 ;
  input [1:0]cfg_pm_force_state;
  input [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  input [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 ;
  input [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 ;
  input [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_2 ;
  input [1:0]pl_directed_link_width;
  input [0:0]trn_trem;
  input [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  input [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_0 ;
  input [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_1 ;
  input [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_2 ;
  input [31:0]cfg_mgmt_di;
  input [3:0]cfg_mgmt_byte_en_n;
  input [47:0]cfg_err_tlp_cpl_header;
  input [4:0]cfg_aer_interrupt_msgnum;
  input [4:0]cfg_pciecap_interrupt_msgnum;
  input [7:0]cfg_interrupt_di;
  input [9:0]cfg_mgmt_dwaddr;

  wire CLK;
  wire [0:0]E;
  wire \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ;
  wire [15:0]Q;
  wire [0:0]SR;
  wire bridge_reset_int;
  wire cfg_aer_ecrc_check_en;
  wire cfg_aer_ecrc_gen_en;
  wire [4:0]cfg_aer_interrupt_msgnum;
  wire cfg_aer_rooterr_corr_err_received;
  wire cfg_aer_rooterr_corr_err_reporting_en;
  wire cfg_aer_rooterr_fatal_err_received;
  wire cfg_aer_rooterr_fatal_err_reporting_en;
  wire cfg_aer_rooterr_non_fatal_err_received;
  wire cfg_aer_rooterr_non_fatal_err_reporting_en;
  wire cfg_bridge_serr_en;
  wire [15:0]\cfg_bus_number_d_reg[7] ;
  wire [4:0]cfg_command;
  wire [14:0]cfg_dcommand;
  wire [11:0]cfg_dcommand2;
  wire [7:0]cfg_ds_bus_number;
  wire [7:0]cfg_ds_bus_number_mux;
  wire [4:0]cfg_ds_device_number;
  wire [4:0]cfg_ds_device_number_mux;
  wire [2:0]cfg_ds_function_number;
  wire [2:0]cfg_ds_function_number_mux;
  wire [63:0]cfg_dsn;
  wire [63:0]cfg_dsn_mux;
  wire [3:0]cfg_dstatus;
  wire [127:0]cfg_err_aer_headerlog;
  wire cfg_err_aer_headerlog_set;
  wire cfg_err_aer_headerlog_set_n;
  wire cfg_err_atomic_egress_blocked;
  wire cfg_err_cor;
  wire cfg_err_cpl_abort;
  wire cfg_err_cpl_rdy;
  wire cfg_err_cpl_rdy_n;
  wire cfg_err_cpl_timeout;
  wire cfg_err_cpl_unexpect;
  wire cfg_err_ecrc;
  wire cfg_err_internal_cor;
  wire cfg_err_internal_uncor;
  wire cfg_err_locked;
  wire cfg_err_malformed;
  wire cfg_err_mc_blocked;
  wire cfg_err_norecovery;
  wire cfg_err_poisoned;
  wire cfg_err_posted;
  wire [47:0]cfg_err_tlp_cpl_header;
  wire cfg_err_ur;
  wire cfg_interrupt;
  wire cfg_interrupt_assert;
  wire [7:0]cfg_interrupt_di;
  wire [7:0]cfg_interrupt_do;
  wire [2:0]cfg_interrupt_mmenable;
  wire cfg_interrupt_msienable;
  wire cfg_interrupt_msixenable;
  wire cfg_interrupt_msixfm;
  wire cfg_interrupt_rdy;
  wire cfg_interrupt_rdy_n;
  wire cfg_interrupt_stat;
  wire [10:0]cfg_lcommand;
  wire [9:0]cfg_lstatus;
  wire [3:0]cfg_mgmt_byte_en_n;
  wire [31:0]cfg_mgmt_di;
  wire [31:0]cfg_mgmt_do;
  wire [9:0]cfg_mgmt_dwaddr;
  wire cfg_mgmt_rd_en;
  wire cfg_mgmt_rd_wr_done;
  wire cfg_mgmt_rd_wr_done_n;
  wire cfg_mgmt_wr_en;
  wire cfg_mgmt_wr_readonly;
  wire cfg_mgmt_wr_rw1c_as_rw;
  wire [15:0]cfg_msg_data;
  wire cfg_msg_received;
  wire cfg_msg_received_assert_int_a;
  wire cfg_msg_received_assert_int_b;
  wire cfg_msg_received_assert_int_c;
  wire cfg_msg_received_assert_int_d;
  wire cfg_msg_received_deassert_int_a;
  wire cfg_msg_received_deassert_int_b;
  wire cfg_msg_received_deassert_int_c;
  wire cfg_msg_received_deassert_int_d;
  wire cfg_msg_received_err_cor;
  wire cfg_msg_received_err_fatal;
  wire cfg_msg_received_err_non_fatal;
  wire cfg_msg_received_mux;
  wire cfg_msg_received_pm_as_nak;
  wire cfg_msg_received_pm_pme;
  wire cfg_msg_received_pme_to;
  wire cfg_msg_received_pme_to_ack;
  wire cfg_msg_received_setslotpowerlimit;
  wire [2:0]cfg_pcie_link_state;
  wire [2:0]\cfg_pcie_link_state_d_reg[2] ;
  wire [4:0]cfg_pciecap_interrupt_msgnum;
  wire [1:0]cfg_pm_force_state;
  wire cfg_pm_force_state_en;
  wire cfg_pm_halt_aspm_l0s;
  wire cfg_pm_halt_aspm_l1;
  wire cfg_pm_turnoff_ok_n;
  wire cfg_pm_wake;
  wire cfg_pmcsr_pme_en;
  wire cfg_pmcsr_pme_status;
  wire [1:0]cfg_pmcsr_powerstate;
  wire [1:0]cfg_pmcsr_powerstate_mux;
  wire cfg_received_func_lvl_rst;
  wire cfg_received_func_lvl_rst_n;
  wire cfg_root_control_pme_int_en;
  wire cfg_root_control_syserr_corr_err_en;
  wire cfg_root_control_syserr_fatal_err_en;
  wire cfg_root_control_syserr_non_fatal_err_en;
  wire cfg_slot_control_electromech_il_ctl_pulse;
  wire cfg_to_turnoff;
  wire cfg_trn_pending;
  wire [6:0]cfg_vc_tcvc_map;
  wire dsc_detect;
  wire [11:0]fc_cpld;
  wire [7:0]fc_cplh;
  wire [11:0]fc_npd;
  wire [7:0]fc_nph;
  wire [11:0]fc_pd;
  wire [7:0]fc_ph;
  wire [2:0]fc_sel;
  wire [2:0]fc_sel_mux;
  wire in0;
  wire lnk_up_thrtl;
  wire lnk_up_thrtl_reg;
  wire [5:0]ltssm_reg2;
  wire [5:0]\ltssm_reg2_reg[5] ;
  wire [12:0]mim_rx_raddr;
  wire [67:0]mim_rx_rdata;
  wire mim_rx_ren;
  wire [12:0]mim_rx_waddr;
  wire [67:0]mim_rx_wdata;
  wire mim_rx_wen;
  wire [12:0]mim_tx_raddr;
  wire [68:0]mim_tx_rdata;
  wire mim_tx_ren;
  wire [12:0]mim_tx_waddr;
  wire [68:0]mim_tx_wdata;
  wire mim_tx_wen;
  wire out;
  wire pcie_block_i_i_10_n_0;
  wire pcie_block_i_i_11_n_0;
  wire pcie_block_i_i_12_n_0;
  wire pcie_block_i_i_13_n_0;
  wire pcie_block_i_i_14_n_0;
  wire pcie_block_i_i_15_n_0;
  wire pcie_block_i_i_16_n_0;
  wire pcie_block_i_i_17_n_0;
  wire pcie_block_i_i_18_n_0;
  wire pcie_block_i_i_19_n_0;
  wire pcie_block_i_i_1_n_0;
  wire pcie_block_i_i_20_n_0;
  wire pcie_block_i_i_21_n_0;
  wire pcie_block_i_i_22_n_0;
  wire pcie_block_i_i_23_n_0;
  wire pcie_block_i_i_24_n_0;
  wire pcie_block_i_i_25_n_0;
  wire pcie_block_i_i_27_n_0;
  wire pcie_block_i_i_28_n_0;
  wire pcie_block_i_i_2_n_0;
  wire pcie_block_i_i_3_n_0;
  wire pcie_block_i_i_4_n_0;
  wire pcie_block_i_i_5_n_0;
  wire pcie_block_i_i_6_n_0;
  wire pcie_block_i_i_7_n_0;
  wire pcie_block_i_i_8_n_0;
  wire pcie_block_i_i_9_n_0;
  wire pcie_block_i_n_100;
  wire pcie_block_i_n_101;
  wire pcie_block_i_n_102;
  wire pcie_block_i_n_103;
  wire pcie_block_i_n_104;
  wire pcie_block_i_n_105;
  wire pcie_block_i_n_106;
  wire pcie_block_i_n_107;
  wire pcie_block_i_n_108;
  wire pcie_block_i_n_1097;
  wire pcie_block_i_n_1098;
  wire pcie_block_i_n_1099;
  wire pcie_block_i_n_1100;
  wire pcie_block_i_n_1101;
  wire pcie_block_i_n_1102;
  wire pcie_block_i_n_1103;
  wire pcie_block_i_n_1143;
  wire pcie_block_i_n_140;
  wire pcie_block_i_n_141;
  wire pcie_block_i_n_142;
  wire pcie_block_i_n_143;
  wire pcie_block_i_n_144;
  wire pcie_block_i_n_145;
  wire pcie_block_i_n_146;
  wire pcie_block_i_n_155;
  wire pcie_block_i_n_156;
  wire pcie_block_i_n_157;
  wire pcie_block_i_n_158;
  wire pcie_block_i_n_159;
  wire pcie_block_i_n_160;
  wire pcie_block_i_n_169;
  wire pcie_block_i_n_172;
  wire pcie_block_i_n_173;
  wire pcie_block_i_n_174;
  wire pcie_block_i_n_175;
  wire pcie_block_i_n_176;
  wire pcie_block_i_n_177;
  wire pcie_block_i_n_178;
  wire pcie_block_i_n_179;
  wire pcie_block_i_n_180;
  wire pcie_block_i_n_181;
  wire pcie_block_i_n_182;
  wire pcie_block_i_n_183;
  wire pcie_block_i_n_184;
  wire pcie_block_i_n_185;
  wire pcie_block_i_n_186;
  wire pcie_block_i_n_187;
  wire pcie_block_i_n_188;
  wire pcie_block_i_n_189;
  wire pcie_block_i_n_190;
  wire pcie_block_i_n_191;
  wire pcie_block_i_n_192;
  wire pcie_block_i_n_193;
  wire pcie_block_i_n_194;
  wire pcie_block_i_n_195;
  wire pcie_block_i_n_610;
  wire pcie_block_i_n_611;
  wire pcie_block_i_n_618;
  wire pcie_block_i_n_619;
  wire pcie_block_i_n_687;
  wire pcie_block_i_n_688;
  wire pcie_block_i_n_689;
  wire pcie_block_i_n_690;
  wire pcie_block_i_n_691;
  wire pcie_block_i_n_704;
  wire pcie_block_i_n_705;
  wire pcie_block_i_n_706;
  wire pcie_block_i_n_707;
  wire pcie_block_i_n_708;
  wire pcie_block_i_n_709;
  wire pcie_block_i_n_710;
  wire pcie_block_i_n_711;
  wire pcie_block_i_n_712;
  wire pcie_block_i_n_713;
  wire pcie_block_i_n_714;
  wire pcie_block_i_n_715;
  wire pcie_block_i_n_716;
  wire pcie_block_i_n_717;
  wire pcie_block_i_n_718;
  wire pcie_block_i_n_719;
  wire pcie_block_i_n_72;
  wire pcie_block_i_n_720;
  wire pcie_block_i_n_721;
  wire pcie_block_i_n_722;
  wire pcie_block_i_n_723;
  wire pcie_block_i_n_724;
  wire pcie_block_i_n_725;
  wire pcie_block_i_n_726;
  wire pcie_block_i_n_727;
  wire pcie_block_i_n_728;
  wire pcie_block_i_n_729;
  wire pcie_block_i_n_730;
  wire pcie_block_i_n_731;
  wire pcie_block_i_n_732;
  wire pcie_block_i_n_733;
  wire pcie_block_i_n_734;
  wire pcie_block_i_n_735;
  wire pcie_block_i_n_736;
  wire pcie_block_i_n_737;
  wire pcie_block_i_n_738;
  wire pcie_block_i_n_739;
  wire pcie_block_i_n_740;
  wire pcie_block_i_n_741;
  wire pcie_block_i_n_742;
  wire pcie_block_i_n_743;
  wire pcie_block_i_n_744;
  wire pcie_block_i_n_745;
  wire pcie_block_i_n_746;
  wire pcie_block_i_n_747;
  wire pcie_block_i_n_748;
  wire pcie_block_i_n_749;
  wire pcie_block_i_n_75;
  wire pcie_block_i_n_750;
  wire pcie_block_i_n_751;
  wire pcie_block_i_n_752;
  wire pcie_block_i_n_753;
  wire pcie_block_i_n_754;
  wire pcie_block_i_n_755;
  wire pcie_block_i_n_756;
  wire pcie_block_i_n_757;
  wire pcie_block_i_n_758;
  wire pcie_block_i_n_759;
  wire pcie_block_i_n_76;
  wire pcie_block_i_n_760;
  wire pcie_block_i_n_761;
  wire pcie_block_i_n_762;
  wire pcie_block_i_n_763;
  wire pcie_block_i_n_764;
  wire pcie_block_i_n_765;
  wire pcie_block_i_n_766;
  wire pcie_block_i_n_767;
  wire pcie_block_i_n_768;
  wire pcie_block_i_n_769;
  wire pcie_block_i_n_77;
  wire pcie_block_i_n_770;
  wire pcie_block_i_n_771;
  wire pcie_block_i_n_772;
  wire pcie_block_i_n_773;
  wire pcie_block_i_n_774;
  wire pcie_block_i_n_775;
  wire pcie_block_i_n_776;
  wire pcie_block_i_n_777;
  wire pcie_block_i_n_778;
  wire pcie_block_i_n_779;
  wire pcie_block_i_n_78;
  wire pcie_block_i_n_780;
  wire pcie_block_i_n_781;
  wire pcie_block_i_n_782;
  wire pcie_block_i_n_783;
  wire pcie_block_i_n_784;
  wire pcie_block_i_n_785;
  wire pcie_block_i_n_786;
  wire pcie_block_i_n_787;
  wire pcie_block_i_n_788;
  wire pcie_block_i_n_789;
  wire pcie_block_i_n_790;
  wire pcie_block_i_n_791;
  wire pcie_block_i_n_792;
  wire pcie_block_i_n_793;
  wire pcie_block_i_n_794;
  wire pcie_block_i_n_795;
  wire pcie_block_i_n_796;
  wire pcie_block_i_n_797;
  wire pcie_block_i_n_798;
  wire pcie_block_i_n_799;
  wire pcie_block_i_n_800;
  wire pcie_block_i_n_801;
  wire pcie_block_i_n_802;
  wire pcie_block_i_n_803;
  wire pcie_block_i_n_804;
  wire pcie_block_i_n_805;
  wire pcie_block_i_n_806;
  wire pcie_block_i_n_807;
  wire pcie_block_i_n_808;
  wire pcie_block_i_n_809;
  wire pcie_block_i_n_810;
  wire pcie_block_i_n_811;
  wire pcie_block_i_n_812;
  wire pcie_block_i_n_813;
  wire pcie_block_i_n_814;
  wire pcie_block_i_n_815;
  wire pcie_block_i_n_816;
  wire pcie_block_i_n_817;
  wire pcie_block_i_n_818;
  wire pcie_block_i_n_819;
  wire pcie_block_i_n_820;
  wire pcie_block_i_n_821;
  wire pcie_block_i_n_822;
  wire pcie_block_i_n_823;
  wire pcie_block_i_n_824;
  wire pcie_block_i_n_825;
  wire pcie_block_i_n_826;
  wire pcie_block_i_n_827;
  wire pcie_block_i_n_828;
  wire pcie_block_i_n_829;
  wire pcie_block_i_n_830;
  wire pcie_block_i_n_831;
  wire pcie_block_i_n_832;
  wire pcie_block_i_n_833;
  wire pcie_block_i_n_834;
  wire pcie_block_i_n_835;
  wire pcie_block_i_n_836;
  wire pcie_block_i_n_837;
  wire pcie_block_i_n_838;
  wire pcie_block_i_n_839;
  wire pcie_block_i_n_84;
  wire pcie_block_i_n_840;
  wire pcie_block_i_n_841;
  wire pcie_block_i_n_842;
  wire pcie_block_i_n_843;
  wire pcie_block_i_n_844;
  wire pcie_block_i_n_845;
  wire pcie_block_i_n_846;
  wire pcie_block_i_n_847;
  wire pcie_block_i_n_848;
  wire pcie_block_i_n_849;
  wire pcie_block_i_n_85;
  wire pcie_block_i_n_850;
  wire pcie_block_i_n_851;
  wire pcie_block_i_n_852;
  wire pcie_block_i_n_853;
  wire pcie_block_i_n_854;
  wire pcie_block_i_n_855;
  wire pcie_block_i_n_856;
  wire pcie_block_i_n_857;
  wire pcie_block_i_n_858;
  wire pcie_block_i_n_859;
  wire pcie_block_i_n_86;
  wire pcie_block_i_n_860;
  wire pcie_block_i_n_861;
  wire pcie_block_i_n_862;
  wire pcie_block_i_n_863;
  wire pcie_block_i_n_864;
  wire pcie_block_i_n_865;
  wire pcie_block_i_n_866;
  wire pcie_block_i_n_867;
  wire pcie_block_i_n_868;
  wire pcie_block_i_n_869;
  wire pcie_block_i_n_87;
  wire pcie_block_i_n_870;
  wire pcie_block_i_n_871;
  wire pcie_block_i_n_872;
  wire pcie_block_i_n_873;
  wire pcie_block_i_n_874;
  wire pcie_block_i_n_875;
  wire pcie_block_i_n_876;
  wire pcie_block_i_n_877;
  wire pcie_block_i_n_878;
  wire pcie_block_i_n_879;
  wire pcie_block_i_n_88;
  wire pcie_block_i_n_880;
  wire pcie_block_i_n_881;
  wire pcie_block_i_n_882;
  wire pcie_block_i_n_883;
  wire pcie_block_i_n_884;
  wire pcie_block_i_n_885;
  wire pcie_block_i_n_886;
  wire pcie_block_i_n_887;
  wire pcie_block_i_n_888;
  wire pcie_block_i_n_889;
  wire pcie_block_i_n_89;
  wire pcie_block_i_n_890;
  wire pcie_block_i_n_891;
  wire pcie_block_i_n_892;
  wire pcie_block_i_n_893;
  wire pcie_block_i_n_894;
  wire pcie_block_i_n_895;
  wire pcie_block_i_n_896;
  wire pcie_block_i_n_897;
  wire pcie_block_i_n_898;
  wire pcie_block_i_n_899;
  wire pcie_block_i_n_90;
  wire pcie_block_i_n_900;
  wire pcie_block_i_n_901;
  wire pcie_block_i_n_902;
  wire pcie_block_i_n_903;
  wire pcie_block_i_n_904;
  wire pcie_block_i_n_905;
  wire pcie_block_i_n_906;
  wire pcie_block_i_n_907;
  wire pcie_block_i_n_908;
  wire pcie_block_i_n_909;
  wire pcie_block_i_n_91;
  wire pcie_block_i_n_910;
  wire pcie_block_i_n_911;
  wire pcie_block_i_n_912;
  wire pcie_block_i_n_913;
  wire pcie_block_i_n_914;
  wire pcie_block_i_n_915;
  wire pcie_block_i_n_916;
  wire pcie_block_i_n_917;
  wire pcie_block_i_n_918;
  wire pcie_block_i_n_919;
  wire pcie_block_i_n_92;
  wire pcie_block_i_n_920;
  wire pcie_block_i_n_921;
  wire pcie_block_i_n_922;
  wire pcie_block_i_n_923;
  wire pcie_block_i_n_924;
  wire pcie_block_i_n_925;
  wire pcie_block_i_n_926;
  wire pcie_block_i_n_927;
  wire pcie_block_i_n_928;
  wire pcie_block_i_n_929;
  wire pcie_block_i_n_93;
  wire pcie_block_i_n_930;
  wire pcie_block_i_n_931;
  wire pcie_block_i_n_932;
  wire pcie_block_i_n_933;
  wire pcie_block_i_n_934;
  wire pcie_block_i_n_935;
  wire pcie_block_i_n_936;
  wire pcie_block_i_n_937;
  wire pcie_block_i_n_938;
  wire pcie_block_i_n_939;
  wire pcie_block_i_n_94;
  wire pcie_block_i_n_940;
  wire pcie_block_i_n_941;
  wire pcie_block_i_n_942;
  wire pcie_block_i_n_943;
  wire pcie_block_i_n_944;
  wire pcie_block_i_n_945;
  wire pcie_block_i_n_946;
  wire pcie_block_i_n_947;
  wire pcie_block_i_n_948;
  wire pcie_block_i_n_949;
  wire pcie_block_i_n_95;
  wire pcie_block_i_n_950;
  wire pcie_block_i_n_951;
  wire pcie_block_i_n_952;
  wire pcie_block_i_n_953;
  wire pcie_block_i_n_954;
  wire pcie_block_i_n_955;
  wire pcie_block_i_n_956;
  wire pcie_block_i_n_957;
  wire pcie_block_i_n_958;
  wire pcie_block_i_n_959;
  wire pcie_block_i_n_96;
  wire pcie_block_i_n_98;
  wire pcie_block_i_n_99;
  wire [8:0]pcie_drp_addr;
  wire [8:0]pcie_drp_addr_mux;
  wire pcie_drp_clk;
  wire [15:0]pcie_drp_di;
  wire [15:0]pcie_drp_di_mux;
  wire [15:0]pcie_drp_do;
  wire [15:0]pcie_drp_do_mux;
  wire pcie_drp_en;
  wire pcie_drp_en_mux;
  wire pcie_drp_rdy;
  wire pcie_drp_rdy_mux;
  wire pcie_drp_we;
  wire pcie_drp_we_mux;
  wire pipe_rx0_chanisaligned;
  wire pipe_rx0_elec_idle;
  wire pipe_rx0_phy_status;
  wire pipe_rx0_polarity;
  wire pipe_rx0_valid;
  wire pipe_rx1_chanisaligned;
  wire pipe_rx1_elec_idle;
  wire pipe_rx1_phy_status;
  wire pipe_rx1_polarity;
  wire pipe_rx1_valid;
  wire pipe_rx2_chanisaligned;
  wire pipe_rx2_elec_idle;
  wire pipe_rx2_phy_status;
  wire pipe_rx2_polarity;
  wire pipe_rx2_valid;
  wire pipe_rx3_chanisaligned;
  wire pipe_rx3_elec_idle;
  wire pipe_rx3_phy_status;
  wire pipe_rx3_polarity;
  wire pipe_rx3_valid;
  wire pipe_rx4_polarity;
  wire pipe_rx5_polarity;
  wire pipe_rx6_polarity;
  wire pipe_rx7_polarity;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 ;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 ;
  wire [1:0]\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_2 ;
  wire [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15] ;
  wire [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_0 ;
  wire [15:0]\pipe_stages_1.pipe_rx_data_q_reg[15]_1 ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2] ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_0 ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_1 ;
  wire [2:0]\pipe_stages_1.pipe_rx_status_q_reg[2]_2 ;
  wire [1:0]pipe_tx0_char_is_k;
  wire pipe_tx0_compliance;
  wire [15:0]pipe_tx0_data;
  wire pipe_tx0_elec_idle;
  wire [1:0]pipe_tx0_powerdown;
  wire [1:0]pipe_tx1_char_is_k;
  wire pipe_tx1_compliance;
  wire [15:0]pipe_tx1_data;
  wire pipe_tx1_elec_idle;
  wire [1:0]pipe_tx1_powerdown;
  wire [1:0]pipe_tx2_char_is_k;
  wire pipe_tx2_compliance;
  wire [15:0]pipe_tx2_data;
  wire pipe_tx2_elec_idle;
  wire [1:0]pipe_tx2_powerdown;
  wire [1:0]pipe_tx3_char_is_k;
  wire pipe_tx3_compliance;
  wire [15:0]pipe_tx3_data;
  wire pipe_tx3_elec_idle;
  wire [1:0]pipe_tx3_powerdown;
  wire [1:0]pipe_tx4_char_is_k;
  wire pipe_tx4_compliance;
  wire [15:0]pipe_tx4_data;
  wire pipe_tx4_elec_idle;
  wire [1:0]pipe_tx4_powerdown;
  wire [1:0]pipe_tx5_char_is_k;
  wire pipe_tx5_compliance;
  wire [15:0]pipe_tx5_data;
  wire pipe_tx5_elec_idle;
  wire [1:0]pipe_tx5_powerdown;
  wire [1:0]pipe_tx6_char_is_k;
  wire pipe_tx6_compliance;
  wire [15:0]pipe_tx6_data;
  wire pipe_tx6_elec_idle;
  wire [1:0]pipe_tx6_powerdown;
  wire [1:0]pipe_tx7_char_is_k;
  wire pipe_tx7_compliance;
  wire [15:0]pipe_tx7_data;
  wire pipe_tx7_elec_idle;
  wire [1:0]pipe_tx7_powerdown;
  wire pipe_tx_deemph;
  wire [2:0]pipe_tx_margin;
  wire pipe_tx_rate;
  wire pipe_tx_rcvr_det;
  wire pl_directed_change_done;
  wire pl_directed_link_auton;
  wire [1:0]pl_directed_link_change;
  wire [1:0]pl_directed_link_change_mux;
  wire pl_directed_link_speed;
  wire [1:0]pl_directed_link_width;
  wire pl_downstream_deemph_source;
  wire [2:0]pl_initial_link_width;
  wire [1:0]pl_lane_reversal_mode;
  wire pl_link_gen2_cap;
  wire pl_link_partner_gen2_supported;
  wire pl_link_upcfg_cap;
  wire [5:0]pl_ltssm_state;
  wire pl_phy_lnk_up_n;
  wire pl_phy_lnk_up_q;
  wire pl_received_hot_rst;
  wire [1:0]pl_rx_pm_state;
  wire pl_sel_lnk_rate;
  wire [1:0]pl_sel_lnk_width;
  wire pl_transmit_hot_rst;
  wire pl_transmit_hot_rst_mux;
  wire [2:0]pl_tx_pm_state;
  wire pl_upstream_prefer_deemph;
  wire pl_upstream_prefer_deemph_mux;
  wire ppm_L1_thrtl;
  wire ppm_L1_thrtl_reg;
  wire ppm_L1_trig;
  wire reg_tcfg_gnt;
  wire reg_to_turnoff;
  wire rsrc_rdy_filtered;
  wire rx_np_ok;
  wire rx_np_ok_mux;
  wire rx_np_req;
  wire rx_np_req_mux;
  wire src_in;
  wire store_ltssm_inferred_i_2_n_0;
  wire store_ltssm_inferred_i_3_n_0;
  wire sys_rst_n;
  wire tbuf_av_gap_thrtl_reg;
  wire tbuf_av_min_trig;
  wire tcfg_req_trig;
  wire [3:0]\throttle_ctl_pipeline.reg_tuser_reg[3] ;
  wire trn_in_packet;
  wire trn_in_packet_reg;
  wire trn_lnk_up;
  wire [6:0]trn_rbar_hit;
  wire [127:64]trn_rd;
  wire [63:0]\trn_rd_prev_reg[31] ;
  wire trn_rdst_rdy;
  wire trn_recrc_err;
  wire trn_reof;
  wire trn_rerrfwd;
  wire [1:1]trn_rrem;
  wire [0:0]\trn_rrem_prev_reg[0] ;
  wire trn_rsof;
  wire trn_rsrc_dsc;
  wire trn_rsrc_dsc_d;
  wire trn_rsrc_rdy;
  wire [5:0]trn_tbuf_av;
  wire trn_tcfg_gnt;
  wire trn_tcfg_req;
  wire [63:0]trn_td;
  wire trn_tdst_rdy;
  wire trn_teof;
  wire [0:0]trn_trem;
  wire trn_tsof;
  wire trn_tsrc_rdy;
  wire [5:0]tx_buf_av;
  wire tx_cfg_req;
  wire tx_err_drop;
  wire tx_err_drop_mux;
  wire user_app_rdy_gnt;
  wire user_clk;
  wire user_reset_int_reg;
  wire user_rst_n;
  wire [3:1]NLW_pcie_block_i_TRNTDSTRDY_UNCONNECTED;

  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_i_1 
       (.I0(cfg_msg_received_pme_to),
        .I1(reg_to_turnoff),
        .O(\L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg ));
  LUT1 #(
    .INIT(2'h1)) 
    \cfg_bus_number_d[7]_i_2 
       (.I0(cfg_msg_received_mux),
        .O(E));
  LUT1 #(
    .INIT(2'h1)) 
    cfg_err_aer_headerlog_set_INST_0
       (.I0(cfg_err_aer_headerlog_set_n),
        .O(cfg_err_aer_headerlog_set));
  LUT1 #(
    .INIT(2'h1)) 
    cfg_err_cpl_rdy_INST_0
       (.I0(cfg_err_cpl_rdy_n),
        .O(cfg_err_cpl_rdy));
  LUT1 #(
    .INIT(2'h1)) 
    cfg_interrupt_rdy_INST_0
       (.I0(cfg_interrupt_rdy_n),
        .O(cfg_interrupt_rdy));
  LUT1 #(
    .INIT(2'h1)) 
    cfg_mgmt_rd_wr_done_INST_0
       (.I0(cfg_mgmt_rd_wr_done_n),
        .O(cfg_mgmt_rd_wr_done));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [0]),
        .O(cfg_msg_data[0]));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[10]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [10]),
        .O(cfg_msg_data[10]));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[11]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [11]),
        .O(cfg_msg_data[11]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[12]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [12]),
        .O(cfg_msg_data[12]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[13]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [13]),
        .O(cfg_msg_data[13]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[14]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [14]),
        .O(cfg_msg_data[14]));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[15]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [15]),
        .O(cfg_msg_data[15]));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [1]),
        .O(cfg_msg_data[1]));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [2]),
        .O(cfg_msg_data[2]));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[3]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [3]),
        .O(cfg_msg_data[3]));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[4]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [4]),
        .O(cfg_msg_data[4]));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[5]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [5]),
        .O(cfg_msg_data[5]));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[6]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [6]),
        .O(cfg_msg_data[6]));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[7]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [7]),
        .O(cfg_msg_data[7]));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[8]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [8]),
        .O(cfg_msg_data[8]));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_msg_data[9]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_bus_number_d_reg[7] [9]),
        .O(cfg_msg_data[9]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT2 #(
    .INIT(4'h8)) 
    cfg_msg_received_INST_0
       (.I0(user_app_rdy_gnt),
        .I1(cfg_msg_received_mux),
        .O(cfg_msg_received));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_pcie_link_state[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_pcie_link_state_d_reg[2] [0]),
        .O(cfg_pcie_link_state[0]));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_pcie_link_state[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_pcie_link_state_d_reg[2] [1]),
        .O(cfg_pcie_link_state[1]));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_pcie_link_state[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\cfg_pcie_link_state_d_reg[2] [2]),
        .O(cfg_pcie_link_state[2]));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_pmcsr_powerstate[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(cfg_pmcsr_powerstate_mux[0]),
        .O(cfg_pmcsr_powerstate[0]));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_pmcsr_powerstate[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(cfg_pmcsr_powerstate_mux[1]),
        .O(cfg_pmcsr_powerstate[1]));
  LUT1 #(
    .INIT(2'h1)) 
    cfg_received_func_lvl_rst_INST_0
       (.I0(cfg_received_func_lvl_rst_n),
        .O(cfg_received_func_lvl_rst));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'h8)) 
    cfg_to_turnoff_INST_0
       (.I0(user_app_rdy_gnt),
        .I1(cfg_msg_received_pme_to),
        .O(cfg_to_turnoff));
  LUT4 #(
    .INIT(16'hFF4F)) 
    lnk_up_thrtl_i_1
       (.I0(trn_tdst_rdy),
        .I1(lnk_up_thrtl),
        .I2(out),
        .I3(SR),
        .O(lnk_up_thrtl_reg));
  LUT6 #(
    .INIT(64'h0000000027000000)) 
    m_axis_rx_tvalid_i_3
       (.I0(trn_reof),
        .I1(trn_rdst_rdy),
        .I2(trn_rsof),
        .I3(trn_rsrc_dsc),
        .I4(trn_in_packet),
        .I5(trn_rsrc_dsc_d),
        .O(dsc_detect));
  (* BOX_TYPE = "PRIMITIVE" *) 
  PCIE_2_1 #(
    .AER_BASE_PTR(12'h000),
    .AER_CAP_ECRC_CHECK_CAPABLE("FALSE"),
    .AER_CAP_ECRC_GEN_CAPABLE("FALSE"),
    .AER_CAP_ID(16'h0001),
    .AER_CAP_MULTIHEADER("FALSE"),
    .AER_CAP_NEXTPTR(12'h000),
    .AER_CAP_ON("FALSE"),
    .AER_CAP_OPTIONAL_ERR_SUPPORT(24'h000000),
    .AER_CAP_PERMIT_ROOTERR_UPDATE("FALSE"),
    .AER_CAP_VERSION(4'h1),
    .ALLOW_X8_GEN2("FALSE"),
    .BAR0(32'hFFF00000),
    .BAR1(32'hFFE00000),
    .BAR2(32'hFFE00000),
    .BAR3(32'hFFE00000),
    .BAR4(32'hFFE00000),
    .BAR5(32'hFFE00000),
    .CAPABILITIES_PTR(8'h40),
    .CARDBUS_CIS_POINTER(32'h00000000),
    .CFG_ECRC_ERR_CPLSTAT(0),
    .CLASS_CODE(24'h058000),
    .CMD_INTX_IMPLEMENTED("FALSE"),
    .CPL_TIMEOUT_DISABLE_SUPPORTED("FALSE"),
    .CPL_TIMEOUT_RANGES_SUPPORTED(4'h2),
    .CRM_MODULE_RSTS(7'h00),
    .DEV_CAP2_ARI_FORWARDING_SUPPORTED("FALSE"),
    .DEV_CAP2_ATOMICOP32_COMPLETER_SUPPORTED("FALSE"),
    .DEV_CAP2_ATOMICOP64_COMPLETER_SUPPORTED("FALSE"),
    .DEV_CAP2_ATOMICOP_ROUTING_SUPPORTED("FALSE"),
    .DEV_CAP2_CAS128_COMPLETER_SUPPORTED("FALSE"),
    .DEV_CAP2_ENDEND_TLP_PREFIX_SUPPORTED("FALSE"),
    .DEV_CAP2_EXTENDED_FMT_FIELD_SUPPORTED("FALSE"),
    .DEV_CAP2_LTR_MECHANISM_SUPPORTED("FALSE"),
    .DEV_CAP2_MAX_ENDEND_TLP_PREFIXES(2'h0),
    .DEV_CAP2_NO_RO_ENABLED_PRPR_PASSING("FALSE"),
    .DEV_CAP2_TPH_COMPLETER_SUPPORTED(2'h0),
    .DEV_CAP_ENABLE_SLOT_PWR_LIMIT_SCALE("TRUE"),
    .DEV_CAP_ENABLE_SLOT_PWR_LIMIT_VALUE("TRUE"),
    .DEV_CAP_ENDPOINT_L0S_LATENCY(0),
    .DEV_CAP_ENDPOINT_L1_LATENCY(7),
    .DEV_CAP_EXT_TAG_SUPPORTED("FALSE"),
    .DEV_CAP_FUNCTION_LEVEL_RESET_CAPABLE("FALSE"),
    .DEV_CAP_MAX_PAYLOAD_SUPPORTED(2),
    .DEV_CAP_PHANTOM_FUNCTIONS_SUPPORT(0),
    .DEV_CAP_ROLE_BASED_ERROR("TRUE"),
    .DEV_CAP_RSVD_14_12(0),
    .DEV_CAP_RSVD_17_16(0),
    .DEV_CAP_RSVD_31_29(0),
    .DEV_CONTROL_AUX_POWER_SUPPORTED("FALSE"),
    .DEV_CONTROL_EXT_TAG_DEFAULT("FALSE"),
    .DISABLE_ASPM_L1_TIMER("FALSE"),
    .DISABLE_BAR_FILTERING("FALSE"),
    .DISABLE_ERR_MSG("FALSE"),
    .DISABLE_ID_CHECK("FALSE"),
    .DISABLE_LANE_REVERSAL("TRUE"),
    .DISABLE_LOCKED_FILTER("FALSE"),
    .DISABLE_PPM_FILTER("FALSE"),
    .DISABLE_RX_POISONED_RESP("FALSE"),
    .DISABLE_RX_TC_FILTER("FALSE"),
    .DISABLE_SCRAMBLING("FALSE"),
    .DNSTREAM_LINK_NUM(8'h00),
    .DSN_BASE_PTR(12'h100),
    .DSN_CAP_ID(16'h0003),
    .DSN_CAP_NEXTPTR(12'h000),
    .DSN_CAP_ON("TRUE"),
    .DSN_CAP_VERSION(4'h1),
    .ENABLE_MSG_ROUTE(11'h000),
    .ENABLE_RX_TD_ECRC_TRIM("FALSE"),
    .ENDEND_TLP_PREFIX_FORWARDING_SUPPORTED("FALSE"),
    .ENTER_RVRY_EI_L0("TRUE"),
    .EXIT_LOOPBACK_ON_EI("TRUE"),
    .EXPANSION_ROM(32'h00000000),
    .EXT_CFG_CAP_PTR(6'h3F),
    .EXT_CFG_XP_CAP_PTR(10'h3FF),
    .HEADER_TYPE(8'h00),
    .INFER_EI(5'h00),
    .INTERRUPT_PIN(8'h00),
    .INTERRUPT_STAT_AUTO("TRUE"),
    .IS_SWITCH("FALSE"),
    .LAST_CONFIG_DWORD(10'h3FF),
    .LINK_CAP_ASPM_OPTIONALITY("FALSE"),
    .LINK_CAP_ASPM_SUPPORT(1),
    .LINK_CAP_CLOCK_POWER_MANAGEMENT("FALSE"),
    .LINK_CAP_DLL_LINK_ACTIVE_REPORTING_CAP("FALSE"),
    .LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN1(7),
    .LINK_CAP_L0S_EXIT_LATENCY_COMCLK_GEN2(7),
    .LINK_CAP_L0S_EXIT_LATENCY_GEN1(7),
    .LINK_CAP_L0S_EXIT_LATENCY_GEN2(7),
    .LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN1(7),
    .LINK_CAP_L1_EXIT_LATENCY_COMCLK_GEN2(7),
    .LINK_CAP_L1_EXIT_LATENCY_GEN1(7),
    .LINK_CAP_L1_EXIT_LATENCY_GEN2(7),
    .LINK_CAP_LINK_BANDWIDTH_NOTIFICATION_CAP("FALSE"),
    .LINK_CAP_MAX_LINK_SPEED(4'h2),
    .LINK_CAP_MAX_LINK_WIDTH(6'h04),
    .LINK_CAP_RSVD_23(0),
    .LINK_CAP_SURPRISE_DOWN_ERROR_CAPABLE("FALSE"),
    .LINK_CONTROL_RCB(0),
    .LINK_CTRL2_DEEMPHASIS("FALSE"),
    .LINK_CTRL2_HW_AUTONOMOUS_SPEED_DISABLE("FALSE"),
    .LINK_CTRL2_TARGET_LINK_SPEED(4'h2),
    .LINK_STATUS_SLOT_CLOCK_CONFIG("TRUE"),
    .LL_ACK_TIMEOUT(15'h0000),
    .LL_ACK_TIMEOUT_EN("FALSE"),
    .LL_ACK_TIMEOUT_FUNC(0),
    .LL_REPLAY_TIMEOUT(15'h0000),
    .LL_REPLAY_TIMEOUT_EN("FALSE"),
    .LL_REPLAY_TIMEOUT_FUNC(1),
    .LTSSM_MAX_LINK_WIDTH(6'h04),
    .MPS_FORCE("FALSE"),
    .MSIX_BASE_PTR(8'h9C),
    .MSIX_CAP_ID(8'h11),
    .MSIX_CAP_NEXTPTR(8'h00),
    .MSIX_CAP_ON("FALSE"),
    .MSIX_CAP_PBA_BIR(0),
    .MSIX_CAP_PBA_OFFSET(29'h00000000),
    .MSIX_CAP_TABLE_BIR(0),
    .MSIX_CAP_TABLE_OFFSET(29'h00000000),
    .MSIX_CAP_TABLE_SIZE(11'h000),
    .MSI_BASE_PTR(8'h48),
    .MSI_CAP_64_BIT_ADDR_CAPABLE("TRUE"),
    .MSI_CAP_ID(8'h05),
    .MSI_CAP_MULTIMSGCAP(0),
    .MSI_CAP_MULTIMSG_EXTENSION(0),
    .MSI_CAP_NEXTPTR(8'h60),
    .MSI_CAP_ON("TRUE"),
    .MSI_CAP_PER_VECTOR_MASKING_CAPABLE("FALSE"),
    .N_FTS_COMCLK_GEN1(255),
    .N_FTS_COMCLK_GEN2(255),
    .N_FTS_GEN1(255),
    .N_FTS_GEN2(255),
    .PCIE_BASE_PTR(8'h60),
    .PCIE_CAP_CAPABILITY_ID(8'h10),
    .PCIE_CAP_CAPABILITY_VERSION(4'h2),
    .PCIE_CAP_DEVICE_PORT_TYPE(4'h0),
    .PCIE_CAP_NEXTPTR(8'h00),
    .PCIE_CAP_ON("TRUE"),
    .PCIE_CAP_RSVD_15_14(0),
    .PCIE_CAP_SLOT_IMPLEMENTED("FALSE"),
    .PCIE_REVISION(2),
    .PL_AUTO_CONFIG(0),
    .PL_FAST_TRAIN("TRUE"),
    .PM_ASPML0S_TIMEOUT(15'h0000),
    .PM_ASPML0S_TIMEOUT_EN("FALSE"),
    .PM_ASPML0S_TIMEOUT_FUNC(0),
    .PM_ASPM_FASTEXIT("FALSE"),
    .PM_BASE_PTR(8'h40),
    .PM_CAP_AUXCURRENT(0),
    .PM_CAP_D1SUPPORT("FALSE"),
    .PM_CAP_D2SUPPORT("FALSE"),
    .PM_CAP_DSI("FALSE"),
    .PM_CAP_ID(8'h01),
    .PM_CAP_NEXTPTR(8'h48),
    .PM_CAP_ON("TRUE"),
    .PM_CAP_PMESUPPORT(5'h0F),
    .PM_CAP_PME_CLOCK("FALSE"),
    .PM_CAP_RSVD_04(0),
    .PM_CAP_VERSION(3),
    .PM_CSR_B2B3("FALSE"),
    .PM_CSR_BPCCEN("FALSE"),
    .PM_CSR_NOSOFTRST("TRUE"),
    .PM_DATA0(8'h00),
    .PM_DATA1(8'h00),
    .PM_DATA2(8'h00),
    .PM_DATA3(8'h00),
    .PM_DATA4(8'h00),
    .PM_DATA5(8'h00),
    .PM_DATA6(8'h00),
    .PM_DATA7(8'h00),
    .PM_DATA_SCALE0(2'h0),
    .PM_DATA_SCALE1(2'h0),
    .PM_DATA_SCALE2(2'h0),
    .PM_DATA_SCALE3(2'h0),
    .PM_DATA_SCALE4(2'h0),
    .PM_DATA_SCALE5(2'h0),
    .PM_DATA_SCALE6(2'h0),
    .PM_DATA_SCALE7(2'h0),
    .PM_MF("FALSE"),
    .RBAR_BASE_PTR(12'h000),
    .RBAR_CAP_CONTROL_ENCODEDBAR0(5'h00),
    .RBAR_CAP_CONTROL_ENCODEDBAR1(5'h00),
    .RBAR_CAP_CONTROL_ENCODEDBAR2(5'h00),
    .RBAR_CAP_CONTROL_ENCODEDBAR3(5'h00),
    .RBAR_CAP_CONTROL_ENCODEDBAR4(5'h00),
    .RBAR_CAP_CONTROL_ENCODEDBAR5(5'h00),
    .RBAR_CAP_ID(16'h0015),
    .RBAR_CAP_INDEX0(3'h0),
    .RBAR_CAP_INDEX1(3'h0),
    .RBAR_CAP_INDEX2(3'h0),
    .RBAR_CAP_INDEX3(3'h0),
    .RBAR_CAP_INDEX4(3'h0),
    .RBAR_CAP_INDEX5(3'h0),
    .RBAR_CAP_NEXTPTR(12'h000),
    .RBAR_CAP_ON("FALSE"),
    .RBAR_CAP_SUP0(32'h00000001),
    .RBAR_CAP_SUP1(32'h00000001),
    .RBAR_CAP_SUP2(32'h00000001),
    .RBAR_CAP_SUP3(32'h00000001),
    .RBAR_CAP_SUP4(32'h00000001),
    .RBAR_CAP_SUP5(32'h00000001),
    .RBAR_CAP_VERSION(4'h1),
    .RBAR_NUM(3'h0),
    .RECRC_CHK(0),
    .RECRC_CHK_TRIM("FALSE"),
    .ROOT_CAP_CRS_SW_VISIBILITY("FALSE"),
    .RP_AUTO_SPD(2'h1),
    .RP_AUTO_SPD_LOOPCNT(5'h1F),
    .SELECT_DLL_IF("FALSE"),
    .SIM_VERSION("1.0"),
    .SLOT_CAP_ATT_BUTTON_PRESENT("FALSE"),
    .SLOT_CAP_ATT_INDICATOR_PRESENT("FALSE"),
    .SLOT_CAP_ELEC_INTERLOCK_PRESENT("FALSE"),
    .SLOT_CAP_HOTPLUG_CAPABLE("FALSE"),
    .SLOT_CAP_HOTPLUG_SURPRISE("FALSE"),
    .SLOT_CAP_MRL_SENSOR_PRESENT("FALSE"),
    .SLOT_CAP_NO_CMD_COMPLETED_SUPPORT("FALSE"),
    .SLOT_CAP_PHYSICAL_SLOT_NUM(13'h0000),
    .SLOT_CAP_POWER_CONTROLLER_PRESENT("FALSE"),
    .SLOT_CAP_POWER_INDICATOR_PRESENT("FALSE"),
    .SLOT_CAP_SLOT_POWER_LIMIT_SCALE(0),
    .SLOT_CAP_SLOT_POWER_LIMIT_VALUE(8'h00),
    .SPARE_BIT0(0),
    .SPARE_BIT1(0),
    .SPARE_BIT2(0),
    .SPARE_BIT3(0),
    .SPARE_BIT4(0),
    .SPARE_BIT5(0),
    .SPARE_BIT6(0),
    .SPARE_BIT7(0),
    .SPARE_BIT8(0),
    .SPARE_BYTE0(8'h00),
    .SPARE_BYTE1(8'h00),
    .SPARE_BYTE2(8'h00),
    .SPARE_BYTE3(8'h00),
    .SPARE_WORD0(32'h00000000),
    .SPARE_WORD1(32'h00000000),
    .SPARE_WORD2(32'h00000000),
    .SPARE_WORD3(32'h00000000),
    .SSL_MESSAGE_AUTO("FALSE"),
    .TECRC_EP_INV("FALSE"),
    .TL_RBYPASS("FALSE"),
    .TL_RX_RAM_RADDR_LATENCY(0),
    .TL_RX_RAM_RDATA_LATENCY(2),
    .TL_RX_RAM_WRITE_LATENCY(0),
    .TL_TFC_DISABLE("FALSE"),
    .TL_TX_CHECKS_DISABLE("FALSE"),
    .TL_TX_RAM_RADDR_LATENCY(0),
    .TL_TX_RAM_RDATA_LATENCY(2),
    .TL_TX_RAM_WRITE_LATENCY(0),
    .TRN_DW("FALSE"),
    .TRN_NP_FC("TRUE"),
    .UPCONFIG_CAPABLE("TRUE"),
    .UPSTREAM_FACING("TRUE"),
    .UR_ATOMIC("FALSE"),
    .UR_CFG1("TRUE"),
    .UR_INV_REQ("TRUE"),
    .UR_PRS_RESPONSE("TRUE"),
    .USER_CLK2_DIV2("FALSE"),
    .USER_CLK_FREQ(3),
    .USE_RID_PINS("FALSE"),
    .VC0_CPL_INFINITE("TRUE"),
    .VC0_RX_RAM_LIMIT(13'h07FF),
    .VC0_TOTAL_CREDITS_CD(461),
    .VC0_TOTAL_CREDITS_CH(36),
    .VC0_TOTAL_CREDITS_NPD(24),
    .VC0_TOTAL_CREDITS_NPH(12),
    .VC0_TOTAL_CREDITS_PD(437),
    .VC0_TOTAL_CREDITS_PH(32),
    .VC0_TX_LASTPACKET(29),
    .VC_BASE_PTR(12'h000),
    .VC_CAP_ID(16'h0002),
    .VC_CAP_NEXTPTR(12'h000),
    .VC_CAP_ON("FALSE"),
    .VC_CAP_REJECT_SNOOP_TRANSACTIONS("FALSE"),
    .VC_CAP_VERSION(4'h1),
    .VSEC_BASE_PTR(12'h000),
    .VSEC_CAP_HDR_ID(16'h1234),
    .VSEC_CAP_HDR_LENGTH(12'h018),
    .VSEC_CAP_HDR_REVISION(4'h1),
    .VSEC_CAP_ID(16'h000B),
    .VSEC_CAP_IS_LINK_VISIBLE("TRUE"),
    .VSEC_CAP_NEXTPTR(12'h000),
    .VSEC_CAP_ON("FALSE"),
    .VSEC_CAP_VERSION(4'h1)) 
    pcie_block_i
       (.CFGAERECRCCHECKEN(cfg_aer_ecrc_check_en),
        .CFGAERECRCGENEN(cfg_aer_ecrc_gen_en),
        .CFGAERINTERRUPTMSGNUM(cfg_aer_interrupt_msgnum),
        .CFGAERROOTERRCORRERRRECEIVED(cfg_aer_rooterr_corr_err_received),
        .CFGAERROOTERRCORRERRREPORTINGEN(cfg_aer_rooterr_corr_err_reporting_en),
        .CFGAERROOTERRFATALERRRECEIVED(cfg_aer_rooterr_fatal_err_received),
        .CFGAERROOTERRFATALERRREPORTINGEN(cfg_aer_rooterr_fatal_err_reporting_en),
        .CFGAERROOTERRNONFATALERRRECEIVED(cfg_aer_rooterr_non_fatal_err_received),
        .CFGAERROOTERRNONFATALERRREPORTINGEN(cfg_aer_rooterr_non_fatal_err_reporting_en),
        .CFGBRIDGESERREN(cfg_bridge_serr_en),
        .CFGCOMMANDBUSMASTERENABLE(cfg_command[2]),
        .CFGCOMMANDINTERRUPTDISABLE(cfg_command[4]),
        .CFGCOMMANDIOENABLE(cfg_command[0]),
        .CFGCOMMANDMEMENABLE(cfg_command[1]),
        .CFGCOMMANDSERREN(cfg_command[3]),
        .CFGDEVCONTROL2ARIFORWARDEN(cfg_dcommand2[5]),
        .CFGDEVCONTROL2ATOMICEGRESSBLOCK(cfg_dcommand2[7]),
        .CFGDEVCONTROL2ATOMICREQUESTEREN(cfg_dcommand2[6]),
        .CFGDEVCONTROL2CPLTIMEOUTDIS(cfg_dcommand2[4]),
        .CFGDEVCONTROL2CPLTIMEOUTVAL(cfg_dcommand2[3:0]),
        .CFGDEVCONTROL2IDOCPLEN(cfg_dcommand2[9]),
        .CFGDEVCONTROL2IDOREQEN(cfg_dcommand2[8]),
        .CFGDEVCONTROL2LTREN(cfg_dcommand2[10]),
        .CFGDEVCONTROL2TLPPREFIXBLOCK(cfg_dcommand2[11]),
        .CFGDEVCONTROLAUXPOWEREN(cfg_dcommand[10]),
        .CFGDEVCONTROLCORRERRREPORTINGEN(cfg_dcommand[0]),
        .CFGDEVCONTROLENABLERO(cfg_dcommand[4]),
        .CFGDEVCONTROLEXTTAGEN(cfg_dcommand[8]),
        .CFGDEVCONTROLFATALERRREPORTINGEN(cfg_dcommand[2]),
        .CFGDEVCONTROLMAXPAYLOAD(cfg_dcommand[7:5]),
        .CFGDEVCONTROLMAXREADREQ(cfg_dcommand[14:12]),
        .CFGDEVCONTROLNONFATALREPORTINGEN(cfg_dcommand[1]),
        .CFGDEVCONTROLNOSNOOPEN(cfg_dcommand[11]),
        .CFGDEVCONTROLPHANTOMEN(cfg_dcommand[9]),
        .CFGDEVCONTROLURERRREPORTINGEN(cfg_dcommand[3]),
        .CFGDEVID({1'b0,1'b1,1'b1,1'b1,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b1,1'b0,1'b0}),
        .CFGDEVSTATUSCORRERRDETECTED(cfg_dstatus[0]),
        .CFGDEVSTATUSFATALERRDETECTED(cfg_dstatus[2]),
        .CFGDEVSTATUSNONFATALERRDETECTED(cfg_dstatus[1]),
        .CFGDEVSTATUSURDETECTED(cfg_dstatus[3]),
        .CFGDSBUSNUMBER(cfg_ds_bus_number_mux),
        .CFGDSDEVICENUMBER(cfg_ds_device_number_mux),
        .CFGDSFUNCTIONNUMBER(cfg_ds_function_number_mux),
        .CFGDSN(cfg_dsn_mux),
        .CFGERRACSN(1'b1),
        .CFGERRAERHEADERLOG(cfg_err_aer_headerlog),
        .CFGERRAERHEADERLOGSETN(cfg_err_aer_headerlog_set_n),
        .CFGERRATOMICEGRESSBLOCKEDN(pcie_block_i_i_1_n_0),
        .CFGERRCORN(pcie_block_i_i_2_n_0),
        .CFGERRCPLABORTN(pcie_block_i_i_3_n_0),
        .CFGERRCPLRDYN(cfg_err_cpl_rdy_n),
        .CFGERRCPLTIMEOUTN(pcie_block_i_i_4_n_0),
        .CFGERRCPLUNEXPECTN(pcie_block_i_i_5_n_0),
        .CFGERRECRCN(pcie_block_i_i_6_n_0),
        .CFGERRINTERNALCORN(pcie_block_i_i_7_n_0),
        .CFGERRINTERNALUNCORN(pcie_block_i_i_8_n_0),
        .CFGERRLOCKEDN(pcie_block_i_i_9_n_0),
        .CFGERRMALFORMEDN(pcie_block_i_i_10_n_0),
        .CFGERRMCBLOCKEDN(pcie_block_i_i_11_n_0),
        .CFGERRNORECOVERYN(pcie_block_i_i_12_n_0),
        .CFGERRPOISONEDN(pcie_block_i_i_13_n_0),
        .CFGERRPOSTEDN(pcie_block_i_i_14_n_0),
        .CFGERRTLPCPLHEADER(cfg_err_tlp_cpl_header),
        .CFGERRURN(pcie_block_i_i_15_n_0),
        .CFGFORCECOMMONCLOCKOFF(1'b0),
        .CFGFORCEEXTENDEDSYNCON(1'b0),
        .CFGFORCEMPS({1'b0,1'b0,1'b0}),
        .CFGINTERRUPTASSERTN(pcie_block_i_i_16_n_0),
        .CFGINTERRUPTDI(cfg_interrupt_di),
        .CFGINTERRUPTDO(cfg_interrupt_do),
        .CFGINTERRUPTMMENABLE(cfg_interrupt_mmenable),
        .CFGINTERRUPTMSIENABLE(cfg_interrupt_msienable),
        .CFGINTERRUPTMSIXENABLE(cfg_interrupt_msixenable),
        .CFGINTERRUPTMSIXFM(cfg_interrupt_msixfm),
        .CFGINTERRUPTN(pcie_block_i_i_17_n_0),
        .CFGINTERRUPTRDYN(cfg_interrupt_rdy_n),
        .CFGINTERRUPTSTATN(pcie_block_i_i_18_n_0),
        .CFGLINKCONTROLASPMCONTROL(cfg_lcommand[1:0]),
        .CFGLINKCONTROLAUTOBANDWIDTHINTEN(cfg_lcommand[10]),
        .CFGLINKCONTROLBANDWIDTHINTEN(cfg_lcommand[9]),
        .CFGLINKCONTROLCLOCKPMEN(cfg_lcommand[7]),
        .CFGLINKCONTROLCOMMONCLOCK(cfg_lcommand[5]),
        .CFGLINKCONTROLEXTENDEDSYNC(cfg_lcommand[6]),
        .CFGLINKCONTROLHWAUTOWIDTHDIS(cfg_lcommand[8]),
        .CFGLINKCONTROLLINKDISABLE(cfg_lcommand[3]),
        .CFGLINKCONTROLRCB(cfg_lcommand[2]),
        .CFGLINKCONTROLRETRAINLINK(cfg_lcommand[4]),
        .CFGLINKSTATUSAUTOBANDWIDTHSTATUS(cfg_lstatus[9]),
        .CFGLINKSTATUSBANDWIDTHSTATUS(cfg_lstatus[8]),
        .CFGLINKSTATUSCURRENTSPEED(cfg_lstatus[1:0]),
        .CFGLINKSTATUSDLLACTIVE(cfg_lstatus[7]),
        .CFGLINKSTATUSLINKTRAINING(cfg_lstatus[6]),
        .CFGLINKSTATUSNEGOTIATEDWIDTH(cfg_lstatus[5:2]),
        .CFGMGMTBYTEENN(cfg_mgmt_byte_en_n),
        .CFGMGMTDI(cfg_mgmt_di),
        .CFGMGMTDO(cfg_mgmt_do),
        .CFGMGMTDWADDR(cfg_mgmt_dwaddr),
        .CFGMGMTRDENN(pcie_block_i_i_19_n_0),
        .CFGMGMTRDWRDONEN(cfg_mgmt_rd_wr_done_n),
        .CFGMGMTWRENN(pcie_block_i_i_20_n_0),
        .CFGMGMTWRREADONLYN(pcie_block_i_i_21_n_0),
        .CFGMGMTWRRW1CASRWN(pcie_block_i_i_22_n_0),
        .CFGMSGDATA(\cfg_bus_number_d_reg[7] ),
        .CFGMSGRECEIVED(cfg_msg_received_mux),
        .CFGMSGRECEIVEDASSERTINTA(cfg_msg_received_assert_int_a),
        .CFGMSGRECEIVEDASSERTINTB(cfg_msg_received_assert_int_b),
        .CFGMSGRECEIVEDASSERTINTC(cfg_msg_received_assert_int_c),
        .CFGMSGRECEIVEDASSERTINTD(cfg_msg_received_assert_int_d),
        .CFGMSGRECEIVEDDEASSERTINTA(cfg_msg_received_deassert_int_a),
        .CFGMSGRECEIVEDDEASSERTINTB(cfg_msg_received_deassert_int_b),
        .CFGMSGRECEIVEDDEASSERTINTC(cfg_msg_received_deassert_int_c),
        .CFGMSGRECEIVEDDEASSERTINTD(cfg_msg_received_deassert_int_d),
        .CFGMSGRECEIVEDERRCOR(cfg_msg_received_err_cor),
        .CFGMSGRECEIVEDERRFATAL(cfg_msg_received_err_fatal),
        .CFGMSGRECEIVEDERRNONFATAL(cfg_msg_received_err_non_fatal),
        .CFGMSGRECEIVEDPMASNAK(cfg_msg_received_pm_as_nak),
        .CFGMSGRECEIVEDPMETO(cfg_msg_received_pme_to),
        .CFGMSGRECEIVEDPMETOACK(cfg_msg_received_pme_to_ack),
        .CFGMSGRECEIVEDPMPME(cfg_msg_received_pm_pme),
        .CFGMSGRECEIVEDSETSLOTPOWERLIMIT(cfg_msg_received_setslotpowerlimit),
        .CFGMSGRECEIVEDUNLOCK(pcie_block_i_n_72),
        .CFGPCIECAPINTERRUPTMSGNUM(cfg_pciecap_interrupt_msgnum),
        .CFGPCIELINKSTATE(\cfg_pcie_link_state_d_reg[2] ),
        .CFGPMCSRPMEEN(cfg_pmcsr_pme_en),
        .CFGPMCSRPMESTATUS(cfg_pmcsr_pme_status),
        .CFGPMCSRPOWERSTATE(cfg_pmcsr_powerstate_mux),
        .CFGPMFORCESTATE(cfg_pm_force_state),
        .CFGPMFORCESTATEENN(pcie_block_i_i_23_n_0),
        .CFGPMHALTASPML0SN(pcie_block_i_i_24_n_0),
        .CFGPMHALTASPML1N(pcie_block_i_i_25_n_0),
        .CFGPMRCVASREQL1N(pcie_block_i_n_75),
        .CFGPMRCVENTERL1N(pcie_block_i_n_76),
        .CFGPMRCVENTERL23N(pcie_block_i_n_77),
        .CFGPMRCVREQACKN(pcie_block_i_n_78),
        .CFGPMSENDPMETON(1'b1),
        .CFGPMTURNOFFOKN(cfg_pm_turnoff_ok_n),
        .CFGPMWAKEN(pcie_block_i_i_27_n_0),
        .CFGPORTNUMBER({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CFGREVID({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CFGROOTCONTROLPMEINTEN(cfg_root_control_pme_int_en),
        .CFGROOTCONTROLSYSERRCORRERREN(cfg_root_control_syserr_corr_err_en),
        .CFGROOTCONTROLSYSERRFATALERREN(cfg_root_control_syserr_fatal_err_en),
        .CFGROOTCONTROLSYSERRNONFATALERREN(cfg_root_control_syserr_non_fatal_err_en),
        .CFGSLOTCONTROLELECTROMECHILCTLPULSE(cfg_slot_control_electromech_il_ctl_pulse),
        .CFGSUBSYSID({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1,1'b1,1'b1}),
        .CFGSUBSYSVENDID({1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b1,1'b1,1'b1,1'b0,1'b1,1'b1,1'b1,1'b0}),
        .CFGTRANSACTION(pcie_block_i_n_84),
        .CFGTRANSACTIONADDR({pcie_block_i_n_1097,pcie_block_i_n_1098,pcie_block_i_n_1099,pcie_block_i_n_1100,pcie_block_i_n_1101,pcie_block_i_n_1102,pcie_block_i_n_1103}),
        .CFGTRANSACTIONTYPE(pcie_block_i_n_85),
        .CFGTRNPENDINGN(pcie_block_i_i_28_n_0),
        .CFGVCTCVCMAP(cfg_vc_tcvc_map),
        .CFGVENDID({1'b0,1'b0,1'b0,1'b1,1'b0,1'b0,1'b0,1'b0,1'b1,1'b1,1'b1,1'b0,1'b1,1'b1,1'b1,1'b0}),
        .CMRSTN(1'b1),
        .CMSTICKYRSTN(1'b1),
        .DBGMODE({1'b0,1'b0}),
        .DBGSCLRA(pcie_block_i_n_86),
        .DBGSCLRB(pcie_block_i_n_87),
        .DBGSCLRC(pcie_block_i_n_88),
        .DBGSCLRD(pcie_block_i_n_89),
        .DBGSCLRE(pcie_block_i_n_90),
        .DBGSCLRF(pcie_block_i_n_91),
        .DBGSCLRG(pcie_block_i_n_92),
        .DBGSCLRH(pcie_block_i_n_93),
        .DBGSCLRI(pcie_block_i_n_94),
        .DBGSCLRJ(pcie_block_i_n_95),
        .DBGSCLRK(pcie_block_i_n_96),
        .DBGSUBMODE(1'b0),
        .DBGVECA({pcie_block_i_n_704,pcie_block_i_n_705,pcie_block_i_n_706,pcie_block_i_n_707,pcie_block_i_n_708,pcie_block_i_n_709,pcie_block_i_n_710,pcie_block_i_n_711,pcie_block_i_n_712,pcie_block_i_n_713,pcie_block_i_n_714,pcie_block_i_n_715,pcie_block_i_n_716,pcie_block_i_n_717,pcie_block_i_n_718,pcie_block_i_n_719,pcie_block_i_n_720,pcie_block_i_n_721,pcie_block_i_n_722,pcie_block_i_n_723,pcie_block_i_n_724,pcie_block_i_n_725,pcie_block_i_n_726,pcie_block_i_n_727,pcie_block_i_n_728,pcie_block_i_n_729,pcie_block_i_n_730,pcie_block_i_n_731,pcie_block_i_n_732,pcie_block_i_n_733,pcie_block_i_n_734,pcie_block_i_n_735,pcie_block_i_n_736,pcie_block_i_n_737,pcie_block_i_n_738,pcie_block_i_n_739,pcie_block_i_n_740,pcie_block_i_n_741,pcie_block_i_n_742,pcie_block_i_n_743,pcie_block_i_n_744,pcie_block_i_n_745,pcie_block_i_n_746,pcie_block_i_n_747,pcie_block_i_n_748,pcie_block_i_n_749,pcie_block_i_n_750,pcie_block_i_n_751,pcie_block_i_n_752,pcie_block_i_n_753,pcie_block_i_n_754,pcie_block_i_n_755,pcie_block_i_n_756,pcie_block_i_n_757,pcie_block_i_n_758,pcie_block_i_n_759,pcie_block_i_n_760,pcie_block_i_n_761,pcie_block_i_n_762,pcie_block_i_n_763,pcie_block_i_n_764,pcie_block_i_n_765,pcie_block_i_n_766,pcie_block_i_n_767}),
        .DBGVECB({pcie_block_i_n_768,pcie_block_i_n_769,pcie_block_i_n_770,pcie_block_i_n_771,pcie_block_i_n_772,pcie_block_i_n_773,pcie_block_i_n_774,pcie_block_i_n_775,pcie_block_i_n_776,pcie_block_i_n_777,pcie_block_i_n_778,pcie_block_i_n_779,pcie_block_i_n_780,pcie_block_i_n_781,pcie_block_i_n_782,pcie_block_i_n_783,pcie_block_i_n_784,pcie_block_i_n_785,pcie_block_i_n_786,pcie_block_i_n_787,pcie_block_i_n_788,pcie_block_i_n_789,pcie_block_i_n_790,pcie_block_i_n_791,pcie_block_i_n_792,pcie_block_i_n_793,pcie_block_i_n_794,pcie_block_i_n_795,pcie_block_i_n_796,pcie_block_i_n_797,pcie_block_i_n_798,pcie_block_i_n_799,pcie_block_i_n_800,pcie_block_i_n_801,pcie_block_i_n_802,pcie_block_i_n_803,pcie_block_i_n_804,pcie_block_i_n_805,pcie_block_i_n_806,pcie_block_i_n_807,pcie_block_i_n_808,pcie_block_i_n_809,pcie_block_i_n_810,pcie_block_i_n_811,pcie_block_i_n_812,pcie_block_i_n_813,pcie_block_i_n_814,pcie_block_i_n_815,pcie_block_i_n_816,pcie_block_i_n_817,pcie_block_i_n_818,pcie_block_i_n_819,pcie_block_i_n_820,pcie_block_i_n_821,pcie_block_i_n_822,pcie_block_i_n_823,pcie_block_i_n_824,pcie_block_i_n_825,pcie_block_i_n_826,pcie_block_i_n_827,pcie_block_i_n_828,pcie_block_i_n_829,pcie_block_i_n_830,pcie_block_i_n_831}),
        .DBGVECC({pcie_block_i_n_172,pcie_block_i_n_173,pcie_block_i_n_174,pcie_block_i_n_175,pcie_block_i_n_176,pcie_block_i_n_177,pcie_block_i_n_178,pcie_block_i_n_179,pcie_block_i_n_180,pcie_block_i_n_181,pcie_block_i_n_182,pcie_block_i_n_183}),
        .DLRSTN(1'b1),
        .DRPADDR(pcie_drp_addr_mux),
        .DRPCLK(pcie_drp_clk),
        .DRPDI(pcie_drp_di_mux),
        .DRPDO(pcie_drp_do_mux),
        .DRPEN(pcie_drp_en_mux),
        .DRPRDY(pcie_drp_rdy_mux),
        .DRPWE(pcie_drp_we_mux),
        .FUNCLVLRSTN(1'b1),
        .LL2BADDLLPERR(pcie_block_i_n_98),
        .LL2BADTLPERR(pcie_block_i_n_99),
        .LL2LINKSTATUS({pcie_block_i_n_687,pcie_block_i_n_688,pcie_block_i_n_689,pcie_block_i_n_690,pcie_block_i_n_691}),
        .LL2PROTOCOLERR(pcie_block_i_n_100),
        .LL2RECEIVERERR(pcie_block_i_n_101),
        .LL2REPLAYROERR(pcie_block_i_n_102),
        .LL2REPLAYTOERR(pcie_block_i_n_103),
        .LL2SENDASREQL1(1'b0),
        .LL2SENDENTERL1(1'b0),
        .LL2SENDENTERL23(1'b0),
        .LL2SENDPMACK(1'b0),
        .LL2SUSPENDNOW(1'b0),
        .LL2SUSPENDOK(pcie_block_i_n_104),
        .LL2TFCINIT1SEQ(pcie_block_i_n_105),
        .LL2TFCINIT2SEQ(pcie_block_i_n_106),
        .LL2TLPRCV(1'b0),
        .LL2TXIDLE(pcie_block_i_n_107),
        .LNKCLKEN(pcie_block_i_n_108),
        .MIMRXRADDR(mim_rx_raddr),
        .MIMRXRDATA(mim_rx_rdata),
        .MIMRXREN(mim_rx_ren),
        .MIMRXWADDR(mim_rx_waddr),
        .MIMRXWDATA(mim_rx_wdata),
        .MIMRXWEN(mim_rx_wen),
        .MIMTXRADDR(mim_tx_raddr),
        .MIMTXRDATA(mim_tx_rdata),
        .MIMTXREN(mim_tx_ren),
        .MIMTXWADDR(mim_tx_waddr),
        .MIMTXWDATA(mim_tx_wdata),
        .MIMTXWEN(mim_tx_wen),
        .PIPECLK(CLK),
        .PIPERX0CHANISALIGNED(pipe_rx0_chanisaligned),
        .PIPERX0CHARISK(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] ),
        .PIPERX0DATA(Q),
        .PIPERX0ELECIDLE(pipe_rx0_elec_idle),
        .PIPERX0PHYSTATUS(pipe_rx0_phy_status),
        .PIPERX0POLARITY(pipe_rx0_polarity),
        .PIPERX0STATUS(\pipe_stages_1.pipe_rx_status_q_reg[2] ),
        .PIPERX0VALID(pipe_rx0_valid),
        .PIPERX1CHANISALIGNED(pipe_rx1_chanisaligned),
        .PIPERX1CHARISK(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 ),
        .PIPERX1DATA(\pipe_stages_1.pipe_rx_data_q_reg[15] ),
        .PIPERX1ELECIDLE(pipe_rx1_elec_idle),
        .PIPERX1PHYSTATUS(pipe_rx1_phy_status),
        .PIPERX1POLARITY(pipe_rx1_polarity),
        .PIPERX1STATUS(\pipe_stages_1.pipe_rx_status_q_reg[2]_0 ),
        .PIPERX1VALID(pipe_rx1_valid),
        .PIPERX2CHANISALIGNED(pipe_rx2_chanisaligned),
        .PIPERX2CHARISK(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 ),
        .PIPERX2DATA(\pipe_stages_1.pipe_rx_data_q_reg[15]_0 ),
        .PIPERX2ELECIDLE(pipe_rx2_elec_idle),
        .PIPERX2PHYSTATUS(pipe_rx2_phy_status),
        .PIPERX2POLARITY(pipe_rx2_polarity),
        .PIPERX2STATUS(\pipe_stages_1.pipe_rx_status_q_reg[2]_1 ),
        .PIPERX2VALID(pipe_rx2_valid),
        .PIPERX3CHANISALIGNED(pipe_rx3_chanisaligned),
        .PIPERX3CHARISK(\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_2 ),
        .PIPERX3DATA(\pipe_stages_1.pipe_rx_data_q_reg[15]_1 ),
        .PIPERX3ELECIDLE(pipe_rx3_elec_idle),
        .PIPERX3PHYSTATUS(pipe_rx3_phy_status),
        .PIPERX3POLARITY(pipe_rx3_polarity),
        .PIPERX3STATUS(\pipe_stages_1.pipe_rx_status_q_reg[2]_2 ),
        .PIPERX3VALID(pipe_rx3_valid),
        .PIPERX4CHANISALIGNED(1'b0),
        .PIPERX4CHARISK({1'b0,1'b0}),
        .PIPERX4DATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PIPERX4ELECIDLE(1'b1),
        .PIPERX4PHYSTATUS(1'b0),
        .PIPERX4POLARITY(pipe_rx4_polarity),
        .PIPERX4STATUS({1'b0,1'b0,1'b0}),
        .PIPERX4VALID(1'b0),
        .PIPERX5CHANISALIGNED(1'b0),
        .PIPERX5CHARISK({1'b0,1'b0}),
        .PIPERX5DATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PIPERX5ELECIDLE(1'b1),
        .PIPERX5PHYSTATUS(1'b0),
        .PIPERX5POLARITY(pipe_rx5_polarity),
        .PIPERX5STATUS({1'b0,1'b0,1'b0}),
        .PIPERX5VALID(1'b0),
        .PIPERX6CHANISALIGNED(1'b0),
        .PIPERX6CHARISK({1'b0,1'b0}),
        .PIPERX6DATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PIPERX6ELECIDLE(1'b1),
        .PIPERX6PHYSTATUS(1'b0),
        .PIPERX6POLARITY(pipe_rx6_polarity),
        .PIPERX6STATUS({1'b0,1'b0,1'b0}),
        .PIPERX6VALID(1'b0),
        .PIPERX7CHANISALIGNED(1'b0),
        .PIPERX7CHARISK({1'b0,1'b0}),
        .PIPERX7DATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PIPERX7ELECIDLE(1'b1),
        .PIPERX7PHYSTATUS(1'b0),
        .PIPERX7POLARITY(pipe_rx7_polarity),
        .PIPERX7STATUS({1'b0,1'b0,1'b0}),
        .PIPERX7VALID(1'b0),
        .PIPETX0CHARISK(pipe_tx0_char_is_k),
        .PIPETX0COMPLIANCE(pipe_tx0_compliance),
        .PIPETX0DATA(pipe_tx0_data),
        .PIPETX0ELECIDLE(pipe_tx0_elec_idle),
        .PIPETX0POWERDOWN(pipe_tx0_powerdown),
        .PIPETX1CHARISK(pipe_tx1_char_is_k),
        .PIPETX1COMPLIANCE(pipe_tx1_compliance),
        .PIPETX1DATA(pipe_tx1_data),
        .PIPETX1ELECIDLE(pipe_tx1_elec_idle),
        .PIPETX1POWERDOWN(pipe_tx1_powerdown),
        .PIPETX2CHARISK(pipe_tx2_char_is_k),
        .PIPETX2COMPLIANCE(pipe_tx2_compliance),
        .PIPETX2DATA(pipe_tx2_data),
        .PIPETX2ELECIDLE(pipe_tx2_elec_idle),
        .PIPETX2POWERDOWN(pipe_tx2_powerdown),
        .PIPETX3CHARISK(pipe_tx3_char_is_k),
        .PIPETX3COMPLIANCE(pipe_tx3_compliance),
        .PIPETX3DATA(pipe_tx3_data),
        .PIPETX3ELECIDLE(pipe_tx3_elec_idle),
        .PIPETX3POWERDOWN(pipe_tx3_powerdown),
        .PIPETX4CHARISK(pipe_tx4_char_is_k),
        .PIPETX4COMPLIANCE(pipe_tx4_compliance),
        .PIPETX4DATA(pipe_tx4_data),
        .PIPETX4ELECIDLE(pipe_tx4_elec_idle),
        .PIPETX4POWERDOWN(pipe_tx4_powerdown),
        .PIPETX5CHARISK(pipe_tx5_char_is_k),
        .PIPETX5COMPLIANCE(pipe_tx5_compliance),
        .PIPETX5DATA(pipe_tx5_data),
        .PIPETX5ELECIDLE(pipe_tx5_elec_idle),
        .PIPETX5POWERDOWN(pipe_tx5_powerdown),
        .PIPETX6CHARISK(pipe_tx6_char_is_k),
        .PIPETX6COMPLIANCE(pipe_tx6_compliance),
        .PIPETX6DATA(pipe_tx6_data),
        .PIPETX6ELECIDLE(pipe_tx6_elec_idle),
        .PIPETX6POWERDOWN(pipe_tx6_powerdown),
        .PIPETX7CHARISK(pipe_tx7_char_is_k),
        .PIPETX7COMPLIANCE(pipe_tx7_compliance),
        .PIPETX7DATA(pipe_tx7_data),
        .PIPETX7ELECIDLE(pipe_tx7_elec_idle),
        .PIPETX7POWERDOWN(pipe_tx7_powerdown),
        .PIPETXDEEMPH(pipe_tx_deemph),
        .PIPETXMARGIN(pipe_tx_margin),
        .PIPETXRATE(pipe_tx_rate),
        .PIPETXRCVRDET(pipe_tx_rcvr_det),
        .PIPETXRESET(pcie_block_i_n_140),
        .PL2DIRECTEDLSTATE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PL2L0REQ(pcie_block_i_n_141),
        .PL2LINKUP(pcie_block_i_n_142),
        .PL2RECEIVERERR(pcie_block_i_n_143),
        .PL2RECOVERY(pcie_block_i_n_144),
        .PL2RXELECIDLE(pcie_block_i_n_145),
        .PL2RXPMSTATE({pcie_block_i_n_610,pcie_block_i_n_611}),
        .PL2SUSPENDOK(pcie_block_i_n_146),
        .PLDBGMODE({1'b0,1'b0,1'b0}),
        .PLDBGVEC({pcie_block_i_n_184,pcie_block_i_n_185,pcie_block_i_n_186,pcie_block_i_n_187,pcie_block_i_n_188,pcie_block_i_n_189,pcie_block_i_n_190,pcie_block_i_n_191,pcie_block_i_n_192,pcie_block_i_n_193,pcie_block_i_n_194,pcie_block_i_n_195}),
        .PLDIRECTEDCHANGEDONE(pl_directed_change_done),
        .PLDIRECTEDLINKAUTON(pl_directed_link_auton),
        .PLDIRECTEDLINKCHANGE(pl_directed_link_change_mux),
        .PLDIRECTEDLINKSPEED(pl_directed_link_speed),
        .PLDIRECTEDLINKWIDTH(pl_directed_link_width),
        .PLDIRECTEDLTSSMNEW({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PLDIRECTEDLTSSMNEWVLD(1'b0),
        .PLDIRECTEDLTSSMSTALL(1'b0),
        .PLDOWNSTREAMDEEMPHSOURCE(pl_downstream_deemph_source),
        .PLINITIALLINKWIDTH(pl_initial_link_width),
        .PLLANEREVERSALMODE(pl_lane_reversal_mode),
        .PLLINKGEN2CAP(pl_link_gen2_cap),
        .PLLINKPARTNERGEN2SUPPORTED(pl_link_partner_gen2_supported),
        .PLLINKUPCFGCAP(pl_link_upcfg_cap),
        .PLLTSSMSTATE(pl_ltssm_state),
        .PLPHYLNKUPN(pl_phy_lnk_up_n),
        .PLRECEIVEDHOTRST(pl_received_hot_rst),
        .PLRSTN(1'b1),
        .PLRXPMSTATE(pl_rx_pm_state),
        .PLSELLNKRATE(pl_sel_lnk_rate),
        .PLSELLNKWIDTH(pl_sel_lnk_width),
        .PLTRANSMITHOTRST(pl_transmit_hot_rst_mux),
        .PLTXPMSTATE(pl_tx_pm_state),
        .PLUPSTREAMPREFERDEEMPH(pl_upstream_prefer_deemph_mux),
        .RECEIVEDFUNCLVLRSTN(cfg_received_func_lvl_rst_n),
        .SYSRSTN(sys_rst_n),
        .TL2ASPMSUSPENDCREDITCHECK(1'b0),
        .TL2ASPMSUSPENDCREDITCHECKOK(pcie_block_i_n_155),
        .TL2ASPMSUSPENDREQ(pcie_block_i_n_156),
        .TL2ERRFCPE(pcie_block_i_n_157),
        .TL2ERRHDR({pcie_block_i_n_832,pcie_block_i_n_833,pcie_block_i_n_834,pcie_block_i_n_835,pcie_block_i_n_836,pcie_block_i_n_837,pcie_block_i_n_838,pcie_block_i_n_839,pcie_block_i_n_840,pcie_block_i_n_841,pcie_block_i_n_842,pcie_block_i_n_843,pcie_block_i_n_844,pcie_block_i_n_845,pcie_block_i_n_846,pcie_block_i_n_847,pcie_block_i_n_848,pcie_block_i_n_849,pcie_block_i_n_850,pcie_block_i_n_851,pcie_block_i_n_852,pcie_block_i_n_853,pcie_block_i_n_854,pcie_block_i_n_855,pcie_block_i_n_856,pcie_block_i_n_857,pcie_block_i_n_858,pcie_block_i_n_859,pcie_block_i_n_860,pcie_block_i_n_861,pcie_block_i_n_862,pcie_block_i_n_863,pcie_block_i_n_864,pcie_block_i_n_865,pcie_block_i_n_866,pcie_block_i_n_867,pcie_block_i_n_868,pcie_block_i_n_869,pcie_block_i_n_870,pcie_block_i_n_871,pcie_block_i_n_872,pcie_block_i_n_873,pcie_block_i_n_874,pcie_block_i_n_875,pcie_block_i_n_876,pcie_block_i_n_877,pcie_block_i_n_878,pcie_block_i_n_879,pcie_block_i_n_880,pcie_block_i_n_881,pcie_block_i_n_882,pcie_block_i_n_883,pcie_block_i_n_884,pcie_block_i_n_885,pcie_block_i_n_886,pcie_block_i_n_887,pcie_block_i_n_888,pcie_block_i_n_889,pcie_block_i_n_890,pcie_block_i_n_891,pcie_block_i_n_892,pcie_block_i_n_893,pcie_block_i_n_894,pcie_block_i_n_895}),
        .TL2ERRMALFORMED(pcie_block_i_n_158),
        .TL2ERRRXOVERFLOW(pcie_block_i_n_159),
        .TL2PPMSUSPENDOK(pcie_block_i_n_160),
        .TL2PPMSUSPENDREQ(1'b0),
        .TLRSTN(1'b1),
        .TRNFCCPLD(fc_cpld),
        .TRNFCCPLH(fc_cplh),
        .TRNFCNPD(fc_npd),
        .TRNFCNPH(fc_nph),
        .TRNFCPD(fc_pd),
        .TRNFCPH(fc_ph),
        .TRNFCSEL(fc_sel_mux),
        .TRNLNKUP(trn_lnk_up),
        .TRNRBARHIT({pcie_block_i_n_1143,trn_rbar_hit}),
        .TRNRD({trn_rd,\trn_rd_prev_reg[31] }),
        .TRNRDLLPDATA({pcie_block_i_n_896,pcie_block_i_n_897,pcie_block_i_n_898,pcie_block_i_n_899,pcie_block_i_n_900,pcie_block_i_n_901,pcie_block_i_n_902,pcie_block_i_n_903,pcie_block_i_n_904,pcie_block_i_n_905,pcie_block_i_n_906,pcie_block_i_n_907,pcie_block_i_n_908,pcie_block_i_n_909,pcie_block_i_n_910,pcie_block_i_n_911,pcie_block_i_n_912,pcie_block_i_n_913,pcie_block_i_n_914,pcie_block_i_n_915,pcie_block_i_n_916,pcie_block_i_n_917,pcie_block_i_n_918,pcie_block_i_n_919,pcie_block_i_n_920,pcie_block_i_n_921,pcie_block_i_n_922,pcie_block_i_n_923,pcie_block_i_n_924,pcie_block_i_n_925,pcie_block_i_n_926,pcie_block_i_n_927,pcie_block_i_n_928,pcie_block_i_n_929,pcie_block_i_n_930,pcie_block_i_n_931,pcie_block_i_n_932,pcie_block_i_n_933,pcie_block_i_n_934,pcie_block_i_n_935,pcie_block_i_n_936,pcie_block_i_n_937,pcie_block_i_n_938,pcie_block_i_n_939,pcie_block_i_n_940,pcie_block_i_n_941,pcie_block_i_n_942,pcie_block_i_n_943,pcie_block_i_n_944,pcie_block_i_n_945,pcie_block_i_n_946,pcie_block_i_n_947,pcie_block_i_n_948,pcie_block_i_n_949,pcie_block_i_n_950,pcie_block_i_n_951,pcie_block_i_n_952,pcie_block_i_n_953,pcie_block_i_n_954,pcie_block_i_n_955,pcie_block_i_n_956,pcie_block_i_n_957,pcie_block_i_n_958,pcie_block_i_n_959}),
        .TRNRDLLPSRCRDY({pcie_block_i_n_618,pcie_block_i_n_619}),
        .TRNRDSTRDY(trn_rdst_rdy),
        .TRNRECRCERR(trn_recrc_err),
        .TRNREOF(trn_reof),
        .TRNRERRFWD(trn_rerrfwd),
        .TRNRFCPRET(1'b1),
        .TRNRNPOK(rx_np_ok_mux),
        .TRNRNPREQ(rx_np_req_mux),
        .TRNRREM({trn_rrem,\trn_rrem_prev_reg[0] }),
        .TRNRSOF(trn_rsof),
        .TRNRSRCDSC(trn_rsrc_dsc),
        .TRNRSRCRDY(trn_rsrc_rdy),
        .TRNTBUFAV(trn_tbuf_av),
        .TRNTCFGGNT(trn_tcfg_gnt),
        .TRNTCFGREQ(trn_tcfg_req),
        .TRNTD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,trn_td}),
        .TRNTDLLPDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TRNTDLLPDSTRDY(pcie_block_i_n_169),
        .TRNTDLLPSRCRDY(1'b0),
        .TRNTDSTRDY({NLW_pcie_block_i_TRNTDSTRDY_UNCONNECTED[3:1],trn_tdst_rdy}),
        .TRNTECRCGEN(\throttle_ctl_pipeline.reg_tuser_reg[3] [0]),
        .TRNTEOF(trn_teof),
        .TRNTERRDROP(tx_err_drop_mux),
        .TRNTERRFWD(\throttle_ctl_pipeline.reg_tuser_reg[3] [1]),
        .TRNTREM({1'b0,trn_trem}),
        .TRNTSOF(trn_tsof),
        .TRNTSRCDSC(\throttle_ctl_pipeline.reg_tuser_reg[3] [3]),
        .TRNTSRCRDY(trn_tsrc_rdy),
        .TRNTSTR(\throttle_ctl_pipeline.reg_tuser_reg[3] [2]),
        .USERCLK(user_clk),
        .USERCLK2(user_clk),
        .USERRSTN(user_rst_n));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_1
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_atomic_egress_blocked),
        .O(pcie_block_i_i_1_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_10
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_malformed),
        .O(pcie_block_i_i_10_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_100
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[34]),
        .O(cfg_dsn_mux[34]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_101
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[33]),
        .O(cfg_dsn_mux[33]));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_102
       (.I0(cfg_dsn[32]),
        .I1(user_app_rdy_gnt),
        .O(cfg_dsn_mux[32]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_103
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[31]),
        .O(cfg_dsn_mux[31]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_104
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[30]),
        .O(cfg_dsn_mux[30]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_105
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[29]),
        .O(cfg_dsn_mux[29]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_106
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[28]),
        .O(cfg_dsn_mux[28]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_107
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[27]),
        .O(cfg_dsn_mux[27]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_108
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[26]),
        .O(cfg_dsn_mux[26]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_109
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[25]),
        .O(cfg_dsn_mux[25]));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_11
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_mc_blocked),
        .O(pcie_block_i_i_11_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_110
       (.I0(cfg_dsn[24]),
        .I1(user_app_rdy_gnt),
        .O(cfg_dsn_mux[24]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_111
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[23]),
        .O(cfg_dsn_mux[23]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_112
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[22]),
        .O(cfg_dsn_mux[22]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_113
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[21]),
        .O(cfg_dsn_mux[21]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_114
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[20]),
        .O(cfg_dsn_mux[20]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_115
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[19]),
        .O(cfg_dsn_mux[19]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_116
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[18]),
        .O(cfg_dsn_mux[18]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_117
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[17]),
        .O(cfg_dsn_mux[17]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_118
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[16]),
        .O(cfg_dsn_mux[16]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_119
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[15]),
        .O(cfg_dsn_mux[15]));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_12
       (.I0(cfg_err_norecovery),
        .O(pcie_block_i_i_12_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_120
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[14]),
        .O(cfg_dsn_mux[14]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_121
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[13]),
        .O(cfg_dsn_mux[13]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_122
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[12]),
        .O(cfg_dsn_mux[12]));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_123
       (.I0(cfg_dsn[11]),
        .I1(user_app_rdy_gnt),
        .O(cfg_dsn_mux[11]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_124
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[10]),
        .O(cfg_dsn_mux[10]));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_125
       (.I0(cfg_dsn[9]),
        .I1(user_app_rdy_gnt),
        .O(cfg_dsn_mux[9]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_126
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[8]),
        .O(cfg_dsn_mux[8]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_127
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[7]),
        .O(cfg_dsn_mux[7]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_128
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[6]),
        .O(cfg_dsn_mux[6]));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_129
       (.I0(cfg_dsn[5]),
        .I1(user_app_rdy_gnt),
        .O(cfg_dsn_mux[5]));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_13
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_poisoned),
        .O(pcie_block_i_i_13_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_130
       (.I0(cfg_dsn[4]),
        .I1(user_app_rdy_gnt),
        .O(cfg_dsn_mux[4]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_131
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[3]),
        .O(cfg_dsn_mux[3]));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_132
       (.I0(cfg_dsn[2]),
        .I1(user_app_rdy_gnt),
        .O(cfg_dsn_mux[2]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_133
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[1]),
        .O(cfg_dsn_mux[1]));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_134
       (.I0(cfg_dsn[0]),
        .I1(user_app_rdy_gnt),
        .O(cfg_dsn_mux[0]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_135
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_bus_number[7]),
        .O(cfg_ds_bus_number_mux[7]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_136
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_bus_number[6]),
        .O(cfg_ds_bus_number_mux[6]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_137
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_bus_number[5]),
        .O(cfg_ds_bus_number_mux[5]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_138
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_bus_number[4]),
        .O(cfg_ds_bus_number_mux[4]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_139
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_bus_number[3]),
        .O(cfg_ds_bus_number_mux[3]));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_14
       (.I0(cfg_err_posted),
        .O(pcie_block_i_i_14_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_140
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_bus_number[2]),
        .O(cfg_ds_bus_number_mux[2]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_141
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_bus_number[1]),
        .O(cfg_ds_bus_number_mux[1]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_142
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_bus_number[0]),
        .O(cfg_ds_bus_number_mux[0]));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_143
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_addr[8]),
        .O(pcie_drp_addr_mux[8]));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_144
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_addr[7]),
        .O(pcie_drp_addr_mux[7]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_145
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_addr[6]),
        .O(pcie_drp_addr_mux[6]));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_146
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_addr[5]),
        .O(pcie_drp_addr_mux[5]));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_147
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_addr[4]),
        .O(pcie_drp_addr_mux[4]));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_148
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_addr[3]),
        .O(pcie_drp_addr_mux[3]));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_149
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_addr[2]),
        .O(pcie_drp_addr_mux[2]));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_15
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_ur),
        .O(pcie_block_i_i_15_n_0));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_150
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_addr[1]),
        .O(pcie_drp_addr_mux[1]));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_151
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_addr[0]),
        .O(pcie_drp_addr_mux[0]));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_16
       (.I0(cfg_interrupt_assert),
        .O(pcie_block_i_i_16_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_17
       (.I0(user_app_rdy_gnt),
        .I1(cfg_interrupt),
        .O(pcie_block_i_i_17_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_18
       (.I0(cfg_interrupt_stat),
        .O(pcie_block_i_i_18_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_19
       (.I0(user_app_rdy_gnt),
        .I1(cfg_mgmt_rd_en),
        .O(pcie_block_i_i_19_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_2
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_cor),
        .O(pcie_block_i_i_2_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_20
       (.I0(user_app_rdy_gnt),
        .I1(cfg_mgmt_wr_en),
        .O(pcie_block_i_i_20_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_21
       (.I0(cfg_mgmt_wr_readonly),
        .O(pcie_block_i_i_21_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_22
       (.I0(cfg_mgmt_wr_rw1c_as_rw),
        .O(pcie_block_i_i_22_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_23
       (.I0(user_app_rdy_gnt),
        .I1(cfg_pm_force_state_en),
        .O(pcie_block_i_i_23_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_24
       (.I0(user_app_rdy_gnt),
        .I1(cfg_pm_halt_aspm_l0s),
        .O(pcie_block_i_i_24_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_25
       (.I0(user_app_rdy_gnt),
        .I1(cfg_pm_halt_aspm_l1),
        .O(pcie_block_i_i_25_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_27
       (.I0(user_app_rdy_gnt),
        .I1(cfg_pm_wake),
        .O(pcie_block_i_i_27_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_28
       (.I0(cfg_trn_pending),
        .I1(user_app_rdy_gnt),
        .O(pcie_block_i_i_28_n_0));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_29
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_en),
        .O(pcie_drp_en_mux));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_3
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_cpl_abort),
        .O(pcie_block_i_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_30
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_we),
        .O(pcie_drp_we_mux));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_31
       (.I0(user_app_rdy_gnt),
        .I1(pl_transmit_hot_rst),
        .O(pl_transmit_hot_rst_mux));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_32
       (.I0(pl_upstream_prefer_deemph),
        .I1(user_app_rdy_gnt),
        .O(pl_upstream_prefer_deemph_mux));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_34
       (.I0(rx_np_ok),
        .I1(user_app_rdy_gnt),
        .O(rx_np_ok_mux));
  LUT2 #(
    .INIT(4'hB)) 
    pcie_block_i_i_35
       (.I0(rx_np_req),
        .I1(user_app_rdy_gnt),
        .O(rx_np_req_mux));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_38
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[15]),
        .O(pcie_drp_di_mux[15]));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_39
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[14]),
        .O(pcie_drp_di_mux[14]));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_4
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_cpl_timeout),
        .O(pcie_block_i_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_40
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[13]),
        .O(pcie_drp_di_mux[13]));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_41
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[12]),
        .O(pcie_drp_di_mux[12]));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_42
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[11]),
        .O(pcie_drp_di_mux[11]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_43
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[10]),
        .O(pcie_drp_di_mux[10]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_44
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[9]),
        .O(pcie_drp_di_mux[9]));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_45
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[8]),
        .O(pcie_drp_di_mux[8]));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_46
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[7]),
        .O(pcie_drp_di_mux[7]));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_47
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[6]),
        .O(pcie_drp_di_mux[6]));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_48
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[5]),
        .O(pcie_drp_di_mux[5]));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_49
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[4]),
        .O(pcie_drp_di_mux[4]));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_5
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_cpl_unexpect),
        .O(pcie_block_i_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_50
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[3]),
        .O(pcie_drp_di_mux[3]));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_51
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[2]),
        .O(pcie_drp_di_mux[2]));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_52
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[1]),
        .O(pcie_drp_di_mux[1]));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_53
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_di[0]),
        .O(pcie_drp_di_mux[0]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_54
       (.I0(user_app_rdy_gnt),
        .I1(pl_directed_link_change[1]),
        .O(pl_directed_link_change_mux[1]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_55
       (.I0(user_app_rdy_gnt),
        .I1(pl_directed_link_change[0]),
        .O(pl_directed_link_change_mux[0]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_56
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_function_number[2]),
        .O(cfg_ds_function_number_mux[2]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_57
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_function_number[1]),
        .O(cfg_ds_function_number_mux[1]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_58
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_function_number[0]),
        .O(cfg_ds_function_number_mux[0]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_59
       (.I0(user_app_rdy_gnt),
        .I1(fc_sel[2]),
        .O(fc_sel_mux[2]));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_6
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_ecrc),
        .O(pcie_block_i_i_6_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_60
       (.I0(user_app_rdy_gnt),
        .I1(fc_sel[1]),
        .O(fc_sel_mux[1]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_61
       (.I0(user_app_rdy_gnt),
        .I1(fc_sel[0]),
        .O(fc_sel_mux[0]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_66
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_device_number[4]),
        .O(cfg_ds_device_number_mux[4]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_67
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_device_number[3]),
        .O(cfg_ds_device_number_mux[3]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_68
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_device_number[2]),
        .O(cfg_ds_device_number_mux[2]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_69
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_device_number[1]),
        .O(cfg_ds_device_number_mux[1]));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_7
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_internal_cor),
        .O(pcie_block_i_i_7_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_70
       (.I0(user_app_rdy_gnt),
        .I1(cfg_ds_device_number[0]),
        .O(cfg_ds_device_number_mux[0]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_71
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[63]),
        .O(cfg_dsn_mux[63]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_72
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[62]),
        .O(cfg_dsn_mux[62]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_73
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[61]),
        .O(cfg_dsn_mux[61]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_74
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[60]),
        .O(cfg_dsn_mux[60]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_75
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[59]),
        .O(cfg_dsn_mux[59]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_76
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[58]),
        .O(cfg_dsn_mux[58]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_77
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[57]),
        .O(cfg_dsn_mux[57]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_78
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[56]),
        .O(cfg_dsn_mux[56]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_79
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[55]),
        .O(cfg_dsn_mux[55]));
  LUT2 #(
    .INIT(4'h7)) 
    pcie_block_i_i_8
       (.I0(user_app_rdy_gnt),
        .I1(cfg_err_internal_uncor),
        .O(pcie_block_i_i_8_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_80
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[54]),
        .O(cfg_dsn_mux[54]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_81
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[53]),
        .O(cfg_dsn_mux[53]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_82
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[52]),
        .O(cfg_dsn_mux[52]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_83
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[51]),
        .O(cfg_dsn_mux[51]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_84
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[50]),
        .O(cfg_dsn_mux[50]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_85
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[49]),
        .O(cfg_dsn_mux[49]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_86
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[48]),
        .O(cfg_dsn_mux[48]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_87
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[47]),
        .O(cfg_dsn_mux[47]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_88
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[46]),
        .O(cfg_dsn_mux[46]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_89
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[45]),
        .O(cfg_dsn_mux[45]));
  LUT1 #(
    .INIT(2'h1)) 
    pcie_block_i_i_9
       (.I0(cfg_err_locked),
        .O(pcie_block_i_i_9_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_90
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[44]),
        .O(cfg_dsn_mux[44]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_91
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[43]),
        .O(cfg_dsn_mux[43]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_92
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[42]),
        .O(cfg_dsn_mux[42]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_93
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[41]),
        .O(cfg_dsn_mux[41]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_94
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[40]),
        .O(cfg_dsn_mux[40]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_95
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[39]),
        .O(cfg_dsn_mux[39]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_96
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[38]),
        .O(cfg_dsn_mux[38]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_97
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[37]),
        .O(cfg_dsn_mux[37]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_98
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[36]),
        .O(cfg_dsn_mux[36]));
  LUT2 #(
    .INIT(4'h8)) 
    pcie_block_i_i_99
       (.I0(user_app_rdy_gnt),
        .I1(cfg_dsn[35]),
        .O(cfg_dsn_mux[35]));
  pcie_7x_0_pcie_7x_0_pcie_bram_top_7x pcie_bram_top
       (.MIMRXRADDR(mim_rx_raddr[10:0]),
        .MIMRXWADDR(mim_rx_waddr[10:0]),
        .MIMTXRADDR(mim_tx_raddr[10:0]),
        .MIMTXWADDR(mim_tx_waddr[10:0]),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (mim_rx_rdata),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (mim_rx_wdata),
        .rdata(mim_tx_rdata),
        .user_clk(user_clk),
        .wdata(mim_tx_wdata));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[0]),
        .O(pcie_drp_do[0]));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[10]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[10]),
        .O(pcie_drp_do[10]));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[11]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[11]),
        .O(pcie_drp_do[11]));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[12]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[12]),
        .O(pcie_drp_do[12]));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[13]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[13]),
        .O(pcie_drp_do[13]));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[14]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[14]),
        .O(pcie_drp_do[14]));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[15]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[15]),
        .O(pcie_drp_do[15]));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[1]),
        .O(pcie_drp_do[1]));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[2]),
        .O(pcie_drp_do[2]));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[3]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[3]),
        .O(pcie_drp_do[3]));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[4]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[4]),
        .O(pcie_drp_do[4]));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[5]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[5]),
        .O(pcie_drp_do[5]));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[6]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[6]),
        .O(pcie_drp_do[6]));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[7]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[7]),
        .O(pcie_drp_do[7]));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[8]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[8]),
        .O(pcie_drp_do[8]));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \pcie_drp_do[9]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_do_mux[9]),
        .O(pcie_drp_do[9]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT2 #(
    .INIT(4'h8)) 
    pcie_drp_rdy_INST_0
       (.I0(user_app_rdy_gnt),
        .I1(pcie_drp_rdy_mux),
        .O(pcie_drp_rdy));
  LUT1 #(
    .INIT(2'h1)) 
    phy_lnk_up_cdc_i_1
       (.I0(pl_phy_lnk_up_n),
        .O(src_in));
  LUT2 #(
    .INIT(4'h8)) 
    \pl_ltssm_state[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pl_ltssm_state[0]),
        .O(\ltssm_reg2_reg[5] [0]));
  LUT2 #(
    .INIT(4'h8)) 
    \pl_ltssm_state[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pl_ltssm_state[1]),
        .O(\ltssm_reg2_reg[5] [1]));
  LUT2 #(
    .INIT(4'h8)) 
    \pl_ltssm_state[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pl_ltssm_state[2]),
        .O(\ltssm_reg2_reg[5] [2]));
  LUT2 #(
    .INIT(4'h8)) 
    \pl_ltssm_state[3]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pl_ltssm_state[3]),
        .O(\ltssm_reg2_reg[5] [3]));
  LUT2 #(
    .INIT(4'h8)) 
    \pl_ltssm_state[4]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pl_ltssm_state[4]),
        .O(\ltssm_reg2_reg[5] [4]));
  LUT2 #(
    .INIT(4'h8)) 
    \pl_ltssm_state[5]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(pl_ltssm_state[5]),
        .O(\ltssm_reg2_reg[5] [5]));
  LUT5 #(
    .INIT(32'hFFFEAAAA)) 
    ppm_L1_thrtl_i_1
       (.I0(ppm_L1_trig),
        .I1(\cfg_pcie_link_state_d_reg[2] [1]),
        .I2(\cfg_pcie_link_state_d_reg[2] [2]),
        .I3(\cfg_pcie_link_state_d_reg[2] [0]),
        .I4(ppm_L1_thrtl),
        .O(ppm_L1_thrtl_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF6FFAFF6A)) 
    store_ltssm_inferred_i_1
       (.I0(ltssm_reg2[4]),
        .I1(pl_ltssm_state[4]),
        .I2(user_app_rdy_gnt),
        .I3(ltssm_reg2[2]),
        .I4(pl_ltssm_state[2]),
        .I5(store_ltssm_inferred_i_2_n_0),
        .O(in0));
  LUT6 #(
    .INIT(64'hFFFFFFFF6FFAFF6A)) 
    store_ltssm_inferred_i_2
       (.I0(ltssm_reg2[0]),
        .I1(pl_ltssm_state[0]),
        .I2(user_app_rdy_gnt),
        .I3(ltssm_reg2[5]),
        .I4(pl_ltssm_state[5]),
        .I5(store_ltssm_inferred_i_3_n_0),
        .O(store_ltssm_inferred_i_2_n_0));
  LUT5 #(
    .INIT(32'h6FFFFC6C)) 
    store_ltssm_inferred_i_3
       (.I0(pl_ltssm_state[3]),
        .I1(ltssm_reg2[3]),
        .I2(user_app_rdy_gnt),
        .I3(pl_ltssm_state[1]),
        .I4(ltssm_reg2[1]),
        .O(store_ltssm_inferred_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFFFE)) 
    tbuf_av_gap_thrtl_i_5
       (.I0(trn_tbuf_av[2]),
        .I1(trn_tbuf_av[3]),
        .I2(trn_tbuf_av[4]),
        .I3(trn_tbuf_av[5]),
        .I4(trn_tbuf_av[0]),
        .I5(trn_tbuf_av[1]),
        .O(tbuf_av_gap_thrtl_reg));
  LUT5 #(
    .INIT(32'h00000001)) 
    tbuf_av_min_thrtl_i_1
       (.I0(trn_tbuf_av[1]),
        .I1(trn_tbuf_av[2]),
        .I2(trn_tbuf_av[3]),
        .I3(trn_tbuf_av[4]),
        .I4(trn_tbuf_av[5]),
        .O(tbuf_av_min_trig));
  LUT2 #(
    .INIT(4'h8)) 
    tready_thrtl_i_7
       (.I0(trn_tcfg_req),
        .I1(reg_tcfg_gnt),
        .O(tcfg_req_trig));
  LUT6 #(
    .INIT(64'h2000BAAA00002AAA)) 
    trn_in_packet_i_1
       (.I0(trn_in_packet),
        .I1(trn_reof),
        .I2(trn_rdst_rdy),
        .I3(trn_rsrc_rdy),
        .I4(trn_rsrc_dsc),
        .I5(trn_rsof),
        .O(trn_in_packet_reg));
  LUT4 #(
    .INIT(16'hAA08)) 
    trn_rsrc_rdy_prev_i_1
       (.I0(trn_rsrc_rdy),
        .I1(trn_rsof),
        .I2(trn_rsrc_dsc),
        .I3(trn_in_packet),
        .O(rsrc_rdy_filtered));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \tx_buf_av[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(trn_tbuf_av[0]),
        .O(tx_buf_av[0]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \tx_buf_av[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(trn_tbuf_av[1]),
        .O(tx_buf_av[1]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \tx_buf_av[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(trn_tbuf_av[2]),
        .O(tx_buf_av[2]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \tx_buf_av[3]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(trn_tbuf_av[3]),
        .O(tx_buf_av[3]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \tx_buf_av[4]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(trn_tbuf_av[4]),
        .O(tx_buf_av[4]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \tx_buf_av[5]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(trn_tbuf_av[5]),
        .O(tx_buf_av[5]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT2 #(
    .INIT(4'h8)) 
    tx_cfg_req_INST_0
       (.I0(trn_tcfg_req),
        .I1(user_app_rdy_gnt),
        .O(tx_cfg_req));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT2 #(
    .INIT(4'h8)) 
    tx_err_drop_INST_0
       (.I0(user_app_rdy_gnt),
        .I1(tx_err_drop_mux),
        .O(tx_err_drop));
  LUT3 #(
    .INIT(8'h2A)) 
    user_reset_int_i_1
       (.I0(bridge_reset_int),
        .I1(user_rst_n),
        .I2(pl_phy_lnk_up_q),
        .O(user_reset_int_reg));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_bram_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_bram_7x
   (rdata,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata);
  output [17:0]rdata;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [17:0]wdata;

  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [17:0]rdata;
  wire user_clk;
  wire [17:0]wdata;

  pcie_7x_0_BRAM_TDP_MACRO_9 \use_tdp.ramb36 
       (.MIMTXRADDR(MIMTXRADDR),
        .MIMTXWADDR(MIMTXWADDR),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .rdata(rdata),
        .user_clk(user_clk),
        .wdata(wdata));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_bram_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_bram_7x_10
   (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    user_clk,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  input user_clk;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire user_clk;

  pcie_7x_0_BRAM_TDP_MACRO_17 \use_tdp.ramb36 
       (.MIMRXRADDR(MIMRXRADDR),
        .MIMRXWADDR(MIMRXWADDR),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg ),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_bram_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_bram_7x_11
   (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    user_clk,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  input user_clk;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire user_clk;

  pcie_7x_0_BRAM_TDP_MACRO_16 \use_tdp.ramb36 
       (.MIMRXRADDR(MIMRXRADDR),
        .MIMRXWADDR(MIMRXWADDR),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg ),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_bram_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_bram_7x_12
   (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    user_clk,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  input user_clk;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [17:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire [17:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire user_clk;

  pcie_7x_0_BRAM_TDP_MACRO_15 \use_tdp.ramb36 
       (.MIMRXRADDR(MIMRXRADDR),
        .MIMRXWADDR(MIMRXWADDR),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg ),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_bram_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_bram_7x_13
   (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    user_clk,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [13:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  input user_clk;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [13:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [13:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire [13:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire user_clk;

  pcie_7x_0_BRAM_TDP_MACRO_14 \use_tdp.ramb36 
       (.MIMRXRADDR(MIMRXRADDR),
        .MIMRXWADDR(MIMRXWADDR),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg ),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_bram_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_bram_7x_4
   (rdata,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata);
  output [17:0]rdata;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [17:0]wdata;

  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [17:0]rdata;
  wire user_clk;
  wire [17:0]wdata;

  pcie_7x_0_BRAM_TDP_MACRO_8 \use_tdp.ramb36 
       (.MIMTXRADDR(MIMTXRADDR),
        .MIMTXWADDR(MIMTXWADDR),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .rdata(rdata),
        .user_clk(user_clk),
        .wdata(wdata));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_bram_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_bram_7x_5
   (rdata,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata);
  output [17:0]rdata;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [17:0]wdata;

  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [17:0]rdata;
  wire user_clk;
  wire [17:0]wdata;

  pcie_7x_0_BRAM_TDP_MACRO_7 \use_tdp.ramb36 
       (.MIMTXRADDR(MIMTXRADDR),
        .MIMTXWADDR(MIMTXWADDR),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .rdata(rdata),
        .user_clk(user_clk),
        .wdata(wdata));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_bram_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_bram_7x_6
   (rdata,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata);
  output [14:0]rdata;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [14:0]wdata;

  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [14:0]rdata;
  wire user_clk;
  wire [14:0]wdata;

  pcie_7x_0_BRAM_TDP_MACRO \use_tdp.ramb36 
       (.MIMTXRADDR(MIMTXRADDR),
        .MIMTXWADDR(MIMTXWADDR),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .rdata(rdata),
        .user_clk(user_clk),
        .wdata(wdata));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_bram_top_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_bram_top_7x
   (rdata,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [68:0]rdata;
  output [67:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [68:0]wdata;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [67:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire [67:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [67:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire [68:0]rdata;
  wire user_clk;
  wire [68:0]wdata;

  pcie_7x_0_pcie_7x_0_pcie_brams_7x pcie_brams_rx
       (.MIMRXRADDR(MIMRXRADDR),
        .MIMRXWADDR(MIMRXWADDR),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg ),
        .user_clk(user_clk));
  pcie_7x_0_pcie_7x_0_pcie_brams_7x_3 pcie_brams_tx
       (.MIMTXRADDR(MIMTXRADDR),
        .MIMTXWADDR(MIMTXWADDR),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .rdata(rdata),
        .user_clk(user_clk),
        .wdata(wdata));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_brams_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_brams_7x
   (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    user_clk,
    mim_rx_wen,
    mim_rx_ren,
    MIMRXWADDR,
    MIMRXRADDR,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output [67:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  input user_clk;
  input mim_rx_wen;
  input mim_rx_ren;
  input [10:0]MIMRXWADDR;
  input [10:0]MIMRXRADDR;
  input [67:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire [10:0]MIMRXRADDR;
  wire [10:0]MIMRXWADDR;
  wire [67:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire mim_rx_ren;
  wire mim_rx_wen;
  wire [67:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire user_clk;

  pcie_7x_0_pcie_7x_0_pcie_bram_7x_10 \brams[0].ram 
       (.MIMRXRADDR(MIMRXRADDR),
        .MIMRXWADDR(MIMRXWADDR),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [17:0]),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg [17:0]),
        .user_clk(user_clk));
  pcie_7x_0_pcie_7x_0_pcie_bram_7x_11 \brams[1].ram 
       (.MIMRXRADDR(MIMRXRADDR),
        .MIMRXWADDR(MIMRXWADDR),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [35:18]),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg [35:18]),
        .user_clk(user_clk));
  pcie_7x_0_pcie_7x_0_pcie_bram_7x_12 \brams[2].ram 
       (.MIMRXRADDR(MIMRXRADDR),
        .MIMRXWADDR(MIMRXWADDR),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [53:36]),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg [53:36]),
        .user_clk(user_clk));
  pcie_7x_0_pcie_7x_0_pcie_bram_7x_13 \brams[3].ram 
       (.MIMRXRADDR(MIMRXRADDR),
        .MIMRXWADDR(MIMRXWADDR),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [67:54]),
        .mim_rx_ren(mim_rx_ren),
        .mim_rx_wen(mim_rx_wen),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg [67:54]),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_brams_7x" *) 
module pcie_7x_0_pcie_7x_0_pcie_brams_7x_3
   (rdata,
    user_clk,
    mim_tx_wen,
    mim_tx_ren,
    MIMTXWADDR,
    MIMTXRADDR,
    wdata);
  output [68:0]rdata;
  input user_clk;
  input mim_tx_wen;
  input mim_tx_ren;
  input [10:0]MIMTXWADDR;
  input [10:0]MIMTXRADDR;
  input [68:0]wdata;

  wire [10:0]MIMTXRADDR;
  wire [10:0]MIMTXWADDR;
  wire mim_tx_ren;
  wire mim_tx_wen;
  wire [68:0]rdata;
  wire user_clk;
  wire [68:0]wdata;

  pcie_7x_0_pcie_7x_0_pcie_bram_7x \brams[0].ram 
       (.MIMTXRADDR(MIMTXRADDR),
        .MIMTXWADDR(MIMTXWADDR),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .rdata(rdata[17:0]),
        .user_clk(user_clk),
        .wdata(wdata[17:0]));
  pcie_7x_0_pcie_7x_0_pcie_bram_7x_4 \brams[1].ram 
       (.MIMTXRADDR(MIMTXRADDR),
        .MIMTXWADDR(MIMTXWADDR),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .rdata(rdata[35:18]),
        .user_clk(user_clk),
        .wdata(wdata[35:18]));
  pcie_7x_0_pcie_7x_0_pcie_bram_7x_5 \brams[2].ram 
       (.MIMTXRADDR(MIMTXRADDR),
        .MIMTXWADDR(MIMTXWADDR),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .rdata(rdata[53:36]),
        .user_clk(user_clk),
        .wdata(wdata[53:36]));
  pcie_7x_0_pcie_7x_0_pcie_bram_7x_6 \brams[3].ram 
       (.MIMTXRADDR(MIMTXRADDR),
        .MIMTXWADDR(MIMTXWADDR),
        .mim_tx_ren(mim_tx_ren),
        .mim_tx_wen(mim_tx_wen),
        .rdata(rdata[68:54]),
        .user_clk(user_clk),
        .wdata(wdata[68:54]));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_pipe_lane" *) 
module pcie_7x_0_pcie_7x_0_pcie_pipe_lane
   (pipe_rx1_valid,
    pipe_rx1_chanisaligned,
    pipe_rx1_phy_status,
    pipe_rx1_elec_idle,
    PIPE_RXPOLARITY,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    Q,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    PIPE_TXDATAK,
    PIPE_TXDATA,
    PIPE_POWERDOWN,
    phy_rdy_n_int_reg,
    pipe_rx1_valid_gt,
    CLK,
    PIPE_RXCHANISALIGNED,
    gt_rx_phy_status_q_reg,
    gt_rxelecidle_q_reg,
    pipe_rx1_polarity,
    pipe_tx1_compliance,
    pipe_tx1_elec_idle,
    D,
    \gt_rxdata_q_reg[15] ,
    \gt_rx_status_q_reg[2] ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 );
  output pipe_rx1_valid;
  output pipe_rx1_chanisaligned;
  output pipe_rx1_phy_status;
  output pipe_rx1_elec_idle;
  output [0:0]PIPE_RXPOLARITY;
  output [0:0]PIPE_TXCOMPLIANCE;
  output [0:0]PIPE_TXELECIDLE;
  output [1:0]Q;
  output [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  output [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  output [1:0]PIPE_TXDATAK;
  output [15:0]PIPE_TXDATA;
  output [1:0]PIPE_POWERDOWN;
  input [0:0]phy_rdy_n_int_reg;
  input pipe_rx1_valid_gt;
  input CLK;
  input [0:0]PIPE_RXCHANISALIGNED;
  input gt_rx_phy_status_q_reg;
  input gt_rxelecidle_q_reg;
  input pipe_rx1_polarity;
  input pipe_tx1_compliance;
  input pipe_tx1_elec_idle;
  input [1:0]D;
  input [15:0]\gt_rxdata_q_reg[15] ;
  input [2:0]\gt_rx_status_q_reg[2] ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  input [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;

  wire CLK;
  wire [1:0]D;
  wire [1:0]PIPE_POWERDOWN;
  wire [0:0]PIPE_RXCHANISALIGNED;
  wire [0:0]PIPE_RXPOLARITY;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [15:0]PIPE_TXDATA;
  wire [1:0]PIPE_TXDATAK;
  wire [0:0]PIPE_TXELECIDLE;
  wire [1:0]Q;
  wire [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire gt_rx_phy_status_q_reg;
  wire [2:0]\gt_rx_status_q_reg[2] ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire gt_rxelecidle_q_reg;
  wire [0:0]phy_rdy_n_int_reg;
  wire pipe_rx1_chanisaligned;
  wire pipe_rx1_elec_idle;
  wire pipe_rx1_phy_status;
  wire pipe_rx1_polarity;
  wire pipe_rx1_valid;
  wire pipe_rx1_valid_gt;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  wire [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;
  wire pipe_tx1_compliance;
  wire pipe_tx1_elec_idle;

  FDRE \pipe_stages_1.pipe_rx_chanisaligned_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_RXCHANISALIGNED),
        .Q(pipe_rx1_chanisaligned),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_char_is_k_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[0]),
        .Q(Q[0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_char_is_k_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[1]),
        .Q(Q[1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [10]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [10]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [11]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [11]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [12]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [12]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [13]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [13]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [14]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [14]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [15]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [15]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [2]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [3]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [3]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [4]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [4]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [5]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [5]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [6]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [6]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [7]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [7]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [8]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [8]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [9]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [9]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_elec_idle_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxelecidle_q_reg),
        .Q(pipe_rx1_elec_idle),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_phy_status_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rx_phy_status_q_reg),
        .Q(pipe_rx1_phy_status),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_polarity_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rx1_polarity),
        .Q(PIPE_RXPOLARITY),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [2]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_valid_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rx1_valid_gt),
        .Q(pipe_rx1_valid),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_char_is_k_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 [0]),
        .Q(PIPE_TXDATAK[0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_char_is_k_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 [1]),
        .Q(PIPE_TXDATAK[1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_compliance_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx1_compliance),
        .Q(PIPE_TXCOMPLIANCE),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [0]),
        .Q(PIPE_TXDATA[0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [10]),
        .Q(PIPE_TXDATA[10]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [11]),
        .Q(PIPE_TXDATA[11]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [12]),
        .Q(PIPE_TXDATA[12]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [13]),
        .Q(PIPE_TXDATA[13]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [14]),
        .Q(PIPE_TXDATA[14]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [15]),
        .Q(PIPE_TXDATA[15]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [1]),
        .Q(PIPE_TXDATA[1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [2]),
        .Q(PIPE_TXDATA[2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [3]),
        .Q(PIPE_TXDATA[3]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [4]),
        .Q(PIPE_TXDATA[4]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [5]),
        .Q(PIPE_TXDATA[5]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [6]),
        .Q(PIPE_TXDATA[6]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [7]),
        .Q(PIPE_TXDATA[7]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [8]),
        .Q(PIPE_TXDATA[8]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [9]),
        .Q(PIPE_TXDATA[9]),
        .R(phy_rdy_n_int_reg));
  FDSE \pipe_stages_1.pipe_tx_elec_idle_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx1_elec_idle),
        .Q(PIPE_TXELECIDLE),
        .S(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_powerdown_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 [0]),
        .Q(PIPE_POWERDOWN[0]),
        .R(phy_rdy_n_int_reg));
  FDSE \pipe_stages_1.pipe_tx_powerdown_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 [1]),
        .Q(PIPE_POWERDOWN[1]),
        .S(phy_rdy_n_int_reg));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_pipe_lane" *) 
module pcie_7x_0_pcie_7x_0_pcie_pipe_lane_0
   (PIPE_RXPOLARITY,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    pipe_rx2_valid,
    pipe_rx2_chanisaligned,
    pipe_rx2_phy_status,
    pipe_rx2_elec_idle,
    PIPE_TXDATAK,
    PIPE_TXDATA,
    PIPE_POWERDOWN,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ,
    phy_rdy_n_int_reg,
    pipe_rx2_polarity,
    CLK,
    pipe_tx2_compliance,
    pipe_tx2_elec_idle,
    pipe_rx2_valid_gt,
    PIPE_RXCHANISALIGNED,
    gt_rx_phy_status_q_reg,
    gt_rxelecidle_q_reg,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ,
    \gt_rxcharisk_q_reg[1] ,
    \gt_rxdata_q_reg[15] ,
    \gt_rx_status_q_reg[2] );
  output [0:0]PIPE_RXPOLARITY;
  output [0:0]PIPE_TXCOMPLIANCE;
  output [0:0]PIPE_TXELECIDLE;
  output pipe_rx2_valid;
  output pipe_rx2_chanisaligned;
  output pipe_rx2_phy_status;
  output pipe_rx2_elec_idle;
  output [1:0]PIPE_TXDATAK;
  output [15:0]PIPE_TXDATA;
  output [1:0]PIPE_POWERDOWN;
  output [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  output [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  output [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ;
  input [0:0]phy_rdy_n_int_reg;
  input pipe_rx2_polarity;
  input CLK;
  input pipe_tx2_compliance;
  input pipe_tx2_elec_idle;
  input pipe_rx2_valid_gt;
  input [0:0]PIPE_RXCHANISALIGNED;
  input gt_rx_phy_status_q_reg;
  input gt_rxelecidle_q_reg;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  input [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;
  input [1:0]\gt_rxcharisk_q_reg[1] ;
  input [15:0]\gt_rxdata_q_reg[15] ;
  input [2:0]\gt_rx_status_q_reg[2] ;

  wire CLK;
  wire [1:0]PIPE_POWERDOWN;
  wire [0:0]PIPE_RXCHANISALIGNED;
  wire [0:0]PIPE_RXPOLARITY;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [15:0]PIPE_TXDATA;
  wire [1:0]PIPE_TXDATAK;
  wire [0:0]PIPE_TXELECIDLE;
  wire [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ;
  wire gt_rx_phy_status_q_reg;
  wire [2:0]\gt_rx_status_q_reg[2] ;
  wire [1:0]\gt_rxcharisk_q_reg[1] ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire gt_rxelecidle_q_reg;
  wire [0:0]phy_rdy_n_int_reg;
  wire pipe_rx2_chanisaligned;
  wire pipe_rx2_elec_idle;
  wire pipe_rx2_phy_status;
  wire pipe_rx2_polarity;
  wire pipe_rx2_valid;
  wire pipe_rx2_valid_gt;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  wire [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;
  wire pipe_tx2_compliance;
  wire pipe_tx2_elec_idle;

  FDRE \pipe_stages_1.pipe_rx_chanisaligned_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_RXCHANISALIGNED),
        .Q(pipe_rx2_chanisaligned),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_char_is_k_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxcharisk_q_reg[1] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_char_is_k_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxcharisk_q_reg[1] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [10]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [10]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [11]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [11]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [12]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [12]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [13]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [13]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [14]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [14]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [15]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [15]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [2]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [3]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [3]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [4]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [4]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [5]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [5]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [6]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [6]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [7]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [7]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [8]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [8]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [9]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [9]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_elec_idle_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxelecidle_q_reg),
        .Q(pipe_rx2_elec_idle),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_phy_status_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rx_phy_status_q_reg),
        .Q(pipe_rx2_phy_status),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_polarity_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rx2_polarity),
        .Q(PIPE_RXPOLARITY),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [2]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 [2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_valid_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rx2_valid_gt),
        .Q(pipe_rx2_valid),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_char_is_k_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 [0]),
        .Q(PIPE_TXDATAK[0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_char_is_k_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 [1]),
        .Q(PIPE_TXDATAK[1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_compliance_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx2_compliance),
        .Q(PIPE_TXCOMPLIANCE),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [0]),
        .Q(PIPE_TXDATA[0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [10]),
        .Q(PIPE_TXDATA[10]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [11]),
        .Q(PIPE_TXDATA[11]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [12]),
        .Q(PIPE_TXDATA[12]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [13]),
        .Q(PIPE_TXDATA[13]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [14]),
        .Q(PIPE_TXDATA[14]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [15]),
        .Q(PIPE_TXDATA[15]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [1]),
        .Q(PIPE_TXDATA[1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [2]),
        .Q(PIPE_TXDATA[2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [3]),
        .Q(PIPE_TXDATA[3]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [4]),
        .Q(PIPE_TXDATA[4]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [5]),
        .Q(PIPE_TXDATA[5]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [6]),
        .Q(PIPE_TXDATA[6]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [7]),
        .Q(PIPE_TXDATA[7]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [8]),
        .Q(PIPE_TXDATA[8]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [9]),
        .Q(PIPE_TXDATA[9]),
        .R(phy_rdy_n_int_reg));
  FDSE \pipe_stages_1.pipe_tx_elec_idle_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx2_elec_idle),
        .Q(PIPE_TXELECIDLE),
        .S(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_powerdown_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 [0]),
        .Q(PIPE_POWERDOWN[0]),
        .R(phy_rdy_n_int_reg));
  FDSE \pipe_stages_1.pipe_tx_powerdown_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 [1]),
        .Q(PIPE_POWERDOWN[1]),
        .S(phy_rdy_n_int_reg));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_pipe_lane" *) 
module pcie_7x_0_pcie_7x_0_pcie_pipe_lane_1
   (PIPE_RXPOLARITY,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    pipe_rx3_valid,
    pipe_rx3_chanisaligned,
    pipe_rx3_phy_status,
    pipe_rx3_elec_idle,
    PIPE_TXDATAK,
    PIPE_TXDATA,
    PIPE_POWERDOWN,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ,
    phy_rdy_n_int_reg,
    pipe_rx3_polarity,
    CLK,
    pipe_tx3_compliance,
    pipe_tx3_elec_idle,
    pipe_rx3_valid_gt,
    PIPE_RXCHANISALIGNED,
    gt_rx_phy_status_q_reg,
    gt_rxelecidle_q_reg,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ,
    \gt_rxcharisk_q_reg[1] ,
    \gt_rxdata_q_reg[15] ,
    \gt_rx_status_q_reg[2] );
  output [0:0]PIPE_RXPOLARITY;
  output [0:0]PIPE_TXCOMPLIANCE;
  output [0:0]PIPE_TXELECIDLE;
  output pipe_rx3_valid;
  output pipe_rx3_chanisaligned;
  output pipe_rx3_phy_status;
  output pipe_rx3_elec_idle;
  output [1:0]PIPE_TXDATAK;
  output [15:0]PIPE_TXDATA;
  output [1:0]PIPE_POWERDOWN;
  output [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  output [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  output [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ;
  input [0:0]phy_rdy_n_int_reg;
  input pipe_rx3_polarity;
  input CLK;
  input pipe_tx3_compliance;
  input pipe_tx3_elec_idle;
  input pipe_rx3_valid_gt;
  input [0:0]PIPE_RXCHANISALIGNED;
  input gt_rx_phy_status_q_reg;
  input gt_rxelecidle_q_reg;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  input [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;
  input [1:0]\gt_rxcharisk_q_reg[1] ;
  input [15:0]\gt_rxdata_q_reg[15] ;
  input [2:0]\gt_rx_status_q_reg[2] ;

  wire CLK;
  wire [1:0]PIPE_POWERDOWN;
  wire [0:0]PIPE_RXCHANISALIGNED;
  wire [0:0]PIPE_RXPOLARITY;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [15:0]PIPE_TXDATA;
  wire [1:0]PIPE_TXDATAK;
  wire [0:0]PIPE_TXELECIDLE;
  wire [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ;
  wire gt_rx_phy_status_q_reg;
  wire [2:0]\gt_rx_status_q_reg[2] ;
  wire [1:0]\gt_rxcharisk_q_reg[1] ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire gt_rxelecidle_q_reg;
  wire [0:0]phy_rdy_n_int_reg;
  wire pipe_rx3_chanisaligned;
  wire pipe_rx3_elec_idle;
  wire pipe_rx3_phy_status;
  wire pipe_rx3_polarity;
  wire pipe_rx3_valid;
  wire pipe_rx3_valid_gt;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  wire [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;
  wire pipe_tx3_compliance;
  wire pipe_tx3_elec_idle;

  FDRE \pipe_stages_1.pipe_rx_chanisaligned_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_RXCHANISALIGNED),
        .Q(pipe_rx3_chanisaligned),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_char_is_k_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxcharisk_q_reg[1] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_char_is_k_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxcharisk_q_reg[1] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [10]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [10]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [11]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [11]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [12]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [12]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [13]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [13]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [14]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [14]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [15]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [15]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [2]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [3]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [3]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [4]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [4]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [5]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [5]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [6]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [6]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [7]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [7]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [8]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [8]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [9]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [9]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_elec_idle_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxelecidle_q_reg),
        .Q(pipe_rx3_elec_idle),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_phy_status_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rx_phy_status_q_reg),
        .Q(pipe_rx3_phy_status),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_polarity_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rx3_polarity),
        .Q(PIPE_RXPOLARITY),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [2]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 [2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_valid_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rx3_valid_gt),
        .Q(pipe_rx3_valid),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_char_is_k_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 [0]),
        .Q(PIPE_TXDATAK[0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_char_is_k_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 [1]),
        .Q(PIPE_TXDATAK[1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_compliance_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx3_compliance),
        .Q(PIPE_TXCOMPLIANCE),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [0]),
        .Q(PIPE_TXDATA[0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [10]),
        .Q(PIPE_TXDATA[10]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [11]),
        .Q(PIPE_TXDATA[11]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [12]),
        .Q(PIPE_TXDATA[12]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [13]),
        .Q(PIPE_TXDATA[13]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [14]),
        .Q(PIPE_TXDATA[14]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [15]),
        .Q(PIPE_TXDATA[15]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [1]),
        .Q(PIPE_TXDATA[1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [2]),
        .Q(PIPE_TXDATA[2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [3]),
        .Q(PIPE_TXDATA[3]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [4]),
        .Q(PIPE_TXDATA[4]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [5]),
        .Q(PIPE_TXDATA[5]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [6]),
        .Q(PIPE_TXDATA[6]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [7]),
        .Q(PIPE_TXDATA[7]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [8]),
        .Q(PIPE_TXDATA[8]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [9]),
        .Q(PIPE_TXDATA[9]),
        .R(phy_rdy_n_int_reg));
  FDSE \pipe_stages_1.pipe_tx_elec_idle_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx3_elec_idle),
        .Q(PIPE_TXELECIDLE),
        .S(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_powerdown_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 [0]),
        .Q(PIPE_POWERDOWN[0]),
        .R(phy_rdy_n_int_reg));
  FDSE \pipe_stages_1.pipe_tx_powerdown_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 [1]),
        .Q(PIPE_POWERDOWN[1]),
        .S(phy_rdy_n_int_reg));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_pipe_lane" *) 
module pcie_7x_0_pcie_7x_0_pcie_pipe_lane_2
   (PIPE_RXPOLARITY,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    pipe_rx0_valid,
    pipe_rx0_chanisaligned,
    pipe_rx0_phy_status,
    pipe_rx0_elec_idle,
    PIPE_TXDATAK,
    PIPE_TXDATA,
    PIPE_POWERDOWN,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ,
    phy_rdy_n_int_reg,
    pipe_rx0_polarity,
    CLK,
    pipe_tx0_compliance,
    pipe_tx0_elec_idle,
    pipe_rx0_valid_gt,
    PIPE_RXCHANISALIGNED,
    gt_rx_phy_status_q,
    gt_rxelecidle_q,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ,
    \gt_rxcharisk_q_reg[1] ,
    \gt_rxdata_q_reg[15] ,
    \gt_rx_status_q_reg[2] );
  output [0:0]PIPE_RXPOLARITY;
  output [0:0]PIPE_TXCOMPLIANCE;
  output [0:0]PIPE_TXELECIDLE;
  output pipe_rx0_valid;
  output pipe_rx0_chanisaligned;
  output pipe_rx0_phy_status;
  output pipe_rx0_elec_idle;
  output [1:0]PIPE_TXDATAK;
  output [15:0]PIPE_TXDATA;
  output [1:0]PIPE_POWERDOWN;
  output [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  output [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  output [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ;
  input [0:0]phy_rdy_n_int_reg;
  input pipe_rx0_polarity;
  input CLK;
  input pipe_tx0_compliance;
  input pipe_tx0_elec_idle;
  input pipe_rx0_valid_gt;
  input [0:0]PIPE_RXCHANISALIGNED;
  input gt_rx_phy_status_q;
  input gt_rxelecidle_q;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  input [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;
  input [1:0]\gt_rxcharisk_q_reg[1] ;
  input [15:0]\gt_rxdata_q_reg[15] ;
  input [2:0]\gt_rx_status_q_reg[2] ;

  wire CLK;
  wire [1:0]PIPE_POWERDOWN;
  wire [0:0]PIPE_RXCHANISALIGNED;
  wire [0:0]PIPE_RXPOLARITY;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [15:0]PIPE_TXDATA;
  wire [1:0]PIPE_TXDATAK;
  wire [0:0]PIPE_TXELECIDLE;
  wire [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ;
  wire gt_rx_phy_status_q;
  wire [2:0]\gt_rx_status_q_reg[2] ;
  wire [1:0]\gt_rxcharisk_q_reg[1] ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire gt_rxelecidle_q;
  wire [0:0]phy_rdy_n_int_reg;
  wire pipe_rx0_chanisaligned;
  wire pipe_rx0_elec_idle;
  wire pipe_rx0_phy_status;
  wire pipe_rx0_polarity;
  wire pipe_rx0_valid;
  wire pipe_rx0_valid_gt;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  wire [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;
  wire pipe_tx0_compliance;
  wire pipe_tx0_elec_idle;

  FDRE \pipe_stages_1.pipe_rx_chanisaligned_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_RXCHANISALIGNED),
        .Q(pipe_rx0_chanisaligned),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_char_is_k_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxcharisk_q_reg[1] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_char_is_k_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxcharisk_q_reg[1] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [10]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [10]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [11]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [11]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [12]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [12]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [13]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [13]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [14]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [14]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [15]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [15]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [2]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [3]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [3]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [4]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [4]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [5]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [5]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [6]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [6]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [7]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [7]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [8]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [8]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_data_q_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rxdata_q_reg[15] [9]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 [9]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_elec_idle_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxelecidle_q),
        .Q(pipe_rx0_elec_idle),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_phy_status_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rx_phy_status_q),
        .Q(pipe_rx0_phy_status),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_polarity_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rx0_polarity),
        .Q(PIPE_RXPOLARITY),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [0]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [1]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_status_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gt_rx_status_q_reg[2] [2]),
        .Q(\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 [2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_rx_valid_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rx0_valid_gt),
        .Q(pipe_rx0_valid),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_char_is_k_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 [0]),
        .Q(PIPE_TXDATAK[0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_char_is_k_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 [1]),
        .Q(PIPE_TXDATAK[1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_compliance_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx0_compliance),
        .Q(PIPE_TXCOMPLIANCE),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [0]),
        .Q(PIPE_TXDATA[0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [10]),
        .Q(PIPE_TXDATA[10]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [11]),
        .Q(PIPE_TXDATA[11]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [12]),
        .Q(PIPE_TXDATA[12]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [13]),
        .Q(PIPE_TXDATA[13]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [14]),
        .Q(PIPE_TXDATA[14]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [15]),
        .Q(PIPE_TXDATA[15]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [1]),
        .Q(PIPE_TXDATA[1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [2]),
        .Q(PIPE_TXDATA[2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [3]),
        .Q(PIPE_TXDATA[3]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [4]),
        .Q(PIPE_TXDATA[4]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [5]),
        .Q(PIPE_TXDATA[5]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [6]),
        .Q(PIPE_TXDATA[6]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [7]),
        .Q(PIPE_TXDATA[7]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [8]),
        .Q(PIPE_TXDATA[8]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_data_q_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 [9]),
        .Q(PIPE_TXDATA[9]),
        .R(phy_rdy_n_int_reg));
  FDSE \pipe_stages_1.pipe_tx_elec_idle_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx0_elec_idle),
        .Q(PIPE_TXELECIDLE),
        .S(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_powerdown_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 [0]),
        .Q(PIPE_POWERDOWN[0]),
        .R(phy_rdy_n_int_reg));
  FDSE \pipe_stages_1.pipe_tx_powerdown_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 [1]),
        .Q(PIPE_POWERDOWN[1]),
        .S(phy_rdy_n_int_reg));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_pipe_misc" *) 
module pcie_7x_0_pcie_7x_0_pcie_pipe_misc
   (pipe_tx_rcvr_det_gt,
    \rate_reg1_reg[0] ,
    pipe_tx_deemph_gt,
    \cplllock_reg1_reg[3] ,
    phy_rdy_n_int_reg,
    pipe_tx_rcvr_det,
    CLK,
    pipe_tx_rate,
    pipe_tx_deemph,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg );
  output pipe_tx_rcvr_det_gt;
  output [0:0]\rate_reg1_reg[0] ;
  output pipe_tx_deemph_gt;
  output [2:0]\cplllock_reg1_reg[3] ;
  input [0:0]phy_rdy_n_int_reg;
  input pipe_tx_rcvr_det;
  input CLK;
  input pipe_tx_rate;
  input pipe_tx_deemph;
  input [2:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;

  wire CLK;
  wire [2:0]\cplllock_reg1_reg[3] ;
  wire [0:0]phy_rdy_n_int_reg;
  wire [2:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire pipe_tx_deemph;
  wire pipe_tx_deemph_gt;
  wire pipe_tx_rate;
  wire pipe_tx_rcvr_det;
  wire pipe_tx_rcvr_det_gt;
  wire [0:0]\rate_reg1_reg[0] ;

  FDSE \pipe_stages_1.pipe_tx_deemph_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx_deemph),
        .Q(pipe_tx_deemph_gt),
        .S(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_margin_q_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg [0]),
        .Q(\cplllock_reg1_reg[3] [0]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_margin_q_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg [1]),
        .Q(\cplllock_reg1_reg[3] [1]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_margin_q_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_rx_chanisaligned_q_reg [2]),
        .Q(\cplllock_reg1_reg[3] [2]),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_rate_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx_rate),
        .Q(\rate_reg1_reg[0] ),
        .R(phy_rdy_n_int_reg));
  FDRE \pipe_stages_1.pipe_tx_rcvr_det_q_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_tx_rcvr_det),
        .Q(pipe_tx_rcvr_det_gt),
        .R(phy_rdy_n_int_reg));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_pipe_pipeline" *) 
module pcie_7x_0_pcie_7x_0_pcie_pipe_pipeline
   (pipe_rx1_valid,
    pipe_rx1_chanisaligned,
    pipe_rx1_phy_status,
    pipe_rx1_elec_idle,
    PIPE_RXPOLARITY,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    pipe_rx2_valid,
    pipe_rx2_chanisaligned,
    pipe_rx2_phy_status,
    pipe_rx2_elec_idle,
    pipe_rx3_valid,
    pipe_rx3_chanisaligned,
    pipe_rx3_phy_status,
    pipe_rx3_elec_idle,
    pipe_tx_rcvr_det_gt,
    \rate_reg1_reg[0] ,
    pipe_tx_deemph_gt,
    pipe_rx0_valid,
    pipe_rx0_chanisaligned,
    pipe_rx0_phy_status,
    pipe_rx0_elec_idle,
    Q,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ,
    PIPE_TXDATAK,
    PIPE_TXDATA,
    PIPE_POWERDOWN,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_2 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_3 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_4 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_5 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_6 ,
    \cplllock_reg1_reg[3] ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_7 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_8 ,
    \genblk5_0.bram36_tdp_bl.bram36_tdp_bl_9 ,
    phy_rdy_n_int_reg,
    pipe_rx1_valid_gt,
    CLK,
    PIPE_RXCHANISALIGNED,
    gt_rx_phy_status_q_reg,
    gt_rxelecidle_q_reg,
    pipe_rx0_polarity,
    pipe_rx1_polarity,
    pipe_rx2_polarity,
    pipe_rx3_polarity,
    pipe_tx0_compliance,
    pipe_tx1_compliance,
    pipe_tx2_compliance,
    pipe_tx3_compliance,
    pipe_tx0_elec_idle,
    pipe_tx1_elec_idle,
    pipe_tx2_elec_idle,
    pipe_tx3_elec_idle,
    pipe_rx2_valid_gt,
    gt_rx_phy_status_q_reg_0,
    gt_rxelecidle_q_reg_0,
    pipe_rx3_valid_gt,
    gt_rx_phy_status_q_reg_1,
    gt_rxelecidle_q_reg_1,
    pipe_tx_rcvr_det,
    pipe_tx_rate,
    pipe_tx_deemph,
    pipe_rx0_valid_gt,
    gt_rx_phy_status_q,
    gt_rxelecidle_q,
    D,
    \gt_rxdata_q_reg[15] ,
    \gt_rx_status_q_reg[2] ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_3 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_4 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_5 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_6 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_7 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_8 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_9 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_10 ,
    \gt_rxcharisk_q_reg[1] ,
    \gt_rxdata_q_reg[15]_0 ,
    \gt_rx_status_q_reg[2]_0 ,
    \gt_rxcharisk_q_reg[1]_0 ,
    \gt_rxdata_q_reg[15]_1 ,
    \gt_rx_status_q_reg[2]_1 ,
    \pipe_stages_1.pipe_rx_chanisaligned_q_reg_11 ,
    \gt_rxcharisk_q_reg[1]_1 ,
    \gt_rxdata_q_reg[15]_2 ,
    \gt_rx_status_q_reg[2]_2 );
  output pipe_rx1_valid;
  output pipe_rx1_chanisaligned;
  output pipe_rx1_phy_status;
  output pipe_rx1_elec_idle;
  output [3:0]PIPE_RXPOLARITY;
  output [3:0]PIPE_TXCOMPLIANCE;
  output [3:0]PIPE_TXELECIDLE;
  output pipe_rx2_valid;
  output pipe_rx2_chanisaligned;
  output pipe_rx2_phy_status;
  output pipe_rx2_elec_idle;
  output pipe_rx3_valid;
  output pipe_rx3_chanisaligned;
  output pipe_rx3_phy_status;
  output pipe_rx3_elec_idle;
  output pipe_tx_rcvr_det_gt;
  output [0:0]\rate_reg1_reg[0] ;
  output pipe_tx_deemph_gt;
  output pipe_rx0_valid;
  output pipe_rx0_chanisaligned;
  output pipe_rx0_phy_status;
  output pipe_rx0_elec_idle;
  output [1:0]Q;
  output [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  output [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  output [7:0]PIPE_TXDATAK;
  output [63:0]PIPE_TXDATA;
  output [7:0]PIPE_POWERDOWN;
  output [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ;
  output [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_2 ;
  output [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_3 ;
  output [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_4 ;
  output [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_5 ;
  output [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_6 ;
  output [2:0]\cplllock_reg1_reg[3] ;
  output [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_7 ;
  output [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_8 ;
  output [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_9 ;
  input [0:0]phy_rdy_n_int_reg;
  input pipe_rx1_valid_gt;
  input CLK;
  input [3:0]PIPE_RXCHANISALIGNED;
  input gt_rx_phy_status_q_reg;
  input gt_rxelecidle_q_reg;
  input pipe_rx0_polarity;
  input pipe_rx1_polarity;
  input pipe_rx2_polarity;
  input pipe_rx3_polarity;
  input pipe_tx0_compliance;
  input pipe_tx1_compliance;
  input pipe_tx2_compliance;
  input pipe_tx3_compliance;
  input pipe_tx0_elec_idle;
  input pipe_tx1_elec_idle;
  input pipe_tx2_elec_idle;
  input pipe_tx3_elec_idle;
  input pipe_rx2_valid_gt;
  input gt_rx_phy_status_q_reg_0;
  input gt_rxelecidle_q_reg_0;
  input pipe_rx3_valid_gt;
  input gt_rx_phy_status_q_reg_1;
  input gt_rxelecidle_q_reg_1;
  input pipe_tx_rcvr_det;
  input pipe_tx_rate;
  input pipe_tx_deemph;
  input pipe_rx0_valid_gt;
  input gt_rx_phy_status_q;
  input gt_rxelecidle_q;
  input [1:0]D;
  input [15:0]\gt_rxdata_q_reg[15] ;
  input [2:0]\gt_rx_status_q_reg[2] ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;
  input [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_3 ;
  input [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_4 ;
  input [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_5 ;
  input [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_6 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_7 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_8 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_9 ;
  input [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_10 ;
  input [1:0]\gt_rxcharisk_q_reg[1] ;
  input [15:0]\gt_rxdata_q_reg[15]_0 ;
  input [2:0]\gt_rx_status_q_reg[2]_0 ;
  input [1:0]\gt_rxcharisk_q_reg[1]_0 ;
  input [15:0]\gt_rxdata_q_reg[15]_1 ;
  input [2:0]\gt_rx_status_q_reg[2]_1 ;
  input [2:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_11 ;
  input [1:0]\gt_rxcharisk_q_reg[1]_1 ;
  input [15:0]\gt_rxdata_q_reg[15]_2 ;
  input [2:0]\gt_rx_status_q_reg[2]_2 ;

  wire CLK;
  wire [1:0]D;
  wire [7:0]PIPE_POWERDOWN;
  wire [3:0]PIPE_RXCHANISALIGNED;
  wire [3:0]PIPE_RXPOLARITY;
  wire [3:0]PIPE_TXCOMPLIANCE;
  wire [63:0]PIPE_TXDATA;
  wire [7:0]PIPE_TXDATAK;
  wire [3:0]PIPE_TXELECIDLE;
  wire [1:0]Q;
  wire [2:0]\cplllock_reg1_reg[3] ;
  wire [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ;
  wire [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ;
  wire [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ;
  wire [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_2 ;
  wire [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_3 ;
  wire [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_4 ;
  wire [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_5 ;
  wire [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_6 ;
  wire [1:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_7 ;
  wire [15:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_8 ;
  wire [2:0]\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_9 ;
  wire gt_rx_phy_status_q;
  wire gt_rx_phy_status_q_reg;
  wire gt_rx_phy_status_q_reg_0;
  wire gt_rx_phy_status_q_reg_1;
  wire [2:0]\gt_rx_status_q_reg[2] ;
  wire [2:0]\gt_rx_status_q_reg[2]_0 ;
  wire [2:0]\gt_rx_status_q_reg[2]_1 ;
  wire [2:0]\gt_rx_status_q_reg[2]_2 ;
  wire [1:0]\gt_rxcharisk_q_reg[1] ;
  wire [1:0]\gt_rxcharisk_q_reg[1]_0 ;
  wire [1:0]\gt_rxcharisk_q_reg[1]_1 ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire [15:0]\gt_rxdata_q_reg[15]_0 ;
  wire [15:0]\gt_rxdata_q_reg[15]_1 ;
  wire [15:0]\gt_rxdata_q_reg[15]_2 ;
  wire gt_rxelecidle_q;
  wire gt_rxelecidle_q_reg;
  wire gt_rxelecidle_q_reg_0;
  wire gt_rxelecidle_q_reg_1;
  wire [0:0]phy_rdy_n_int_reg;
  wire pipe_rx0_chanisaligned;
  wire pipe_rx0_elec_idle;
  wire pipe_rx0_phy_status;
  wire pipe_rx0_polarity;
  wire pipe_rx0_valid;
  wire pipe_rx0_valid_gt;
  wire pipe_rx1_chanisaligned;
  wire pipe_rx1_elec_idle;
  wire pipe_rx1_phy_status;
  wire pipe_rx1_polarity;
  wire pipe_rx1_valid;
  wire pipe_rx1_valid_gt;
  wire pipe_rx2_chanisaligned;
  wire pipe_rx2_elec_idle;
  wire pipe_rx2_phy_status;
  wire pipe_rx2_polarity;
  wire pipe_rx2_valid;
  wire pipe_rx2_valid_gt;
  wire pipe_rx3_chanisaligned;
  wire pipe_rx3_elec_idle;
  wire pipe_rx3_phy_status;
  wire pipe_rx3_polarity;
  wire pipe_rx3_valid;
  wire pipe_rx3_valid_gt;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_10 ;
  wire [2:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_11 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ;
  wire [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_3 ;
  wire [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_4 ;
  wire [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_5 ;
  wire [15:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_6 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_7 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_8 ;
  wire [1:0]\pipe_stages_1.pipe_rx_chanisaligned_q_reg_9 ;
  wire pipe_tx0_compliance;
  wire pipe_tx0_elec_idle;
  wire pipe_tx1_compliance;
  wire pipe_tx1_elec_idle;
  wire pipe_tx2_compliance;
  wire pipe_tx2_elec_idle;
  wire pipe_tx3_compliance;
  wire pipe_tx3_elec_idle;
  wire pipe_tx_deemph;
  wire pipe_tx_deemph_gt;
  wire pipe_tx_rate;
  wire pipe_tx_rcvr_det;
  wire pipe_tx_rcvr_det_gt;
  wire [0:0]\rate_reg1_reg[0] ;

  pcie_7x_0_pcie_7x_0_pcie_pipe_lane \pipe_2_lane.pipe_lane_1_i 
       (.CLK(CLK),
        .D(D),
        .PIPE_POWERDOWN(PIPE_POWERDOWN[3:2]),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED[1]),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY[1]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[1]),
        .PIPE_TXDATA(PIPE_TXDATA[31:16]),
        .PIPE_TXDATAK(PIPE_TXDATAK[3:2]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[1]),
        .Q(Q),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ),
        .gt_rx_phy_status_q_reg(gt_rx_phy_status_q_reg),
        .\gt_rx_status_q_reg[2] (\gt_rx_status_q_reg[2] ),
        .\gt_rxdata_q_reg[15] (\gt_rxdata_q_reg[15] ),
        .gt_rxelecidle_q_reg(gt_rxelecidle_q_reg),
        .phy_rdy_n_int_reg(phy_rdy_n_int_reg),
        .pipe_rx1_chanisaligned(pipe_rx1_chanisaligned),
        .pipe_rx1_elec_idle(pipe_rx1_elec_idle),
        .pipe_rx1_phy_status(pipe_rx1_phy_status),
        .pipe_rx1_polarity(pipe_rx1_polarity),
        .pipe_rx1_valid(pipe_rx1_valid),
        .pipe_rx1_valid_gt(pipe_rx1_valid_gt),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 ),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_4 ),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_8 ),
        .pipe_tx1_compliance(pipe_tx1_compliance),
        .pipe_tx1_elec_idle(pipe_tx1_elec_idle));
  pcie_7x_0_pcie_7x_0_pcie_pipe_lane_0 \pipe_4_lane.pipe_lane_2_i 
       (.CLK(CLK),
        .PIPE_POWERDOWN(PIPE_POWERDOWN[5:4]),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED[2]),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY[2]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[2]),
        .PIPE_TXDATA(PIPE_TXDATA[47:32]),
        .PIPE_TXDATAK(PIPE_TXDATAK[5:4]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[2]),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_2 ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_3 ),
        .gt_rx_phy_status_q_reg(gt_rx_phy_status_q_reg_0),
        .\gt_rx_status_q_reg[2] (\gt_rx_status_q_reg[2]_0 ),
        .\gt_rxcharisk_q_reg[1] (\gt_rxcharisk_q_reg[1] ),
        .\gt_rxdata_q_reg[15] (\gt_rxdata_q_reg[15]_0 ),
        .gt_rxelecidle_q_reg(gt_rxelecidle_q_reg_0),
        .phy_rdy_n_int_reg(phy_rdy_n_int_reg),
        .pipe_rx2_chanisaligned(pipe_rx2_chanisaligned),
        .pipe_rx2_elec_idle(pipe_rx2_elec_idle),
        .pipe_rx2_phy_status(pipe_rx2_phy_status),
        .pipe_rx2_polarity(pipe_rx2_polarity),
        .pipe_rx2_valid(pipe_rx2_valid),
        .pipe_rx2_valid_gt(pipe_rx2_valid_gt),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 ),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_5 ),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_9 ),
        .pipe_tx2_compliance(pipe_tx2_compliance),
        .pipe_tx2_elec_idle(pipe_tx2_elec_idle));
  pcie_7x_0_pcie_7x_0_pcie_pipe_lane_1 \pipe_4_lane.pipe_lane_3_i 
       (.CLK(CLK),
        .PIPE_POWERDOWN(PIPE_POWERDOWN[7:6]),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED[3]),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY[3]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[3]),
        .PIPE_TXDATA(PIPE_TXDATA[63:48]),
        .PIPE_TXDATAK(PIPE_TXDATAK[7:6]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[3]),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_4 ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_5 ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_6 ),
        .gt_rx_phy_status_q_reg(gt_rx_phy_status_q_reg_1),
        .\gt_rx_status_q_reg[2] (\gt_rx_status_q_reg[2]_1 ),
        .\gt_rxcharisk_q_reg[1] (\gt_rxcharisk_q_reg[1]_0 ),
        .\gt_rxdata_q_reg[15] (\gt_rxdata_q_reg[15]_1 ),
        .gt_rxelecidle_q_reg(gt_rxelecidle_q_reg_1),
        .phy_rdy_n_int_reg(phy_rdy_n_int_reg),
        .pipe_rx3_chanisaligned(pipe_rx3_chanisaligned),
        .pipe_rx3_elec_idle(pipe_rx3_elec_idle),
        .pipe_rx3_phy_status(pipe_rx3_phy_status),
        .pipe_rx3_polarity(pipe_rx3_polarity),
        .pipe_rx3_valid(pipe_rx3_valid),
        .pipe_rx3_valid_gt(pipe_rx3_valid_gt),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 ),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_6 ),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_10 ),
        .pipe_tx3_compliance(pipe_tx3_compliance),
        .pipe_tx3_elec_idle(pipe_tx3_elec_idle));
  pcie_7x_0_pcie_7x_0_pcie_pipe_lane_2 pipe_lane_0_i
       (.CLK(CLK),
        .PIPE_POWERDOWN(PIPE_POWERDOWN[1:0]),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED[0]),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY[0]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[0]),
        .PIPE_TXDATA(PIPE_TXDATA[15:0]),
        .PIPE_TXDATAK(PIPE_TXDATAK[1:0]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[0]),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_7 ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_8 ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 (\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_9 ),
        .gt_rx_phy_status_q(gt_rx_phy_status_q),
        .\gt_rx_status_q_reg[2] (\gt_rx_status_q_reg[2]_2 ),
        .\gt_rxcharisk_q_reg[1] (\gt_rxcharisk_q_reg[1]_1 ),
        .\gt_rxdata_q_reg[15] (\gt_rxdata_q_reg[15]_2 ),
        .gt_rxelecidle_q(gt_rxelecidle_q),
        .phy_rdy_n_int_reg(phy_rdy_n_int_reg),
        .pipe_rx0_chanisaligned(pipe_rx0_chanisaligned),
        .pipe_rx0_elec_idle(pipe_rx0_elec_idle),
        .pipe_rx0_phy_status(pipe_rx0_phy_status),
        .pipe_rx0_polarity(pipe_rx0_polarity),
        .pipe_rx0_valid(pipe_rx0_valid),
        .pipe_rx0_valid_gt(pipe_rx0_valid_gt),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg ),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_3 ),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_7 ),
        .pipe_tx0_compliance(pipe_tx0_compliance),
        .pipe_tx0_elec_idle(pipe_tx0_elec_idle));
  pcie_7x_0_pcie_7x_0_pcie_pipe_misc pipe_misc_i
       (.CLK(CLK),
        .\cplllock_reg1_reg[3] (\cplllock_reg1_reg[3] ),
        .phy_rdy_n_int_reg(phy_rdy_n_int_reg),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (\pipe_stages_1.pipe_rx_chanisaligned_q_reg_11 ),
        .pipe_tx_deemph(pipe_tx_deemph),
        .pipe_tx_deemph_gt(pipe_tx_deemph_gt),
        .pipe_tx_rate(pipe_tx_rate),
        .pipe_tx_rcvr_det(pipe_tx_rcvr_det),
        .pipe_tx_rcvr_det_gt(pipe_tx_rcvr_det_gt),
        .\rate_reg1_reg[0] (\rate_reg1_reg[0] ));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pcie_top" *) 
module pcie_7x_0_pcie_7x_0_pcie_top
   (m_axis_rx_tvalid_mux,
    m_axis_rx_tkeep,
    m_axis_rx_tlast,
    s_axis_tx_tready_mux,
    PIPE_RXPOLARITY,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    pipe_tx_rcvr_det_gt,
    \rate_reg1_reg[0] ,
    pipe_tx_deemph_gt,
    user_reset_int_reg,
    m_axis_rx_tuser_mux,
    tx_err_drop,
    tx_cfg_req,
    s_axis_tx_tready,
    m_axis_rx_tvalid,
    m_axis_rx_tlast_0,
    cfg_msg_received,
    cfg_to_turnoff,
    cfg_msg_received_pme_to,
    pcie_drp_rdy,
    Q,
    tx_buf_av,
    cfg_pcie_link_state,
    cfg_pmcsr_powerstate,
    cfg_device_number,
    \gen_cpl_64.s_axis_tx_tdata_reg[55] ,
    cfg_function_number,
    \gen_cpl_64.s_axis_tx_tdata_reg[50] ,
    in0,
    pl_ltssm_state,
    \ltssm_reg2_reg[5] ,
    m_axis_rx_tdata,
    \m_axis_rx_tkeep[7] ,
    m_axis_rx_tuser,
    cfg_msg_data,
    cfg_bus_number,
    \gen_cpl_64.s_axis_tx_tdata_reg[63] ,
    pcie_drp_do,
    src_in,
    cfg_mgmt_rd_wr_done,
    cfg_err_aer_headerlog_set,
    cfg_err_cpl_rdy,
    cfg_interrupt_rdy,
    cfg_received_func_lvl_rst,
    PIPE_TXDATAK,
    PIPE_TXDATA,
    PIPE_POWERDOWN,
    \cplllock_reg1_reg[3] ,
    cfg_aer_ecrc_check_en,
    cfg_aer_ecrc_gen_en,
    cfg_aer_rooterr_corr_err_received,
    cfg_aer_rooterr_corr_err_reporting_en,
    cfg_aer_rooterr_fatal_err_received,
    cfg_aer_rooterr_fatal_err_reporting_en,
    cfg_aer_rooterr_non_fatal_err_received,
    cfg_aer_rooterr_non_fatal_err_reporting_en,
    cfg_bridge_serr_en,
    cfg_command,
    cfg_dcommand2,
    cfg_dcommand,
    cfg_dstatus,
    cfg_interrupt_msienable,
    cfg_interrupt_msixenable,
    cfg_interrupt_msixfm,
    cfg_lcommand,
    cfg_lstatus,
    cfg_msg_received_assert_int_a,
    cfg_msg_received_assert_int_b,
    cfg_msg_received_assert_int_c,
    cfg_msg_received_assert_int_d,
    cfg_msg_received_deassert_int_a,
    cfg_msg_received_deassert_int_b,
    cfg_msg_received_deassert_int_c,
    cfg_msg_received_deassert_int_d,
    cfg_msg_received_err_cor,
    cfg_msg_received_err_fatal,
    cfg_msg_received_err_non_fatal,
    cfg_msg_received_pm_as_nak,
    cfg_msg_received_pme_to_ack,
    cfg_msg_received_pm_pme,
    cfg_msg_received_setslotpowerlimit,
    cfg_pmcsr_pme_en,
    cfg_pmcsr_pme_status,
    cfg_root_control_pme_int_en,
    cfg_root_control_syserr_corr_err_en,
    cfg_root_control_syserr_fatal_err_en,
    cfg_root_control_syserr_non_fatal_err_en,
    cfg_slot_control_electromech_il_ctl_pulse,
    pl_directed_change_done,
    pl_link_gen2_cap,
    pl_link_partner_gen2_supported,
    pl_link_upcfg_cap,
    pl_received_hot_rst,
    pl_sel_lnk_rate,
    trn_lnk_up,
    fc_cpld,
    fc_npd,
    fc_pd,
    pl_lane_reversal_mode,
    pl_rx_pm_state,
    pl_sel_lnk_width,
    cfg_interrupt_mmenable,
    pl_initial_link_width,
    pl_tx_pm_state,
    cfg_mgmt_do,
    cfg_vc_tcvc_map,
    cfg_interrupt_do,
    fc_cplh,
    fc_nph,
    fc_ph,
    SR,
    user_clk,
    phy_rdy_n_int_reg,
    pipe_rx1_valid_gt,
    CLK,
    PIPE_RXCHANISALIGNED,
    gt_rx_phy_status_q_reg,
    gt_rxelecidle_q_reg,
    pipe_rx2_valid_gt,
    gt_rx_phy_status_q_reg_0,
    gt_rxelecidle_q_reg_0,
    pipe_rx3_valid_gt,
    gt_rx_phy_status_q_reg_1,
    gt_rxelecidle_q_reg_1,
    pipe_rx0_valid_gt,
    gt_rx_phy_status_q,
    gt_rxelecidle_q,
    m_axis_rx_tready,
    user_app_rdy_gnt,
    \pio_rx_sm_64.m_axis_rx_tready_reg ,
    s_axis_tx_tvalid,
    s_axis_tx_tvalid_0,
    bridge_reset_int,
    pl_phy_lnk_up_q,
    s_axis_tx_tlast,
    s_axis_tx_tlast_0,
    out,
    s_axis_tx_tdata,
    \gen_cpl_64.s_axis_tx_tdata_reg[63]_0 ,
    s_axis_tx_tuser,
    UNCONN_IN,
    pl_transmit_hot_rst,
    cfg_mgmt_wr_en,
    cfg_mgmt_rd_en,
    cfg_err_malformed,
    cfg_err_cor,
    cfg_err_ur,
    cfg_err_ecrc,
    cfg_err_cpl_timeout,
    cfg_err_cpl_abort,
    cfg_err_cpl_unexpect,
    cfg_err_poisoned,
    cfg_err_atomic_egress_blocked,
    cfg_err_mc_blocked,
    cfg_err_internal_uncor,
    cfg_err_internal_cor,
    cfg_interrupt,
    cfg_pm_halt_aspm_l0s,
    cfg_pm_halt_aspm_l1,
    cfg_pm_force_state_en,
    cfg_pm_wake,
    cfg_turnoff_ok,
    cfg_turnoff_ok_reg,
    cfg_trn_pending,
    pcie_drp_en,
    pcie_drp_we,
    ltssm_reg2,
    tx_cfg_gnt,
    rx_np_ok,
    rx_np_req,
    fc_sel,
    pl_directed_link_change,
    pl_upstream_prefer_deemph,
    cfg_ds_device_number,
    cfg_ds_function_number,
    s_axis_tx_tkeep,
    \gen_cpl_64.s_axis_tx_tkeep_reg[7] ,
    cfg_ds_bus_number,
    cfg_dsn,
    pcie_drp_addr,
    pcie_drp_di,
    cfg_mgmt_wr_rw1c_as_rw,
    cfg_mgmt_wr_readonly,
    cfg_err_posted,
    cfg_err_locked,
    cfg_err_norecovery,
    cfg_interrupt_assert,
    cfg_interrupt_stat,
    D,
    \gt_rxdata_q_reg[15] ,
    \gt_rx_status_q_reg[2] ,
    \gt_rxcharisk_q_reg[1] ,
    \gt_rxdata_q_reg[15]_0 ,
    \gt_rx_status_q_reg[2]_0 ,
    \gt_rxcharisk_q_reg[1]_0 ,
    \gt_rxdata_q_reg[15]_1 ,
    \gt_rx_status_q_reg[2]_1 ,
    \gt_rxcharisk_q_reg[1]_1 ,
    \gt_rxdata_q_reg[15]_2 ,
    \gt_rx_status_q_reg[2]_2 ,
    pcie_drp_clk,
    pl_directed_link_auton,
    pl_directed_link_speed,
    pl_downstream_deemph_source,
    sys_rst_n,
    cfg_err_aer_headerlog,
    cfg_pm_force_state,
    pl_directed_link_width,
    cfg_mgmt_di,
    cfg_mgmt_byte_en_n,
    cfg_err_tlp_cpl_header,
    cfg_aer_interrupt_msgnum,
    cfg_pciecap_interrupt_msgnum,
    cfg_interrupt_di,
    cfg_mgmt_dwaddr);
  output m_axis_rx_tvalid_mux;
  output [0:0]m_axis_rx_tkeep;
  output m_axis_rx_tlast;
  output s_axis_tx_tready_mux;
  output [3:0]PIPE_RXPOLARITY;
  output [3:0]PIPE_TXCOMPLIANCE;
  output [3:0]PIPE_TXELECIDLE;
  output pipe_tx_rcvr_det_gt;
  output [0:0]\rate_reg1_reg[0] ;
  output pipe_tx_deemph_gt;
  output user_reset_int_reg;
  output [12:0]m_axis_rx_tuser_mux;
  output tx_err_drop;
  output tx_cfg_req;
  output s_axis_tx_tready;
  output m_axis_rx_tvalid;
  output m_axis_rx_tlast_0;
  output cfg_msg_received;
  output cfg_to_turnoff;
  output cfg_msg_received_pme_to;
  output pcie_drp_rdy;
  output [63:0]Q;
  output [5:0]tx_buf_av;
  output [2:0]cfg_pcie_link_state;
  output [1:0]cfg_pmcsr_powerstate;
  output [4:0]cfg_device_number;
  output [4:0]\gen_cpl_64.s_axis_tx_tdata_reg[55] ;
  output [2:0]cfg_function_number;
  output [2:0]\gen_cpl_64.s_axis_tx_tdata_reg[50] ;
  output in0;
  output [5:0]pl_ltssm_state;
  output [5:0]\ltssm_reg2_reg[5] ;
  output [63:0]m_axis_rx_tdata;
  output [0:0]\m_axis_rx_tkeep[7] ;
  output [12:0]m_axis_rx_tuser;
  output [15:0]cfg_msg_data;
  output [7:0]cfg_bus_number;
  output [7:0]\gen_cpl_64.s_axis_tx_tdata_reg[63] ;
  output [15:0]pcie_drp_do;
  output src_in;
  output cfg_mgmt_rd_wr_done;
  output cfg_err_aer_headerlog_set;
  output cfg_err_cpl_rdy;
  output cfg_interrupt_rdy;
  output cfg_received_func_lvl_rst;
  output [7:0]PIPE_TXDATAK;
  output [63:0]PIPE_TXDATA;
  output [7:0]PIPE_POWERDOWN;
  output [2:0]\cplllock_reg1_reg[3] ;
  output cfg_aer_ecrc_check_en;
  output cfg_aer_ecrc_gen_en;
  output cfg_aer_rooterr_corr_err_received;
  output cfg_aer_rooterr_corr_err_reporting_en;
  output cfg_aer_rooterr_fatal_err_received;
  output cfg_aer_rooterr_fatal_err_reporting_en;
  output cfg_aer_rooterr_non_fatal_err_received;
  output cfg_aer_rooterr_non_fatal_err_reporting_en;
  output cfg_bridge_serr_en;
  output [4:0]cfg_command;
  output [11:0]cfg_dcommand2;
  output [14:0]cfg_dcommand;
  output [3:0]cfg_dstatus;
  output cfg_interrupt_msienable;
  output cfg_interrupt_msixenable;
  output cfg_interrupt_msixfm;
  output [10:0]cfg_lcommand;
  output [9:0]cfg_lstatus;
  output cfg_msg_received_assert_int_a;
  output cfg_msg_received_assert_int_b;
  output cfg_msg_received_assert_int_c;
  output cfg_msg_received_assert_int_d;
  output cfg_msg_received_deassert_int_a;
  output cfg_msg_received_deassert_int_b;
  output cfg_msg_received_deassert_int_c;
  output cfg_msg_received_deassert_int_d;
  output cfg_msg_received_err_cor;
  output cfg_msg_received_err_fatal;
  output cfg_msg_received_err_non_fatal;
  output cfg_msg_received_pm_as_nak;
  output cfg_msg_received_pme_to_ack;
  output cfg_msg_received_pm_pme;
  output cfg_msg_received_setslotpowerlimit;
  output cfg_pmcsr_pme_en;
  output cfg_pmcsr_pme_status;
  output cfg_root_control_pme_int_en;
  output cfg_root_control_syserr_corr_err_en;
  output cfg_root_control_syserr_fatal_err_en;
  output cfg_root_control_syserr_non_fatal_err_en;
  output cfg_slot_control_electromech_il_ctl_pulse;
  output pl_directed_change_done;
  output pl_link_gen2_cap;
  output pl_link_partner_gen2_supported;
  output pl_link_upcfg_cap;
  output pl_received_hot_rst;
  output pl_sel_lnk_rate;
  output trn_lnk_up;
  output [11:0]fc_cpld;
  output [11:0]fc_npd;
  output [11:0]fc_pd;
  output [1:0]pl_lane_reversal_mode;
  output [1:0]pl_rx_pm_state;
  output [1:0]pl_sel_lnk_width;
  output [2:0]cfg_interrupt_mmenable;
  output [2:0]pl_initial_link_width;
  output [2:0]pl_tx_pm_state;
  output [31:0]cfg_mgmt_do;
  output [6:0]cfg_vc_tcvc_map;
  output [7:0]cfg_interrupt_do;
  output [7:0]fc_cplh;
  output [7:0]fc_nph;
  output [7:0]fc_ph;
  input [0:0]SR;
  input user_clk;
  input [0:0]phy_rdy_n_int_reg;
  input pipe_rx1_valid_gt;
  input CLK;
  input [3:0]PIPE_RXCHANISALIGNED;
  input gt_rx_phy_status_q_reg;
  input gt_rxelecidle_q_reg;
  input pipe_rx2_valid_gt;
  input gt_rx_phy_status_q_reg_0;
  input gt_rxelecidle_q_reg_0;
  input pipe_rx3_valid_gt;
  input gt_rx_phy_status_q_reg_1;
  input gt_rxelecidle_q_reg_1;
  input pipe_rx0_valid_gt;
  input gt_rx_phy_status_q;
  input gt_rxelecidle_q;
  input m_axis_rx_tready;
  input user_app_rdy_gnt;
  input \pio_rx_sm_64.m_axis_rx_tready_reg ;
  input s_axis_tx_tvalid;
  input s_axis_tx_tvalid_0;
  input bridge_reset_int;
  input pl_phy_lnk_up_q;
  input s_axis_tx_tlast;
  input s_axis_tx_tlast_0;
  input out;
  input [63:0]s_axis_tx_tdata;
  input [63:0]\gen_cpl_64.s_axis_tx_tdata_reg[63]_0 ;
  input [3:0]s_axis_tx_tuser;
  input [3:0]UNCONN_IN;
  input pl_transmit_hot_rst;
  input cfg_mgmt_wr_en;
  input cfg_mgmt_rd_en;
  input cfg_err_malformed;
  input cfg_err_cor;
  input cfg_err_ur;
  input cfg_err_ecrc;
  input cfg_err_cpl_timeout;
  input cfg_err_cpl_abort;
  input cfg_err_cpl_unexpect;
  input cfg_err_poisoned;
  input cfg_err_atomic_egress_blocked;
  input cfg_err_mc_blocked;
  input cfg_err_internal_uncor;
  input cfg_err_internal_cor;
  input cfg_interrupt;
  input cfg_pm_halt_aspm_l0s;
  input cfg_pm_halt_aspm_l1;
  input cfg_pm_force_state_en;
  input cfg_pm_wake;
  input cfg_turnoff_ok;
  input cfg_turnoff_ok_reg;
  input cfg_trn_pending;
  input pcie_drp_en;
  input pcie_drp_we;
  input [5:0]ltssm_reg2;
  input tx_cfg_gnt;
  input rx_np_ok;
  input rx_np_req;
  input [2:0]fc_sel;
  input [1:0]pl_directed_link_change;
  input pl_upstream_prefer_deemph;
  input [4:0]cfg_ds_device_number;
  input [2:0]cfg_ds_function_number;
  input [0:0]s_axis_tx_tkeep;
  input [0:0]\gen_cpl_64.s_axis_tx_tkeep_reg[7] ;
  input [7:0]cfg_ds_bus_number;
  input [63:0]cfg_dsn;
  input [8:0]pcie_drp_addr;
  input [15:0]pcie_drp_di;
  input cfg_mgmt_wr_rw1c_as_rw;
  input cfg_mgmt_wr_readonly;
  input cfg_err_posted;
  input cfg_err_locked;
  input cfg_err_norecovery;
  input cfg_interrupt_assert;
  input cfg_interrupt_stat;
  input [1:0]D;
  input [15:0]\gt_rxdata_q_reg[15] ;
  input [2:0]\gt_rx_status_q_reg[2] ;
  input [1:0]\gt_rxcharisk_q_reg[1] ;
  input [15:0]\gt_rxdata_q_reg[15]_0 ;
  input [2:0]\gt_rx_status_q_reg[2]_0 ;
  input [1:0]\gt_rxcharisk_q_reg[1]_0 ;
  input [15:0]\gt_rxdata_q_reg[15]_1 ;
  input [2:0]\gt_rx_status_q_reg[2]_1 ;
  input [1:0]\gt_rxcharisk_q_reg[1]_1 ;
  input [15:0]\gt_rxdata_q_reg[15]_2 ;
  input [2:0]\gt_rx_status_q_reg[2]_2 ;
  input pcie_drp_clk;
  input pl_directed_link_auton;
  input pl_directed_link_speed;
  input pl_downstream_deemph_source;
  input sys_rst_n;
  input [127:0]cfg_err_aer_headerlog;
  input [1:0]cfg_pm_force_state;
  input [1:0]pl_directed_link_width;
  input [31:0]cfg_mgmt_di;
  input [3:0]cfg_mgmt_byte_en_n;
  input [47:0]cfg_err_tlp_cpl_header;
  input [4:0]cfg_aer_interrupt_msgnum;
  input [4:0]cfg_pciecap_interrupt_msgnum;
  input [7:0]cfg_interrupt_di;
  input [9:0]cfg_mgmt_dwaddr;

  wire CLK;
  wire [1:0]D;
  wire [7:0]PIPE_POWERDOWN;
  wire [3:0]PIPE_RXCHANISALIGNED;
  wire [3:0]PIPE_RXPOLARITY;
  wire [3:0]PIPE_TXCOMPLIANCE;
  wire [63:0]PIPE_TXDATA;
  wire [7:0]PIPE_TXDATAK;
  wire [3:0]PIPE_TXELECIDLE;
  wire [63:0]Q;
  wire [0:0]SR;
  wire [3:0]UNCONN_IN;
  wire bridge_reset_int;
  wire cfg_aer_ecrc_check_en;
  wire cfg_aer_ecrc_gen_en;
  wire [4:0]cfg_aer_interrupt_msgnum;
  wire cfg_aer_rooterr_corr_err_received;
  wire cfg_aer_rooterr_corr_err_reporting_en;
  wire cfg_aer_rooterr_fatal_err_received;
  wire cfg_aer_rooterr_fatal_err_reporting_en;
  wire cfg_aer_rooterr_non_fatal_err_received;
  wire cfg_aer_rooterr_non_fatal_err_reporting_en;
  wire cfg_bridge_serr_en;
  wire [7:0]cfg_bus_number;
  wire [4:0]cfg_command;
  wire [14:0]cfg_dcommand;
  wire [11:0]cfg_dcommand2;
  wire [4:0]cfg_device_number;
  wire [7:0]cfg_ds_bus_number;
  wire [4:0]cfg_ds_device_number;
  wire [2:0]cfg_ds_function_number;
  wire [63:0]cfg_dsn;
  wire [3:0]cfg_dstatus;
  wire [127:0]cfg_err_aer_headerlog;
  wire cfg_err_aer_headerlog_set;
  wire cfg_err_atomic_egress_blocked;
  wire cfg_err_cor;
  wire cfg_err_cpl_abort;
  wire cfg_err_cpl_rdy;
  wire cfg_err_cpl_timeout;
  wire cfg_err_cpl_unexpect;
  wire cfg_err_ecrc;
  wire cfg_err_internal_cor;
  wire cfg_err_internal_uncor;
  wire cfg_err_locked;
  wire cfg_err_malformed;
  wire cfg_err_mc_blocked;
  wire cfg_err_norecovery;
  wire cfg_err_poisoned;
  wire cfg_err_posted;
  wire [47:0]cfg_err_tlp_cpl_header;
  wire cfg_err_ur;
  wire [2:0]cfg_function_number;
  wire cfg_interrupt;
  wire cfg_interrupt_assert;
  wire [7:0]cfg_interrupt_di;
  wire [7:0]cfg_interrupt_do;
  wire [2:0]cfg_interrupt_mmenable;
  wire cfg_interrupt_msienable;
  wire cfg_interrupt_msixenable;
  wire cfg_interrupt_msixfm;
  wire cfg_interrupt_rdy;
  wire cfg_interrupt_stat;
  wire [10:0]cfg_lcommand;
  wire [9:0]cfg_lstatus;
  wire [3:0]cfg_mgmt_byte_en_n;
  wire [31:0]cfg_mgmt_di;
  wire [31:0]cfg_mgmt_do;
  wire [9:0]cfg_mgmt_dwaddr;
  wire cfg_mgmt_rd_en;
  wire cfg_mgmt_rd_wr_done;
  wire cfg_mgmt_wr_en;
  wire cfg_mgmt_wr_readonly;
  wire cfg_mgmt_wr_rw1c_as_rw;
  wire [15:0]cfg_msg_data;
  wire [15:0]cfg_msg_data_mux;
  wire cfg_msg_received;
  wire cfg_msg_received_assert_int_a;
  wire cfg_msg_received_assert_int_b;
  wire cfg_msg_received_assert_int_c;
  wire cfg_msg_received_assert_int_d;
  wire cfg_msg_received_deassert_int_a;
  wire cfg_msg_received_deassert_int_b;
  wire cfg_msg_received_deassert_int_c;
  wire cfg_msg_received_deassert_int_d;
  wire cfg_msg_received_err_cor;
  wire cfg_msg_received_err_fatal;
  wire cfg_msg_received_err_non_fatal;
  wire cfg_msg_received_pm_as_nak;
  wire cfg_msg_received_pm_pme;
  wire cfg_msg_received_pme_to;
  wire cfg_msg_received_pme_to_ack;
  wire cfg_msg_received_setslotpowerlimit;
  wire [2:0]cfg_pcie_link_state;
  wire [2:0]cfg_pcie_link_state_mux;
  wire [4:0]cfg_pciecap_interrupt_msgnum;
  wire [1:0]cfg_pm_force_state;
  wire cfg_pm_force_state_en;
  wire cfg_pm_halt_aspm_l0s;
  wire cfg_pm_halt_aspm_l1;
  wire cfg_pm_wake;
  wire cfg_pmcsr_pme_en;
  wire cfg_pmcsr_pme_status;
  wire [1:0]cfg_pmcsr_powerstate;
  wire cfg_received_func_lvl_rst;
  wire cfg_root_control_pme_int_en;
  wire cfg_root_control_syserr_corr_err_en;
  wire cfg_root_control_syserr_fatal_err_en;
  wire cfg_root_control_syserr_non_fatal_err_en;
  wire cfg_slot_control_electromech_il_ctl_pulse;
  wire cfg_to_turnoff;
  wire cfg_trn_pending;
  wire cfg_turnoff_ok;
  wire cfg_turnoff_ok_reg;
  wire cfg_turnoff_ok_w;
  wire [6:0]cfg_vc_tcvc_map;
  wire [2:0]\cplllock_reg1_reg[3] ;
  wire [11:0]fc_cpld;
  wire [7:0]fc_cplh;
  wire [11:0]fc_npd;
  wire [7:0]fc_nph;
  wire [11:0]fc_pd;
  wire [7:0]fc_ph;
  wire [2:0]fc_sel;
  wire [2:0]\gen_cpl_64.s_axis_tx_tdata_reg[50] ;
  wire [4:0]\gen_cpl_64.s_axis_tx_tdata_reg[55] ;
  wire [7:0]\gen_cpl_64.s_axis_tx_tdata_reg[63] ;
  wire [63:0]\gen_cpl_64.s_axis_tx_tdata_reg[63]_0 ;
  wire [0:0]\gen_cpl_64.s_axis_tx_tkeep_reg[7] ;
  wire gt_rx_phy_status_q;
  wire gt_rx_phy_status_q_reg;
  wire gt_rx_phy_status_q_reg_0;
  wire gt_rx_phy_status_q_reg_1;
  wire [2:0]\gt_rx_status_q_reg[2] ;
  wire [2:0]\gt_rx_status_q_reg[2]_0 ;
  wire [2:0]\gt_rx_status_q_reg[2]_1 ;
  wire [2:0]\gt_rx_status_q_reg[2]_2 ;
  wire [1:0]\gt_rxcharisk_q_reg[1] ;
  wire [1:0]\gt_rxcharisk_q_reg[1]_0 ;
  wire [1:0]\gt_rxcharisk_q_reg[1]_1 ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire [15:0]\gt_rxdata_q_reg[15]_0 ;
  wire [15:0]\gt_rxdata_q_reg[15]_1 ;
  wire [15:0]\gt_rxdata_q_reg[15]_2 ;
  wire gt_rxelecidle_q;
  wire gt_rxelecidle_q_reg;
  wire gt_rxelecidle_q_reg_0;
  wire gt_rxelecidle_q_reg_1;
  wire in0;
  wire [5:0]ltssm_reg2;
  wire [5:0]\ltssm_reg2_reg[5] ;
  wire [63:0]m_axis_rx_tdata;
  wire [0:0]m_axis_rx_tkeep;
  wire [0:0]\m_axis_rx_tkeep[7] ;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tlast_0;
  wire m_axis_rx_tready;
  wire [12:0]m_axis_rx_tuser;
  wire [12:0]m_axis_rx_tuser_mux;
  wire m_axis_rx_tvalid;
  wire m_axis_rx_tvalid_mux;
  wire out;
  wire pcie_7x_i_n_104;
  wire pcie_7x_i_n_105;
  wire pcie_7x_i_n_107;
  wire pcie_7x_i_n_108;
  wire pcie_7x_i_n_21;
  wire pcie_7x_i_n_7;
  wire [8:0]pcie_drp_addr;
  wire pcie_drp_clk;
  wire [15:0]pcie_drp_di;
  wire [15:0]pcie_drp_do;
  wire pcie_drp_en;
  wire pcie_drp_rdy;
  wire pcie_drp_we;
  wire [0:0]phy_rdy_n_int_reg;
  wire \pio_rx_sm_64.m_axis_rx_tready_reg ;
  wire pipe_rx0_chanisaligned;
  wire [1:0]pipe_rx0_char_is_k;
  wire [15:0]pipe_rx0_data;
  wire pipe_rx0_elec_idle;
  wire pipe_rx0_phy_status;
  wire pipe_rx0_polarity;
  wire [2:0]pipe_rx0_status;
  wire pipe_rx0_valid;
  wire pipe_rx0_valid_gt;
  wire pipe_rx1_chanisaligned;
  wire [1:0]pipe_rx1_char_is_k;
  wire [15:0]pipe_rx1_data;
  wire pipe_rx1_elec_idle;
  wire pipe_rx1_phy_status;
  wire pipe_rx1_polarity;
  wire [2:0]pipe_rx1_status;
  wire pipe_rx1_valid;
  wire pipe_rx1_valid_gt;
  wire pipe_rx2_chanisaligned;
  wire [1:0]pipe_rx2_char_is_k;
  wire [15:0]pipe_rx2_data;
  wire pipe_rx2_elec_idle;
  wire pipe_rx2_phy_status;
  wire pipe_rx2_polarity;
  wire [2:0]pipe_rx2_status;
  wire pipe_rx2_valid;
  wire pipe_rx2_valid_gt;
  wire pipe_rx3_chanisaligned;
  wire [1:0]pipe_rx3_char_is_k;
  wire [15:0]pipe_rx3_data;
  wire pipe_rx3_elec_idle;
  wire pipe_rx3_phy_status;
  wire pipe_rx3_polarity;
  wire [2:0]pipe_rx3_status;
  wire pipe_rx3_valid;
  wire pipe_rx3_valid_gt;
  wire [1:0]pipe_tx0_char_is_k;
  wire pipe_tx0_compliance;
  wire [15:0]pipe_tx0_data;
  wire pipe_tx0_elec_idle;
  wire [1:0]pipe_tx0_powerdown;
  wire [1:0]pipe_tx1_char_is_k;
  wire pipe_tx1_compliance;
  wire [15:0]pipe_tx1_data;
  wire pipe_tx1_elec_idle;
  wire [1:0]pipe_tx1_powerdown;
  wire [1:0]pipe_tx2_char_is_k;
  wire pipe_tx2_compliance;
  wire [15:0]pipe_tx2_data;
  wire pipe_tx2_elec_idle;
  wire [1:0]pipe_tx2_powerdown;
  wire [1:0]pipe_tx3_char_is_k;
  wire pipe_tx3_compliance;
  wire [15:0]pipe_tx3_data;
  wire pipe_tx3_elec_idle;
  wire [1:0]pipe_tx3_powerdown;
  wire pipe_tx_deemph;
  wire pipe_tx_deemph_gt;
  wire [2:0]pipe_tx_margin;
  wire pipe_tx_rate;
  wire pipe_tx_rcvr_det;
  wire pipe_tx_rcvr_det_gt;
  wire pl_directed_change_done;
  wire pl_directed_link_auton;
  wire [1:0]pl_directed_link_change;
  wire pl_directed_link_speed;
  wire [1:0]pl_directed_link_width;
  wire pl_downstream_deemph_source;
  wire [2:0]pl_initial_link_width;
  wire [1:0]pl_lane_reversal_mode;
  wire pl_link_gen2_cap;
  wire pl_link_partner_gen2_supported;
  wire pl_link_upcfg_cap;
  wire [5:0]pl_ltssm_state;
  wire pl_phy_lnk_up_q;
  wire pl_received_hot_rst;
  wire [1:0]pl_rx_pm_state;
  wire pl_sel_lnk_rate;
  wire [1:0]pl_sel_lnk_width;
  wire pl_transmit_hot_rst;
  wire [2:0]pl_tx_pm_state;
  wire pl_upstream_prefer_deemph;
  wire [0:0]\rate_reg1_reg[0] ;
  wire \rx_inst/rx_pipeline_inst/dsc_detect ;
  wire \rx_inst/rx_pipeline_inst/rsrc_rdy_filtered ;
  wire \rx_inst/rx_pipeline_inst/trn_in_packet ;
  wire \rx_inst/rx_pipeline_inst/trn_rsrc_dsc_d ;
  wire rx_np_ok;
  wire rx_np_req;
  wire [63:0]s_axis_tx_tdata;
  wire [0:0]s_axis_tx_tkeep;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tlast_0;
  wire s_axis_tx_tready;
  wire s_axis_tx_tready_mux;
  wire [3:0]s_axis_tx_tuser;
  wire s_axis_tx_tvalid;
  wire s_axis_tx_tvalid_0;
  wire src_in;
  wire sys_rst_n;
  wire trn_lnk_up;
  wire [6:0]trn_rbar_hit;
  wire [63:0]trn_rd;
  wire trn_rdst_rdy;
  wire trn_recrc_err;
  wire trn_reof;
  wire trn_rerrfwd;
  wire [0:0]trn_rrem;
  wire trn_rsof;
  wire trn_rsrc_dsc;
  wire trn_tcfg_gnt;
  wire [63:0]trn_td;
  wire trn_tdst_rdy;
  wire trn_tecrc_gen;
  wire trn_teof;
  wire trn_terrfwd;
  wire trn_trem;
  wire trn_tsof;
  wire trn_tsrc_dsc;
  wire trn_tsrc_rdy;
  wire trn_tstr;
  wire [5:0]tx_buf_av;
  wire [5:0]tx_buf_av_mux;
  wire tx_cfg_gnt;
  wire tx_cfg_req;
  wire tx_cfg_req_mux;
  wire tx_err_drop;
  wire \tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/lnk_up_thrtl ;
  wire \tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/ppm_L1_thrtl ;
  wire \tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/ppm_L1_trig ;
  wire \tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/reg_tcfg_gnt ;
  wire \tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/reg_to_turnoff ;
  wire \tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/tbuf_av_min_trig ;
  wire \tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/tcfg_req_trig ;
  wire \tx_inst/tx_pipeline_inst/reg_disable_trn2 ;
  wire user_app_rdy_gnt;
  wire user_clk;
  wire user_reset_int_reg;

  pcie_7x_0_pcie_7x_0_axi_basic_top axi_basic_top
       (.E(trn_rdst_rdy),
        .\L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg (pcie_7x_i_n_108),
        .Q(Q),
        .SR(SR),
        .UNCONN_IN(UNCONN_IN),
        .cfg_pcie_link_state(cfg_pcie_link_state_mux),
        .cfg_pm_turnoff_ok_n(cfg_turnoff_ok_w),
        .cfg_turnoff_ok(cfg_turnoff_ok),
        .cfg_turnoff_ok_reg(cfg_turnoff_ok_reg),
        .data_prev_reg(m_axis_rx_tvalid_mux),
        .dsc_detect(\rx_inst/rx_pipeline_inst/dsc_detect ),
        .\gen_cpl_64.s_axis_tx_tdata_reg[63] (\gen_cpl_64.s_axis_tx_tdata_reg[63]_0 ),
        .\gen_cpl_64.s_axis_tx_tkeep_reg[7] (\gen_cpl_64.s_axis_tx_tkeep_reg[7] ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl ({trn_td[31:0],trn_td[63:32]}),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 ({trn_tsrc_dsc,trn_tstr,trn_terrfwd,trn_tecrc_gen}),
        .lnk_up_thrtl(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/lnk_up_thrtl ),
        .lnk_up_thrtl_reg(pcie_7x_i_n_105),
        .m_axis_rx_tdata(m_axis_rx_tdata),
        .m_axis_rx_tkeep(m_axis_rx_tkeep),
        .\m_axis_rx_tkeep[7] (\m_axis_rx_tkeep[7] ),
        .m_axis_rx_tlast(m_axis_rx_tlast),
        .m_axis_rx_tlast_0(m_axis_rx_tlast_0),
        .m_axis_rx_tready(m_axis_rx_tready),
        .m_axis_rx_tuser(m_axis_rx_tuser),
        .m_axis_rx_tuser_mux(m_axis_rx_tuser_mux[11:0]),
        .\m_axis_rx_tuser_reg[21] (m_axis_rx_tuser_mux[12]),
        .m_axis_rx_tvalid(m_axis_rx_tvalid),
        .out(out),
        .\pio_rx_sm_64.m_axis_rx_tready_reg (\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (pcie_7x_i_n_7),
        .ppm_L1_thrtl(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/ppm_L1_thrtl ),
        .ppm_L1_thrtl_reg(pcie_7x_i_n_107),
        .ppm_L1_trig(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/ppm_L1_trig ),
        .reg_tcfg_gnt(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/reg_tcfg_gnt ),
        .reg_to_turnoff(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/reg_to_turnoff ),
        .rsrc_rdy_filtered(\rx_inst/rx_pipeline_inst/rsrc_rdy_filtered ),
        .s_axis_tx_tdata(s_axis_tx_tdata),
        .s_axis_tx_tkeep(s_axis_tx_tkeep),
        .s_axis_tx_tlast(s_axis_tx_tlast),
        .s_axis_tx_tlast_0(s_axis_tx_tlast_0),
        .s_axis_tx_tready(s_axis_tx_tready),
        .s_axis_tx_tuser(s_axis_tx_tuser),
        .s_axis_tx_tvalid(s_axis_tx_tvalid),
        .s_axis_tx_tvalid_0(s_axis_tx_tvalid_0),
        .tbuf_av_min_trig(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/tbuf_av_min_trig ),
        .tcfg_req_trig(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/tcfg_req_trig ),
        .\throttle_ctl_pipeline.reg_tsrc_rdy_reg (s_axis_tx_tready_mux),
        .trn_in_packet(\rx_inst/rx_pipeline_inst/trn_in_packet ),
        .trn_in_packet_reg(pcie_7x_i_n_104),
        .trn_rbar_hit(trn_rbar_hit),
        .trn_rd(trn_rd),
        .trn_recrc_err(trn_recrc_err),
        .trn_reof(trn_reof),
        .trn_rerrfwd(trn_rerrfwd),
        .trn_rrem(trn_rrem),
        .trn_rsof(trn_rsof),
        .trn_rsrc_dsc(trn_rsrc_dsc),
        .trn_rsrc_dsc_d(\rx_inst/rx_pipeline_inst/trn_rsrc_dsc_d ),
        .trn_tbuf_av(tx_buf_av_mux),
        .trn_tcfg_gnt(trn_tcfg_gnt),
        .trn_tcfg_req(tx_cfg_req_mux),
        .trn_tdst_rdy(trn_tdst_rdy),
        .trn_teof(trn_teof),
        .trn_trem(trn_trem),
        .trn_tsof(trn_tsof),
        .trn_tsrc_rdy(trn_tsrc_rdy),
        .tx_cfg_gnt(tx_cfg_gnt),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_clk(user_clk));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_bus_number[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[63] [0]),
        .O(cfg_bus_number[0]));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_bus_number[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[63] [1]),
        .O(cfg_bus_number[1]));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_bus_number[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[63] [2]),
        .O(cfg_bus_number[2]));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_bus_number[3]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[63] [3]),
        .O(cfg_bus_number[3]));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_bus_number[4]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[63] [4]),
        .O(cfg_bus_number[4]));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_bus_number[5]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[63] [5]),
        .O(cfg_bus_number[5]));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_bus_number[6]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[63] [6]),
        .O(cfg_bus_number[6]));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_bus_number[7]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[63] [7]),
        .O(cfg_bus_number[7]));
  LUT1 #(
    .INIT(2'h1)) 
    \cfg_bus_number_d[7]_i_1 
       (.I0(out),
        .O(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_bus_number_d_reg[0] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[8]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[63] [0]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_bus_number_d_reg[1] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[9]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[63] [1]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_bus_number_d_reg[2] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[10]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[63] [2]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_bus_number_d_reg[3] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[11]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[63] [3]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_bus_number_d_reg[4] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[12]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[63] [4]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_bus_number_d_reg[5] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[13]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[63] [5]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_bus_number_d_reg[6] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[14]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[63] [6]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_bus_number_d_reg[7] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[15]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[63] [7]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_device_number[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[55] [0]),
        .O(cfg_device_number[0]));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_device_number[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[55] [1]),
        .O(cfg_device_number[1]));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_device_number[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[55] [2]),
        .O(cfg_device_number[2]));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_device_number[3]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[55] [3]),
        .O(cfg_device_number[3]));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_device_number[4]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[55] [4]),
        .O(cfg_device_number[4]));
  FDRE \cfg_device_number_d_reg[0] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[3]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[55] [0]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_device_number_d_reg[1] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[4]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[55] [1]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_device_number_d_reg[2] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[5]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[55] [2]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_device_number_d_reg[3] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[6]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[55] [3]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_device_number_d_reg[4] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[7]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[55] [4]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_function_number[0]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[50] [0]),
        .O(cfg_function_number[0]));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_function_number[1]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[50] [1]),
        .O(cfg_function_number[1]));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cfg_function_number[2]_INST_0 
       (.I0(user_app_rdy_gnt),
        .I1(\gen_cpl_64.s_axis_tx_tdata_reg[50] [2]),
        .O(cfg_function_number[2]));
  FDRE \cfg_function_number_d_reg[0] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[0]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[50] [0]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_function_number_d_reg[1] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[1]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[50] [1]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  FDRE \cfg_function_number_d_reg[2] 
       (.C(user_clk),
        .CE(pcie_7x_i_n_21),
        .D(cfg_msg_data_mux[2]),
        .Q(\gen_cpl_64.s_axis_tx_tdata_reg[50] [2]),
        .R(\tx_inst/tx_pipeline_inst/reg_disable_trn2 ));
  pcie_7x_0_pcie_7x_0_pcie_7x pcie_7x_i
       (.CLK(CLK),
        .E(pcie_7x_i_n_21),
        .\L23_thrtl_ep.x7_L23_thrtl_ep.reg_to_turnoff_reg (pcie_7x_i_n_108),
        .Q(pipe_rx0_data),
        .SR(SR),
        .bridge_reset_int(bridge_reset_int),
        .cfg_aer_ecrc_check_en(cfg_aer_ecrc_check_en),
        .cfg_aer_ecrc_gen_en(cfg_aer_ecrc_gen_en),
        .cfg_aer_interrupt_msgnum(cfg_aer_interrupt_msgnum),
        .cfg_aer_rooterr_corr_err_received(cfg_aer_rooterr_corr_err_received),
        .cfg_aer_rooterr_corr_err_reporting_en(cfg_aer_rooterr_corr_err_reporting_en),
        .cfg_aer_rooterr_fatal_err_received(cfg_aer_rooterr_fatal_err_received),
        .cfg_aer_rooterr_fatal_err_reporting_en(cfg_aer_rooterr_fatal_err_reporting_en),
        .cfg_aer_rooterr_non_fatal_err_received(cfg_aer_rooterr_non_fatal_err_received),
        .cfg_aer_rooterr_non_fatal_err_reporting_en(cfg_aer_rooterr_non_fatal_err_reporting_en),
        .cfg_bridge_serr_en(cfg_bridge_serr_en),
        .\cfg_bus_number_d_reg[7] (cfg_msg_data_mux),
        .cfg_command(cfg_command),
        .cfg_dcommand(cfg_dcommand),
        .cfg_dcommand2(cfg_dcommand2),
        .cfg_ds_bus_number(cfg_ds_bus_number),
        .cfg_ds_device_number(cfg_ds_device_number),
        .cfg_ds_function_number(cfg_ds_function_number),
        .cfg_dsn(cfg_dsn),
        .cfg_dstatus(cfg_dstatus),
        .cfg_err_aer_headerlog(cfg_err_aer_headerlog),
        .cfg_err_aer_headerlog_set(cfg_err_aer_headerlog_set),
        .cfg_err_atomic_egress_blocked(cfg_err_atomic_egress_blocked),
        .cfg_err_cor(cfg_err_cor),
        .cfg_err_cpl_abort(cfg_err_cpl_abort),
        .cfg_err_cpl_rdy(cfg_err_cpl_rdy),
        .cfg_err_cpl_timeout(cfg_err_cpl_timeout),
        .cfg_err_cpl_unexpect(cfg_err_cpl_unexpect),
        .cfg_err_ecrc(cfg_err_ecrc),
        .cfg_err_internal_cor(cfg_err_internal_cor),
        .cfg_err_internal_uncor(cfg_err_internal_uncor),
        .cfg_err_locked(cfg_err_locked),
        .cfg_err_malformed(cfg_err_malformed),
        .cfg_err_mc_blocked(cfg_err_mc_blocked),
        .cfg_err_norecovery(cfg_err_norecovery),
        .cfg_err_poisoned(cfg_err_poisoned),
        .cfg_err_posted(cfg_err_posted),
        .cfg_err_tlp_cpl_header(cfg_err_tlp_cpl_header),
        .cfg_err_ur(cfg_err_ur),
        .cfg_interrupt(cfg_interrupt),
        .cfg_interrupt_assert(cfg_interrupt_assert),
        .cfg_interrupt_di(cfg_interrupt_di),
        .cfg_interrupt_do(cfg_interrupt_do),
        .cfg_interrupt_mmenable(cfg_interrupt_mmenable),
        .cfg_interrupt_msienable(cfg_interrupt_msienable),
        .cfg_interrupt_msixenable(cfg_interrupt_msixenable),
        .cfg_interrupt_msixfm(cfg_interrupt_msixfm),
        .cfg_interrupt_rdy(cfg_interrupt_rdy),
        .cfg_interrupt_stat(cfg_interrupt_stat),
        .cfg_lcommand(cfg_lcommand),
        .cfg_lstatus(cfg_lstatus),
        .cfg_mgmt_byte_en_n(cfg_mgmt_byte_en_n),
        .cfg_mgmt_di(cfg_mgmt_di),
        .cfg_mgmt_do(cfg_mgmt_do),
        .cfg_mgmt_dwaddr(cfg_mgmt_dwaddr),
        .cfg_mgmt_rd_en(cfg_mgmt_rd_en),
        .cfg_mgmt_rd_wr_done(cfg_mgmt_rd_wr_done),
        .cfg_mgmt_wr_en(cfg_mgmt_wr_en),
        .cfg_mgmt_wr_readonly(cfg_mgmt_wr_readonly),
        .cfg_mgmt_wr_rw1c_as_rw(cfg_mgmt_wr_rw1c_as_rw),
        .cfg_msg_data(cfg_msg_data),
        .cfg_msg_received(cfg_msg_received),
        .cfg_msg_received_assert_int_a(cfg_msg_received_assert_int_a),
        .cfg_msg_received_assert_int_b(cfg_msg_received_assert_int_b),
        .cfg_msg_received_assert_int_c(cfg_msg_received_assert_int_c),
        .cfg_msg_received_assert_int_d(cfg_msg_received_assert_int_d),
        .cfg_msg_received_deassert_int_a(cfg_msg_received_deassert_int_a),
        .cfg_msg_received_deassert_int_b(cfg_msg_received_deassert_int_b),
        .cfg_msg_received_deassert_int_c(cfg_msg_received_deassert_int_c),
        .cfg_msg_received_deassert_int_d(cfg_msg_received_deassert_int_d),
        .cfg_msg_received_err_cor(cfg_msg_received_err_cor),
        .cfg_msg_received_err_fatal(cfg_msg_received_err_fatal),
        .cfg_msg_received_err_non_fatal(cfg_msg_received_err_non_fatal),
        .cfg_msg_received_pm_as_nak(cfg_msg_received_pm_as_nak),
        .cfg_msg_received_pm_pme(cfg_msg_received_pm_pme),
        .cfg_msg_received_pme_to(cfg_msg_received_pme_to),
        .cfg_msg_received_pme_to_ack(cfg_msg_received_pme_to_ack),
        .cfg_msg_received_setslotpowerlimit(cfg_msg_received_setslotpowerlimit),
        .cfg_pcie_link_state(cfg_pcie_link_state),
        .\cfg_pcie_link_state_d_reg[2] (cfg_pcie_link_state_mux),
        .cfg_pciecap_interrupt_msgnum(cfg_pciecap_interrupt_msgnum),
        .cfg_pm_force_state(cfg_pm_force_state),
        .cfg_pm_force_state_en(cfg_pm_force_state_en),
        .cfg_pm_halt_aspm_l0s(cfg_pm_halt_aspm_l0s),
        .cfg_pm_halt_aspm_l1(cfg_pm_halt_aspm_l1),
        .cfg_pm_turnoff_ok_n(cfg_turnoff_ok_w),
        .cfg_pm_wake(cfg_pm_wake),
        .cfg_pmcsr_pme_en(cfg_pmcsr_pme_en),
        .cfg_pmcsr_pme_status(cfg_pmcsr_pme_status),
        .cfg_pmcsr_powerstate(cfg_pmcsr_powerstate),
        .cfg_received_func_lvl_rst(cfg_received_func_lvl_rst),
        .cfg_root_control_pme_int_en(cfg_root_control_pme_int_en),
        .cfg_root_control_syserr_corr_err_en(cfg_root_control_syserr_corr_err_en),
        .cfg_root_control_syserr_fatal_err_en(cfg_root_control_syserr_fatal_err_en),
        .cfg_root_control_syserr_non_fatal_err_en(cfg_root_control_syserr_non_fatal_err_en),
        .cfg_slot_control_electromech_il_ctl_pulse(cfg_slot_control_electromech_il_ctl_pulse),
        .cfg_to_turnoff(cfg_to_turnoff),
        .cfg_trn_pending(cfg_trn_pending),
        .cfg_vc_tcvc_map(cfg_vc_tcvc_map),
        .dsc_detect(\rx_inst/rx_pipeline_inst/dsc_detect ),
        .fc_cpld(fc_cpld),
        .fc_cplh(fc_cplh),
        .fc_npd(fc_npd),
        .fc_nph(fc_nph),
        .fc_pd(fc_pd),
        .fc_ph(fc_ph),
        .fc_sel(fc_sel),
        .in0(in0),
        .lnk_up_thrtl(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/lnk_up_thrtl ),
        .lnk_up_thrtl_reg(pcie_7x_i_n_105),
        .ltssm_reg2(ltssm_reg2),
        .\ltssm_reg2_reg[5] (\ltssm_reg2_reg[5] ),
        .out(out),
        .pcie_drp_addr(pcie_drp_addr),
        .pcie_drp_clk(pcie_drp_clk),
        .pcie_drp_di(pcie_drp_di),
        .pcie_drp_do(pcie_drp_do),
        .pcie_drp_en(pcie_drp_en),
        .pcie_drp_rdy(pcie_drp_rdy),
        .pcie_drp_we(pcie_drp_we),
        .pipe_rx0_chanisaligned(pipe_rx0_chanisaligned),
        .pipe_rx0_elec_idle(pipe_rx0_elec_idle),
        .pipe_rx0_phy_status(pipe_rx0_phy_status),
        .pipe_rx0_polarity(pipe_rx0_polarity),
        .pipe_rx0_valid(pipe_rx0_valid),
        .pipe_rx1_chanisaligned(pipe_rx1_chanisaligned),
        .pipe_rx1_elec_idle(pipe_rx1_elec_idle),
        .pipe_rx1_phy_status(pipe_rx1_phy_status),
        .pipe_rx1_polarity(pipe_rx1_polarity),
        .pipe_rx1_valid(pipe_rx1_valid),
        .pipe_rx2_chanisaligned(pipe_rx2_chanisaligned),
        .pipe_rx2_elec_idle(pipe_rx2_elec_idle),
        .pipe_rx2_phy_status(pipe_rx2_phy_status),
        .pipe_rx2_polarity(pipe_rx2_polarity),
        .pipe_rx2_valid(pipe_rx2_valid),
        .pipe_rx3_chanisaligned(pipe_rx3_chanisaligned),
        .pipe_rx3_elec_idle(pipe_rx3_elec_idle),
        .pipe_rx3_phy_status(pipe_rx3_phy_status),
        .pipe_rx3_polarity(pipe_rx3_polarity),
        .pipe_rx3_valid(pipe_rx3_valid),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1] (pipe_rx0_char_is_k),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_0 (pipe_rx1_char_is_k),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_1 (pipe_rx2_char_is_k),
        .\pipe_stages_1.pipe_rx_char_is_k_q_reg[1]_2 (pipe_rx3_char_is_k),
        .\pipe_stages_1.pipe_rx_data_q_reg[15] (pipe_rx1_data),
        .\pipe_stages_1.pipe_rx_data_q_reg[15]_0 (pipe_rx2_data),
        .\pipe_stages_1.pipe_rx_data_q_reg[15]_1 (pipe_rx3_data),
        .\pipe_stages_1.pipe_rx_status_q_reg[2] (pipe_rx0_status),
        .\pipe_stages_1.pipe_rx_status_q_reg[2]_0 (pipe_rx1_status),
        .\pipe_stages_1.pipe_rx_status_q_reg[2]_1 (pipe_rx2_status),
        .\pipe_stages_1.pipe_rx_status_q_reg[2]_2 (pipe_rx3_status),
        .pipe_tx0_char_is_k(pipe_tx0_char_is_k),
        .pipe_tx0_compliance(pipe_tx0_compliance),
        .pipe_tx0_data(pipe_tx0_data),
        .pipe_tx0_elec_idle(pipe_tx0_elec_idle),
        .pipe_tx0_powerdown(pipe_tx0_powerdown),
        .pipe_tx1_char_is_k(pipe_tx1_char_is_k),
        .pipe_tx1_compliance(pipe_tx1_compliance),
        .pipe_tx1_data(pipe_tx1_data),
        .pipe_tx1_elec_idle(pipe_tx1_elec_idle),
        .pipe_tx1_powerdown(pipe_tx1_powerdown),
        .pipe_tx2_char_is_k(pipe_tx2_char_is_k),
        .pipe_tx2_compliance(pipe_tx2_compliance),
        .pipe_tx2_data(pipe_tx2_data),
        .pipe_tx2_elec_idle(pipe_tx2_elec_idle),
        .pipe_tx2_powerdown(pipe_tx2_powerdown),
        .pipe_tx3_char_is_k(pipe_tx3_char_is_k),
        .pipe_tx3_compliance(pipe_tx3_compliance),
        .pipe_tx3_data(pipe_tx3_data),
        .pipe_tx3_elec_idle(pipe_tx3_elec_idle),
        .pipe_tx3_powerdown(pipe_tx3_powerdown),
        .pipe_tx_deemph(pipe_tx_deemph),
        .pipe_tx_margin(pipe_tx_margin),
        .pipe_tx_rate(pipe_tx_rate),
        .pipe_tx_rcvr_det(pipe_tx_rcvr_det),
        .pl_directed_change_done(pl_directed_change_done),
        .pl_directed_link_auton(pl_directed_link_auton),
        .pl_directed_link_change(pl_directed_link_change),
        .pl_directed_link_speed(pl_directed_link_speed),
        .pl_directed_link_width(pl_directed_link_width),
        .pl_downstream_deemph_source(pl_downstream_deemph_source),
        .pl_initial_link_width(pl_initial_link_width),
        .pl_lane_reversal_mode(pl_lane_reversal_mode),
        .pl_link_gen2_cap(pl_link_gen2_cap),
        .pl_link_partner_gen2_supported(pl_link_partner_gen2_supported),
        .pl_link_upcfg_cap(pl_link_upcfg_cap),
        .pl_ltssm_state(pl_ltssm_state),
        .pl_phy_lnk_up_q(pl_phy_lnk_up_q),
        .pl_received_hot_rst(pl_received_hot_rst),
        .pl_rx_pm_state(pl_rx_pm_state),
        .pl_sel_lnk_rate(pl_sel_lnk_rate),
        .pl_sel_lnk_width(pl_sel_lnk_width),
        .pl_transmit_hot_rst(pl_transmit_hot_rst),
        .pl_tx_pm_state(pl_tx_pm_state),
        .pl_upstream_prefer_deemph(pl_upstream_prefer_deemph),
        .ppm_L1_thrtl(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/ppm_L1_thrtl ),
        .ppm_L1_thrtl_reg(pcie_7x_i_n_107),
        .ppm_L1_trig(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/ppm_L1_trig ),
        .reg_tcfg_gnt(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/reg_tcfg_gnt ),
        .reg_to_turnoff(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/reg_to_turnoff ),
        .rsrc_rdy_filtered(\rx_inst/rx_pipeline_inst/rsrc_rdy_filtered ),
        .rx_np_ok(rx_np_ok),
        .rx_np_req(rx_np_req),
        .src_in(src_in),
        .sys_rst_n(sys_rst_n),
        .tbuf_av_gap_thrtl_reg(pcie_7x_i_n_7),
        .tbuf_av_min_trig(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/tbuf_av_min_trig ),
        .tcfg_req_trig(\tx_inst/thrtl_ctl_enabled.tx_thrl_ctl_inst/tcfg_req_trig ),
        .\throttle_ctl_pipeline.reg_tuser_reg[3] ({trn_tsrc_dsc,trn_tstr,trn_terrfwd,trn_tecrc_gen}),
        .trn_in_packet(\rx_inst/rx_pipeline_inst/trn_in_packet ),
        .trn_in_packet_reg(pcie_7x_i_n_104),
        .trn_lnk_up(trn_lnk_up),
        .trn_rbar_hit(trn_rbar_hit),
        .\trn_rd_prev_reg[31] (trn_rd),
        .trn_rdst_rdy(trn_rdst_rdy),
        .trn_recrc_err(trn_recrc_err),
        .trn_reof(trn_reof),
        .trn_rerrfwd(trn_rerrfwd),
        .\trn_rrem_prev_reg[0] (trn_rrem),
        .trn_rsof(trn_rsof),
        .trn_rsrc_dsc(trn_rsrc_dsc),
        .trn_rsrc_dsc_d(\rx_inst/rx_pipeline_inst/trn_rsrc_dsc_d ),
        .trn_tbuf_av(tx_buf_av_mux),
        .trn_tcfg_gnt(trn_tcfg_gnt),
        .trn_tcfg_req(tx_cfg_req_mux),
        .trn_td(trn_td),
        .trn_tdst_rdy(trn_tdst_rdy),
        .trn_teof(trn_teof),
        .trn_trem(trn_trem),
        .trn_tsof(trn_tsof),
        .trn_tsrc_rdy(trn_tsrc_rdy),
        .tx_buf_av(tx_buf_av),
        .tx_cfg_req(tx_cfg_req),
        .tx_err_drop(tx_err_drop),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_clk(user_clk),
        .user_reset_int_reg(user_reset_int_reg));
  pcie_7x_0_pcie_7x_0_pcie_pipe_pipeline pcie_pipe_pipeline_i
       (.CLK(CLK),
        .D(D),
        .PIPE_POWERDOWN(PIPE_POWERDOWN),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE),
        .PIPE_TXDATA(PIPE_TXDATA),
        .PIPE_TXDATAK(PIPE_TXDATAK),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE),
        .Q(pipe_rx1_char_is_k),
        .\cplllock_reg1_reg[3] (\cplllock_reg1_reg[3] ),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl (pipe_rx1_data),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_0 (pipe_rx1_status),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_1 (pipe_rx2_char_is_k),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_2 (pipe_rx2_data),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_3 (pipe_rx2_status),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_4 (pipe_rx3_char_is_k),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_5 (pipe_rx3_data),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_6 (pipe_rx3_status),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_7 (pipe_rx0_char_is_k),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_8 (pipe_rx0_data),
        .\genblk5_0.bram36_tdp_bl.bram36_tdp_bl_9 (pipe_rx0_status),
        .gt_rx_phy_status_q(gt_rx_phy_status_q),
        .gt_rx_phy_status_q_reg(gt_rx_phy_status_q_reg),
        .gt_rx_phy_status_q_reg_0(gt_rx_phy_status_q_reg_0),
        .gt_rx_phy_status_q_reg_1(gt_rx_phy_status_q_reg_1),
        .\gt_rx_status_q_reg[2] (\gt_rx_status_q_reg[2] ),
        .\gt_rx_status_q_reg[2]_0 (\gt_rx_status_q_reg[2]_0 ),
        .\gt_rx_status_q_reg[2]_1 (\gt_rx_status_q_reg[2]_1 ),
        .\gt_rx_status_q_reg[2]_2 (\gt_rx_status_q_reg[2]_2 ),
        .\gt_rxcharisk_q_reg[1] (\gt_rxcharisk_q_reg[1] ),
        .\gt_rxcharisk_q_reg[1]_0 (\gt_rxcharisk_q_reg[1]_0 ),
        .\gt_rxcharisk_q_reg[1]_1 (\gt_rxcharisk_q_reg[1]_1 ),
        .\gt_rxdata_q_reg[15] (\gt_rxdata_q_reg[15] ),
        .\gt_rxdata_q_reg[15]_0 (\gt_rxdata_q_reg[15]_0 ),
        .\gt_rxdata_q_reg[15]_1 (\gt_rxdata_q_reg[15]_1 ),
        .\gt_rxdata_q_reg[15]_2 (\gt_rxdata_q_reg[15]_2 ),
        .gt_rxelecidle_q(gt_rxelecidle_q),
        .gt_rxelecidle_q_reg(gt_rxelecidle_q_reg),
        .gt_rxelecidle_q_reg_0(gt_rxelecidle_q_reg_0),
        .gt_rxelecidle_q_reg_1(gt_rxelecidle_q_reg_1),
        .phy_rdy_n_int_reg(phy_rdy_n_int_reg),
        .pipe_rx0_chanisaligned(pipe_rx0_chanisaligned),
        .pipe_rx0_elec_idle(pipe_rx0_elec_idle),
        .pipe_rx0_phy_status(pipe_rx0_phy_status),
        .pipe_rx0_polarity(pipe_rx0_polarity),
        .pipe_rx0_valid(pipe_rx0_valid),
        .pipe_rx0_valid_gt(pipe_rx0_valid_gt),
        .pipe_rx1_chanisaligned(pipe_rx1_chanisaligned),
        .pipe_rx1_elec_idle(pipe_rx1_elec_idle),
        .pipe_rx1_phy_status(pipe_rx1_phy_status),
        .pipe_rx1_polarity(pipe_rx1_polarity),
        .pipe_rx1_valid(pipe_rx1_valid),
        .pipe_rx1_valid_gt(pipe_rx1_valid_gt),
        .pipe_rx2_chanisaligned(pipe_rx2_chanisaligned),
        .pipe_rx2_elec_idle(pipe_rx2_elec_idle),
        .pipe_rx2_phy_status(pipe_rx2_phy_status),
        .pipe_rx2_polarity(pipe_rx2_polarity),
        .pipe_rx2_valid(pipe_rx2_valid),
        .pipe_rx2_valid_gt(pipe_rx2_valid_gt),
        .pipe_rx3_chanisaligned(pipe_rx3_chanisaligned),
        .pipe_rx3_elec_idle(pipe_rx3_elec_idle),
        .pipe_rx3_phy_status(pipe_rx3_phy_status),
        .pipe_rx3_polarity(pipe_rx3_polarity),
        .pipe_rx3_valid(pipe_rx3_valid),
        .pipe_rx3_valid_gt(pipe_rx3_valid_gt),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg (pipe_tx0_char_is_k),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_0 (pipe_tx1_char_is_k),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_1 (pipe_tx2_char_is_k),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_10 (pipe_tx3_powerdown),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_11 (pipe_tx_margin),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_2 (pipe_tx3_char_is_k),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_3 (pipe_tx0_data),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_4 (pipe_tx1_data),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_5 (pipe_tx2_data),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_6 (pipe_tx3_data),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_7 (pipe_tx0_powerdown),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_8 (pipe_tx1_powerdown),
        .\pipe_stages_1.pipe_rx_chanisaligned_q_reg_9 (pipe_tx2_powerdown),
        .pipe_tx0_compliance(pipe_tx0_compliance),
        .pipe_tx0_elec_idle(pipe_tx0_elec_idle),
        .pipe_tx1_compliance(pipe_tx1_compliance),
        .pipe_tx1_elec_idle(pipe_tx1_elec_idle),
        .pipe_tx2_compliance(pipe_tx2_compliance),
        .pipe_tx2_elec_idle(pipe_tx2_elec_idle),
        .pipe_tx3_compliance(pipe_tx3_compliance),
        .pipe_tx3_elec_idle(pipe_tx3_elec_idle),
        .pipe_tx_deemph(pipe_tx_deemph),
        .pipe_tx_deemph_gt(pipe_tx_deemph_gt),
        .pipe_tx_rate(pipe_tx_rate),
        .pipe_tx_rcvr_det(pipe_tx_rcvr_det),
        .pipe_tx_rcvr_det_gt(pipe_tx_rcvr_det_gt),
        .\rate_reg1_reg[0] (\rate_reg1_reg[0] ));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_clock" *) 
module pcie_7x_0_pcie_7x_0_pipe_clock
   (CLK,
    pclk_sel,
    dclk_rst_reg2_reg,
    INT_USERCLK1_OUT,
    INT_CLK_100MHZ,
    SYNC_MMCM_LOCK,
    out,
    \pl_ltssm_state_q_reg[0] ,
    pipe_txoutclk_out,
    S00,
    SR,
    USER_RATE_GEN3,
    \pclk_sel_reg2_reg[3]_0 ,
    D,
    int_pclk_sel_slave);
  output CLK;
  output pclk_sel;
  output dclk_rst_reg2_reg;
  output INT_USERCLK1_OUT;
  output INT_CLK_100MHZ;
  output SYNC_MMCM_LOCK;
  output [3:0]out;
  output \pl_ltssm_state_q_reg[0] ;
  input pipe_txoutclk_out;
  input S00;
  input [0:0]SR;
  input USER_RATE_GEN3;
  input \pclk_sel_reg2_reg[3]_0 ;
  input [3:0]D;
  input [3:0]int_pclk_sel_slave;

  wire CLK;
  wire [3:0]D;
  wire INT_CLK_100MHZ;
  wire INT_USERCLK1_OUT;
  wire S00;
  wire [0:0]SR;
  wire SYNC_MMCM_LOCK;
  wire USER_RATE_GEN3;
  wire clk_125mhz;
  wire clk_250mhz;
  wire dclk_rst_reg2_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  wire [3:0]int_pclk_sel_slave;
  wire mmcm_fb;
  wire pclk_sel;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]pclk_sel_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]pclk_sel_reg2;
  wire \pclk_sel_reg2_reg[3]_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]pclk_sel_slave_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]pclk_sel_slave_reg2;
  wire pipe_txoutclk_out;
  wire \pl_ltssm_state_q_reg[0] ;
  wire refclk;
  wire userclk1;
  wire NLW_mmcm_i_CLKFBOUTB_UNCONNECTED;
  wire NLW_mmcm_i_CLKFBSTOPPED_UNCONNECTED;
  wire NLW_mmcm_i_CLKINSTOPPED_UNCONNECTED;
  wire NLW_mmcm_i_CLKOUT0B_UNCONNECTED;
  wire NLW_mmcm_i_CLKOUT1B_UNCONNECTED;
  wire NLW_mmcm_i_CLKOUT2B_UNCONNECTED;
  wire NLW_mmcm_i_CLKOUT3_UNCONNECTED;
  wire NLW_mmcm_i_CLKOUT3B_UNCONNECTED;
  wire NLW_mmcm_i_CLKOUT4_UNCONNECTED;
  wire NLW_mmcm_i_CLKOUT6_UNCONNECTED;
  wire NLW_mmcm_i_DRDY_UNCONNECTED;
  wire NLW_mmcm_i_PSDONE_UNCONNECTED;
  wire [15:0]NLW_mmcm_i_DO_UNCONNECTED;

  assign out[3:0] = pclk_sel_reg2;
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG \dclk_i_bufg.dclk_i 
       (.I(clk_125mhz),
        .O(dclk_rst_reg2_reg));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_GEN3),
        .Q(gen3_reg1),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(SR));
  (* BOX_TYPE = "PRIMITIVE" *) 
  MMCME2_ADV #(
    .BANDWIDTH("OPTIMIZED"),
    .CLKFBOUT_MULT_F(10.000000),
    .CLKFBOUT_PHASE(0.000000),
    .CLKFBOUT_USE_FINE_PS("FALSE"),
    .CLKIN1_PERIOD(10.000000),
    .CLKIN2_PERIOD(0.000000),
    .CLKOUT0_DIVIDE_F(8.000000),
    .CLKOUT0_DUTY_CYCLE(0.500000),
    .CLKOUT0_PHASE(0.000000),
    .CLKOUT0_USE_FINE_PS("FALSE"),
    .CLKOUT1_DIVIDE(4),
    .CLKOUT1_DUTY_CYCLE(0.500000),
    .CLKOUT1_PHASE(0.000000),
    .CLKOUT1_USE_FINE_PS("FALSE"),
    .CLKOUT2_DIVIDE(4),
    .CLKOUT2_DUTY_CYCLE(0.500000),
    .CLKOUT2_PHASE(0.000000),
    .CLKOUT2_USE_FINE_PS("FALSE"),
    .CLKOUT3_DIVIDE(4),
    .CLKOUT3_DUTY_CYCLE(0.500000),
    .CLKOUT3_PHASE(0.000000),
    .CLKOUT3_USE_FINE_PS("FALSE"),
    .CLKOUT4_CASCADE("FALSE"),
    .CLKOUT4_DIVIDE(20),
    .CLKOUT4_DUTY_CYCLE(0.500000),
    .CLKOUT4_PHASE(0.000000),
    .CLKOUT4_USE_FINE_PS("FALSE"),
    .CLKOUT5_DIVIDE(10),
    .CLKOUT5_DUTY_CYCLE(0.500000),
    .CLKOUT5_PHASE(0.000000),
    .CLKOUT5_USE_FINE_PS("FALSE"),
    .CLKOUT6_DIVIDE(1),
    .CLKOUT6_DUTY_CYCLE(0.500000),
    .CLKOUT6_PHASE(0.000000),
    .CLKOUT6_USE_FINE_PS("FALSE"),
    .COMPENSATION("INTERNAL"),
    .DIVCLK_DIVIDE(1),
    .IS_CLKINSEL_INVERTED(1'b0),
    .IS_PSEN_INVERTED(1'b0),
    .IS_PSINCDEC_INVERTED(1'b0),
    .IS_PWRDWN_INVERTED(1'b0),
    .IS_RST_INVERTED(1'b0),
    .REF_JITTER1(0.010000),
    .REF_JITTER2(0.010000),
    .SS_EN("FALSE"),
    .SS_MODE("CENTER_HIGH"),
    .SS_MOD_PERIOD(10000),
    .STARTUP_WAIT("FALSE")) 
    mmcm_i
       (.CLKFBIN(mmcm_fb),
        .CLKFBOUT(mmcm_fb),
        .CLKFBOUTB(NLW_mmcm_i_CLKFBOUTB_UNCONNECTED),
        .CLKFBSTOPPED(NLW_mmcm_i_CLKFBSTOPPED_UNCONNECTED),
        .CLKIN1(refclk),
        .CLKIN2(1'b0),
        .CLKINSEL(1'b1),
        .CLKINSTOPPED(NLW_mmcm_i_CLKINSTOPPED_UNCONNECTED),
        .CLKOUT0(clk_125mhz),
        .CLKOUT0B(NLW_mmcm_i_CLKOUT0B_UNCONNECTED),
        .CLKOUT1(clk_250mhz),
        .CLKOUT1B(NLW_mmcm_i_CLKOUT1B_UNCONNECTED),
        .CLKOUT2(userclk1),
        .CLKOUT2B(NLW_mmcm_i_CLKOUT2B_UNCONNECTED),
        .CLKOUT3(NLW_mmcm_i_CLKOUT3_UNCONNECTED),
        .CLKOUT3B(NLW_mmcm_i_CLKOUT3B_UNCONNECTED),
        .CLKOUT4(NLW_mmcm_i_CLKOUT4_UNCONNECTED),
        .CLKOUT5(INT_CLK_100MHZ),
        .CLKOUT6(NLW_mmcm_i_CLKOUT6_UNCONNECTED),
        .DADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DCLK(1'b0),
        .DEN(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DO(NLW_mmcm_i_DO_UNCONNECTED[15:0]),
        .DRDY(NLW_mmcm_i_DRDY_UNCONNECTED),
        .DWE(1'b0),
        .LOCKED(SYNC_MMCM_LOCK),
        .PSCLK(1'b0),
        .PSDONE(NLW_mmcm_i_PSDONE_UNCONNECTED),
        .PSEN(1'b0),
        .PSINCDEC(1'b0),
        .PWRDWN(1'b0),
        .RST(SR));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFGCTRL #(
    .INIT_OUT(0),
    .IS_CE0_INVERTED(1'b0),
    .IS_CE1_INVERTED(1'b0),
    .IS_I0_INVERTED(1'b0),
    .IS_I1_INVERTED(1'b0),
    .IS_IGNORE0_INVERTED(1'b0),
    .IS_IGNORE1_INVERTED(1'b0),
    .IS_S0_INVERTED(1'b0),
    .IS_S1_INVERTED(1'b0),
    .PRESELECT_I0("FALSE"),
    .PRESELECT_I1("FALSE")) 
    \pclk_i1_bufgctrl.pclk_i1 
       (.CE0(1'b1),
        .CE1(1'b1),
        .I0(clk_125mhz),
        .I1(clk_250mhz),
        .IGNORE0(1'b0),
        .IGNORE1(1'b0),
        .O(CLK),
        .S0(S00),
        .S1(pclk_sel));
  FDRE #(
    .INIT(1'b0)) 
    pclk_sel_reg
       (.C(CLK),
        .CE(1'b1),
        .D(\pclk_sel_reg2_reg[3]_0 ),
        .Q(pclk_sel),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[0]),
        .Q(pclk_sel_reg1[0]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[1]),
        .Q(pclk_sel_reg1[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[2]),
        .Q(pclk_sel_reg1[2]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[3]),
        .Q(pclk_sel_reg1[3]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_reg1[0]),
        .Q(pclk_sel_reg2[0]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_reg1[1]),
        .Q(pclk_sel_reg2[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_reg1[2]),
        .Q(pclk_sel_reg2[2]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_reg1[3]),
        .Q(pclk_sel_reg2[3]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_slave_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(int_pclk_sel_slave[0]),
        .Q(pclk_sel_slave_reg1[0]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_slave_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(int_pclk_sel_slave[1]),
        .Q(pclk_sel_slave_reg1[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_slave_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(int_pclk_sel_slave[2]),
        .Q(pclk_sel_slave_reg1[2]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_slave_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(int_pclk_sel_slave[3]),
        .Q(pclk_sel_slave_reg1[3]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_slave_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_slave_reg1[0]),
        .Q(pclk_sel_slave_reg2[0]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_slave_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_slave_reg1[1]),
        .Q(pclk_sel_slave_reg2[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_slave_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_slave_reg1[2]),
        .Q(pclk_sel_slave_reg2[2]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    \pclk_sel_slave_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_slave_reg1[3]),
        .Q(pclk_sel_slave_reg2[3]),
        .R(SR));
  LUT1 #(
    .INIT(2'h1)) 
    reg_clock_locked_i_1
       (.I0(SYNC_MMCM_LOCK),
        .O(\pl_ltssm_state_q_reg[0] ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG \txoutclk_i.txoutclk_i 
       (.I(pipe_txoutclk_out),
        .O(refclk));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG \userclk1_i1.usrclk1_i1 
       (.I(userclk1),
        .O(INT_USERCLK1_OUT));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_drp" *) 
module pcie_7x_0_pcie_7x_0_pipe_drp
   (Q,
    DRPADDR,
    DRPDI,
    drp_mux_en_0,
    drp_mux_we_0,
    gt_ch_drp_rdy,
    DRP_DONE,
    ext_ch_gt_drpaddr,
    ext_ch_gt_drpdi,
    ext_ch_gt_drpen,
    ext_ch_gt_drpwe,
    RST_DCLK_RESET,
    DRP_X16X20_MODE,
    gtreset_reg,
    DRP_START,
    ext_ch_gt_drprdy,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    DRP_X16,
    ext_ch_gt_drpdo,
    DRP_GTXRESET);
  output [2:0]Q;
  output [8:0]DRPADDR;
  output [15:0]DRPDI;
  output drp_mux_en_0;
  output drp_mux_we_0;
  output [0:0]gt_ch_drp_rdy;
  output DRP_DONE;
  input [8:0]ext_ch_gt_drpaddr;
  input [15:0]ext_ch_gt_drpdi;
  input [0:0]ext_ch_gt_drpen;
  input [0:0]ext_ch_gt_drpwe;
  input RST_DCLK_RESET;
  input DRP_X16X20_MODE;
  input gtreset_reg;
  input DRP_START;
  input [0:0]ext_ch_gt_drprdy;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input DRP_X16;
  input [15:0]ext_ch_gt_drpdo;
  input DRP_GTXRESET;

  wire [8:0]DRPADDR;
  wire [15:0]DRPDI;
  wire DRP_DONE;
  wire DRP_GTXRESET;
  wire DRP_START;
  wire DRP_X16;
  wire DRP_X16X20_MODE;
  wire [2:0]Q;
  wire RST_DCLK_RESET;
  wire [7:0]addr_reg;
  wire \addr_reg[4]_i_1_n_0 ;
  wire \addr_reg[6]_i_1_n_0 ;
  wire [15:15]data13;
  wire [15:0]di_reg;
  wire \di_reg[0]_i_2_n_0 ;
  wire \di_reg[0]_i_3_n_0 ;
  wire \di_reg[11]_i_2_n_0 ;
  wire \di_reg[11]_i_3_n_0 ;
  wire \di_reg[11]_i_4_n_0 ;
  wire \di_reg[11]_i_5_n_0 ;
  wire \di_reg[12]_i_2_n_0 ;
  wire \di_reg[12]_i_3_n_0 ;
  wire \di_reg[13]_i_2_n_0 ;
  wire \di_reg[13]_i_3_n_0 ;
  wire \di_reg[14]_i_2_n_0 ;
  wire \di_reg[15]_i_2_n_0 ;
  wire \di_reg[1]_i_2_n_0 ;
  wire \di_reg[1]_i_3_n_0 ;
  wire \di_reg[2]_i_2_n_0 ;
  wire \di_reg[2]_i_3_n_0 ;
  wire \di_reg[3]_i_2_n_0 ;
  wire \di_reg[3]_i_3_n_0 ;
  wire \di_reg[4]_i_2_n_0 ;
  wire \di_reg[4]_i_3_n_0 ;
  wire \di_reg[4]_i_4_n_0 ;
  wire \di_reg[5]_i_2_n_0 ;
  wire \di_reg[5]_i_3_n_0 ;
  wire \di_reg[6]_i_2_n_0 ;
  wire \di_reg[6]_i_3_n_0 ;
  wire \di_reg[7]_i_2_n_0 ;
  wire \di_reg[7]_i_3_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg2;
  wire done_i_1__0_n_0;
  wire [7:0]drp_addr_0;
  wire [15:0]drp_di_0;
  wire drp_mux_en_0;
  wire drp_mux_we_0;
  wire [8:0]ext_ch_gt_drpaddr;
  wire [15:0]ext_ch_gt_drpdi;
  wire [15:0]ext_ch_gt_drpdo;
  wire [0:0]ext_ch_gt_drpen;
  wire [0:0]ext_ch_gt_drprdy;
  wire [0:0]ext_ch_gt_drpwe;
  wire [2:0]fsm;
  wire fsm1;
  wire \fsm[0]_i_3__0_n_0 ;
  wire [0:0]gt_ch_drp_rdy;
  wire gtreset_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gtxreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gtxreset_reg2;
  wire [4:0]index;
  wire \index[0]_i_1_n_0 ;
  wire \index[1]_i_1_n_0 ;
  wire \index[2]_i_1_n_0 ;
  wire \index[3]_i_1_n_0 ;
  wire \index[4]_i_1_n_0 ;
  wire \index[4]_i_2_n_0 ;
  wire \index[4]_i_3_n_0 ;
  wire \index[4]_i_4_n_0 ;
  wire [0:0]load_cnt;
  wire \load_cnt[0]_i_1_n_0 ;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16x20_mode_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16x20_mode_reg2;

  LUT6 #(
    .INIT(64'h1736415517364154)) 
    \addr_reg[0]_i_1 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[0]),
        .I5(x16x20_mode_reg2),
        .O(addr_reg[0]));
  LUT5 #(
    .INIT(32'h40500F00)) 
    \addr_reg[1]_i_1 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[1]),
        .I4(index[2]),
        .O(addr_reg[1]));
  LUT5 #(
    .INIT(32'h05105A00)) 
    \addr_reg[2]_i_1 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[2]),
        .I4(index[1]),
        .O(addr_reg[2]));
  LUT6 #(
    .INIT(64'h5767576753265327)) 
    \addr_reg[3]_i_1 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(x16x20_mode_reg2),
        .I5(index[0]),
        .O(addr_reg[3]));
  LUT6 #(
    .INIT(64'h00000000FAAFFF04)) 
    \addr_reg[4]_i_1 
       (.I0(index[0]),
        .I1(x16x20_mode_reg2),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(index[4]),
        .O(\addr_reg[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h001A0F0A)) 
    \addr_reg[5]_i_1 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[1]),
        .I4(index[2]),
        .O(addr_reg[5]));
  LUT5 #(
    .INIT(32'h00001454)) 
    \addr_reg[6]_i_1 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[3]),
        .I3(index[0]),
        .I4(index[4]),
        .O(\addr_reg[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5252424223236263)) 
    \addr_reg[7]_i_1 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(x16x20_mode_reg2),
        .I4(index[0]),
        .I5(index[1]),
        .O(addr_reg[7]));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[0]),
        .Q(drp_addr_0[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[1]),
        .Q(drp_addr_0[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[2]),
        .Q(drp_addr_0[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[3]),
        .Q(drp_addr_0[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\addr_reg[4]_i_1_n_0 ),
        .Q(drp_addr_0[4]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[5]),
        .Q(drp_addr_0[5]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\addr_reg[6]_i_1_n_0 ),
        .Q(drp_addr_0[6]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[7]),
        .Q(drp_addr_0[7]),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'hFF5E7F6FA1001000)) 
    \di_reg[0]_i_2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(data13),
        .I4(index[0]),
        .I5(do_reg2[0]),
        .O(\di_reg[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h000005D0)) 
    \di_reg[0]_i_3 
       (.I0(index[0]),
        .I1(do_reg2[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h45555F5540000000)) 
    \di_reg[10]_i_1 
       (.I0(index[4]),
        .I1(\di_reg[15]_i_2_n_0 ),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[10]),
        .O(di_reg[10]));
  LUT6 #(
    .INIT(64'h4F40DDDD4F408888)) 
    \di_reg[11]_i_2 
       (.I0(index[3]),
        .I1(do_reg2[11]),
        .I2(index[1]),
        .I3(\di_reg[11]_i_4_n_0 ),
        .I4(index[2]),
        .I5(\di_reg[11]_i_5_n_0 ),
        .O(\di_reg[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008080838)) 
    \di_reg[11]_i_3 
       (.I0(do_reg2[11]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(data13),
        .I4(index[0]),
        .I5(index[3]),
        .O(\di_reg[11]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hB8BB)) 
    \di_reg[11]_i_4 
       (.I0(do_reg2[11]),
        .I1(index[0]),
        .I2(rate_reg2[0]),
        .I3(rate_reg2[1]),
        .O(\di_reg[11]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hE0F0F1F0)) 
    \di_reg[11]_i_5 
       (.I0(index[1]),
        .I1(index[0]),
        .I2(do_reg2[11]),
        .I3(x16x20_mode_reg2),
        .I4(x16_reg2),
        .O(\di_reg[11]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h777EFFFF01080000)) 
    \di_reg[12]_i_2 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(data13),
        .I4(index[2]),
        .I5(do_reg2[12]),
        .O(\di_reg[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000B08)) 
    \di_reg[12]_i_3 
       (.I0(do_reg2[12]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(index[3]),
        .O(\di_reg[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h767FFFFF00090000)) 
    \di_reg[13]_i_2 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(data13),
        .I4(index[2]),
        .I5(do_reg2[13]),
        .O(\di_reg[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008380808)) 
    \di_reg[13]_i_3 
       (.I0(do_reg2[13]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0040FFFF00400000)) 
    \di_reg[14]_i_1 
       (.I0(index[1]),
        .I1(index[2]),
        .I2(do_reg2[14]),
        .I3(index[3]),
        .I4(index[4]),
        .I5(\di_reg[14]_i_2_n_0 ),
        .O(di_reg[14]));
  LUT6 #(
    .INIT(64'h653BFFF721080080)) 
    \di_reg[14]_i_2 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(data13),
        .I3(index[0]),
        .I4(index[2]),
        .I5(do_reg2[14]),
        .O(\di_reg[14]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \di_reg[14]_i_3__2 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .O(data13));
  LUT6 #(
    .INIT(64'h45555F5540000000)) 
    \di_reg[15]_i_1 
       (.I0(index[4]),
        .I1(\di_reg[15]_i_2_n_0 ),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[15]),
        .O(di_reg[15]));
  LUT3 #(
    .INIT(8'h0D)) 
    \di_reg[15]_i_2 
       (.I0(rate_reg2[1]),
        .I1(rate_reg2[0]),
        .I2(index[0]),
        .O(\di_reg[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5FEE4E0076FF1000)) 
    \di_reg[1]_i_2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(data13),
        .I3(index[1]),
        .I4(do_reg2[1]),
        .I5(index[0]),
        .O(\di_reg[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h000005D0)) 
    \di_reg[1]_i_3 
       (.I0(index[0]),
        .I1(do_reg2[1]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h5DEE080067FF0100)) 
    \di_reg[2]_i_2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(data13),
        .I3(index[1]),
        .I4(do_reg2[2]),
        .I5(index[0]),
        .O(\di_reg[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000380)) 
    \di_reg[2]_i_3 
       (.I0(do_reg2[2]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h43FFFFFF40000000)) 
    \di_reg[3]_i_2 
       (.I0(data13),
        .I1(index[2]),
        .I2(index[0]),
        .I3(index[1]),
        .I4(index[3]),
        .I5(do_reg2[3]),
        .O(\di_reg[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h000000000033D100)) 
    \di_reg[3]_i_3 
       (.I0(data13),
        .I1(index[0]),
        .I2(do_reg2[3]),
        .I3(index[2]),
        .I4(index[1]),
        .I5(index[3]),
        .O(\di_reg[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \di_reg[4]_i_1 
       (.I0(\di_reg[4]_i_2_n_0 ),
        .I1(index[4]),
        .I2(\di_reg[4]_i_3_n_0 ),
        .I3(index[3]),
        .I4(\di_reg[4]_i_4_n_0 ),
        .O(di_reg[4]));
  LUT6 #(
    .INIT(64'h0F0400F0000400F0)) 
    \di_reg[4]_i_2 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[0]),
        .I5(do_reg2[4]),
        .O(\di_reg[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h400FFFFF40000000)) 
    \di_reg[4]_i_3 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .I2(index[2]),
        .I3(index[0]),
        .I4(index[1]),
        .I5(do_reg2[4]),
        .O(\di_reg[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBF00FF40BF01FE40)) 
    \di_reg[4]_i_4 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(do_reg2[4]),
        .I4(data13),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F00007F7E0000)) 
    \di_reg[5]_i_2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(do_reg2[5]),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000038F0380)) 
    \di_reg[5]_i_3 
       (.I0(do_reg2[5]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7D7F00007D7E0000)) 
    \di_reg[6]_i_2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(do_reg2[6]),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000380)) 
    \di_reg[6]_i_3 
       (.I0(do_reg2[6]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF0900)) 
    \di_reg[7]_i_2 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(index[3]),
        .I4(do_reg2[7]),
        .O(\di_reg[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000003800383)) 
    \di_reg[7]_i_3 
       (.I0(do_reg2[7]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h03333F7300000040)) 
    \di_reg[8]_i_1 
       (.I0(index[0]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[8]),
        .O(di_reg[8]));
  LUT6 #(
    .INIT(64'h03333F7300000040)) 
    \di_reg[9]_i_1 
       (.I0(index[0]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[9]),
        .O(di_reg[9]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[0]),
        .Q(drp_di_0[0]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[0]_i_1 
       (.I0(\di_reg[0]_i_2_n_0 ),
        .I1(\di_reg[0]_i_3_n_0 ),
        .O(di_reg[0]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[10]),
        .Q(drp_di_0[10]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[11]),
        .Q(drp_di_0[11]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[11]_i_1 
       (.I0(\di_reg[11]_i_2_n_0 ),
        .I1(\di_reg[11]_i_3_n_0 ),
        .O(di_reg[11]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[12]),
        .Q(drp_di_0[12]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[12]_i_1 
       (.I0(\di_reg[12]_i_2_n_0 ),
        .I1(\di_reg[12]_i_3_n_0 ),
        .O(di_reg[12]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[13]),
        .Q(drp_di_0[13]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[13]_i_1 
       (.I0(\di_reg[13]_i_2_n_0 ),
        .I1(\di_reg[13]_i_3_n_0 ),
        .O(di_reg[13]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[14]),
        .Q(drp_di_0[14]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[15]),
        .Q(drp_di_0[15]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[1]),
        .Q(drp_di_0[1]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[1]_i_1 
       (.I0(\di_reg[1]_i_2_n_0 ),
        .I1(\di_reg[1]_i_3_n_0 ),
        .O(di_reg[1]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[2]),
        .Q(drp_di_0[2]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[2]_i_1 
       (.I0(\di_reg[2]_i_2_n_0 ),
        .I1(\di_reg[2]_i_3_n_0 ),
        .O(di_reg[2]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[3]),
        .Q(drp_di_0[3]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[3]_i_1 
       (.I0(\di_reg[3]_i_2_n_0 ),
        .I1(\di_reg[3]_i_3_n_0 ),
        .O(di_reg[3]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[4]),
        .Q(drp_di_0[4]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[5]),
        .Q(drp_di_0[5]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[5]_i_1 
       (.I0(\di_reg[5]_i_2_n_0 ),
        .I1(\di_reg[5]_i_3_n_0 ),
        .O(di_reg[5]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[6]),
        .Q(drp_di_0[6]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[6]_i_1 
       (.I0(\di_reg[6]_i_2_n_0 ),
        .I1(\di_reg[6]_i_3_n_0 ),
        .O(di_reg[6]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[7]),
        .Q(drp_di_0[7]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[7]_i_1 
       (.I0(\di_reg[7]_i_2_n_0 ),
        .I1(\di_reg[7]_i_3_n_0 ),
        .O(di_reg[7]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[8]),
        .Q(drp_di_0[8]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[9]),
        .Q(drp_di_0[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[0]),
        .Q(do_reg1[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[10]),
        .Q(do_reg1[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[11]),
        .Q(do_reg1[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[12]),
        .Q(do_reg1[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[13]),
        .Q(do_reg1[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[14]),
        .Q(do_reg1[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[15]),
        .Q(do_reg1[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[1]),
        .Q(do_reg1[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[2]),
        .Q(do_reg1[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[3]),
        .Q(do_reg1[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[4]),
        .Q(do_reg1[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[5]),
        .Q(do_reg1[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[6]),
        .Q(do_reg1[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[7]),
        .Q(do_reg1[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[8]),
        .Q(do_reg1[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[9]),
        .Q(do_reg1[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[0]),
        .Q(do_reg2[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[10]),
        .Q(do_reg2[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[11]),
        .Q(do_reg2[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[12]),
        .Q(do_reg2[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[13]),
        .Q(do_reg2[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[14]),
        .Q(do_reg2[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[15]),
        .Q(do_reg2[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[1]),
        .Q(do_reg2[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[2]),
        .Q(do_reg2[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[3]),
        .Q(do_reg2[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[4]),
        .Q(do_reg2[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[5]),
        .Q(do_reg2[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[6]),
        .Q(do_reg2[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[7]),
        .Q(do_reg2[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[8]),
        .Q(do_reg2[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[9]),
        .Q(do_reg2[9]),
        .R(RST_DCLK_RESET));
  LUT4 #(
    .INIT(16'h0001)) 
    done_i_1__0
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(start_reg2),
        .I3(Q[1]),
        .O(done_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    done_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(done_i_1__0_n_0),
        .Q(DRP_DONE),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'h151FFFFF151F0000)) 
    \fsm[0]_i_1__4 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[1]),
        .I3(rdy_reg2),
        .I4(Q[2]),
        .I5(\fsm[0]_i_3__0_n_0 ),
        .O(fsm[0]));
  LUT6 #(
    .INIT(64'h0400040000010000)) 
    \fsm[0]_i_2__0 
       (.I0(index[3]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(x16x20_mode_reg2),
        .I5(index[0]),
        .O(fsm1));
  LUT5 #(
    .INIT(32'h47FF47CC)) 
    \fsm[0]_i_3__0 
       (.I0(rdy_reg2),
        .I1(Q[1]),
        .I2(load_cnt),
        .I3(Q[0]),
        .I4(start_reg2),
        .O(\fsm[0]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h1D501850)) 
    \fsm[1]_i_1 
       (.I0(Q[2]),
        .I1(rdy_reg2),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(load_cnt),
        .O(fsm[1]));
  LUT4 #(
    .INIT(16'h6222)) 
    \fsm[2]_i_1__0 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(rdy_reg2),
        .I3(Q[0]),
        .O(fsm[2]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[0]),
        .Q(Q[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[1]),
        .Q(Q[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[2]),
        .Q(Q[2]),
        .R(RST_DCLK_RESET));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \gt_ch_drp_rdy[0]_INST_0 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(gt_ch_drp_rdy));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_10 
       (.I0(ext_ch_gt_drpdi[11]),
        .I1(drp_di_0[11]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[11]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_11 
       (.I0(ext_ch_gt_drpdi[10]),
        .I1(drp_di_0[10]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[10]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_12 
       (.I0(ext_ch_gt_drpdi[9]),
        .I1(drp_di_0[9]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[9]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_13 
       (.I0(ext_ch_gt_drpdi[8]),
        .I1(drp_di_0[8]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[8]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_14 
       (.I0(ext_ch_gt_drpdi[7]),
        .I1(drp_di_0[7]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[7]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_15 
       (.I0(ext_ch_gt_drpdi[6]),
        .I1(drp_di_0[6]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[6]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_16 
       (.I0(ext_ch_gt_drpdi[5]),
        .I1(drp_di_0[5]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[5]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_17 
       (.I0(ext_ch_gt_drpdi[4]),
        .I1(drp_di_0[4]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[4]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_18 
       (.I0(ext_ch_gt_drpdi[3]),
        .I1(drp_di_0[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[3]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_19 
       (.I0(ext_ch_gt_drpdi[2]),
        .I1(drp_di_0[2]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[2]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_20 
       (.I0(ext_ch_gt_drpdi[1]),
        .I1(drp_di_0[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[1]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_21 
       (.I0(ext_ch_gt_drpdi[0]),
        .I1(drp_di_0[0]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[0]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT4 #(
    .INIT(16'h030E)) 
    \gtx_channel.gtxe2_channel_i_i_3 
       (.I0(ext_ch_gt_drpen),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(drp_mux_en_0));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gtx_channel.gtxe2_channel_i_i_39__0 
       (.I0(ext_ch_gt_drpaddr[8]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .O(DRPADDR[8]));
  LUT4 #(
    .INIT(16'h000E)) 
    \gtx_channel.gtxe2_channel_i_i_4 
       (.I0(ext_ch_gt_drpwe),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(drp_mux_we_0));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_40 
       (.I0(ext_ch_gt_drpaddr[7]),
        .I1(drp_addr_0[7]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[7]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_41 
       (.I0(ext_ch_gt_drpaddr[6]),
        .I1(drp_addr_0[6]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[6]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_42 
       (.I0(ext_ch_gt_drpaddr[5]),
        .I1(drp_addr_0[5]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[5]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_43 
       (.I0(ext_ch_gt_drpaddr[4]),
        .I1(drp_addr_0[4]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[4]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_44 
       (.I0(ext_ch_gt_drpaddr[3]),
        .I1(drp_addr_0[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[3]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_45 
       (.I0(ext_ch_gt_drpaddr[2]),
        .I1(drp_addr_0[2]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[2]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_46 
       (.I0(ext_ch_gt_drpaddr[1]),
        .I1(drp_addr_0[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[1]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_47 
       (.I0(ext_ch_gt_drpaddr[0]),
        .I1(drp_addr_0[0]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[0]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_6__0 
       (.I0(ext_ch_gt_drpdi[15]),
        .I1(drp_di_0[15]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[15]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_7 
       (.I0(ext_ch_gt_drpdi[14]),
        .I1(drp_di_0[14]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[14]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_8 
       (.I0(ext_ch_gt_drpdi[13]),
        .I1(drp_di_0[13]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[13]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_9 
       (.I0(ext_ch_gt_drpdi[12]),
        .I1(drp_di_0[12]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[12]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gtxreset_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_GTXRESET),
        .Q(gtxreset_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gtxreset_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(gtxreset_reg1),
        .Q(gtxreset_reg2),
        .R(RST_DCLK_RESET));
  LUT4 #(
    .INIT(16'h0010)) 
    \index[0]_i_1 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .O(\index[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00101000)) 
    \index[1]_i_1 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .I4(index[1]),
        .O(\index[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0010101010000000)) 
    \index[2]_i_1 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .I4(index[1]),
        .I5(index[2]),
        .O(\index[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0888888880000000)) 
    \index[3]_i_1 
       (.I0(\index[4]_i_3_n_0 ),
        .I1(Q[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(index[2]),
        .I5(index[3]),
        .O(\index[3]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hA1)) 
    \index[4]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(\index[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0888888880000000)) 
    \index[4]_i_2 
       (.I0(\index[4]_i_3_n_0 ),
        .I1(Q[2]),
        .I2(index[2]),
        .I3(\index[4]_i_4_n_0 ),
        .I4(index[3]),
        .I5(index[4]),
        .O(\index[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \index[4]_i_3 
       (.I0(Q[0]),
        .I1(fsm1),
        .O(\index[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \index[4]_i_4 
       (.I0(index[1]),
        .I1(index[0]),
        .O(\index[4]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[0] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1_n_0 ),
        .D(\index[0]_i_1_n_0 ),
        .Q(index[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[1] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1_n_0 ),
        .D(\index[1]_i_1_n_0 ),
        .Q(index[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[2] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1_n_0 ),
        .D(\index[2]_i_1_n_0 ),
        .Q(index[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[3] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1_n_0 ),
        .D(\index[3]_i_1_n_0 ),
        .Q(index[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[4] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1_n_0 ),
        .D(\index[4]_i_2_n_0 ),
        .Q(index[4]),
        .R(RST_DCLK_RESET));
  LUT3 #(
    .INIT(8'h10)) 
    \load_cnt[0]_i_1 
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[0]),
        .O(\load_cnt[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \load_cnt_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\load_cnt[0]_i_1_n_0 ),
        .Q(load_cnt),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_tx_rate_q_reg ),
        .Q(rate_reg1[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(1'b0),
        .Q(rate_reg1[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rate_reg1[0]),
        .Q(rate_reg2[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rate_reg1[1]),
        .Q(rate_reg2[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drprdy),
        .Q(rdy_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rdy_reg1),
        .Q(rdy_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_START),
        .Q(start_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(start_reg1),
        .Q(start_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_X16),
        .Q(x16_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(x16_reg1),
        .Q(x16_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16x20_mode_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_X16X20_MODE),
        .Q(x16x20_mode_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16x20_mode_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(x16x20_mode_reg1),
        .Q(x16x20_mode_reg2),
        .R(RST_DCLK_RESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_drp" *) 
module pcie_7x_0_pcie_7x_0_pipe_drp_22
   (Q,
    DRPADDR,
    DRPDI,
    drp_mux_en_1,
    drp_mux_we_1,
    gt_ch_drp_rdy,
    DRP_DONE,
    ext_ch_gt_drpaddr,
    ext_ch_gt_drpdi,
    ext_ch_gt_drpen,
    ext_ch_gt_drpwe,
    RST_DCLK_RESET,
    DRP_X16X20_MODE,
    gtreset_reg,
    DRP_START,
    ext_ch_gt_drprdy,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    DRP_X16,
    ext_ch_gt_drpdo,
    DRP_GTXRESET);
  output [2:0]Q;
  output [8:0]DRPADDR;
  output [15:0]DRPDI;
  output drp_mux_en_1;
  output drp_mux_we_1;
  output [0:0]gt_ch_drp_rdy;
  output DRP_DONE;
  input [8:0]ext_ch_gt_drpaddr;
  input [15:0]ext_ch_gt_drpdi;
  input [0:0]ext_ch_gt_drpen;
  input [0:0]ext_ch_gt_drpwe;
  input RST_DCLK_RESET;
  input DRP_X16X20_MODE;
  input gtreset_reg;
  input DRP_START;
  input [0:0]ext_ch_gt_drprdy;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input DRP_X16;
  input [15:0]ext_ch_gt_drpdo;
  input DRP_GTXRESET;

  wire [8:0]DRPADDR;
  wire [15:0]DRPDI;
  wire DRP_DONE;
  wire DRP_GTXRESET;
  wire DRP_START;
  wire DRP_X16;
  wire DRP_X16X20_MODE;
  wire [2:0]Q;
  wire RST_DCLK_RESET;
  wire [7:0]addr_reg;
  wire \addr_reg[4]_i_1__0_n_0 ;
  wire \addr_reg[6]_i_1__0_n_0 ;
  wire [15:15]data13;
  wire [15:0]di_reg;
  wire \di_reg[0]_i_2__0_n_0 ;
  wire \di_reg[0]_i_3__0_n_0 ;
  wire \di_reg[11]_i_2__0_n_0 ;
  wire \di_reg[11]_i_3__0_n_0 ;
  wire \di_reg[11]_i_4__0_n_0 ;
  wire \di_reg[11]_i_5__0_n_0 ;
  wire \di_reg[12]_i_2__0_n_0 ;
  wire \di_reg[12]_i_3__0_n_0 ;
  wire \di_reg[13]_i_2__0_n_0 ;
  wire \di_reg[13]_i_3__0_n_0 ;
  wire \di_reg[14]_i_2__0_n_0 ;
  wire \di_reg[15]_i_2__0_n_0 ;
  wire \di_reg[1]_i_2__0_n_0 ;
  wire \di_reg[1]_i_3__0_n_0 ;
  wire \di_reg[2]_i_2__0_n_0 ;
  wire \di_reg[2]_i_3__0_n_0 ;
  wire \di_reg[3]_i_2__0_n_0 ;
  wire \di_reg[3]_i_3__0_n_0 ;
  wire \di_reg[4]_i_2__0_n_0 ;
  wire \di_reg[4]_i_3__0_n_0 ;
  wire \di_reg[4]_i_4__0_n_0 ;
  wire \di_reg[5]_i_2__0_n_0 ;
  wire \di_reg[5]_i_3__0_n_0 ;
  wire \di_reg[6]_i_2__0_n_0 ;
  wire \di_reg[6]_i_3__0_n_0 ;
  wire \di_reg[7]_i_2__0_n_0 ;
  wire \di_reg[7]_i_3__0_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg2;
  wire done_i_1__1_n_0;
  wire [7:0]drp_addr_9;
  wire [15:0]drp_di_16;
  wire drp_mux_en_1;
  wire drp_mux_we_1;
  wire [8:0]ext_ch_gt_drpaddr;
  wire [15:0]ext_ch_gt_drpdi;
  wire [15:0]ext_ch_gt_drpdo;
  wire [0:0]ext_ch_gt_drpen;
  wire [0:0]ext_ch_gt_drprdy;
  wire [0:0]ext_ch_gt_drpwe;
  wire [2:0]fsm;
  wire fsm1;
  wire \fsm[0]_i_3__2_n_0 ;
  wire [0:0]gt_ch_drp_rdy;
  wire gtreset_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gtxreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gtxreset_reg2;
  wire [4:0]index;
  wire \index[0]_i_1__0_n_0 ;
  wire \index[1]_i_1__0_n_0 ;
  wire \index[2]_i_1__0_n_0 ;
  wire \index[3]_i_1__0_n_0 ;
  wire \index[4]_i_1__0_n_0 ;
  wire \index[4]_i_2__0_n_0 ;
  wire \index[4]_i_3__0_n_0 ;
  wire \index[4]_i_4__0_n_0 ;
  wire [0:0]load_cnt;
  wire \load_cnt[0]_i_1__1_n_0 ;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16x20_mode_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16x20_mode_reg2;

  LUT6 #(
    .INIT(64'h1736415517364154)) 
    \addr_reg[0]_i_1__0 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[0]),
        .I5(x16x20_mode_reg2),
        .O(addr_reg[0]));
  LUT5 #(
    .INIT(32'h40500F00)) 
    \addr_reg[1]_i_1__0 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[1]),
        .I4(index[2]),
        .O(addr_reg[1]));
  LUT5 #(
    .INIT(32'h05105A00)) 
    \addr_reg[2]_i_1__0 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[2]),
        .I4(index[1]),
        .O(addr_reg[2]));
  LUT6 #(
    .INIT(64'h5767576753265327)) 
    \addr_reg[3]_i_1__0 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(x16x20_mode_reg2),
        .I5(index[0]),
        .O(addr_reg[3]));
  LUT6 #(
    .INIT(64'h00000000FAAFFF04)) 
    \addr_reg[4]_i_1__0 
       (.I0(index[0]),
        .I1(x16x20_mode_reg2),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(index[4]),
        .O(\addr_reg[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h001A0F0A)) 
    \addr_reg[5]_i_1__0 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[1]),
        .I4(index[2]),
        .O(addr_reg[5]));
  LUT5 #(
    .INIT(32'h00001454)) 
    \addr_reg[6]_i_1__0 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[3]),
        .I3(index[0]),
        .I4(index[4]),
        .O(\addr_reg[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h5252424223236263)) 
    \addr_reg[7]_i_1__0 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(x16x20_mode_reg2),
        .I4(index[0]),
        .I5(index[1]),
        .O(addr_reg[7]));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[0]),
        .Q(drp_addr_9[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[1]),
        .Q(drp_addr_9[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[2]),
        .Q(drp_addr_9[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[3]),
        .Q(drp_addr_9[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\addr_reg[4]_i_1__0_n_0 ),
        .Q(drp_addr_9[4]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[5]),
        .Q(drp_addr_9[5]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\addr_reg[6]_i_1__0_n_0 ),
        .Q(drp_addr_9[6]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[7]),
        .Q(drp_addr_9[7]),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'hFF5E7F6FA1001000)) 
    \di_reg[0]_i_2__0 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(data13),
        .I4(index[0]),
        .I5(do_reg2[0]),
        .O(\di_reg[0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h000005D0)) 
    \di_reg[0]_i_3__0 
       (.I0(index[0]),
        .I1(do_reg2[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h45555F5540000000)) 
    \di_reg[10]_i_1__0 
       (.I0(index[4]),
        .I1(\di_reg[15]_i_2__0_n_0 ),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[10]),
        .O(di_reg[10]));
  LUT6 #(
    .INIT(64'h4F40DDDD4F408888)) 
    \di_reg[11]_i_2__0 
       (.I0(index[3]),
        .I1(do_reg2[11]),
        .I2(index[1]),
        .I3(\di_reg[11]_i_4__0_n_0 ),
        .I4(index[2]),
        .I5(\di_reg[11]_i_5__0_n_0 ),
        .O(\di_reg[11]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008080838)) 
    \di_reg[11]_i_3__0 
       (.I0(do_reg2[11]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(data13),
        .I4(index[0]),
        .I5(index[3]),
        .O(\di_reg[11]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'hB8BB)) 
    \di_reg[11]_i_4__0 
       (.I0(do_reg2[11]),
        .I1(index[0]),
        .I2(rate_reg2[0]),
        .I3(rate_reg2[1]),
        .O(\di_reg[11]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'hE0F0F1F0)) 
    \di_reg[11]_i_5__0 
       (.I0(index[1]),
        .I1(index[0]),
        .I2(do_reg2[11]),
        .I3(x16x20_mode_reg2),
        .I4(x16_reg2),
        .O(\di_reg[11]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h777EFFFF01080000)) 
    \di_reg[12]_i_2__0 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(data13),
        .I4(index[2]),
        .I5(do_reg2[12]),
        .O(\di_reg[12]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000B08)) 
    \di_reg[12]_i_3__0 
       (.I0(do_reg2[12]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(index[3]),
        .O(\di_reg[12]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h767FFFFF00090000)) 
    \di_reg[13]_i_2__0 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(data13),
        .I4(index[2]),
        .I5(do_reg2[13]),
        .O(\di_reg[13]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008380808)) 
    \di_reg[13]_i_3__0 
       (.I0(do_reg2[13]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[13]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0040FFFF00400000)) 
    \di_reg[14]_i_1__0 
       (.I0(index[1]),
        .I1(index[2]),
        .I2(do_reg2[14]),
        .I3(index[3]),
        .I4(index[4]),
        .I5(\di_reg[14]_i_2__0_n_0 ),
        .O(di_reg[14]));
  LUT6 #(
    .INIT(64'h653BFFF721080080)) 
    \di_reg[14]_i_2__0 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(data13),
        .I3(index[0]),
        .I4(index[2]),
        .I5(do_reg2[14]),
        .O(\di_reg[14]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \di_reg[14]_i_3__1 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .O(data13));
  LUT6 #(
    .INIT(64'h45555F5540000000)) 
    \di_reg[15]_i_1__0 
       (.I0(index[4]),
        .I1(\di_reg[15]_i_2__0_n_0 ),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[15]),
        .O(di_reg[15]));
  LUT3 #(
    .INIT(8'h0D)) 
    \di_reg[15]_i_2__0 
       (.I0(rate_reg2[1]),
        .I1(rate_reg2[0]),
        .I2(index[0]),
        .O(\di_reg[15]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h5FEE4E0076FF1000)) 
    \di_reg[1]_i_2__0 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(data13),
        .I3(index[1]),
        .I4(do_reg2[1]),
        .I5(index[0]),
        .O(\di_reg[1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h000005D0)) 
    \di_reg[1]_i_3__0 
       (.I0(index[0]),
        .I1(do_reg2[1]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[1]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h5DEE080067FF0100)) 
    \di_reg[2]_i_2__0 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(data13),
        .I3(index[1]),
        .I4(do_reg2[2]),
        .I5(index[0]),
        .O(\di_reg[2]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000380)) 
    \di_reg[2]_i_3__0 
       (.I0(do_reg2[2]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[2]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h43FFFFFF40000000)) 
    \di_reg[3]_i_2__0 
       (.I0(data13),
        .I1(index[2]),
        .I2(index[0]),
        .I3(index[1]),
        .I4(index[3]),
        .I5(do_reg2[3]),
        .O(\di_reg[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000000033D100)) 
    \di_reg[3]_i_3__0 
       (.I0(data13),
        .I1(index[0]),
        .I2(do_reg2[3]),
        .I3(index[2]),
        .I4(index[1]),
        .I5(index[3]),
        .O(\di_reg[3]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \di_reg[4]_i_1__0 
       (.I0(\di_reg[4]_i_2__0_n_0 ),
        .I1(index[4]),
        .I2(\di_reg[4]_i_3__0_n_0 ),
        .I3(index[3]),
        .I4(\di_reg[4]_i_4__0_n_0 ),
        .O(di_reg[4]));
  LUT6 #(
    .INIT(64'h0F0400F0000400F0)) 
    \di_reg[4]_i_2__0 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[0]),
        .I5(do_reg2[4]),
        .O(\di_reg[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h400FFFFF40000000)) 
    \di_reg[4]_i_3__0 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .I2(index[2]),
        .I3(index[0]),
        .I4(index[1]),
        .I5(do_reg2[4]),
        .O(\di_reg[4]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hBF00FF40BF01FE40)) 
    \di_reg[4]_i_4__0 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(do_reg2[4]),
        .I4(data13),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[4]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F00007F7E0000)) 
    \di_reg[5]_i_2__0 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(do_reg2[5]),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[5]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000000038F0380)) 
    \di_reg[5]_i_3__0 
       (.I0(do_reg2[5]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[5]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h7D7F00007D7E0000)) 
    \di_reg[6]_i_2__0 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(do_reg2[6]),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[6]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000380)) 
    \di_reg[6]_i_3__0 
       (.I0(do_reg2[6]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[6]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF0900)) 
    \di_reg[7]_i_2__0 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(index[3]),
        .I4(do_reg2[7]),
        .O(\di_reg[7]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000003800383)) 
    \di_reg[7]_i_3__0 
       (.I0(do_reg2[7]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[7]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h03333F7300000040)) 
    \di_reg[8]_i_1__0 
       (.I0(index[0]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[8]),
        .O(di_reg[8]));
  LUT6 #(
    .INIT(64'h03333F7300000040)) 
    \di_reg[9]_i_1__0 
       (.I0(index[0]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[9]),
        .O(di_reg[9]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[0]),
        .Q(drp_di_16[0]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[0]_i_1__0 
       (.I0(\di_reg[0]_i_2__0_n_0 ),
        .I1(\di_reg[0]_i_3__0_n_0 ),
        .O(di_reg[0]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[10]),
        .Q(drp_di_16[10]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[11]),
        .Q(drp_di_16[11]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[11]_i_1__0 
       (.I0(\di_reg[11]_i_2__0_n_0 ),
        .I1(\di_reg[11]_i_3__0_n_0 ),
        .O(di_reg[11]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[12]),
        .Q(drp_di_16[12]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[12]_i_1__0 
       (.I0(\di_reg[12]_i_2__0_n_0 ),
        .I1(\di_reg[12]_i_3__0_n_0 ),
        .O(di_reg[12]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[13]),
        .Q(drp_di_16[13]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[13]_i_1__0 
       (.I0(\di_reg[13]_i_2__0_n_0 ),
        .I1(\di_reg[13]_i_3__0_n_0 ),
        .O(di_reg[13]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[14]),
        .Q(drp_di_16[14]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[15]),
        .Q(drp_di_16[15]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[1]),
        .Q(drp_di_16[1]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[1]_i_1__0 
       (.I0(\di_reg[1]_i_2__0_n_0 ),
        .I1(\di_reg[1]_i_3__0_n_0 ),
        .O(di_reg[1]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[2]),
        .Q(drp_di_16[2]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[2]_i_1__0 
       (.I0(\di_reg[2]_i_2__0_n_0 ),
        .I1(\di_reg[2]_i_3__0_n_0 ),
        .O(di_reg[2]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[3]),
        .Q(drp_di_16[3]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[3]_i_1__0 
       (.I0(\di_reg[3]_i_2__0_n_0 ),
        .I1(\di_reg[3]_i_3__0_n_0 ),
        .O(di_reg[3]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[4]),
        .Q(drp_di_16[4]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[5]),
        .Q(drp_di_16[5]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[5]_i_1__0 
       (.I0(\di_reg[5]_i_2__0_n_0 ),
        .I1(\di_reg[5]_i_3__0_n_0 ),
        .O(di_reg[5]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[6]),
        .Q(drp_di_16[6]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[6]_i_1__0 
       (.I0(\di_reg[6]_i_2__0_n_0 ),
        .I1(\di_reg[6]_i_3__0_n_0 ),
        .O(di_reg[6]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[7]),
        .Q(drp_di_16[7]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[7]_i_1__0 
       (.I0(\di_reg[7]_i_2__0_n_0 ),
        .I1(\di_reg[7]_i_3__0_n_0 ),
        .O(di_reg[7]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[8]),
        .Q(drp_di_16[8]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[9]),
        .Q(drp_di_16[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[0]),
        .Q(do_reg1[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[10]),
        .Q(do_reg1[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[11]),
        .Q(do_reg1[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[12]),
        .Q(do_reg1[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[13]),
        .Q(do_reg1[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[14]),
        .Q(do_reg1[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[15]),
        .Q(do_reg1[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[1]),
        .Q(do_reg1[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[2]),
        .Q(do_reg1[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[3]),
        .Q(do_reg1[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[4]),
        .Q(do_reg1[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[5]),
        .Q(do_reg1[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[6]),
        .Q(do_reg1[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[7]),
        .Q(do_reg1[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[8]),
        .Q(do_reg1[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[9]),
        .Q(do_reg1[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[0]),
        .Q(do_reg2[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[10]),
        .Q(do_reg2[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[11]),
        .Q(do_reg2[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[12]),
        .Q(do_reg2[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[13]),
        .Q(do_reg2[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[14]),
        .Q(do_reg2[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[15]),
        .Q(do_reg2[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[1]),
        .Q(do_reg2[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[2]),
        .Q(do_reg2[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[3]),
        .Q(do_reg2[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[4]),
        .Q(do_reg2[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[5]),
        .Q(do_reg2[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[6]),
        .Q(do_reg2[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[7]),
        .Q(do_reg2[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[8]),
        .Q(do_reg2[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[9]),
        .Q(do_reg2[9]),
        .R(RST_DCLK_RESET));
  LUT4 #(
    .INIT(16'h0001)) 
    done_i_1__1
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(start_reg2),
        .I3(Q[1]),
        .O(done_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    done_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(done_i_1__1_n_0),
        .Q(DRP_DONE),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'h151FFFFF151F0000)) 
    \fsm[0]_i_1__5 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[1]),
        .I3(rdy_reg2),
        .I4(Q[2]),
        .I5(\fsm[0]_i_3__2_n_0 ),
        .O(fsm[0]));
  LUT6 #(
    .INIT(64'h0400040000010000)) 
    \fsm[0]_i_2__3 
       (.I0(index[3]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(x16x20_mode_reg2),
        .I5(index[0]),
        .O(fsm1));
  LUT5 #(
    .INIT(32'h47FF47CC)) 
    \fsm[0]_i_3__2 
       (.I0(rdy_reg2),
        .I1(Q[1]),
        .I2(load_cnt),
        .I3(Q[0]),
        .I4(start_reg2),
        .O(\fsm[0]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h1D501850)) 
    \fsm[1]_i_1__1 
       (.I0(Q[2]),
        .I1(rdy_reg2),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(load_cnt),
        .O(fsm[1]));
  LUT4 #(
    .INIT(16'h6222)) 
    \fsm[2]_i_1__3 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(rdy_reg2),
        .I3(Q[0]),
        .O(fsm[2]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[0]),
        .Q(Q[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[1]),
        .Q(Q[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[2]),
        .Q(Q[2]),
        .R(RST_DCLK_RESET));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \gt_ch_drp_rdy[1]_INST_0 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(gt_ch_drp_rdy));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_10__0 
       (.I0(ext_ch_gt_drpdi[11]),
        .I1(drp_di_16[11]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[11]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_11__0 
       (.I0(ext_ch_gt_drpdi[10]),
        .I1(drp_di_16[10]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[10]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_12__0 
       (.I0(ext_ch_gt_drpdi[9]),
        .I1(drp_di_16[9]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[9]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_13__0 
       (.I0(ext_ch_gt_drpdi[8]),
        .I1(drp_di_16[8]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[8]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_14__0 
       (.I0(ext_ch_gt_drpdi[7]),
        .I1(drp_di_16[7]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[7]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_15__0 
       (.I0(ext_ch_gt_drpdi[6]),
        .I1(drp_di_16[6]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[6]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_16__0 
       (.I0(ext_ch_gt_drpdi[5]),
        .I1(drp_di_16[5]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[5]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_17__0 
       (.I0(ext_ch_gt_drpdi[4]),
        .I1(drp_di_16[4]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[4]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_18__0 
       (.I0(ext_ch_gt_drpdi[3]),
        .I1(drp_di_16[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[3]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_19__0 
       (.I0(ext_ch_gt_drpdi[2]),
        .I1(drp_di_16[2]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[2]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_20__0 
       (.I0(ext_ch_gt_drpdi[1]),
        .I1(drp_di_16[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[1]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_21__0 
       (.I0(ext_ch_gt_drpdi[0]),
        .I1(drp_di_16[0]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[0]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gtx_channel.gtxe2_channel_i_i_39__1 
       (.I0(ext_ch_gt_drpaddr[8]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .O(DRPADDR[8]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h030E)) 
    \gtx_channel.gtxe2_channel_i_i_3__0 
       (.I0(ext_ch_gt_drpen),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(drp_mux_en_1));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_40__0 
       (.I0(ext_ch_gt_drpaddr[7]),
        .I1(drp_addr_9[7]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[7]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_41__0 
       (.I0(ext_ch_gt_drpaddr[6]),
        .I1(drp_addr_9[6]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[6]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_42__0 
       (.I0(ext_ch_gt_drpaddr[5]),
        .I1(drp_addr_9[5]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[5]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_43__0 
       (.I0(ext_ch_gt_drpaddr[4]),
        .I1(drp_addr_9[4]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[4]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_44__0 
       (.I0(ext_ch_gt_drpaddr[3]),
        .I1(drp_addr_9[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[3]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_45__0 
       (.I0(ext_ch_gt_drpaddr[2]),
        .I1(drp_addr_9[2]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[2]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_46__0 
       (.I0(ext_ch_gt_drpaddr[1]),
        .I1(drp_addr_9[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[1]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_47__0 
       (.I0(ext_ch_gt_drpaddr[0]),
        .I1(drp_addr_9[0]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[0]));
  LUT4 #(
    .INIT(16'h000E)) 
    \gtx_channel.gtxe2_channel_i_i_4__0 
       (.I0(ext_ch_gt_drpwe),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(drp_mux_we_1));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_6__0__0 
       (.I0(ext_ch_gt_drpdi[15]),
        .I1(drp_di_16[15]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[15]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_7__0 
       (.I0(ext_ch_gt_drpdi[14]),
        .I1(drp_di_16[14]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[14]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_8__0 
       (.I0(ext_ch_gt_drpdi[13]),
        .I1(drp_di_16[13]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[13]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_9__0 
       (.I0(ext_ch_gt_drpdi[12]),
        .I1(drp_di_16[12]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[12]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gtxreset_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_GTXRESET),
        .Q(gtxreset_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gtxreset_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(gtxreset_reg1),
        .Q(gtxreset_reg2),
        .R(RST_DCLK_RESET));
  LUT4 #(
    .INIT(16'h0010)) 
    \index[0]_i_1__0 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .O(\index[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00101000)) 
    \index[1]_i_1__0 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .I4(index[1]),
        .O(\index[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0010101010000000)) 
    \index[2]_i_1__0 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .I4(index[1]),
        .I5(index[2]),
        .O(\index[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0888888880000000)) 
    \index[3]_i_1__0 
       (.I0(\index[4]_i_3__0_n_0 ),
        .I1(Q[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(index[2]),
        .I5(index[3]),
        .O(\index[3]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hA1)) 
    \index[4]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(\index[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0888888880000000)) 
    \index[4]_i_2__0 
       (.I0(\index[4]_i_3__0_n_0 ),
        .I1(Q[2]),
        .I2(index[2]),
        .I3(\index[4]_i_4__0_n_0 ),
        .I4(index[3]),
        .I5(index[4]),
        .O(\index[4]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \index[4]_i_3__0 
       (.I0(Q[0]),
        .I1(fsm1),
        .O(\index[4]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \index[4]_i_4__0 
       (.I0(index[1]),
        .I1(index[0]),
        .O(\index[4]_i_4__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[0] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__0_n_0 ),
        .D(\index[0]_i_1__0_n_0 ),
        .Q(index[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[1] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__0_n_0 ),
        .D(\index[1]_i_1__0_n_0 ),
        .Q(index[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[2] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__0_n_0 ),
        .D(\index[2]_i_1__0_n_0 ),
        .Q(index[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[3] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__0_n_0 ),
        .D(\index[3]_i_1__0_n_0 ),
        .Q(index[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[4] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__0_n_0 ),
        .D(\index[4]_i_2__0_n_0 ),
        .Q(index[4]),
        .R(RST_DCLK_RESET));
  LUT3 #(
    .INIT(8'h10)) 
    \load_cnt[0]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[0]),
        .O(\load_cnt[0]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \load_cnt_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\load_cnt[0]_i_1__1_n_0 ),
        .Q(load_cnt),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_tx_rate_q_reg ),
        .Q(rate_reg1[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(1'b0),
        .Q(rate_reg1[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rate_reg1[0]),
        .Q(rate_reg2[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rate_reg1[1]),
        .Q(rate_reg2[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drprdy),
        .Q(rdy_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rdy_reg1),
        .Q(rdy_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_START),
        .Q(start_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(start_reg1),
        .Q(start_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_X16),
        .Q(x16_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(x16_reg1),
        .Q(x16_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16x20_mode_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_X16X20_MODE),
        .Q(x16x20_mode_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16x20_mode_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(x16x20_mode_reg1),
        .Q(x16x20_mode_reg2),
        .R(RST_DCLK_RESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_drp" *) 
module pcie_7x_0_pcie_7x_0_pipe_drp_28
   (Q,
    DRPADDR,
    DRPDI,
    drp_mux_en_2,
    drp_mux_we_2,
    gt_ch_drp_rdy,
    DRP_DONE,
    ext_ch_gt_drpaddr,
    ext_ch_gt_drpdi,
    ext_ch_gt_drpen,
    ext_ch_gt_drpwe,
    RST_DCLK_RESET,
    DRP_X16X20_MODE,
    gtreset_reg,
    DRP_START,
    ext_ch_gt_drprdy,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    DRP_X16,
    ext_ch_gt_drpdo,
    DRP_GTXRESET);
  output [2:0]Q;
  output [8:0]DRPADDR;
  output [15:0]DRPDI;
  output drp_mux_en_2;
  output drp_mux_we_2;
  output [0:0]gt_ch_drp_rdy;
  output DRP_DONE;
  input [8:0]ext_ch_gt_drpaddr;
  input [15:0]ext_ch_gt_drpdi;
  input [0:0]ext_ch_gt_drpen;
  input [0:0]ext_ch_gt_drpwe;
  input RST_DCLK_RESET;
  input DRP_X16X20_MODE;
  input gtreset_reg;
  input DRP_START;
  input [0:0]ext_ch_gt_drprdy;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input DRP_X16;
  input [15:0]ext_ch_gt_drpdo;
  input DRP_GTXRESET;

  wire [8:0]DRPADDR;
  wire [15:0]DRPDI;
  wire DRP_DONE;
  wire DRP_GTXRESET;
  wire DRP_START;
  wire DRP_X16;
  wire DRP_X16X20_MODE;
  wire [2:0]Q;
  wire RST_DCLK_RESET;
  wire [7:0]addr_reg;
  wire \addr_reg[4]_i_1__1_n_0 ;
  wire \addr_reg[6]_i_1__1_n_0 ;
  wire [15:15]data13;
  wire [15:0]di_reg;
  wire \di_reg[0]_i_2__1_n_0 ;
  wire \di_reg[0]_i_3__1_n_0 ;
  wire \di_reg[11]_i_2__1_n_0 ;
  wire \di_reg[11]_i_3__1_n_0 ;
  wire \di_reg[11]_i_4__1_n_0 ;
  wire \di_reg[11]_i_5__1_n_0 ;
  wire \di_reg[12]_i_2__1_n_0 ;
  wire \di_reg[12]_i_3__1_n_0 ;
  wire \di_reg[13]_i_2__1_n_0 ;
  wire \di_reg[13]_i_3__1_n_0 ;
  wire \di_reg[14]_i_2__1_n_0 ;
  wire \di_reg[15]_i_2__1_n_0 ;
  wire \di_reg[1]_i_2__1_n_0 ;
  wire \di_reg[1]_i_3__1_n_0 ;
  wire \di_reg[2]_i_2__1_n_0 ;
  wire \di_reg[2]_i_3__1_n_0 ;
  wire \di_reg[3]_i_2__1_n_0 ;
  wire \di_reg[3]_i_3__1_n_0 ;
  wire \di_reg[4]_i_2__1_n_0 ;
  wire \di_reg[4]_i_3__1_n_0 ;
  wire \di_reg[4]_i_4__1_n_0 ;
  wire \di_reg[5]_i_2__1_n_0 ;
  wire \di_reg[5]_i_3__1_n_0 ;
  wire \di_reg[6]_i_2__1_n_0 ;
  wire \di_reg[6]_i_3__1_n_0 ;
  wire \di_reg[7]_i_2__1_n_0 ;
  wire \di_reg[7]_i_3__1_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg2;
  wire done_i_1__2_n_0;
  wire [7:0]drp_addr_18;
  wire [15:0]drp_di_32;
  wire drp_mux_en_2;
  wire drp_mux_we_2;
  wire [8:0]ext_ch_gt_drpaddr;
  wire [15:0]ext_ch_gt_drpdi;
  wire [15:0]ext_ch_gt_drpdo;
  wire [0:0]ext_ch_gt_drpen;
  wire [0:0]ext_ch_gt_drprdy;
  wire [0:0]ext_ch_gt_drpwe;
  wire [2:0]fsm;
  wire fsm1;
  wire \fsm[0]_i_3__4_n_0 ;
  wire [0:0]gt_ch_drp_rdy;
  wire gtreset_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gtxreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gtxreset_reg2;
  wire [4:0]index;
  wire \index[0]_i_1__1_n_0 ;
  wire \index[1]_i_1__1_n_0 ;
  wire \index[2]_i_1__1_n_0 ;
  wire \index[3]_i_1__1_n_0 ;
  wire \index[4]_i_1__1_n_0 ;
  wire \index[4]_i_2__1_n_0 ;
  wire \index[4]_i_3__1_n_0 ;
  wire \index[4]_i_4__1_n_0 ;
  wire [0:0]load_cnt;
  wire \load_cnt[0]_i_1__2_n_0 ;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16x20_mode_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16x20_mode_reg2;

  LUT6 #(
    .INIT(64'h1736415517364154)) 
    \addr_reg[0]_i_1__1 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[0]),
        .I5(x16x20_mode_reg2),
        .O(addr_reg[0]));
  LUT5 #(
    .INIT(32'h40500F00)) 
    \addr_reg[1]_i_1__1 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[1]),
        .I4(index[2]),
        .O(addr_reg[1]));
  LUT5 #(
    .INIT(32'h05105A00)) 
    \addr_reg[2]_i_1__1 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[2]),
        .I4(index[1]),
        .O(addr_reg[2]));
  LUT6 #(
    .INIT(64'h5767576753265327)) 
    \addr_reg[3]_i_1__1 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(x16x20_mode_reg2),
        .I5(index[0]),
        .O(addr_reg[3]));
  LUT6 #(
    .INIT(64'h00000000FAAFFF04)) 
    \addr_reg[4]_i_1__1 
       (.I0(index[0]),
        .I1(x16x20_mode_reg2),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(index[4]),
        .O(\addr_reg[4]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h001A0F0A)) 
    \addr_reg[5]_i_1__1 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[1]),
        .I4(index[2]),
        .O(addr_reg[5]));
  LUT5 #(
    .INIT(32'h00001454)) 
    \addr_reg[6]_i_1__1 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[3]),
        .I3(index[0]),
        .I4(index[4]),
        .O(\addr_reg[6]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h5252424223236263)) 
    \addr_reg[7]_i_1__1 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(x16x20_mode_reg2),
        .I4(index[0]),
        .I5(index[1]),
        .O(addr_reg[7]));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[0]),
        .Q(drp_addr_18[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[1]),
        .Q(drp_addr_18[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[2]),
        .Q(drp_addr_18[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[3]),
        .Q(drp_addr_18[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\addr_reg[4]_i_1__1_n_0 ),
        .Q(drp_addr_18[4]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[5]),
        .Q(drp_addr_18[5]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\addr_reg[6]_i_1__1_n_0 ),
        .Q(drp_addr_18[6]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[7]),
        .Q(drp_addr_18[7]),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'hFF5E7F6FA1001000)) 
    \di_reg[0]_i_2__1 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(data13),
        .I4(index[0]),
        .I5(do_reg2[0]),
        .O(\di_reg[0]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h000005D0)) 
    \di_reg[0]_i_3__1 
       (.I0(index[0]),
        .I1(do_reg2[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h45555F5540000000)) 
    \di_reg[10]_i_1__1 
       (.I0(index[4]),
        .I1(\di_reg[15]_i_2__1_n_0 ),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[10]),
        .O(di_reg[10]));
  LUT6 #(
    .INIT(64'h4F40DDDD4F408888)) 
    \di_reg[11]_i_2__1 
       (.I0(index[3]),
        .I1(do_reg2[11]),
        .I2(index[1]),
        .I3(\di_reg[11]_i_4__1_n_0 ),
        .I4(index[2]),
        .I5(\di_reg[11]_i_5__1_n_0 ),
        .O(\di_reg[11]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008080838)) 
    \di_reg[11]_i_3__1 
       (.I0(do_reg2[11]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(data13),
        .I4(index[0]),
        .I5(index[3]),
        .O(\di_reg[11]_i_3__1_n_0 ));
  LUT4 #(
    .INIT(16'hB8BB)) 
    \di_reg[11]_i_4__1 
       (.I0(do_reg2[11]),
        .I1(index[0]),
        .I2(rate_reg2[0]),
        .I3(rate_reg2[1]),
        .O(\di_reg[11]_i_4__1_n_0 ));
  LUT5 #(
    .INIT(32'hE0F0F1F0)) 
    \di_reg[11]_i_5__1 
       (.I0(index[1]),
        .I1(index[0]),
        .I2(do_reg2[11]),
        .I3(x16x20_mode_reg2),
        .I4(x16_reg2),
        .O(\di_reg[11]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'h777EFFFF01080000)) 
    \di_reg[12]_i_2__1 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(data13),
        .I4(index[2]),
        .I5(do_reg2[12]),
        .O(\di_reg[12]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000B08)) 
    \di_reg[12]_i_3__1 
       (.I0(do_reg2[12]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(index[3]),
        .O(\di_reg[12]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h767FFFFF00090000)) 
    \di_reg[13]_i_2__1 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(data13),
        .I4(index[2]),
        .I5(do_reg2[13]),
        .O(\di_reg[13]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008380808)) 
    \di_reg[13]_i_3__1 
       (.I0(do_reg2[13]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[13]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h0040FFFF00400000)) 
    \di_reg[14]_i_1__1 
       (.I0(index[1]),
        .I1(index[2]),
        .I2(do_reg2[14]),
        .I3(index[3]),
        .I4(index[4]),
        .I5(\di_reg[14]_i_2__1_n_0 ),
        .O(di_reg[14]));
  LUT6 #(
    .INIT(64'h653BFFF721080080)) 
    \di_reg[14]_i_2__1 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(data13),
        .I3(index[0]),
        .I4(index[2]),
        .I5(do_reg2[14]),
        .O(\di_reg[14]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \di_reg[14]_i_3__0 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .O(data13));
  LUT6 #(
    .INIT(64'h45555F5540000000)) 
    \di_reg[15]_i_1__1 
       (.I0(index[4]),
        .I1(\di_reg[15]_i_2__1_n_0 ),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[15]),
        .O(di_reg[15]));
  LUT3 #(
    .INIT(8'h0D)) 
    \di_reg[15]_i_2__1 
       (.I0(rate_reg2[1]),
        .I1(rate_reg2[0]),
        .I2(index[0]),
        .O(\di_reg[15]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h5FEE4E0076FF1000)) 
    \di_reg[1]_i_2__1 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(data13),
        .I3(index[1]),
        .I4(do_reg2[1]),
        .I5(index[0]),
        .O(\di_reg[1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h000005D0)) 
    \di_reg[1]_i_3__1 
       (.I0(index[0]),
        .I1(do_reg2[1]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[1]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h5DEE080067FF0100)) 
    \di_reg[2]_i_2__1 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(data13),
        .I3(index[1]),
        .I4(do_reg2[2]),
        .I5(index[0]),
        .O(\di_reg[2]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000380)) 
    \di_reg[2]_i_3__1 
       (.I0(do_reg2[2]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[2]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h43FFFFFF40000000)) 
    \di_reg[3]_i_2__1 
       (.I0(data13),
        .I1(index[2]),
        .I2(index[0]),
        .I3(index[1]),
        .I4(index[3]),
        .I5(do_reg2[3]),
        .O(\di_reg[3]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000033D100)) 
    \di_reg[3]_i_3__1 
       (.I0(data13),
        .I1(index[0]),
        .I2(do_reg2[3]),
        .I3(index[2]),
        .I4(index[1]),
        .I5(index[3]),
        .O(\di_reg[3]_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \di_reg[4]_i_1__1 
       (.I0(\di_reg[4]_i_2__1_n_0 ),
        .I1(index[4]),
        .I2(\di_reg[4]_i_3__1_n_0 ),
        .I3(index[3]),
        .I4(\di_reg[4]_i_4__1_n_0 ),
        .O(di_reg[4]));
  LUT6 #(
    .INIT(64'h0F0400F0000400F0)) 
    \di_reg[4]_i_2__1 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[0]),
        .I5(do_reg2[4]),
        .O(\di_reg[4]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h400FFFFF40000000)) 
    \di_reg[4]_i_3__1 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .I2(index[2]),
        .I3(index[0]),
        .I4(index[1]),
        .I5(do_reg2[4]),
        .O(\di_reg[4]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hBF00FF40BF01FE40)) 
    \di_reg[4]_i_4__1 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(do_reg2[4]),
        .I4(data13),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[4]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F00007F7E0000)) 
    \di_reg[5]_i_2__1 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(do_reg2[5]),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[5]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000038F0380)) 
    \di_reg[5]_i_3__1 
       (.I0(do_reg2[5]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[5]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h7D7F00007D7E0000)) 
    \di_reg[6]_i_2__1 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(do_reg2[6]),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[6]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000380)) 
    \di_reg[6]_i_3__1 
       (.I0(do_reg2[6]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[6]_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF0900)) 
    \di_reg[7]_i_2__1 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(index[3]),
        .I4(do_reg2[7]),
        .O(\di_reg[7]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000003800383)) 
    \di_reg[7]_i_3__1 
       (.I0(do_reg2[7]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[7]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h03333F7300000040)) 
    \di_reg[8]_i_1__1 
       (.I0(index[0]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[8]),
        .O(di_reg[8]));
  LUT6 #(
    .INIT(64'h03333F7300000040)) 
    \di_reg[9]_i_1__1 
       (.I0(index[0]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[9]),
        .O(di_reg[9]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[0]),
        .Q(drp_di_32[0]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[0]_i_1__1 
       (.I0(\di_reg[0]_i_2__1_n_0 ),
        .I1(\di_reg[0]_i_3__1_n_0 ),
        .O(di_reg[0]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[10]),
        .Q(drp_di_32[10]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[11]),
        .Q(drp_di_32[11]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[11]_i_1__1 
       (.I0(\di_reg[11]_i_2__1_n_0 ),
        .I1(\di_reg[11]_i_3__1_n_0 ),
        .O(di_reg[11]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[12]),
        .Q(drp_di_32[12]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[12]_i_1__1 
       (.I0(\di_reg[12]_i_2__1_n_0 ),
        .I1(\di_reg[12]_i_3__1_n_0 ),
        .O(di_reg[12]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[13]),
        .Q(drp_di_32[13]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[13]_i_1__1 
       (.I0(\di_reg[13]_i_2__1_n_0 ),
        .I1(\di_reg[13]_i_3__1_n_0 ),
        .O(di_reg[13]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[14]),
        .Q(drp_di_32[14]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[15]),
        .Q(drp_di_32[15]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[1]),
        .Q(drp_di_32[1]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[1]_i_1__1 
       (.I0(\di_reg[1]_i_2__1_n_0 ),
        .I1(\di_reg[1]_i_3__1_n_0 ),
        .O(di_reg[1]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[2]),
        .Q(drp_di_32[2]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[2]_i_1__1 
       (.I0(\di_reg[2]_i_2__1_n_0 ),
        .I1(\di_reg[2]_i_3__1_n_0 ),
        .O(di_reg[2]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[3]),
        .Q(drp_di_32[3]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[3]_i_1__1 
       (.I0(\di_reg[3]_i_2__1_n_0 ),
        .I1(\di_reg[3]_i_3__1_n_0 ),
        .O(di_reg[3]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[4]),
        .Q(drp_di_32[4]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[5]),
        .Q(drp_di_32[5]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[5]_i_1__1 
       (.I0(\di_reg[5]_i_2__1_n_0 ),
        .I1(\di_reg[5]_i_3__1_n_0 ),
        .O(di_reg[5]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[6]),
        .Q(drp_di_32[6]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[6]_i_1__1 
       (.I0(\di_reg[6]_i_2__1_n_0 ),
        .I1(\di_reg[6]_i_3__1_n_0 ),
        .O(di_reg[6]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[7]),
        .Q(drp_di_32[7]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[7]_i_1__1 
       (.I0(\di_reg[7]_i_2__1_n_0 ),
        .I1(\di_reg[7]_i_3__1_n_0 ),
        .O(di_reg[7]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[8]),
        .Q(drp_di_32[8]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[9]),
        .Q(drp_di_32[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[0]),
        .Q(do_reg1[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[10]),
        .Q(do_reg1[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[11]),
        .Q(do_reg1[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[12]),
        .Q(do_reg1[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[13]),
        .Q(do_reg1[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[14]),
        .Q(do_reg1[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[15]),
        .Q(do_reg1[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[1]),
        .Q(do_reg1[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[2]),
        .Q(do_reg1[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[3]),
        .Q(do_reg1[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[4]),
        .Q(do_reg1[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[5]),
        .Q(do_reg1[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[6]),
        .Q(do_reg1[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[7]),
        .Q(do_reg1[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[8]),
        .Q(do_reg1[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[9]),
        .Q(do_reg1[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[0]),
        .Q(do_reg2[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[10]),
        .Q(do_reg2[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[11]),
        .Q(do_reg2[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[12]),
        .Q(do_reg2[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[13]),
        .Q(do_reg2[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[14]),
        .Q(do_reg2[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[15]),
        .Q(do_reg2[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[1]),
        .Q(do_reg2[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[2]),
        .Q(do_reg2[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[3]),
        .Q(do_reg2[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[4]),
        .Q(do_reg2[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[5]),
        .Q(do_reg2[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[6]),
        .Q(do_reg2[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[7]),
        .Q(do_reg2[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[8]),
        .Q(do_reg2[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[9]),
        .Q(do_reg2[9]),
        .R(RST_DCLK_RESET));
  LUT4 #(
    .INIT(16'h0001)) 
    done_i_1__2
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(start_reg2),
        .I3(Q[1]),
        .O(done_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    done_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(done_i_1__2_n_0),
        .Q(DRP_DONE),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'h151FFFFF151F0000)) 
    \fsm[0]_i_1__6 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[1]),
        .I3(rdy_reg2),
        .I4(Q[2]),
        .I5(\fsm[0]_i_3__4_n_0 ),
        .O(fsm[0]));
  LUT6 #(
    .INIT(64'h0400040000010000)) 
    \fsm[0]_i_2__5 
       (.I0(index[3]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(x16x20_mode_reg2),
        .I5(index[0]),
        .O(fsm1));
  LUT5 #(
    .INIT(32'h47FF47CC)) 
    \fsm[0]_i_3__4 
       (.I0(rdy_reg2),
        .I1(Q[1]),
        .I2(load_cnt),
        .I3(Q[0]),
        .I4(start_reg2),
        .O(\fsm[0]_i_3__4_n_0 ));
  LUT5 #(
    .INIT(32'h1D501850)) 
    \fsm[1]_i_1__2 
       (.I0(Q[2]),
        .I1(rdy_reg2),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(load_cnt),
        .O(fsm[1]));
  LUT4 #(
    .INIT(16'h6222)) 
    \fsm[2]_i_1__5 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(rdy_reg2),
        .I3(Q[0]),
        .O(fsm[2]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[0]),
        .Q(Q[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[1]),
        .Q(Q[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[2]),
        .Q(Q[2]),
        .R(RST_DCLK_RESET));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \gt_ch_drp_rdy[2]_INST_0 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(gt_ch_drp_rdy));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_10__1 
       (.I0(ext_ch_gt_drpdi[11]),
        .I1(drp_di_32[11]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[11]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_11__1 
       (.I0(ext_ch_gt_drpdi[10]),
        .I1(drp_di_32[10]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[10]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_12__1 
       (.I0(ext_ch_gt_drpdi[9]),
        .I1(drp_di_32[9]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[9]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_13__1 
       (.I0(ext_ch_gt_drpdi[8]),
        .I1(drp_di_32[8]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[8]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_14__1 
       (.I0(ext_ch_gt_drpdi[7]),
        .I1(drp_di_32[7]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[7]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_15__1 
       (.I0(ext_ch_gt_drpdi[6]),
        .I1(drp_di_32[6]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[6]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_16__1 
       (.I0(ext_ch_gt_drpdi[5]),
        .I1(drp_di_32[5]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[5]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_17__1 
       (.I0(ext_ch_gt_drpdi[4]),
        .I1(drp_di_32[4]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[4]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_18__1 
       (.I0(ext_ch_gt_drpdi[3]),
        .I1(drp_di_32[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[3]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_19__1 
       (.I0(ext_ch_gt_drpdi[2]),
        .I1(drp_di_32[2]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[2]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_20__1 
       (.I0(ext_ch_gt_drpdi[1]),
        .I1(drp_di_32[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[1]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_21__1 
       (.I0(ext_ch_gt_drpdi[0]),
        .I1(drp_di_32[0]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[0]));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gtx_channel.gtxe2_channel_i_i_39__2 
       (.I0(ext_ch_gt_drpaddr[8]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .O(DRPADDR[8]));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT4 #(
    .INIT(16'h030E)) 
    \gtx_channel.gtxe2_channel_i_i_3__1 
       (.I0(ext_ch_gt_drpen),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(drp_mux_en_2));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_40__1 
       (.I0(ext_ch_gt_drpaddr[7]),
        .I1(drp_addr_18[7]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[7]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_41__1 
       (.I0(ext_ch_gt_drpaddr[6]),
        .I1(drp_addr_18[6]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[6]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_42__1 
       (.I0(ext_ch_gt_drpaddr[5]),
        .I1(drp_addr_18[5]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[5]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_43__1 
       (.I0(ext_ch_gt_drpaddr[4]),
        .I1(drp_addr_18[4]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[4]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_44__1 
       (.I0(ext_ch_gt_drpaddr[3]),
        .I1(drp_addr_18[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[3]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_45__1 
       (.I0(ext_ch_gt_drpaddr[2]),
        .I1(drp_addr_18[2]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[2]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_46__1 
       (.I0(ext_ch_gt_drpaddr[1]),
        .I1(drp_addr_18[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[1]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_47__1 
       (.I0(ext_ch_gt_drpaddr[0]),
        .I1(drp_addr_18[0]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[0]));
  LUT4 #(
    .INIT(16'h000E)) 
    \gtx_channel.gtxe2_channel_i_i_4__1 
       (.I0(ext_ch_gt_drpwe),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(drp_mux_we_2));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_6__1 
       (.I0(ext_ch_gt_drpdi[15]),
        .I1(drp_di_32[15]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[15]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_7__1 
       (.I0(ext_ch_gt_drpdi[14]),
        .I1(drp_di_32[14]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[14]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_8__1 
       (.I0(ext_ch_gt_drpdi[13]),
        .I1(drp_di_32[13]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[13]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_9__1 
       (.I0(ext_ch_gt_drpdi[12]),
        .I1(drp_di_32[12]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[12]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gtxreset_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_GTXRESET),
        .Q(gtxreset_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gtxreset_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(gtxreset_reg1),
        .Q(gtxreset_reg2),
        .R(RST_DCLK_RESET));
  LUT4 #(
    .INIT(16'h0010)) 
    \index[0]_i_1__1 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .O(\index[0]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h00101000)) 
    \index[1]_i_1__1 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .I4(index[1]),
        .O(\index[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0010101010000000)) 
    \index[2]_i_1__1 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .I4(index[1]),
        .I5(index[2]),
        .O(\index[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0888888880000000)) 
    \index[3]_i_1__1 
       (.I0(\index[4]_i_3__1_n_0 ),
        .I1(Q[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(index[2]),
        .I5(index[3]),
        .O(\index[3]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hA1)) 
    \index[4]_i_1__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(\index[4]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0888888880000000)) 
    \index[4]_i_2__1 
       (.I0(\index[4]_i_3__1_n_0 ),
        .I1(Q[2]),
        .I2(index[2]),
        .I3(\index[4]_i_4__1_n_0 ),
        .I4(index[3]),
        .I5(index[4]),
        .O(\index[4]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \index[4]_i_3__1 
       (.I0(Q[0]),
        .I1(fsm1),
        .O(\index[4]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \index[4]_i_4__1 
       (.I0(index[1]),
        .I1(index[0]),
        .O(\index[4]_i_4__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[0] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__1_n_0 ),
        .D(\index[0]_i_1__1_n_0 ),
        .Q(index[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[1] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__1_n_0 ),
        .D(\index[1]_i_1__1_n_0 ),
        .Q(index[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[2] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__1_n_0 ),
        .D(\index[2]_i_1__1_n_0 ),
        .Q(index[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[3] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__1_n_0 ),
        .D(\index[3]_i_1__1_n_0 ),
        .Q(index[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[4] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__1_n_0 ),
        .D(\index[4]_i_2__1_n_0 ),
        .Q(index[4]),
        .R(RST_DCLK_RESET));
  LUT3 #(
    .INIT(8'h10)) 
    \load_cnt[0]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[0]),
        .O(\load_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \load_cnt_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\load_cnt[0]_i_1__2_n_0 ),
        .Q(load_cnt),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_tx_rate_q_reg ),
        .Q(rate_reg1[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(1'b0),
        .Q(rate_reg1[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rate_reg1[0]),
        .Q(rate_reg2[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rate_reg1[1]),
        .Q(rate_reg2[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drprdy),
        .Q(rdy_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rdy_reg1),
        .Q(rdy_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_START),
        .Q(start_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(start_reg1),
        .Q(start_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_X16),
        .Q(x16_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(x16_reg1),
        .Q(x16_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16x20_mode_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_X16X20_MODE),
        .Q(x16x20_mode_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16x20_mode_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(x16x20_mode_reg1),
        .Q(x16x20_mode_reg2),
        .R(RST_DCLK_RESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_drp" *) 
module pcie_7x_0_pcie_7x_0_pipe_drp_34
   (Q,
    DRPADDR,
    DRPDI,
    drp_mux_en_3,
    drp_mux_we_3,
    gt_ch_drp_rdy,
    DRP_DONE,
    ext_ch_gt_drpaddr,
    ext_ch_gt_drpdi,
    ext_ch_gt_drpen,
    ext_ch_gt_drpwe,
    RST_DCLK_RESET,
    DRP_X16X20_MODE,
    gtreset_reg,
    DRP_START,
    ext_ch_gt_drprdy,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    DRP_X16,
    ext_ch_gt_drpdo,
    DRP_GTXRESET);
  output [2:0]Q;
  output [8:0]DRPADDR;
  output [15:0]DRPDI;
  output drp_mux_en_3;
  output drp_mux_we_3;
  output [0:0]gt_ch_drp_rdy;
  output DRP_DONE;
  input [8:0]ext_ch_gt_drpaddr;
  input [15:0]ext_ch_gt_drpdi;
  input [0:0]ext_ch_gt_drpen;
  input [0:0]ext_ch_gt_drpwe;
  input RST_DCLK_RESET;
  input DRP_X16X20_MODE;
  input gtreset_reg;
  input DRP_START;
  input [0:0]ext_ch_gt_drprdy;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input DRP_X16;
  input [15:0]ext_ch_gt_drpdo;
  input DRP_GTXRESET;

  wire [8:0]DRPADDR;
  wire [15:0]DRPDI;
  wire DRP_DONE;
  wire DRP_GTXRESET;
  wire DRP_START;
  wire DRP_X16;
  wire DRP_X16X20_MODE;
  wire [2:0]Q;
  wire RST_DCLK_RESET;
  wire [7:0]addr_reg;
  wire \addr_reg[4]_i_1__2_n_0 ;
  wire \addr_reg[6]_i_1__2_n_0 ;
  wire [15:15]data13;
  wire [15:0]di_reg;
  wire \di_reg[0]_i_2__2_n_0 ;
  wire \di_reg[0]_i_3__2_n_0 ;
  wire \di_reg[11]_i_2__2_n_0 ;
  wire \di_reg[11]_i_3__2_n_0 ;
  wire \di_reg[11]_i_4__2_n_0 ;
  wire \di_reg[11]_i_5__2_n_0 ;
  wire \di_reg[12]_i_2__2_n_0 ;
  wire \di_reg[12]_i_3__2_n_0 ;
  wire \di_reg[13]_i_2__2_n_0 ;
  wire \di_reg[13]_i_3__2_n_0 ;
  wire \di_reg[14]_i_2__2_n_0 ;
  wire \di_reg[15]_i_2__2_n_0 ;
  wire \di_reg[1]_i_2__2_n_0 ;
  wire \di_reg[1]_i_3__2_n_0 ;
  wire \di_reg[2]_i_2__2_n_0 ;
  wire \di_reg[2]_i_3__2_n_0 ;
  wire \di_reg[3]_i_2__2_n_0 ;
  wire \di_reg[3]_i_3__2_n_0 ;
  wire \di_reg[4]_i_2__2_n_0 ;
  wire \di_reg[4]_i_3__2_n_0 ;
  wire \di_reg[4]_i_4__2_n_0 ;
  wire \di_reg[5]_i_2__2_n_0 ;
  wire \di_reg[5]_i_3__2_n_0 ;
  wire \di_reg[6]_i_2__2_n_0 ;
  wire \di_reg[6]_i_3__2_n_0 ;
  wire \di_reg[7]_i_2__2_n_0 ;
  wire \di_reg[7]_i_3__2_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg2;
  wire done_i_1__3_n_0;
  wire [7:0]drp_addr_27;
  wire [15:0]drp_di_48;
  wire drp_mux_en_3;
  wire drp_mux_we_3;
  wire [8:0]ext_ch_gt_drpaddr;
  wire [15:0]ext_ch_gt_drpdi;
  wire [15:0]ext_ch_gt_drpdo;
  wire [0:0]ext_ch_gt_drpen;
  wire [0:0]ext_ch_gt_drprdy;
  wire [0:0]ext_ch_gt_drpwe;
  wire [2:0]fsm;
  wire fsm1;
  wire \fsm[0]_i_3__6_n_0 ;
  wire [0:0]gt_ch_drp_rdy;
  wire gtreset_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gtxreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gtxreset_reg2;
  wire [4:0]index;
  wire \index[0]_i_1__2_n_0 ;
  wire \index[1]_i_1__2_n_0 ;
  wire \index[2]_i_1__2_n_0 ;
  wire \index[3]_i_1__2_n_0 ;
  wire \index[4]_i_1__2_n_0 ;
  wire \index[4]_i_2__2_n_0 ;
  wire \index[4]_i_3__2_n_0 ;
  wire \index[4]_i_4__2_n_0 ;
  wire [0:0]load_cnt;
  wire \load_cnt[0]_i_1__3_n_0 ;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16x20_mode_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire x16x20_mode_reg2;

  LUT6 #(
    .INIT(64'h1736415517364154)) 
    \addr_reg[0]_i_1__2 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[0]),
        .I5(x16x20_mode_reg2),
        .O(addr_reg[0]));
  LUT5 #(
    .INIT(32'h40500F00)) 
    \addr_reg[1]_i_1__2 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[1]),
        .I4(index[2]),
        .O(addr_reg[1]));
  LUT5 #(
    .INIT(32'h05105A00)) 
    \addr_reg[2]_i_1__2 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[2]),
        .I4(index[1]),
        .O(addr_reg[2]));
  LUT6 #(
    .INIT(64'h5767576753265327)) 
    \addr_reg[3]_i_1__2 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(x16x20_mode_reg2),
        .I5(index[0]),
        .O(addr_reg[3]));
  LUT6 #(
    .INIT(64'h00000000FAAFFF04)) 
    \addr_reg[4]_i_1__2 
       (.I0(index[0]),
        .I1(x16x20_mode_reg2),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(index[4]),
        .O(\addr_reg[4]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h001A0F0A)) 
    \addr_reg[5]_i_1__2 
       (.I0(index[4]),
        .I1(index[0]),
        .I2(index[3]),
        .I3(index[1]),
        .I4(index[2]),
        .O(addr_reg[5]));
  LUT5 #(
    .INIT(32'h00001454)) 
    \addr_reg[6]_i_1__2 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[3]),
        .I3(index[0]),
        .I4(index[4]),
        .O(\addr_reg[6]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h5252424223236263)) 
    \addr_reg[7]_i_1__2 
       (.I0(index[4]),
        .I1(index[3]),
        .I2(index[2]),
        .I3(x16x20_mode_reg2),
        .I4(index[0]),
        .I5(index[1]),
        .O(addr_reg[7]));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[0]),
        .Q(drp_addr_27[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[1]),
        .Q(drp_addr_27[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[2]),
        .Q(drp_addr_27[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[3]),
        .Q(drp_addr_27[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\addr_reg[4]_i_1__2_n_0 ),
        .Q(drp_addr_27[4]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[5]),
        .Q(drp_addr_27[5]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\addr_reg[6]_i_1__2_n_0 ),
        .Q(drp_addr_27[6]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(addr_reg[7]),
        .Q(drp_addr_27[7]),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'hFF5E7F6FA1001000)) 
    \di_reg[0]_i_2__2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(data13),
        .I4(index[0]),
        .I5(do_reg2[0]),
        .O(\di_reg[0]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h000005D0)) 
    \di_reg[0]_i_3__2 
       (.I0(index[0]),
        .I1(do_reg2[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[0]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h45555F5540000000)) 
    \di_reg[10]_i_1__2 
       (.I0(index[4]),
        .I1(\di_reg[15]_i_2__2_n_0 ),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[10]),
        .O(di_reg[10]));
  LUT6 #(
    .INIT(64'h4F40DDDD4F408888)) 
    \di_reg[11]_i_2__2 
       (.I0(index[3]),
        .I1(do_reg2[11]),
        .I2(index[1]),
        .I3(\di_reg[11]_i_4__2_n_0 ),
        .I4(index[2]),
        .I5(\di_reg[11]_i_5__2_n_0 ),
        .O(\di_reg[11]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008080838)) 
    \di_reg[11]_i_3__2 
       (.I0(do_reg2[11]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(data13),
        .I4(index[0]),
        .I5(index[3]),
        .O(\di_reg[11]_i_3__2_n_0 ));
  LUT4 #(
    .INIT(16'hB8BB)) 
    \di_reg[11]_i_4__2 
       (.I0(do_reg2[11]),
        .I1(index[0]),
        .I2(rate_reg2[0]),
        .I3(rate_reg2[1]),
        .O(\di_reg[11]_i_4__2_n_0 ));
  LUT5 #(
    .INIT(32'hE0F0F1F0)) 
    \di_reg[11]_i_5__2 
       (.I0(index[1]),
        .I1(index[0]),
        .I2(do_reg2[11]),
        .I3(x16x20_mode_reg2),
        .I4(x16_reg2),
        .O(\di_reg[11]_i_5__2_n_0 ));
  LUT6 #(
    .INIT(64'h777EFFFF01080000)) 
    \di_reg[12]_i_2__2 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(data13),
        .I4(index[2]),
        .I5(do_reg2[12]),
        .O(\di_reg[12]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000B08)) 
    \di_reg[12]_i_3__2 
       (.I0(do_reg2[12]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(index[3]),
        .O(\di_reg[12]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h767FFFFF00090000)) 
    \di_reg[13]_i_2__2 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(data13),
        .I4(index[2]),
        .I5(do_reg2[13]),
        .O(\di_reg[13]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008380808)) 
    \di_reg[13]_i_3__2 
       (.I0(do_reg2[13]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[13]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0040FFFF00400000)) 
    \di_reg[14]_i_1__2 
       (.I0(index[1]),
        .I1(index[2]),
        .I2(do_reg2[14]),
        .I3(index[3]),
        .I4(index[4]),
        .I5(\di_reg[14]_i_2__2_n_0 ),
        .O(di_reg[14]));
  LUT6 #(
    .INIT(64'h653BFFF721080080)) 
    \di_reg[14]_i_2__2 
       (.I0(index[3]),
        .I1(index[1]),
        .I2(data13),
        .I3(index[0]),
        .I4(index[2]),
        .I5(do_reg2[14]),
        .O(\di_reg[14]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \di_reg[14]_i_3 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .O(data13));
  LUT6 #(
    .INIT(64'h45555F5540000000)) 
    \di_reg[15]_i_1__2 
       (.I0(index[4]),
        .I1(\di_reg[15]_i_2__2_n_0 ),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[15]),
        .O(di_reg[15]));
  LUT3 #(
    .INIT(8'h0D)) 
    \di_reg[15]_i_2__2 
       (.I0(rate_reg2[1]),
        .I1(rate_reg2[0]),
        .I2(index[0]),
        .O(\di_reg[15]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h5FEE4E0076FF1000)) 
    \di_reg[1]_i_2__2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(data13),
        .I3(index[1]),
        .I4(do_reg2[1]),
        .I5(index[0]),
        .O(\di_reg[1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h000005D0)) 
    \di_reg[1]_i_3__2 
       (.I0(index[0]),
        .I1(do_reg2[1]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[1]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h5DEE080067FF0100)) 
    \di_reg[2]_i_2__2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(data13),
        .I3(index[1]),
        .I4(do_reg2[2]),
        .I5(index[0]),
        .O(\di_reg[2]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000380)) 
    \di_reg[2]_i_3__2 
       (.I0(do_reg2[2]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[2]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h43FFFFFF40000000)) 
    \di_reg[3]_i_2__2 
       (.I0(data13),
        .I1(index[2]),
        .I2(index[0]),
        .I3(index[1]),
        .I4(index[3]),
        .I5(do_reg2[3]),
        .O(\di_reg[3]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h000000000033D100)) 
    \di_reg[3]_i_3__2 
       (.I0(data13),
        .I1(index[0]),
        .I2(do_reg2[3]),
        .I3(index[2]),
        .I4(index[1]),
        .I5(index[3]),
        .O(\di_reg[3]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h30BB3088)) 
    \di_reg[4]_i_1__2 
       (.I0(\di_reg[4]_i_2__2_n_0 ),
        .I1(index[4]),
        .I2(\di_reg[4]_i_3__2_n_0 ),
        .I3(index[3]),
        .I4(\di_reg[4]_i_4__2_n_0 ),
        .O(di_reg[4]));
  LUT6 #(
    .INIT(64'h0F0400F0000400F0)) 
    \di_reg[4]_i_2__2 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[0]),
        .I5(do_reg2[4]),
        .O(\di_reg[4]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h400FFFFF40000000)) 
    \di_reg[4]_i_3__2 
       (.I0(rate_reg2[0]),
        .I1(rate_reg2[1]),
        .I2(index[2]),
        .I3(index[0]),
        .I4(index[1]),
        .I5(do_reg2[4]),
        .O(\di_reg[4]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'hBF00FF40BF01FE40)) 
    \di_reg[4]_i_4__2 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(do_reg2[4]),
        .I4(data13),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[4]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F00007F7E0000)) 
    \di_reg[5]_i_2__2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(do_reg2[5]),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[5]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000038F0380)) 
    \di_reg[5]_i_3__2 
       (.I0(do_reg2[5]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[5]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h7D7F00007D7E0000)) 
    \di_reg[6]_i_2__2 
       (.I0(index[3]),
        .I1(index[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(do_reg2[6]),
        .I5(x16x20_mode_reg2),
        .O(\di_reg[6]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000380)) 
    \di_reg[6]_i_3__2 
       (.I0(do_reg2[6]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(index[3]),
        .O(\di_reg[6]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF0900)) 
    \di_reg[7]_i_2__2 
       (.I0(index[2]),
        .I1(index[1]),
        .I2(index[0]),
        .I3(index[3]),
        .I4(do_reg2[7]),
        .O(\di_reg[7]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000003800383)) 
    \di_reg[7]_i_3__2 
       (.I0(do_reg2[7]),
        .I1(index[0]),
        .I2(index[2]),
        .I3(index[1]),
        .I4(data13),
        .I5(index[3]),
        .O(\di_reg[7]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h03333F7300000040)) 
    \di_reg[8]_i_1__2 
       (.I0(index[0]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[8]),
        .O(di_reg[8]));
  LUT6 #(
    .INIT(64'h03333F7300000040)) 
    \di_reg[9]_i_1__2 
       (.I0(index[0]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(index[3]),
        .I5(do_reg2[9]),
        .O(di_reg[9]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[0]),
        .Q(drp_di_48[0]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[0]_i_1__2 
       (.I0(\di_reg[0]_i_2__2_n_0 ),
        .I1(\di_reg[0]_i_3__2_n_0 ),
        .O(di_reg[0]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[10]),
        .Q(drp_di_48[10]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[11]),
        .Q(drp_di_48[11]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[11]_i_1__2 
       (.I0(\di_reg[11]_i_2__2_n_0 ),
        .I1(\di_reg[11]_i_3__2_n_0 ),
        .O(di_reg[11]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[12]),
        .Q(drp_di_48[12]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[12]_i_1__2 
       (.I0(\di_reg[12]_i_2__2_n_0 ),
        .I1(\di_reg[12]_i_3__2_n_0 ),
        .O(di_reg[12]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[13]),
        .Q(drp_di_48[13]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[13]_i_1__2 
       (.I0(\di_reg[13]_i_2__2_n_0 ),
        .I1(\di_reg[13]_i_3__2_n_0 ),
        .O(di_reg[13]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[14]),
        .Q(drp_di_48[14]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[15]),
        .Q(drp_di_48[15]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[1]),
        .Q(drp_di_48[1]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[1]_i_1__2 
       (.I0(\di_reg[1]_i_2__2_n_0 ),
        .I1(\di_reg[1]_i_3__2_n_0 ),
        .O(di_reg[1]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[2]),
        .Q(drp_di_48[2]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[2]_i_1__2 
       (.I0(\di_reg[2]_i_2__2_n_0 ),
        .I1(\di_reg[2]_i_3__2_n_0 ),
        .O(di_reg[2]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[3]),
        .Q(drp_di_48[3]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[3]_i_1__2 
       (.I0(\di_reg[3]_i_2__2_n_0 ),
        .I1(\di_reg[3]_i_3__2_n_0 ),
        .O(di_reg[3]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[4]),
        .Q(drp_di_48[4]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[5]),
        .Q(drp_di_48[5]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[5]_i_1__2 
       (.I0(\di_reg[5]_i_2__2_n_0 ),
        .I1(\di_reg[5]_i_3__2_n_0 ),
        .O(di_reg[5]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[6]),
        .Q(drp_di_48[6]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[6]_i_1__2 
       (.I0(\di_reg[6]_i_2__2_n_0 ),
        .I1(\di_reg[6]_i_3__2_n_0 ),
        .O(di_reg[6]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[7]),
        .Q(drp_di_48[7]),
        .R(RST_DCLK_RESET));
  MUXF7 \di_reg_reg[7]_i_1__2 
       (.I0(\di_reg[7]_i_2__2_n_0 ),
        .I1(\di_reg[7]_i_3__2_n_0 ),
        .O(di_reg[7]),
        .S(index[4]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[8]),
        .Q(drp_di_48[8]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di_reg[9]),
        .Q(drp_di_48[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[0]),
        .Q(do_reg1[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[10]),
        .Q(do_reg1[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[11]),
        .Q(do_reg1[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[12]),
        .Q(do_reg1[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[13]),
        .Q(do_reg1[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[14]),
        .Q(do_reg1[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[15]),
        .Q(do_reg1[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[1]),
        .Q(do_reg1[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[2]),
        .Q(do_reg1[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[3]),
        .Q(do_reg1[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[4]),
        .Q(do_reg1[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[5]),
        .Q(do_reg1[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[6]),
        .Q(do_reg1[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[7]),
        .Q(do_reg1[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[8]),
        .Q(do_reg1[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drpdo[9]),
        .Q(do_reg1[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[0]),
        .Q(do_reg2[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[10]),
        .Q(do_reg2[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[11]),
        .Q(do_reg2[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[12]),
        .Q(do_reg2[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[13]),
        .Q(do_reg2[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[14]),
        .Q(do_reg2[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[15]),
        .Q(do_reg2[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[1]),
        .Q(do_reg2[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[2]),
        .Q(do_reg2[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[3]),
        .Q(do_reg2[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[4]),
        .Q(do_reg2[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[5]),
        .Q(do_reg2[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[6]),
        .Q(do_reg2[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[7]),
        .Q(do_reg2[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[8]),
        .Q(do_reg2[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[9]),
        .Q(do_reg2[9]),
        .R(RST_DCLK_RESET));
  LUT4 #(
    .INIT(16'h0001)) 
    done_i_1__3
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(start_reg2),
        .I3(Q[1]),
        .O(done_i_1__3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    done_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(done_i_1__3_n_0),
        .Q(DRP_DONE),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'h151FFFFF151F0000)) 
    \fsm[0]_i_1__7 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[1]),
        .I3(rdy_reg2),
        .I4(Q[2]),
        .I5(\fsm[0]_i_3__6_n_0 ),
        .O(fsm[0]));
  LUT6 #(
    .INIT(64'h0400040000010000)) 
    \fsm[0]_i_2__7 
       (.I0(index[3]),
        .I1(index[4]),
        .I2(index[1]),
        .I3(index[2]),
        .I4(x16x20_mode_reg2),
        .I5(index[0]),
        .O(fsm1));
  LUT5 #(
    .INIT(32'h47FF47CC)) 
    \fsm[0]_i_3__6 
       (.I0(rdy_reg2),
        .I1(Q[1]),
        .I2(load_cnt),
        .I3(Q[0]),
        .I4(start_reg2),
        .O(\fsm[0]_i_3__6_n_0 ));
  LUT5 #(
    .INIT(32'h1D501850)) 
    \fsm[1]_i_1__3 
       (.I0(Q[2]),
        .I1(rdy_reg2),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(load_cnt),
        .O(fsm[1]));
  LUT4 #(
    .INIT(16'h6222)) 
    \fsm[2]_i_1__7 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(rdy_reg2),
        .I3(Q[0]),
        .O(fsm[2]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[0]),
        .Q(Q[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[1]),
        .Q(Q[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[2]),
        .Q(Q[2]),
        .R(RST_DCLK_RESET));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \gt_ch_drp_rdy[3]_INST_0 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(gt_ch_drp_rdy));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_10__2 
       (.I0(ext_ch_gt_drpdi[12]),
        .I1(drp_di_48[12]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[12]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_11__2 
       (.I0(ext_ch_gt_drpdi[11]),
        .I1(drp_di_48[11]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[11]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_12__2 
       (.I0(ext_ch_gt_drpdi[10]),
        .I1(drp_di_48[10]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[10]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_13__2 
       (.I0(ext_ch_gt_drpdi[9]),
        .I1(drp_di_48[9]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[9]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_14__2 
       (.I0(ext_ch_gt_drpdi[8]),
        .I1(drp_di_48[8]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[8]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_15__2 
       (.I0(ext_ch_gt_drpdi[7]),
        .I1(drp_di_48[7]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[7]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_16__2 
       (.I0(ext_ch_gt_drpdi[6]),
        .I1(drp_di_48[6]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[6]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_17__2 
       (.I0(ext_ch_gt_drpdi[5]),
        .I1(drp_di_48[5]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[5]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_18__2 
       (.I0(ext_ch_gt_drpdi[4]),
        .I1(drp_di_48[4]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[4]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_19__2 
       (.I0(ext_ch_gt_drpdi[3]),
        .I1(drp_di_48[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[3]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_20__2 
       (.I0(ext_ch_gt_drpdi[2]),
        .I1(drp_di_48[2]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[2]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_21__2 
       (.I0(ext_ch_gt_drpdi[1]),
        .I1(drp_di_48[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[1]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_22__2 
       (.I0(ext_ch_gt_drpdi[0]),
        .I1(drp_di_48[0]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[0]));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT4 #(
    .INIT(16'h030E)) 
    \gtx_channel.gtxe2_channel_i_i_3__2 
       (.I0(ext_ch_gt_drpen),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(drp_mux_en_3));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \gtx_channel.gtxe2_channel_i_i_40__2 
       (.I0(ext_ch_gt_drpaddr[8]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .O(DRPADDR[8]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_41__2 
       (.I0(ext_ch_gt_drpaddr[7]),
        .I1(drp_addr_27[7]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[7]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_42__2 
       (.I0(ext_ch_gt_drpaddr[6]),
        .I1(drp_addr_27[6]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[6]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_43__2 
       (.I0(ext_ch_gt_drpaddr[5]),
        .I1(drp_addr_27[5]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[5]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_44__2 
       (.I0(ext_ch_gt_drpaddr[4]),
        .I1(drp_addr_27[4]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[4]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_45__2 
       (.I0(ext_ch_gt_drpaddr[3]),
        .I1(drp_addr_27[3]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[3]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_46__2 
       (.I0(ext_ch_gt_drpaddr[2]),
        .I1(drp_addr_27[2]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[2]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_47__2 
       (.I0(ext_ch_gt_drpaddr[1]),
        .I1(drp_addr_27[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[1]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_48 
       (.I0(ext_ch_gt_drpaddr[0]),
        .I1(drp_addr_27[0]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPADDR[0]));
  LUT4 #(
    .INIT(16'h000E)) 
    \gtx_channel.gtxe2_channel_i_i_4__2 
       (.I0(ext_ch_gt_drpwe),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(drp_mux_we_3));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_7__2 
       (.I0(ext_ch_gt_drpdi[15]),
        .I1(drp_di_48[15]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[15]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_8__2 
       (.I0(ext_ch_gt_drpdi[14]),
        .I1(drp_di_48[14]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[14]));
  LUT5 #(
    .INIT(32'hCCCCCCCA)) 
    \gtx_channel.gtxe2_channel_i_i_9__2 
       (.I0(ext_ch_gt_drpdi[13]),
        .I1(drp_di_48[13]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(DRPDI[13]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gtxreset_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_GTXRESET),
        .Q(gtxreset_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gtxreset_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(gtxreset_reg1),
        .Q(gtxreset_reg2),
        .R(RST_DCLK_RESET));
  LUT4 #(
    .INIT(16'h0010)) 
    \index[0]_i_1__2 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .O(\index[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h00101000)) 
    \index[1]_i_1__2 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .I4(index[1]),
        .O(\index[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0010101010000000)) 
    \index[2]_i_1__2 
       (.I0(Q[0]),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(index[0]),
        .I4(index[1]),
        .I5(index[2]),
        .O(\index[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0888888880000000)) 
    \index[3]_i_1__2 
       (.I0(\index[4]_i_3__2_n_0 ),
        .I1(Q[2]),
        .I2(index[1]),
        .I3(index[0]),
        .I4(index[2]),
        .I5(index[3]),
        .O(\index[3]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hA1)) 
    \index[4]_i_1__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(\index[4]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0888888880000000)) 
    \index[4]_i_2__2 
       (.I0(\index[4]_i_3__2_n_0 ),
        .I1(Q[2]),
        .I2(index[2]),
        .I3(\index[4]_i_4__2_n_0 ),
        .I4(index[3]),
        .I5(index[4]),
        .O(\index[4]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \index[4]_i_3__2 
       (.I0(Q[0]),
        .I1(fsm1),
        .O(\index[4]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \index[4]_i_4__2 
       (.I0(index[1]),
        .I1(index[0]),
        .O(\index[4]_i_4__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[0] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__2_n_0 ),
        .D(\index[0]_i_1__2_n_0 ),
        .Q(index[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[1] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__2_n_0 ),
        .D(\index[1]_i_1__2_n_0 ),
        .Q(index[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[2] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__2_n_0 ),
        .D(\index[2]_i_1__2_n_0 ),
        .Q(index[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[3] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__2_n_0 ),
        .D(\index[3]_i_1__2_n_0 ),
        .Q(index[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[4] 
       (.C(gtreset_reg),
        .CE(\index[4]_i_1__2_n_0 ),
        .D(\index[4]_i_2__2_n_0 ),
        .Q(index[4]),
        .R(RST_DCLK_RESET));
  LUT3 #(
    .INIT(8'h10)) 
    \load_cnt[0]_i_1__3 
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[0]),
        .O(\load_cnt[0]_i_1__3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \load_cnt_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\load_cnt[0]_i_1__3_n_0 ),
        .Q(load_cnt),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_tx_rate_q_reg ),
        .Q(rate_reg1[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(1'b0),
        .Q(rate_reg1[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rate_reg1[0]),
        .Q(rate_reg2[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rate_reg1[1]),
        .Q(rate_reg2[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ext_ch_gt_drprdy),
        .Q(rdy_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rdy_reg1),
        .Q(rdy_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_START),
        .Q(start_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(start_reg1),
        .Q(start_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_X16),
        .Q(x16_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(x16_reg1),
        .Q(x16_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16x20_mode_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(DRP_X16X20_MODE),
        .Q(x16x20_mode_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE x16x20_mode_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(x16x20_mode_reg1),
        .Q(x16x20_mode_reg2),
        .R(RST_DCLK_RESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_eq" *) 
module pcie_7x_0_pcie_7x_0_pipe_eq
   (out0,
    TXPRECURSOR,
    TXMAINCURSOR,
    TXPOSTCURSOR,
    USER_RXEQ_ADAPT_DONE,
    RST_CPLLRESET,
    CLK,
    cpllreset_reg,
    USER_RATE_GEN3);
  output [0:0]out0;
  output [4:0]TXPRECURSOR;
  output [6:0]TXMAINCURSOR;
  output [4:0]TXPOSTCURSOR;
  output USER_RXEQ_ADAPT_DONE;
  input RST_CPLLRESET;
  input CLK;
  input cpllreset_reg;
  input USER_RATE_GEN3;

  wire CLK;
  wire \FSM_onehot_fsm_tx[1]_i_1_n_0 ;
  wire \FSM_onehot_fsm_tx[1]_i_2_n_0 ;
  wire \FSM_onehot_fsm_tx[2]_i_1_n_0 ;
  wire \FSM_onehot_fsm_tx[3]_i_1_n_0 ;
  wire \FSM_onehot_fsm_tx[3]_i_2_n_0 ;
  wire \FSM_onehot_fsm_tx[4]_i_1_n_0 ;
  wire \FSM_onehot_fsm_tx[5]_i_1_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_1_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_2_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_3_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[6] ;
  wire \FSM_sequential_fsm_rx[0]_i_2_n_0 ;
  wire \FSM_sequential_fsm_rx[2]_i_2_n_0 ;
  wire \FSM_sequential_fsm_rx[2]_i_3_n_0 ;
  wire RST_CPLLRESET;
  wire [6:0]TXMAINCURSOR;
  wire [4:0]TXPOSTCURSOR;
  wire [4:0]TXPRECURSOR;
  wire USER_RATE_GEN3;
  wire USER_RXEQ_ADAPT_DONE;
  wire cpllreset_reg;
  (* RTL_KEEP = "yes" *) wire [2:0]fsm_rx;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  (* RTL_KEEP = "yes" *) wire [0:0]out0;
  wire rxeq_adapt_done_reg_reg_n_0;
  wire [2:0]rxeq_cnt;
  wire \rxeq_cnt_reg_n_0_[0] ;
  wire \rxeq_cnt_reg_n_0_[1] ;
  wire \rxeq_cnt_reg_n_0_[2] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rxeq_control_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rxeq_control_reg2;
  wire [5:0]rxeq_fs;
  wire \rxeq_fs[5]_i_1_n_0 ;
  wire [5:0]rxeq_fs__0;
  wire [5:0]rxeq_lf;
  wire \rxeq_lf[5]_i_1_n_0 ;
  wire [5:0]rxeq_lf__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]rxeq_lffs_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]rxeq_lffs_reg2;
  wire rxeq_new_txcoeff_req;
  wire rxeq_new_txcoeff_req_reg_n_0;
  wire \rxeq_preset[0]_i_1_n_0 ;
  wire \rxeq_preset[1]_i_1_n_0 ;
  wire \rxeq_preset[2]_i_1_n_0 ;
  wire \rxeq_preset[2]_i_2_n_0 ;
  wire [2:0]rxeq_preset__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]rxeq_preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]rxeq_preset_reg2;
  wire rxeq_preset_valid;
  wire rxeq_preset_valid_reg_n_0;
  wire rxeq_scan_i_n_0;
  wire rxeq_scan_i_n_1;
  wire rxeq_scan_i_n_2;
  wire rxeq_scan_i_n_4;
  wire rxeq_scan_i_n_5;
  wire [17:0]rxeq_txcoeff;
  wire [5:0]rxeq_txcoeff__0;
  wire \rxeq_txcoeff_reg_n_0_[10] ;
  wire \rxeq_txcoeff_reg_n_0_[11] ;
  wire \rxeq_txcoeff_reg_n_0_[12] ;
  wire \rxeq_txcoeff_reg_n_0_[13] ;
  wire \rxeq_txcoeff_reg_n_0_[14] ;
  wire \rxeq_txcoeff_reg_n_0_[15] ;
  wire \rxeq_txcoeff_reg_n_0_[16] ;
  wire \rxeq_txcoeff_reg_n_0_[17] ;
  wire \rxeq_txcoeff_reg_n_0_[6] ;
  wire \rxeq_txcoeff_reg_n_0_[7] ;
  wire \rxeq_txcoeff_reg_n_0_[8] ;
  wire \rxeq_txcoeff_reg_n_0_[9] ;
  wire [3:0]rxeq_txpreset;
  wire \rxeq_txpreset[3]_i_1_n_0 ;
  wire [3:0]rxeq_txpreset__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxeq_txpreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxeq_txpreset_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_en_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_en_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_mode_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_mode_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]rxeq_user_txcoeff_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]rxeq_user_txcoeff_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]txeq_control_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]txeq_control_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]txeq_deemph_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]txeq_deemph_reg2;
  wire [17:0]txeq_preset;
  wire \txeq_preset[0]_i_1_n_0 ;
  wire \txeq_preset[10]_i_1_n_0 ;
  wire \txeq_preset[10]_i_2_n_0 ;
  wire \txeq_preset[11]_i_1_n_0 ;
  wire \txeq_preset[12]_i_1_n_0 ;
  wire \txeq_preset[13]_i_1_n_0 ;
  wire \txeq_preset[14]_i_1_n_0 ;
  wire \txeq_preset[15]_i_1_n_0 ;
  wire \txeq_preset[16]_i_2_n_0 ;
  wire \txeq_preset[17]_i_1_n_0 ;
  wire \txeq_preset[1]_i_1_n_0 ;
  wire \txeq_preset[2]_i_1_n_0 ;
  wire \txeq_preset[3]_i_1_n_0 ;
  wire \txeq_preset[7]_i_1_n_0 ;
  wire \txeq_preset[8]_i_1_n_0 ;
  wire \txeq_preset[8]_i_2_n_0 ;
  wire \txeq_preset[9]_i_1_n_0 ;
  wire txeq_preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txeq_preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txeq_preset_reg2;
  wire txeq_txcoeff;
  wire \txeq_txcoeff[0]_i_1_n_0 ;
  wire \txeq_txcoeff[0]_i_2_n_0 ;
  wire \txeq_txcoeff[10]_i_1_n_0 ;
  wire \txeq_txcoeff[10]_i_2_n_0 ;
  wire \txeq_txcoeff[11]_i_1_n_0 ;
  wire \txeq_txcoeff[11]_i_2_n_0 ;
  wire \txeq_txcoeff[12]_i_1_n_0 ;
  wire \txeq_txcoeff[12]_i_2_n_0 ;
  wire \txeq_txcoeff[13]_i_1_n_0 ;
  wire \txeq_txcoeff[13]_i_2_n_0 ;
  wire \txeq_txcoeff[14]_i_1_n_0 ;
  wire \txeq_txcoeff[14]_i_2_n_0 ;
  wire \txeq_txcoeff[15]_i_1_n_0 ;
  wire \txeq_txcoeff[15]_i_2_n_0 ;
  wire \txeq_txcoeff[16]_i_1_n_0 ;
  wire \txeq_txcoeff[16]_i_2_n_0 ;
  wire \txeq_txcoeff[17]_i_1_n_0 ;
  wire \txeq_txcoeff[17]_i_2_n_0 ;
  wire \txeq_txcoeff[18]_i_2_n_0 ;
  wire \txeq_txcoeff[18]_i_3_n_0 ;
  wire \txeq_txcoeff[1]_i_1_n_0 ;
  wire \txeq_txcoeff[1]_i_2_n_0 ;
  wire \txeq_txcoeff[2]_i_1_n_0 ;
  wire \txeq_txcoeff[2]_i_2_n_0 ;
  wire \txeq_txcoeff[3]_i_1_n_0 ;
  wire \txeq_txcoeff[3]_i_2_n_0 ;
  wire \txeq_txcoeff[4]_i_1_n_0 ;
  wire \txeq_txcoeff[4]_i_2_n_0 ;
  wire \txeq_txcoeff[5]_i_1_n_0 ;
  wire \txeq_txcoeff[5]_i_2_n_0 ;
  wire \txeq_txcoeff[6]_i_1_n_0 ;
  wire \txeq_txcoeff[6]_i_2_n_0 ;
  wire \txeq_txcoeff[7]_i_1_n_0 ;
  wire \txeq_txcoeff[7]_i_2_n_0 ;
  wire \txeq_txcoeff[8]_i_1_n_0 ;
  wire \txeq_txcoeff[8]_i_2_n_0 ;
  wire \txeq_txcoeff[9]_i_1_n_0 ;
  wire \txeq_txcoeff[9]_i_2_n_0 ;
  wire [1:0]txeq_txcoeff_cnt;
  wire \txeq_txcoeff_cnt_reg_n_0_[0] ;
  wire \txeq_txcoeff_cnt_reg_n_0_[1] ;
  wire \txeq_txcoeff_reg_n_0_[0] ;
  wire \txeq_txcoeff_reg_n_0_[10] ;
  wire \txeq_txcoeff_reg_n_0_[11] ;
  wire \txeq_txcoeff_reg_n_0_[12] ;
  wire \txeq_txcoeff_reg_n_0_[13] ;
  wire \txeq_txcoeff_reg_n_0_[14] ;
  wire \txeq_txcoeff_reg_n_0_[15] ;
  wire \txeq_txcoeff_reg_n_0_[16] ;
  wire \txeq_txcoeff_reg_n_0_[17] ;
  wire \txeq_txcoeff_reg_n_0_[18] ;
  wire \txeq_txcoeff_reg_n_0_[1] ;
  wire \txeq_txcoeff_reg_n_0_[2] ;
  wire \txeq_txcoeff_reg_n_0_[3] ;
  wire \txeq_txcoeff_reg_n_0_[4] ;
  wire \txeq_txcoeff_reg_n_0_[5] ;
  wire \txeq_txcoeff_reg_n_0_[6] ;
  wire \txeq_txcoeff_reg_n_0_[7] ;
  wire \txeq_txcoeff_reg_n_0_[8] ;
  wire \txeq_txcoeff_reg_n_0_[9] ;

  LUT6 #(
    .INIT(64'h000100010001CDCD)) 
    \FSM_onehot_fsm_tx[1]_i_1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\FSM_onehot_fsm_tx[1]_i_2_n_0 ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I4(txeq_control_reg2[0]),
        .I5(txeq_control_reg2[1]),
        .O(\FSM_onehot_fsm_tx[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \FSM_onehot_fsm_tx[1]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm_tx[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h20202F20)) 
    \FSM_onehot_fsm_tx[2]_i_1 
       (.I0(txeq_control_reg2[0]),
        .I1(txeq_control_reg2[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I3(out0),
        .I4(txeq_preset_done),
        .O(\FSM_onehot_fsm_tx[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h45454545FF454545)) 
    \FSM_onehot_fsm_tx[3]_i_1 
       (.I0(\FSM_onehot_fsm_tx[3]_i_2_n_0 ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I4(txeq_control_reg2[1]),
        .I5(txeq_control_reg2[0]),
        .O(\FSM_onehot_fsm_tx[3]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hFB)) 
    \FSM_onehot_fsm_tx[3]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(out0),
        .O(\FSM_onehot_fsm_tx[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \FSM_onehot_fsm_tx[4]_i_1 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(out0),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[4]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \FSM_onehot_fsm_tx[5]_i_1 
       (.I0(txeq_control_reg2[0]),
        .I1(txeq_control_reg2[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAAAAA8)) 
    \FSM_onehot_fsm_tx[6]_i_1 
       (.I0(\FSM_onehot_fsm_tx[6]_i_2_n_0 ),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I3(\FSM_onehot_fsm_tx[6]_i_3_n_0 ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h88888888BBBBBBB8)) 
    \FSM_onehot_fsm_tx[6]_i_2 
       (.I0(txeq_preset_done),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm_tx[6]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_fsm_tx[6]_i_3 
       (.I0(txeq_control_reg2[1]),
        .I1(txeq_control_reg2[0]),
        .O(\FSM_onehot_fsm_tx[6]_i_3_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_fsm_tx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[1]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[2]_i_1_n_0 ),
        .Q(out0),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[3]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[4]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[5]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[6]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hF0D00800)) 
    \FSM_sequential_fsm_rx[0]_i_2 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[2] ),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[0] ),
        .I4(fsm_rx[0]),
        .O(\FSM_sequential_fsm_rx[0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_sequential_fsm_rx[2]_i_2 
       (.I0(rxeq_control_reg2[0]),
        .I1(rxeq_control_reg2[1]),
        .O(\FSM_sequential_fsm_rx[2]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hFD)) 
    \FSM_sequential_fsm_rx[2]_i_3 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[2] ),
        .I2(\rxeq_cnt_reg_n_0_[0] ),
        .O(\FSM_sequential_fsm_rx[2]_i_3_n_0 ));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_2),
        .Q(fsm_rx[0]),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_1),
        .Q(fsm_rx[1]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_0),
        .Q(fsm_rx[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_GEN3),
        .Q(gen3_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(RST_CPLLRESET));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_22 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[17] ),
        .O(TXPOSTCURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_23 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[16] ),
        .O(TXPOSTCURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_24 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[15] ),
        .O(TXPOSTCURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_25 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[14] ),
        .O(TXPOSTCURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_26 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[13] ),
        .O(TXPOSTCURSOR[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_27 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[4] ),
        .O(TXPRECURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_28 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[3] ),
        .O(TXPRECURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_29 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[2] ),
        .O(TXPRECURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_30 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[1] ),
        .O(TXPRECURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_31 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[0] ),
        .O(TXPRECURSOR[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_32 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[12] ),
        .O(TXMAINCURSOR[6]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_33 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[11] ),
        .O(TXMAINCURSOR[5]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_34 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[10] ),
        .O(TXMAINCURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_35 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[9] ),
        .O(TXMAINCURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_36 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[8] ),
        .O(TXMAINCURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_37 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[7] ),
        .O(TXMAINCURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_38 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[6] ),
        .O(TXMAINCURSOR[0]));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_adapt_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_5),
        .Q(USER_RXEQ_ADAPT_DONE),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_adapt_done_reg_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_4),
        .Q(rxeq_adapt_done_reg_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h04041C10)) 
    \rxeq_cnt[0]_i_1 
       (.I0(\rxeq_cnt_reg_n_0_[0] ),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[2]),
        .I3(rxeq_control_reg2[1]),
        .I4(fsm_rx[1]),
        .O(rxeq_cnt[0]));
  LUT5 #(
    .INIT(32'h00424200)) 
    \rxeq_cnt[1]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[1] ),
        .I4(\rxeq_cnt_reg_n_0_[0] ),
        .O(rxeq_cnt[1]));
  LUT6 #(
    .INIT(64'h0042420042004200)) 
    \rxeq_cnt[2]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[2] ),
        .I4(\rxeq_cnt_reg_n_0_[1] ),
        .I5(\rxeq_cnt_reg_n_0_[0] ),
        .O(rxeq_cnt[2]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[0]),
        .Q(\rxeq_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[1]),
        .Q(\rxeq_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[2]),
        .Q(\rxeq_cnt_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_control_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_control_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_control_reg1[0]),
        .Q(rxeq_control_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_control_reg1[1]),
        .Q(rxeq_control_reg2[1]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[0]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[0]),
        .O(rxeq_fs[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[1]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[1]),
        .O(rxeq_fs[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[2]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[2]),
        .O(rxeq_fs[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[3]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[3]),
        .O(rxeq_fs[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[4]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[4]),
        .O(rxeq_fs[4]));
  LUT4 #(
    .INIT(16'hC203)) 
    \rxeq_fs[5]_i_1 
       (.I0(rxeq_control_reg2[1]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[0]),
        .O(\rxeq_fs[5]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[5]_i_2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[5]),
        .O(rxeq_fs[5]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[0] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1_n_0 ),
        .D(rxeq_fs[0]),
        .Q(rxeq_fs__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[1] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1_n_0 ),
        .D(rxeq_fs[1]),
        .Q(rxeq_fs__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[2] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1_n_0 ),
        .D(rxeq_fs[2]),
        .Q(rxeq_fs__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[3] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1_n_0 ),
        .D(rxeq_fs[3]),
        .Q(rxeq_fs__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[4] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1_n_0 ),
        .D(rxeq_fs[4]),
        .Q(rxeq_fs__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[5] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1_n_0 ),
        .D(rxeq_fs[5]),
        .Q(rxeq_fs__0[5]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[0]_i_1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[0]),
        .O(rxeq_lf[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[1]_i_1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[1]),
        .O(rxeq_lf[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[2]_i_1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[2]),
        .O(rxeq_lf[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[3]_i_1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[3]),
        .O(rxeq_lf[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[4]_i_1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[4]),
        .O(rxeq_lf[4]));
  LUT6 #(
    .INIT(64'hFF000000000080FF)) 
    \rxeq_lf[5]_i_1 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[0] ),
        .I2(\rxeq_cnt_reg_n_0_[2] ),
        .I3(fsm_rx[2]),
        .I4(fsm_rx[1]),
        .I5(fsm_rx[0]),
        .O(\rxeq_lf[5]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[5]_i_2 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[5]),
        .O(rxeq_lf[5]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[0] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1_n_0 ),
        .D(rxeq_lf[0]),
        .Q(rxeq_lf__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[1] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1_n_0 ),
        .D(rxeq_lf[1]),
        .Q(rxeq_lf__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[2] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1_n_0 ),
        .D(rxeq_lf[2]),
        .Q(rxeq_lf__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[3] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1_n_0 ),
        .D(rxeq_lf[3]),
        .Q(rxeq_lf__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[4] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1_n_0 ),
        .D(rxeq_lf[4]),
        .Q(rxeq_lf__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[5] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1_n_0 ),
        .D(rxeq_lf[5]),
        .Q(rxeq_lf__0[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[0]),
        .Q(rxeq_lffs_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[1]),
        .Q(rxeq_lffs_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[2]),
        .Q(rxeq_lffs_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[3]),
        .Q(rxeq_lffs_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[4]),
        .Q(rxeq_lffs_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[5]),
        .Q(rxeq_lffs_reg2[5]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_new_txcoeff_req_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_new_txcoeff_req),
        .Q(rxeq_new_txcoeff_req_reg_n_0),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[0]_i_1 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[0]),
        .I4(\rxeq_preset[2]_i_2_n_0 ),
        .I5(rxeq_preset__0[0]),
        .O(\rxeq_preset[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[1]_i_1 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[1]),
        .I4(\rxeq_preset[2]_i_2_n_0 ),
        .I5(rxeq_preset__0[1]),
        .O(\rxeq_preset[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[2]_i_1 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[2]),
        .I4(\rxeq_preset[2]_i_2_n_0 ),
        .I5(rxeq_preset__0[2]),
        .O(\rxeq_preset[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF00400FF)) 
    \rxeq_preset[2]_i_2 
       (.I0(rxeq_control_reg2[1]),
        .I1(rxeq_control_reg2[0]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[2]),
        .I4(fsm_rx[0]),
        .O(\rxeq_preset[2]_i_2_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[0]),
        .Q(rxeq_preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[1]),
        .Q(rxeq_preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[2]),
        .Q(rxeq_preset_reg2[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[0]_i_1_n_0 ),
        .Q(rxeq_preset__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[1]_i_1_n_0 ),
        .Q(rxeq_preset__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[2]_i_1_n_0 ),
        .Q(rxeq_preset__0[2]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h04)) 
    rxeq_preset_valid_i_1
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[1]),
        .I2(fsm_rx[0]),
        .O(rxeq_preset_valid));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_preset_valid_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_valid),
        .Q(rxeq_preset_valid_reg_n_0),
        .R(RST_CPLLRESET));
  pcie_7x_0_pcie_7x_0_rxeq_scan_43 rxeq_scan_i
       (.CLK(CLK),
        .D({rxeq_scan_i_n_0,rxeq_scan_i_n_1,rxeq_scan_i_n_2}),
        .Q(rxeq_txpreset__0),
        .RST_CPLLRESET(RST_CPLLRESET),
        .USER_RXEQ_ADAPT_DONE(USER_RXEQ_ADAPT_DONE),
        .out(fsm_rx),
        .rxeq_adapt_done_reg(rxeq_scan_i_n_5),
        .rxeq_adapt_done_reg_reg(rxeq_scan_i_n_4),
        .rxeq_adapt_done_reg_reg_0(rxeq_adapt_done_reg_reg_n_0),
        .\rxeq_cnt_reg[1] (\FSM_sequential_fsm_rx[2]_i_3_n_0 ),
        .\rxeq_cnt_reg[1]_0 (\FSM_sequential_fsm_rx[0]_i_2_n_0 ),
        .\rxeq_control_reg2_reg[0] (\FSM_sequential_fsm_rx[2]_i_2_n_0 ),
        .\rxeq_control_reg2_reg[1] (rxeq_control_reg2),
        .\rxeq_fs_reg[5] (rxeq_fs__0),
        .\rxeq_lf_reg[5] (rxeq_lf__0),
        .rxeq_new_txcoeff_req(rxeq_new_txcoeff_req),
        .rxeq_new_txcoeff_req_reg(rxeq_new_txcoeff_req_reg_n_0),
        .\rxeq_preset_reg[2] (rxeq_preset__0),
        .rxeq_preset_valid_reg(rxeq_preset_valid_reg_n_0),
        .\rxeq_txcoeff_reg[17] ({\rxeq_txcoeff_reg_n_0_[17] ,\rxeq_txcoeff_reg_n_0_[16] ,\rxeq_txcoeff_reg_n_0_[15] ,\rxeq_txcoeff_reg_n_0_[14] ,\rxeq_txcoeff_reg_n_0_[13] ,\rxeq_txcoeff_reg_n_0_[12] ,\rxeq_txcoeff_reg_n_0_[11] ,\rxeq_txcoeff_reg_n_0_[10] ,\rxeq_txcoeff_reg_n_0_[9] ,\rxeq_txcoeff_reg_n_0_[8] ,\rxeq_txcoeff_reg_n_0_[7] ,\rxeq_txcoeff_reg_n_0_[6] ,rxeq_txcoeff__0}));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[0]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[6] ),
        .O(rxeq_txcoeff[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[10]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[16] ),
        .O(rxeq_txcoeff[10]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[11]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[17] ),
        .O(rxeq_txcoeff[11]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[12]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[0]),
        .O(rxeq_txcoeff[12]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[13]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[1]),
        .O(rxeq_txcoeff[13]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[14]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[2]),
        .O(rxeq_txcoeff[14]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[15]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[3]),
        .O(rxeq_txcoeff[15]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[16]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[4]),
        .O(rxeq_txcoeff[16]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[17]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[5]),
        .O(rxeq_txcoeff[17]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[1]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[7] ),
        .O(rxeq_txcoeff[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[2]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[8] ),
        .O(rxeq_txcoeff[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[3]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[9] ),
        .O(rxeq_txcoeff[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[4]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[10] ),
        .O(rxeq_txcoeff[4]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[5]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[11] ),
        .O(rxeq_txcoeff[5]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[6]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[12] ),
        .O(rxeq_txcoeff[6]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[7]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[13] ),
        .O(rxeq_txcoeff[7]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[8]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[14] ),
        .O(rxeq_txcoeff[8]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[9]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[15] ),
        .O(rxeq_txcoeff[9]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[0] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[0]),
        .Q(rxeq_txcoeff__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[10] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[10]),
        .Q(\rxeq_txcoeff_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[11] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[11]),
        .Q(\rxeq_txcoeff_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[12] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[12]),
        .Q(\rxeq_txcoeff_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[13] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[13]),
        .Q(\rxeq_txcoeff_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[14] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[14]),
        .Q(\rxeq_txcoeff_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[15] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[15]),
        .Q(\rxeq_txcoeff_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[16] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[16]),
        .Q(\rxeq_txcoeff_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[17] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[17]),
        .Q(\rxeq_txcoeff_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[1] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[1]),
        .Q(rxeq_txcoeff__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[2] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[2]),
        .Q(rxeq_txcoeff__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[3] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[3]),
        .Q(rxeq_txcoeff__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[4] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[4]),
        .Q(rxeq_txcoeff__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[5] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[5]),
        .Q(rxeq_txcoeff__0[5]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[6] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[6]),
        .Q(\rxeq_txcoeff_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[7] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[7]),
        .Q(\rxeq_txcoeff_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[8] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[8]),
        .Q(\rxeq_txcoeff_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[9] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txcoeff[9]),
        .Q(\rxeq_txcoeff_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[0]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[0]),
        .O(rxeq_txpreset[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[1]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[1]),
        .O(rxeq_txpreset[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[2]_i_1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[2]),
        .O(rxeq_txpreset[2]));
  LUT4 #(
    .INIT(16'hF405)) 
    \rxeq_txpreset[3]_i_1 
       (.I0(fsm_rx[2]),
        .I1(rxeq_control_reg2[1]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[0]),
        .O(\rxeq_txpreset[3]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[3]_i_2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[3]),
        .O(rxeq_txpreset[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[0]),
        .Q(rxeq_txpreset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[1]),
        .Q(rxeq_txpreset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[2]),
        .Q(rxeq_txpreset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[3]),
        .Q(rxeq_txpreset_reg2[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[0] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txpreset[0]),
        .Q(rxeq_txpreset__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[1] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txpreset[1]),
        .Q(rxeq_txpreset__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[2] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txpreset[2]),
        .Q(rxeq_txpreset__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[3] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1_n_0 ),
        .D(rxeq_txpreset[3]),
        .Q(rxeq_txpreset__0[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_en_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_en_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_en_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_en_reg1),
        .Q(rxeq_user_en_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_mode_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_mode_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_mode_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_mode_reg1),
        .Q(rxeq_user_mode_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[0]),
        .Q(rxeq_user_txcoeff_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[10]),
        .Q(rxeq_user_txcoeff_reg2[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[11]),
        .Q(rxeq_user_txcoeff_reg2[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[12]),
        .Q(rxeq_user_txcoeff_reg2[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[13]),
        .Q(rxeq_user_txcoeff_reg2[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[14]),
        .Q(rxeq_user_txcoeff_reg2[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[15]),
        .Q(rxeq_user_txcoeff_reg2[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[16]),
        .Q(rxeq_user_txcoeff_reg2[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[17]),
        .Q(rxeq_user_txcoeff_reg2[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[1]),
        .Q(rxeq_user_txcoeff_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[2]),
        .Q(rxeq_user_txcoeff_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[3]),
        .Q(rxeq_user_txcoeff_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[4]),
        .Q(rxeq_user_txcoeff_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[5]),
        .Q(rxeq_user_txcoeff_reg2[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[6]),
        .Q(rxeq_user_txcoeff_reg2[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[7]),
        .Q(rxeq_user_txcoeff_reg2[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[8]),
        .Q(rxeq_user_txcoeff_reg2[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[9]),
        .Q(rxeq_user_txcoeff_reg2[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_control_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_control_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_control_reg1[0]),
        .Q(txeq_control_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_control_reg1[1]),
        .Q(txeq_control_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \txeq_deemph_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[0]),
        .S(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \txeq_deemph_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[0]),
        .Q(txeq_deemph_reg2[0]),
        .S(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[1]),
        .Q(txeq_deemph_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[2]),
        .Q(txeq_deemph_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[3]),
        .Q(txeq_deemph_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[4]),
        .Q(txeq_deemph_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[5]),
        .Q(txeq_deemph_reg2[5]),
        .R(RST_CPLLRESET));
  LUT4 #(
    .INIT(16'h1000)) 
    \txeq_preset[0]_i_1 
       (.I0(txeq_preset_reg2[1]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[0]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \txeq_preset[10]_i_1 
       (.I0(\txeq_preset[10]_i_2_n_0 ),
        .I1(RST_CPLLRESET),
        .I2(out0),
        .I3(txeq_preset[10]),
        .O(\txeq_preset[10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAEAAABFB)) 
    \txeq_preset[10]_i_2 
       (.I0(RST_CPLLRESET),
        .I1(txeq_preset_reg2[1]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[2]),
        .I4(txeq_preset_reg2[0]),
        .O(\txeq_preset[10]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h1811)) 
    \txeq_preset[11]_i_1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h027E)) 
    \txeq_preset[12]_i_1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0140)) 
    \txeq_preset[13]_i_1 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[0]),
        .O(\txeq_preset[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h1004)) 
    \txeq_preset[14]_i_1 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[0]),
        .O(\txeq_preset[14]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \txeq_preset[15]_i_1 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[1]),
        .I2(txeq_preset_reg2[3]),
        .O(\txeq_preset[15]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h06)) 
    \txeq_preset[16]_i_2 
       (.I0(txeq_preset_reg2[3]),
        .I1(txeq_preset_reg2[0]),
        .I2(txeq_preset_reg2[2]),
        .O(\txeq_preset[16]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h1091)) 
    \txeq_preset[17]_i_1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h1004)) 
    \txeq_preset[1]_i_1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[2]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h00E0)) 
    \txeq_preset[2]_i_1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(RST_CPLLRESET),
        .O(\txeq_preset[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0C38)) 
    \txeq_preset[3]_i_1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h1400)) 
    \txeq_preset[7]_i_1 
       (.I0(txeq_preset_reg2[3]),
        .I1(txeq_preset_reg2[0]),
        .I2(txeq_preset_reg2[2]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \txeq_preset[8]_i_1 
       (.I0(\txeq_preset[8]_i_2_n_0 ),
        .I1(RST_CPLLRESET),
        .I2(out0),
        .I3(txeq_preset[8]),
        .O(\txeq_preset[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hABAEBBBB)) 
    \txeq_preset[8]_i_2 
       (.I0(RST_CPLLRESET),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[0]),
        .I4(txeq_preset_reg2[1]),
        .O(\txeq_preset[8]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h1819)) 
    \txeq_preset[9]_i_1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    txeq_preset_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out0),
        .Q(txeq_preset_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[0]),
        .Q(txeq_preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[1]),
        .Q(txeq_preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[2]),
        .Q(txeq_preset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[3]),
        .Q(txeq_preset_reg2[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[0] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[0]_i_1_n_0 ),
        .Q(txeq_preset[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txeq_preset[10]_i_1_n_0 ),
        .Q(txeq_preset[10]),
        .R(1'b0));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[11] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[11]_i_1_n_0 ),
        .Q(txeq_preset[11]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[12] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[12]_i_1_n_0 ),
        .Q(txeq_preset[12]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[13] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[13]_i_1_n_0 ),
        .Q(txeq_preset[13]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[14] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[14]_i_1_n_0 ),
        .Q(txeq_preset[14]),
        .R(RST_CPLLRESET));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[15] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[15]_i_1_n_0 ),
        .Q(txeq_preset[15]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[16] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[16]_i_2_n_0 ),
        .Q(txeq_preset[16]),
        .R(RST_CPLLRESET));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[17] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[17]_i_1_n_0 ),
        .Q(txeq_preset[17]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[1] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[1]_i_1_n_0 ),
        .Q(txeq_preset[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[2] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[2]_i_1_n_0 ),
        .Q(txeq_preset[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[3] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[3]_i_1_n_0 ),
        .Q(txeq_preset[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[7] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[7]_i_1_n_0 ),
        .Q(txeq_preset[7]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txeq_preset[8]_i_1_n_0 ),
        .Q(txeq_preset[8]),
        .R(1'b0));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[9] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[9]_i_1_n_0 ),
        .Q(txeq_preset[9]),
        .S(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[0]_i_1 
       (.I0(\txeq_txcoeff_reg_n_0_[6] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(out0),
        .I3(txeq_preset[0]),
        .I4(\txeq_txcoeff[0]_i_2_n_0 ),
        .O(\txeq_txcoeff[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[0]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[6] ),
        .I4(\txeq_txcoeff_reg_n_0_[7] ),
        .O(\txeq_txcoeff[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[10]_i_1 
       (.I0(out0),
        .I1(txeq_preset[10]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[9] ),
        .I4(\txeq_txcoeff[10]_i_2_n_0 ),
        .O(\txeq_txcoeff[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[10]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[17] ),
        .I2(\txeq_txcoeff_reg_n_0_[16] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[11]_i_1 
       (.I0(out0),
        .I1(txeq_preset[11]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[10] ),
        .I4(\txeq_txcoeff[11]_i_2_n_0 ),
        .O(\txeq_txcoeff[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[11]_i_2 
       (.I0(\txeq_txcoeff_reg_n_0_[18] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(\txeq_txcoeff_reg_n_0_[17] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[12]_i_1 
       (.I0(out0),
        .I1(txeq_preset[12]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[11] ),
        .I4(\txeq_txcoeff[12]_i_2_n_0 ),
        .O(\txeq_txcoeff[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[12]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[0]),
        .I2(\txeq_txcoeff_reg_n_0_[18] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[13]_i_1 
       (.I0(out0),
        .I1(txeq_preset[13]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[12] ),
        .I4(\txeq_txcoeff[13]_i_2_n_0 ),
        .O(\txeq_txcoeff[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[13]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[1]),
        .I2(txeq_deemph_reg2[0]),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[13]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[14]_i_1 
       (.I0(out0),
        .I1(txeq_preset[14]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[13] ),
        .I4(\txeq_txcoeff[14]_i_2_n_0 ),
        .O(\txeq_txcoeff[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[14]_i_2 
       (.I0(txeq_deemph_reg2[2]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[1]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[15]_i_1 
       (.I0(out0),
        .I1(txeq_preset[15]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[14] ),
        .I4(\txeq_txcoeff[15]_i_2_n_0 ),
        .O(\txeq_txcoeff[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[15]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[3]),
        .I2(txeq_deemph_reg2[2]),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[16]_i_1 
       (.I0(out0),
        .I1(txeq_preset[16]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[15] ),
        .I4(\txeq_txcoeff[16]_i_2_n_0 ),
        .O(\txeq_txcoeff[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[16]_i_2 
       (.I0(txeq_deemph_reg2[4]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[3]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[17]_i_1 
       (.I0(out0),
        .I1(txeq_preset[17]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[16] ),
        .I4(\txeq_txcoeff[17]_i_2_n_0 ),
        .O(\txeq_txcoeff[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[17]_i_2 
       (.I0(txeq_deemph_reg2[5]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[4]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[17]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABFFABAAABAAAB)) 
    \txeq_txcoeff[18]_i_1 
       (.I0(\FSM_onehot_fsm_tx[1]_i_2_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I4(txeq_control_reg2[0]),
        .I5(txeq_control_reg2[1]),
        .O(txeq_txcoeff));
  LUT6 #(
    .INIT(64'hFFFFAE00AE00AE00)) 
    \txeq_txcoeff[18]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(\txeq_txcoeff[18]_i_3_n_0 ),
        .I3(txeq_deemph_reg2[5]),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I5(\txeq_txcoeff_reg_n_0_[17] ),
        .O(\txeq_txcoeff[18]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \txeq_txcoeff[18]_i_3 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .O(\txeq_txcoeff[18]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[1]_i_1 
       (.I0(out0),
        .I1(txeq_preset[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[0] ),
        .I4(\txeq_txcoeff[1]_i_2_n_0 ),
        .O(\txeq_txcoeff[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[1]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[8] ),
        .I2(\txeq_txcoeff_reg_n_0_[7] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[2]_i_1 
       (.I0(out0),
        .I1(txeq_preset[2]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[1] ),
        .I4(\txeq_txcoeff[2]_i_2_n_0 ),
        .O(\txeq_txcoeff[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[2]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[9] ),
        .I2(\txeq_txcoeff_reg_n_0_[8] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[3]_i_1 
       (.I0(out0),
        .I1(txeq_preset[3]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[2] ),
        .I4(\txeq_txcoeff[3]_i_2_n_0 ),
        .O(\txeq_txcoeff[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[3]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[10] ),
        .I2(\txeq_txcoeff_reg_n_0_[9] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[4]_i_1 
       (.I0(\txeq_txcoeff[4]_i_2_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[10] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[3] ),
        .O(\txeq_txcoeff[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[4]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[10] ),
        .I4(\txeq_txcoeff_reg_n_0_[11] ),
        .O(\txeq_txcoeff[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[5]_i_1 
       (.I0(\txeq_txcoeff[5]_i_2_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[11] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[4] ),
        .O(\txeq_txcoeff[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[5]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[11] ),
        .I4(\txeq_txcoeff_reg_n_0_[12] ),
        .O(\txeq_txcoeff[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[6]_i_1 
       (.I0(\txeq_txcoeff[6]_i_2_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[12] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[5] ),
        .O(\txeq_txcoeff[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[6]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[12] ),
        .I4(\txeq_txcoeff_reg_n_0_[13] ),
        .O(\txeq_txcoeff[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[7]_i_1 
       (.I0(out0),
        .I1(txeq_preset[7]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[6] ),
        .I4(\txeq_txcoeff[7]_i_2_n_0 ),
        .O(\txeq_txcoeff[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[7]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[14] ),
        .I2(\txeq_txcoeff_reg_n_0_[13] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[8]_i_1 
       (.I0(out0),
        .I1(txeq_preset[8]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[7] ),
        .I4(\txeq_txcoeff[8]_i_2_n_0 ),
        .O(\txeq_txcoeff[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[8]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[15] ),
        .I2(\txeq_txcoeff_reg_n_0_[14] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[9]_i_1 
       (.I0(out0),
        .I1(txeq_preset[9]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[8] ),
        .I4(\txeq_txcoeff[9]_i_2_n_0 ),
        .O(\txeq_txcoeff[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[9]_i_2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[16] ),
        .I2(\txeq_txcoeff_reg_n_0_[15] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[9]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h4444F444)) 
    \txeq_txcoeff_cnt[0]_i_1 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I3(txeq_control_reg2[1]),
        .I4(txeq_control_reg2[0]),
        .O(txeq_txcoeff_cnt[0]));
  LUT3 #(
    .INIT(8'h28)) 
    \txeq_txcoeff_cnt[1]_i_1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .O(txeq_txcoeff_cnt[1]));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_txcoeff_cnt[0]),
        .Q(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_txcoeff_cnt[1]),
        .Q(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[0] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[0]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[10] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[10]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[11] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[11]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[12] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[12]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[13] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[13]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[14] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[14]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[15] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[15]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[16] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[16]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[17] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[17]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[18] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[18]_i_2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[18] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[1] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[1]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[2] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[2]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[3] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[3]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[4] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[4]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[5] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[5]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[6] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[6]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[7] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[7]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[8] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[8]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[9] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[9]_i_1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_eq" *) 
module pcie_7x_0_pcie_7x_0_pipe_eq_23
   (out0,
    TXPRECURSOR,
    TXMAINCURSOR,
    TXPOSTCURSOR,
    USER_RXEQ_ADAPT_DONE,
    RST_CPLLRESET,
    CLK,
    cpllreset_reg,
    rate_gen3_1);
  output [0:0]out0;
  output [4:0]TXPRECURSOR;
  output [6:0]TXMAINCURSOR;
  output [4:0]TXPOSTCURSOR;
  output USER_RXEQ_ADAPT_DONE;
  input RST_CPLLRESET;
  input CLK;
  input cpllreset_reg;
  input rate_gen3_1;

  wire CLK;
  wire \FSM_onehot_fsm_tx[1]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm_tx[1]_i_2__0_n_0 ;
  wire \FSM_onehot_fsm_tx[2]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm_tx[3]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm_tx[3]_i_2__0_n_0 ;
  wire \FSM_onehot_fsm_tx[4]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm_tx[5]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_2__0_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_3__0_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[6] ;
  wire \FSM_sequential_fsm_rx[0]_i_2__0_n_0 ;
  wire \FSM_sequential_fsm_rx[2]_i_2__0_n_0 ;
  wire \FSM_sequential_fsm_rx[2]_i_3__0_n_0 ;
  wire RST_CPLLRESET;
  wire [6:0]TXMAINCURSOR;
  wire [4:0]TXPOSTCURSOR;
  wire [4:0]TXPRECURSOR;
  wire USER_RXEQ_ADAPT_DONE;
  wire cpllreset_reg;
  (* RTL_KEEP = "yes" *) wire [2:0]fsm_rx;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  (* RTL_KEEP = "yes" *) wire [0:0]out0;
  wire rate_gen3_1;
  wire rxeq_adapt_done_reg_reg_n_0;
  wire [2:0]rxeq_cnt;
  wire \rxeq_cnt_reg_n_0_[0] ;
  wire \rxeq_cnt_reg_n_0_[1] ;
  wire \rxeq_cnt_reg_n_0_[2] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rxeq_control_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rxeq_control_reg2;
  wire [5:0]rxeq_fs;
  wire \rxeq_fs[5]_i_1__0_n_0 ;
  wire [5:0]rxeq_fs__0;
  wire [5:0]rxeq_lf;
  wire \rxeq_lf[5]_i_1__0_n_0 ;
  wire [5:0]rxeq_lf__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]rxeq_lffs_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]rxeq_lffs_reg2;
  wire rxeq_new_txcoeff_req;
  wire rxeq_new_txcoeff_req_reg_n_0;
  wire \rxeq_preset[0]_i_1__0_n_0 ;
  wire \rxeq_preset[1]_i_1__0_n_0 ;
  wire \rxeq_preset[2]_i_1__0_n_0 ;
  wire \rxeq_preset[2]_i_2__0_n_0 ;
  wire [2:0]rxeq_preset__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]rxeq_preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]rxeq_preset_reg2;
  wire rxeq_preset_valid;
  wire rxeq_preset_valid_reg_n_0;
  wire rxeq_scan_i_n_0;
  wire rxeq_scan_i_n_1;
  wire rxeq_scan_i_n_2;
  wire rxeq_scan_i_n_4;
  wire rxeq_scan_i_n_5;
  wire [17:0]rxeq_txcoeff;
  wire [5:0]rxeq_txcoeff__0;
  wire \rxeq_txcoeff_reg_n_0_[10] ;
  wire \rxeq_txcoeff_reg_n_0_[11] ;
  wire \rxeq_txcoeff_reg_n_0_[12] ;
  wire \rxeq_txcoeff_reg_n_0_[13] ;
  wire \rxeq_txcoeff_reg_n_0_[14] ;
  wire \rxeq_txcoeff_reg_n_0_[15] ;
  wire \rxeq_txcoeff_reg_n_0_[16] ;
  wire \rxeq_txcoeff_reg_n_0_[17] ;
  wire \rxeq_txcoeff_reg_n_0_[6] ;
  wire \rxeq_txcoeff_reg_n_0_[7] ;
  wire \rxeq_txcoeff_reg_n_0_[8] ;
  wire \rxeq_txcoeff_reg_n_0_[9] ;
  wire [3:0]rxeq_txpreset;
  wire \rxeq_txpreset[3]_i_1__0_n_0 ;
  wire [3:0]rxeq_txpreset__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxeq_txpreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxeq_txpreset_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_en_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_en_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_mode_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_mode_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]rxeq_user_txcoeff_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]rxeq_user_txcoeff_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]txeq_control_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]txeq_control_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]txeq_deemph_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]txeq_deemph_reg2;
  wire [17:0]txeq_preset;
  wire \txeq_preset[0]_i_1__0_n_0 ;
  wire \txeq_preset[10]_i_1__0_n_0 ;
  wire \txeq_preset[10]_i_2__0_n_0 ;
  wire \txeq_preset[11]_i_1__0_n_0 ;
  wire \txeq_preset[12]_i_1__0_n_0 ;
  wire \txeq_preset[13]_i_1__0_n_0 ;
  wire \txeq_preset[14]_i_1__0_n_0 ;
  wire \txeq_preset[15]_i_1__0_n_0 ;
  wire \txeq_preset[16]_i_2__0_n_0 ;
  wire \txeq_preset[17]_i_1__0_n_0 ;
  wire \txeq_preset[1]_i_1__0_n_0 ;
  wire \txeq_preset[2]_i_1__0_n_0 ;
  wire \txeq_preset[3]_i_1__0_n_0 ;
  wire \txeq_preset[7]_i_1__0_n_0 ;
  wire \txeq_preset[8]_i_1__0_n_0 ;
  wire \txeq_preset[8]_i_2__0_n_0 ;
  wire \txeq_preset[9]_i_1__0_n_0 ;
  wire txeq_preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txeq_preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txeq_preset_reg2;
  wire txeq_txcoeff;
  wire \txeq_txcoeff[0]_i_1__0_n_0 ;
  wire \txeq_txcoeff[0]_i_2__0_n_0 ;
  wire \txeq_txcoeff[10]_i_1__0_n_0 ;
  wire \txeq_txcoeff[10]_i_2__0_n_0 ;
  wire \txeq_txcoeff[11]_i_1__0_n_0 ;
  wire \txeq_txcoeff[11]_i_2__0_n_0 ;
  wire \txeq_txcoeff[12]_i_1__0_n_0 ;
  wire \txeq_txcoeff[12]_i_2__0_n_0 ;
  wire \txeq_txcoeff[13]_i_1__0_n_0 ;
  wire \txeq_txcoeff[13]_i_2__0_n_0 ;
  wire \txeq_txcoeff[14]_i_1__0_n_0 ;
  wire \txeq_txcoeff[14]_i_2__0_n_0 ;
  wire \txeq_txcoeff[15]_i_1__0_n_0 ;
  wire \txeq_txcoeff[15]_i_2__0_n_0 ;
  wire \txeq_txcoeff[16]_i_1__0_n_0 ;
  wire \txeq_txcoeff[16]_i_2__0_n_0 ;
  wire \txeq_txcoeff[17]_i_1__0_n_0 ;
  wire \txeq_txcoeff[17]_i_2__0_n_0 ;
  wire \txeq_txcoeff[18]_i_2__0_n_0 ;
  wire \txeq_txcoeff[18]_i_3__0_n_0 ;
  wire \txeq_txcoeff[1]_i_1__0_n_0 ;
  wire \txeq_txcoeff[1]_i_2__0_n_0 ;
  wire \txeq_txcoeff[2]_i_1__0_n_0 ;
  wire \txeq_txcoeff[2]_i_2__0_n_0 ;
  wire \txeq_txcoeff[3]_i_1__0_n_0 ;
  wire \txeq_txcoeff[3]_i_2__0_n_0 ;
  wire \txeq_txcoeff[4]_i_1__0_n_0 ;
  wire \txeq_txcoeff[4]_i_2__0_n_0 ;
  wire \txeq_txcoeff[5]_i_1__0_n_0 ;
  wire \txeq_txcoeff[5]_i_2__0_n_0 ;
  wire \txeq_txcoeff[6]_i_1__0_n_0 ;
  wire \txeq_txcoeff[6]_i_2__0_n_0 ;
  wire \txeq_txcoeff[7]_i_1__0_n_0 ;
  wire \txeq_txcoeff[7]_i_2__0_n_0 ;
  wire \txeq_txcoeff[8]_i_1__0_n_0 ;
  wire \txeq_txcoeff[8]_i_2__0_n_0 ;
  wire \txeq_txcoeff[9]_i_1__0_n_0 ;
  wire \txeq_txcoeff[9]_i_2__0_n_0 ;
  wire [1:0]txeq_txcoeff_cnt;
  wire \txeq_txcoeff_cnt_reg_n_0_[0] ;
  wire \txeq_txcoeff_cnt_reg_n_0_[1] ;
  wire \txeq_txcoeff_reg_n_0_[0] ;
  wire \txeq_txcoeff_reg_n_0_[10] ;
  wire \txeq_txcoeff_reg_n_0_[11] ;
  wire \txeq_txcoeff_reg_n_0_[12] ;
  wire \txeq_txcoeff_reg_n_0_[13] ;
  wire \txeq_txcoeff_reg_n_0_[14] ;
  wire \txeq_txcoeff_reg_n_0_[15] ;
  wire \txeq_txcoeff_reg_n_0_[16] ;
  wire \txeq_txcoeff_reg_n_0_[17] ;
  wire \txeq_txcoeff_reg_n_0_[18] ;
  wire \txeq_txcoeff_reg_n_0_[1] ;
  wire \txeq_txcoeff_reg_n_0_[2] ;
  wire \txeq_txcoeff_reg_n_0_[3] ;
  wire \txeq_txcoeff_reg_n_0_[4] ;
  wire \txeq_txcoeff_reg_n_0_[5] ;
  wire \txeq_txcoeff_reg_n_0_[6] ;
  wire \txeq_txcoeff_reg_n_0_[7] ;
  wire \txeq_txcoeff_reg_n_0_[8] ;
  wire \txeq_txcoeff_reg_n_0_[9] ;

  LUT6 #(
    .INIT(64'h000100010001CDCD)) 
    \FSM_onehot_fsm_tx[1]_i_1__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\FSM_onehot_fsm_tx[1]_i_2__0_n_0 ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I4(txeq_control_reg2[0]),
        .I5(txeq_control_reg2[1]),
        .O(\FSM_onehot_fsm_tx[1]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \FSM_onehot_fsm_tx[1]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm_tx[1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h20202F20)) 
    \FSM_onehot_fsm_tx[2]_i_1__0 
       (.I0(txeq_control_reg2[0]),
        .I1(txeq_control_reg2[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I3(out0),
        .I4(txeq_preset_done),
        .O(\FSM_onehot_fsm_tx[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h45454545FF454545)) 
    \FSM_onehot_fsm_tx[3]_i_1__0 
       (.I0(\FSM_onehot_fsm_tx[3]_i_2__0_n_0 ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I4(txeq_control_reg2[1]),
        .I5(txeq_control_reg2[0]),
        .O(\FSM_onehot_fsm_tx[3]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hFB)) 
    \FSM_onehot_fsm_tx[3]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(out0),
        .O(\FSM_onehot_fsm_tx[3]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \FSM_onehot_fsm_tx[4]_i_1__0 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(out0),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[4]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \FSM_onehot_fsm_tx[5]_i_1__0 
       (.I0(txeq_control_reg2[0]),
        .I1(txeq_control_reg2[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[5]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAAAAA8)) 
    \FSM_onehot_fsm_tx[6]_i_1__0 
       (.I0(\FSM_onehot_fsm_tx[6]_i_2__0_n_0 ),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I3(\FSM_onehot_fsm_tx[6]_i_3__0_n_0 ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h88888888BBBBBBB8)) 
    \FSM_onehot_fsm_tx[6]_i_2__0 
       (.I0(txeq_preset_done),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm_tx[6]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_fsm_tx[6]_i_3__0 
       (.I0(txeq_control_reg2[1]),
        .I1(txeq_control_reg2[0]),
        .O(\FSM_onehot_fsm_tx[6]_i_3__0_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_fsm_tx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[1]_i_1__0_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[2]_i_1__0_n_0 ),
        .Q(out0),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[3]_i_1__0_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[4]_i_1__0_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[5]_i_1__0_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[6]_i_1__0_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hF0D00800)) 
    \FSM_sequential_fsm_rx[0]_i_2__0 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[2] ),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[0] ),
        .I4(fsm_rx[0]),
        .O(\FSM_sequential_fsm_rx[0]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_sequential_fsm_rx[2]_i_2__0 
       (.I0(rxeq_control_reg2[0]),
        .I1(rxeq_control_reg2[1]),
        .O(\FSM_sequential_fsm_rx[2]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hFD)) 
    \FSM_sequential_fsm_rx[2]_i_3__0 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[2] ),
        .I2(\rxeq_cnt_reg_n_0_[0] ),
        .O(\FSM_sequential_fsm_rx[2]_i_3__0_n_0 ));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_2),
        .Q(fsm_rx[0]),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_1),
        .Q(fsm_rx[1]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_0),
        .Q(fsm_rx[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_gen3_1),
        .Q(gen3_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(RST_CPLLRESET));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_22__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[17] ),
        .O(TXPOSTCURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_23__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[16] ),
        .O(TXPOSTCURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_24__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[15] ),
        .O(TXPOSTCURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_25__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[14] ),
        .O(TXPOSTCURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_26__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[13] ),
        .O(TXPOSTCURSOR[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_27__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[4] ),
        .O(TXPRECURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_28__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[3] ),
        .O(TXPRECURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_29__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[2] ),
        .O(TXPRECURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_30__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[1] ),
        .O(TXPRECURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_31__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[0] ),
        .O(TXPRECURSOR[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_32__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[12] ),
        .O(TXMAINCURSOR[6]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_33__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[11] ),
        .O(TXMAINCURSOR[5]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_34__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[10] ),
        .O(TXMAINCURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_35__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[9] ),
        .O(TXMAINCURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_36__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[8] ),
        .O(TXMAINCURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_37__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[7] ),
        .O(TXMAINCURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_38__0 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[6] ),
        .O(TXMAINCURSOR[0]));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_adapt_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_5),
        .Q(USER_RXEQ_ADAPT_DONE),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_adapt_done_reg_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_4),
        .Q(rxeq_adapt_done_reg_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h04041C10)) 
    \rxeq_cnt[0]_i_1__0 
       (.I0(\rxeq_cnt_reg_n_0_[0] ),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[2]),
        .I3(rxeq_control_reg2[1]),
        .I4(fsm_rx[1]),
        .O(rxeq_cnt[0]));
  LUT5 #(
    .INIT(32'h00424200)) 
    \rxeq_cnt[1]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[1] ),
        .I4(\rxeq_cnt_reg_n_0_[0] ),
        .O(rxeq_cnt[1]));
  LUT6 #(
    .INIT(64'h0042420042004200)) 
    \rxeq_cnt[2]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[2] ),
        .I4(\rxeq_cnt_reg_n_0_[1] ),
        .I5(\rxeq_cnt_reg_n_0_[0] ),
        .O(rxeq_cnt[2]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[0]),
        .Q(\rxeq_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[1]),
        .Q(\rxeq_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[2]),
        .Q(\rxeq_cnt_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_control_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_control_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_control_reg1[0]),
        .Q(rxeq_control_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_control_reg1[1]),
        .Q(rxeq_control_reg2[1]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[0]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[0]),
        .O(rxeq_fs[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[1]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[1]),
        .O(rxeq_fs[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[2]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[2]),
        .O(rxeq_fs[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[3]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[3]),
        .O(rxeq_fs[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[4]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[4]),
        .O(rxeq_fs[4]));
  LUT4 #(
    .INIT(16'hC203)) 
    \rxeq_fs[5]_i_1__0 
       (.I0(rxeq_control_reg2[1]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[0]),
        .O(\rxeq_fs[5]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[5]_i_2__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[5]),
        .O(rxeq_fs[5]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[0] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__0_n_0 ),
        .D(rxeq_fs[0]),
        .Q(rxeq_fs__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[1] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__0_n_0 ),
        .D(rxeq_fs[1]),
        .Q(rxeq_fs__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[2] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__0_n_0 ),
        .D(rxeq_fs[2]),
        .Q(rxeq_fs__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[3] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__0_n_0 ),
        .D(rxeq_fs[3]),
        .Q(rxeq_fs__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[4] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__0_n_0 ),
        .D(rxeq_fs[4]),
        .Q(rxeq_fs__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[5] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__0_n_0 ),
        .D(rxeq_fs[5]),
        .Q(rxeq_fs__0[5]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[0]_i_1__0 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[0]),
        .O(rxeq_lf[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[1]_i_1__0 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[1]),
        .O(rxeq_lf[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[2]_i_1__0 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[2]),
        .O(rxeq_lf[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[3]_i_1__0 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[3]),
        .O(rxeq_lf[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[4]_i_1__0 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[4]),
        .O(rxeq_lf[4]));
  LUT6 #(
    .INIT(64'hFF000000000080FF)) 
    \rxeq_lf[5]_i_1__0 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[0] ),
        .I2(\rxeq_cnt_reg_n_0_[2] ),
        .I3(fsm_rx[2]),
        .I4(fsm_rx[1]),
        .I5(fsm_rx[0]),
        .O(\rxeq_lf[5]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[5]_i_2__0 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[5]),
        .O(rxeq_lf[5]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[0] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__0_n_0 ),
        .D(rxeq_lf[0]),
        .Q(rxeq_lf__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[1] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__0_n_0 ),
        .D(rxeq_lf[1]),
        .Q(rxeq_lf__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[2] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__0_n_0 ),
        .D(rxeq_lf[2]),
        .Q(rxeq_lf__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[3] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__0_n_0 ),
        .D(rxeq_lf[3]),
        .Q(rxeq_lf__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[4] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__0_n_0 ),
        .D(rxeq_lf[4]),
        .Q(rxeq_lf__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[5] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__0_n_0 ),
        .D(rxeq_lf[5]),
        .Q(rxeq_lf__0[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[0]),
        .Q(rxeq_lffs_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[1]),
        .Q(rxeq_lffs_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[2]),
        .Q(rxeq_lffs_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[3]),
        .Q(rxeq_lffs_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[4]),
        .Q(rxeq_lffs_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[5]),
        .Q(rxeq_lffs_reg2[5]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_new_txcoeff_req_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_new_txcoeff_req),
        .Q(rxeq_new_txcoeff_req_reg_n_0),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[0]_i_1__0 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[0]),
        .I4(\rxeq_preset[2]_i_2__0_n_0 ),
        .I5(rxeq_preset__0[0]),
        .O(\rxeq_preset[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[1]_i_1__0 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[1]),
        .I4(\rxeq_preset[2]_i_2__0_n_0 ),
        .I5(rxeq_preset__0[1]),
        .O(\rxeq_preset[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[2]_i_1__0 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[2]),
        .I4(\rxeq_preset[2]_i_2__0_n_0 ),
        .I5(rxeq_preset__0[2]),
        .O(\rxeq_preset[2]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hF00400FF)) 
    \rxeq_preset[2]_i_2__0 
       (.I0(rxeq_control_reg2[1]),
        .I1(rxeq_control_reg2[0]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[2]),
        .I4(fsm_rx[0]),
        .O(\rxeq_preset[2]_i_2__0_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[0]),
        .Q(rxeq_preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[1]),
        .Q(rxeq_preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[2]),
        .Q(rxeq_preset_reg2[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[0]_i_1__0_n_0 ),
        .Q(rxeq_preset__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[1]_i_1__0_n_0 ),
        .Q(rxeq_preset__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[2]_i_1__0_n_0 ),
        .Q(rxeq_preset__0[2]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h04)) 
    rxeq_preset_valid_i_1__0
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[1]),
        .I2(fsm_rx[0]),
        .O(rxeq_preset_valid));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_preset_valid_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_valid),
        .Q(rxeq_preset_valid_reg_n_0),
        .R(RST_CPLLRESET));
  pcie_7x_0_pcie_7x_0_rxeq_scan_41 rxeq_scan_i
       (.CLK(CLK),
        .D({rxeq_scan_i_n_0,rxeq_scan_i_n_1,rxeq_scan_i_n_2}),
        .Q(rxeq_txpreset__0),
        .RST_CPLLRESET(RST_CPLLRESET),
        .USER_RXEQ_ADAPT_DONE(USER_RXEQ_ADAPT_DONE),
        .out(fsm_rx),
        .rxeq_adapt_done_reg(rxeq_scan_i_n_5),
        .rxeq_adapt_done_reg_reg(rxeq_scan_i_n_4),
        .rxeq_adapt_done_reg_reg_0(rxeq_adapt_done_reg_reg_n_0),
        .\rxeq_cnt_reg[1] (\FSM_sequential_fsm_rx[2]_i_3__0_n_0 ),
        .\rxeq_cnt_reg[1]_0 (\FSM_sequential_fsm_rx[0]_i_2__0_n_0 ),
        .\rxeq_control_reg2_reg[0] (\FSM_sequential_fsm_rx[2]_i_2__0_n_0 ),
        .\rxeq_control_reg2_reg[1] (rxeq_control_reg2),
        .\rxeq_fs_reg[5] (rxeq_fs__0),
        .\rxeq_lf_reg[5] (rxeq_lf__0),
        .rxeq_new_txcoeff_req(rxeq_new_txcoeff_req),
        .rxeq_new_txcoeff_req_reg(rxeq_new_txcoeff_req_reg_n_0),
        .\rxeq_preset_reg[2] (rxeq_preset__0),
        .rxeq_preset_valid_reg(rxeq_preset_valid_reg_n_0),
        .\rxeq_txcoeff_reg[17] ({\rxeq_txcoeff_reg_n_0_[17] ,\rxeq_txcoeff_reg_n_0_[16] ,\rxeq_txcoeff_reg_n_0_[15] ,\rxeq_txcoeff_reg_n_0_[14] ,\rxeq_txcoeff_reg_n_0_[13] ,\rxeq_txcoeff_reg_n_0_[12] ,\rxeq_txcoeff_reg_n_0_[11] ,\rxeq_txcoeff_reg_n_0_[10] ,\rxeq_txcoeff_reg_n_0_[9] ,\rxeq_txcoeff_reg_n_0_[8] ,\rxeq_txcoeff_reg_n_0_[7] ,\rxeq_txcoeff_reg_n_0_[6] ,rxeq_txcoeff__0}));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[0]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[6] ),
        .O(rxeq_txcoeff[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[10]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[16] ),
        .O(rxeq_txcoeff[10]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[11]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[17] ),
        .O(rxeq_txcoeff[11]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[12]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[0]),
        .O(rxeq_txcoeff[12]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[13]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[1]),
        .O(rxeq_txcoeff[13]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[14]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[2]),
        .O(rxeq_txcoeff[14]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[15]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[3]),
        .O(rxeq_txcoeff[15]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[16]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[4]),
        .O(rxeq_txcoeff[16]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[17]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[5]),
        .O(rxeq_txcoeff[17]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[1]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[7] ),
        .O(rxeq_txcoeff[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[2]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[8] ),
        .O(rxeq_txcoeff[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[3]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[9] ),
        .O(rxeq_txcoeff[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[4]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[10] ),
        .O(rxeq_txcoeff[4]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[5]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[11] ),
        .O(rxeq_txcoeff[5]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[6]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[12] ),
        .O(rxeq_txcoeff[6]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[7]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[13] ),
        .O(rxeq_txcoeff[7]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[8]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[14] ),
        .O(rxeq_txcoeff[8]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[9]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[15] ),
        .O(rxeq_txcoeff[9]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[0] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[0]),
        .Q(rxeq_txcoeff__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[10] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[10]),
        .Q(\rxeq_txcoeff_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[11] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[11]),
        .Q(\rxeq_txcoeff_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[12] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[12]),
        .Q(\rxeq_txcoeff_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[13] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[13]),
        .Q(\rxeq_txcoeff_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[14] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[14]),
        .Q(\rxeq_txcoeff_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[15] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[15]),
        .Q(\rxeq_txcoeff_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[16] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[16]),
        .Q(\rxeq_txcoeff_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[17] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[17]),
        .Q(\rxeq_txcoeff_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[1] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[1]),
        .Q(rxeq_txcoeff__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[2] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[2]),
        .Q(rxeq_txcoeff__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[3] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[3]),
        .Q(rxeq_txcoeff__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[4] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[4]),
        .Q(rxeq_txcoeff__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[5] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[5]),
        .Q(rxeq_txcoeff__0[5]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[6] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[6]),
        .Q(\rxeq_txcoeff_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[7] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[7]),
        .Q(\rxeq_txcoeff_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[8] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[8]),
        .Q(\rxeq_txcoeff_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[9] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txcoeff[9]),
        .Q(\rxeq_txcoeff_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[0]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[0]),
        .O(rxeq_txpreset[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[1]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[1]),
        .O(rxeq_txpreset[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[2]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[2]),
        .O(rxeq_txpreset[2]));
  LUT4 #(
    .INIT(16'hF405)) 
    \rxeq_txpreset[3]_i_1__0 
       (.I0(fsm_rx[2]),
        .I1(rxeq_control_reg2[1]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[0]),
        .O(\rxeq_txpreset[3]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[3]_i_2__0 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[3]),
        .O(rxeq_txpreset[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[0]),
        .Q(rxeq_txpreset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[1]),
        .Q(rxeq_txpreset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[2]),
        .Q(rxeq_txpreset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[3]),
        .Q(rxeq_txpreset_reg2[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[0] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txpreset[0]),
        .Q(rxeq_txpreset__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[1] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txpreset[1]),
        .Q(rxeq_txpreset__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[2] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txpreset[2]),
        .Q(rxeq_txpreset__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[3] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__0_n_0 ),
        .D(rxeq_txpreset[3]),
        .Q(rxeq_txpreset__0[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_en_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_en_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_en_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_en_reg1),
        .Q(rxeq_user_en_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_mode_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_mode_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_mode_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_mode_reg1),
        .Q(rxeq_user_mode_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[0]),
        .Q(rxeq_user_txcoeff_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[10]),
        .Q(rxeq_user_txcoeff_reg2[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[11]),
        .Q(rxeq_user_txcoeff_reg2[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[12]),
        .Q(rxeq_user_txcoeff_reg2[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[13]),
        .Q(rxeq_user_txcoeff_reg2[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[14]),
        .Q(rxeq_user_txcoeff_reg2[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[15]),
        .Q(rxeq_user_txcoeff_reg2[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[16]),
        .Q(rxeq_user_txcoeff_reg2[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[17]),
        .Q(rxeq_user_txcoeff_reg2[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[1]),
        .Q(rxeq_user_txcoeff_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[2]),
        .Q(rxeq_user_txcoeff_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[3]),
        .Q(rxeq_user_txcoeff_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[4]),
        .Q(rxeq_user_txcoeff_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[5]),
        .Q(rxeq_user_txcoeff_reg2[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[6]),
        .Q(rxeq_user_txcoeff_reg2[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[7]),
        .Q(rxeq_user_txcoeff_reg2[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[8]),
        .Q(rxeq_user_txcoeff_reg2[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[9]),
        .Q(rxeq_user_txcoeff_reg2[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_control_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_control_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_control_reg1[0]),
        .Q(txeq_control_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_control_reg1[1]),
        .Q(txeq_control_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \txeq_deemph_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[0]),
        .S(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \txeq_deemph_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[0]),
        .Q(txeq_deemph_reg2[0]),
        .S(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[1]),
        .Q(txeq_deemph_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[2]),
        .Q(txeq_deemph_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[3]),
        .Q(txeq_deemph_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[4]),
        .Q(txeq_deemph_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[5]),
        .Q(txeq_deemph_reg2[5]),
        .R(RST_CPLLRESET));
  LUT4 #(
    .INIT(16'h1000)) 
    \txeq_preset[0]_i_1__0 
       (.I0(txeq_preset_reg2[1]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[0]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[0]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \txeq_preset[10]_i_1__0 
       (.I0(\txeq_preset[10]_i_2__0_n_0 ),
        .I1(RST_CPLLRESET),
        .I2(out0),
        .I3(txeq_preset[10]),
        .O(\txeq_preset[10]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hAEAAABFB)) 
    \txeq_preset[10]_i_2__0 
       (.I0(RST_CPLLRESET),
        .I1(txeq_preset_reg2[1]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[2]),
        .I4(txeq_preset_reg2[0]),
        .O(\txeq_preset[10]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h1811)) 
    \txeq_preset[11]_i_1__0 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[11]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h027E)) 
    \txeq_preset[12]_i_1__0 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[12]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0140)) 
    \txeq_preset[13]_i_1__0 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[0]),
        .O(\txeq_preset[13]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h1004)) 
    \txeq_preset[14]_i_1__0 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[0]),
        .O(\txeq_preset[14]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \txeq_preset[15]_i_1__0 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[1]),
        .I2(txeq_preset_reg2[3]),
        .O(\txeq_preset[15]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h06)) 
    \txeq_preset[16]_i_2__0 
       (.I0(txeq_preset_reg2[3]),
        .I1(txeq_preset_reg2[0]),
        .I2(txeq_preset_reg2[2]),
        .O(\txeq_preset[16]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h1091)) 
    \txeq_preset[17]_i_1__0 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[17]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h1004)) 
    \txeq_preset[1]_i_1__0 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[2]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[1]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h00E0)) 
    \txeq_preset[2]_i_1__0 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(RST_CPLLRESET),
        .O(\txeq_preset[2]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0C38)) 
    \txeq_preset[3]_i_1__0 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[3]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h1400)) 
    \txeq_preset[7]_i_1__0 
       (.I0(txeq_preset_reg2[3]),
        .I1(txeq_preset_reg2[0]),
        .I2(txeq_preset_reg2[2]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[7]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \txeq_preset[8]_i_1__0 
       (.I0(\txeq_preset[8]_i_2__0_n_0 ),
        .I1(RST_CPLLRESET),
        .I2(out0),
        .I3(txeq_preset[8]),
        .O(\txeq_preset[8]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hABAEBBBB)) 
    \txeq_preset[8]_i_2__0 
       (.I0(RST_CPLLRESET),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[0]),
        .I4(txeq_preset_reg2[1]),
        .O(\txeq_preset[8]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h1819)) 
    \txeq_preset[9]_i_1__0 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    txeq_preset_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out0),
        .Q(txeq_preset_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[0]),
        .Q(txeq_preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[1]),
        .Q(txeq_preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[2]),
        .Q(txeq_preset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[3]),
        .Q(txeq_preset_reg2[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[0] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[0]_i_1__0_n_0 ),
        .Q(txeq_preset[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txeq_preset[10]_i_1__0_n_0 ),
        .Q(txeq_preset[10]),
        .R(1'b0));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[11] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[11]_i_1__0_n_0 ),
        .Q(txeq_preset[11]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[12] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[12]_i_1__0_n_0 ),
        .Q(txeq_preset[12]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[13] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[13]_i_1__0_n_0 ),
        .Q(txeq_preset[13]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[14] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[14]_i_1__0_n_0 ),
        .Q(txeq_preset[14]),
        .R(RST_CPLLRESET));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[15] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[15]_i_1__0_n_0 ),
        .Q(txeq_preset[15]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[16] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[16]_i_2__0_n_0 ),
        .Q(txeq_preset[16]),
        .R(RST_CPLLRESET));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[17] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[17]_i_1__0_n_0 ),
        .Q(txeq_preset[17]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[1] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[1]_i_1__0_n_0 ),
        .Q(txeq_preset[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[2] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[2]_i_1__0_n_0 ),
        .Q(txeq_preset[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[3] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[3]_i_1__0_n_0 ),
        .Q(txeq_preset[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[7] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[7]_i_1__0_n_0 ),
        .Q(txeq_preset[7]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txeq_preset[8]_i_1__0_n_0 ),
        .Q(txeq_preset[8]),
        .R(1'b0));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[9] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[9]_i_1__0_n_0 ),
        .Q(txeq_preset[9]),
        .S(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[0]_i_1__0 
       (.I0(\txeq_txcoeff_reg_n_0_[6] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(out0),
        .I3(txeq_preset[0]),
        .I4(\txeq_txcoeff[0]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[0]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[6] ),
        .I4(\txeq_txcoeff_reg_n_0_[7] ),
        .O(\txeq_txcoeff[0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[10]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[10]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[9] ),
        .I4(\txeq_txcoeff[10]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[10]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[10]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[17] ),
        .I2(\txeq_txcoeff_reg_n_0_[16] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[10]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[11]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[11]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[10] ),
        .I4(\txeq_txcoeff[11]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[11]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[11]_i_2__0 
       (.I0(\txeq_txcoeff_reg_n_0_[18] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(\txeq_txcoeff_reg_n_0_[17] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[11]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[12]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[12]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[11] ),
        .I4(\txeq_txcoeff[12]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[12]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[12]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[0]),
        .I2(\txeq_txcoeff_reg_n_0_[18] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[12]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[13]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[13]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[12] ),
        .I4(\txeq_txcoeff[13]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[13]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[13]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[1]),
        .I2(txeq_deemph_reg2[0]),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[13]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[14]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[14]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[13] ),
        .I4(\txeq_txcoeff[14]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[14]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[14]_i_2__0 
       (.I0(txeq_deemph_reg2[2]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[1]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[14]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[15]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[15]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[14] ),
        .I4(\txeq_txcoeff[15]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[15]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[15]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[3]),
        .I2(txeq_deemph_reg2[2]),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[15]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[16]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[16]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[15] ),
        .I4(\txeq_txcoeff[16]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[16]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[16]_i_2__0 
       (.I0(txeq_deemph_reg2[4]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[3]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[16]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[17]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[17]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[16] ),
        .I4(\txeq_txcoeff[17]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[17]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[17]_i_2__0 
       (.I0(txeq_deemph_reg2[5]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[4]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[17]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAABFFABAAABAAAB)) 
    \txeq_txcoeff[18]_i_1__0 
       (.I0(\FSM_onehot_fsm_tx[1]_i_2__0_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I4(txeq_control_reg2[0]),
        .I5(txeq_control_reg2[1]),
        .O(txeq_txcoeff));
  LUT6 #(
    .INIT(64'hFFFFAE00AE00AE00)) 
    \txeq_txcoeff[18]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(\txeq_txcoeff[18]_i_3__0_n_0 ),
        .I3(txeq_deemph_reg2[5]),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I5(\txeq_txcoeff_reg_n_0_[17] ),
        .O(\txeq_txcoeff[18]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \txeq_txcoeff[18]_i_3__0 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .O(\txeq_txcoeff[18]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[1]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[0] ),
        .I4(\txeq_txcoeff[1]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[1]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[8] ),
        .I2(\txeq_txcoeff_reg_n_0_[7] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[2]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[2]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[1] ),
        .I4(\txeq_txcoeff[2]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[2]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[9] ),
        .I2(\txeq_txcoeff_reg_n_0_[8] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[2]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[3]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[3]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[2] ),
        .I4(\txeq_txcoeff[3]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[3]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[10] ),
        .I2(\txeq_txcoeff_reg_n_0_[9] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[3]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[4]_i_1__0 
       (.I0(\txeq_txcoeff[4]_i_2__0_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[10] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[3] ),
        .O(\txeq_txcoeff[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[4]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[10] ),
        .I4(\txeq_txcoeff_reg_n_0_[11] ),
        .O(\txeq_txcoeff[4]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[5]_i_1__0 
       (.I0(\txeq_txcoeff[5]_i_2__0_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[11] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[4] ),
        .O(\txeq_txcoeff[5]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[5]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[11] ),
        .I4(\txeq_txcoeff_reg_n_0_[12] ),
        .O(\txeq_txcoeff[5]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[6]_i_1__0 
       (.I0(\txeq_txcoeff[6]_i_2__0_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[12] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[5] ),
        .O(\txeq_txcoeff[6]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[6]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[12] ),
        .I4(\txeq_txcoeff_reg_n_0_[13] ),
        .O(\txeq_txcoeff[6]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[7]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[7]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[6] ),
        .I4(\txeq_txcoeff[7]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[7]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[7]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[14] ),
        .I2(\txeq_txcoeff_reg_n_0_[13] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[7]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[8]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[8]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[7] ),
        .I4(\txeq_txcoeff[8]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[8]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[8]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[15] ),
        .I2(\txeq_txcoeff_reg_n_0_[14] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[8]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[9]_i_1__0 
       (.I0(out0),
        .I1(txeq_preset[9]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[8] ),
        .I4(\txeq_txcoeff[9]_i_2__0_n_0 ),
        .O(\txeq_txcoeff[9]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[9]_i_2__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[16] ),
        .I2(\txeq_txcoeff_reg_n_0_[15] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[9]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h4444F444)) 
    \txeq_txcoeff_cnt[0]_i_1__0 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I3(txeq_control_reg2[1]),
        .I4(txeq_control_reg2[0]),
        .O(txeq_txcoeff_cnt[0]));
  LUT3 #(
    .INIT(8'h28)) 
    \txeq_txcoeff_cnt[1]_i_1__0 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .O(txeq_txcoeff_cnt[1]));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_txcoeff_cnt[0]),
        .Q(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_txcoeff_cnt[1]),
        .Q(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[0] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[0]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[10] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[10]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[11] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[11]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[12] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[12]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[13] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[13]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[14] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[14]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[15] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[15]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[16] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[16]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[17] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[17]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[18] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[18]_i_2__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[18] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[1] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[1]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[2] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[2]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[3] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[3]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[4] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[4]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[5] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[5]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[6] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[6]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[7] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[7]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[8] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[8]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[9] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[9]_i_1__0_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_eq" *) 
module pcie_7x_0_pcie_7x_0_pipe_eq_29
   (out0,
    TXPRECURSOR,
    TXMAINCURSOR,
    TXPOSTCURSOR,
    USER_RXEQ_ADAPT_DONE,
    RST_CPLLRESET,
    CLK,
    cpllreset_reg,
    rate_gen3_2);
  output [0:0]out0;
  output [4:0]TXPRECURSOR;
  output [6:0]TXMAINCURSOR;
  output [4:0]TXPOSTCURSOR;
  output USER_RXEQ_ADAPT_DONE;
  input RST_CPLLRESET;
  input CLK;
  input cpllreset_reg;
  input rate_gen3_2;

  wire CLK;
  wire \FSM_onehot_fsm_tx[1]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm_tx[1]_i_2__1_n_0 ;
  wire \FSM_onehot_fsm_tx[2]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm_tx[3]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm_tx[3]_i_2__1_n_0 ;
  wire \FSM_onehot_fsm_tx[4]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm_tx[5]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_2__1_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_3__1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[6] ;
  wire \FSM_sequential_fsm_rx[0]_i_2__1_n_0 ;
  wire \FSM_sequential_fsm_rx[2]_i_2__1_n_0 ;
  wire \FSM_sequential_fsm_rx[2]_i_3__1_n_0 ;
  wire RST_CPLLRESET;
  wire [6:0]TXMAINCURSOR;
  wire [4:0]TXPOSTCURSOR;
  wire [4:0]TXPRECURSOR;
  wire USER_RXEQ_ADAPT_DONE;
  wire cpllreset_reg;
  (* RTL_KEEP = "yes" *) wire [2:0]fsm_rx;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  (* RTL_KEEP = "yes" *) wire [0:0]out0;
  wire rate_gen3_2;
  wire rxeq_adapt_done_reg_reg_n_0;
  wire [2:0]rxeq_cnt;
  wire \rxeq_cnt_reg_n_0_[0] ;
  wire \rxeq_cnt_reg_n_0_[1] ;
  wire \rxeq_cnt_reg_n_0_[2] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rxeq_control_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rxeq_control_reg2;
  wire [5:0]rxeq_fs;
  wire \rxeq_fs[5]_i_1__1_n_0 ;
  wire [5:0]rxeq_fs__0;
  wire [5:0]rxeq_lf;
  wire \rxeq_lf[5]_i_1__1_n_0 ;
  wire [5:0]rxeq_lf__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]rxeq_lffs_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]rxeq_lffs_reg2;
  wire rxeq_new_txcoeff_req;
  wire rxeq_new_txcoeff_req_reg_n_0;
  wire \rxeq_preset[0]_i_1__1_n_0 ;
  wire \rxeq_preset[1]_i_1__1_n_0 ;
  wire \rxeq_preset[2]_i_1__1_n_0 ;
  wire \rxeq_preset[2]_i_2__1_n_0 ;
  wire [2:0]rxeq_preset__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]rxeq_preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]rxeq_preset_reg2;
  wire rxeq_preset_valid;
  wire rxeq_preset_valid_reg_n_0;
  wire rxeq_scan_i_n_0;
  wire rxeq_scan_i_n_1;
  wire rxeq_scan_i_n_2;
  wire rxeq_scan_i_n_4;
  wire rxeq_scan_i_n_5;
  wire [17:0]rxeq_txcoeff;
  wire [5:0]rxeq_txcoeff__0;
  wire \rxeq_txcoeff_reg_n_0_[10] ;
  wire \rxeq_txcoeff_reg_n_0_[11] ;
  wire \rxeq_txcoeff_reg_n_0_[12] ;
  wire \rxeq_txcoeff_reg_n_0_[13] ;
  wire \rxeq_txcoeff_reg_n_0_[14] ;
  wire \rxeq_txcoeff_reg_n_0_[15] ;
  wire \rxeq_txcoeff_reg_n_0_[16] ;
  wire \rxeq_txcoeff_reg_n_0_[17] ;
  wire \rxeq_txcoeff_reg_n_0_[6] ;
  wire \rxeq_txcoeff_reg_n_0_[7] ;
  wire \rxeq_txcoeff_reg_n_0_[8] ;
  wire \rxeq_txcoeff_reg_n_0_[9] ;
  wire [3:0]rxeq_txpreset;
  wire \rxeq_txpreset[3]_i_1__1_n_0 ;
  wire [3:0]rxeq_txpreset__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxeq_txpreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxeq_txpreset_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_en_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_en_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_mode_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_mode_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]rxeq_user_txcoeff_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]rxeq_user_txcoeff_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]txeq_control_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]txeq_control_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]txeq_deemph_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]txeq_deemph_reg2;
  wire [17:0]txeq_preset;
  wire \txeq_preset[0]_i_1__1_n_0 ;
  wire \txeq_preset[10]_i_1__1_n_0 ;
  wire \txeq_preset[10]_i_2__1_n_0 ;
  wire \txeq_preset[11]_i_1__1_n_0 ;
  wire \txeq_preset[12]_i_1__1_n_0 ;
  wire \txeq_preset[13]_i_1__1_n_0 ;
  wire \txeq_preset[14]_i_1__1_n_0 ;
  wire \txeq_preset[15]_i_1__1_n_0 ;
  wire \txeq_preset[16]_i_2__1_n_0 ;
  wire \txeq_preset[17]_i_1__1_n_0 ;
  wire \txeq_preset[1]_i_1__1_n_0 ;
  wire \txeq_preset[2]_i_1__1_n_0 ;
  wire \txeq_preset[3]_i_1__1_n_0 ;
  wire \txeq_preset[7]_i_1__1_n_0 ;
  wire \txeq_preset[8]_i_1__1_n_0 ;
  wire \txeq_preset[8]_i_2__1_n_0 ;
  wire \txeq_preset[9]_i_1__1_n_0 ;
  wire txeq_preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txeq_preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txeq_preset_reg2;
  wire txeq_txcoeff;
  wire \txeq_txcoeff[0]_i_1__1_n_0 ;
  wire \txeq_txcoeff[0]_i_2__1_n_0 ;
  wire \txeq_txcoeff[10]_i_1__1_n_0 ;
  wire \txeq_txcoeff[10]_i_2__1_n_0 ;
  wire \txeq_txcoeff[11]_i_1__1_n_0 ;
  wire \txeq_txcoeff[11]_i_2__1_n_0 ;
  wire \txeq_txcoeff[12]_i_1__1_n_0 ;
  wire \txeq_txcoeff[12]_i_2__1_n_0 ;
  wire \txeq_txcoeff[13]_i_1__1_n_0 ;
  wire \txeq_txcoeff[13]_i_2__1_n_0 ;
  wire \txeq_txcoeff[14]_i_1__1_n_0 ;
  wire \txeq_txcoeff[14]_i_2__1_n_0 ;
  wire \txeq_txcoeff[15]_i_1__1_n_0 ;
  wire \txeq_txcoeff[15]_i_2__1_n_0 ;
  wire \txeq_txcoeff[16]_i_1__1_n_0 ;
  wire \txeq_txcoeff[16]_i_2__1_n_0 ;
  wire \txeq_txcoeff[17]_i_1__1_n_0 ;
  wire \txeq_txcoeff[17]_i_2__1_n_0 ;
  wire \txeq_txcoeff[18]_i_2__1_n_0 ;
  wire \txeq_txcoeff[18]_i_3__1_n_0 ;
  wire \txeq_txcoeff[1]_i_1__1_n_0 ;
  wire \txeq_txcoeff[1]_i_2__1_n_0 ;
  wire \txeq_txcoeff[2]_i_1__1_n_0 ;
  wire \txeq_txcoeff[2]_i_2__1_n_0 ;
  wire \txeq_txcoeff[3]_i_1__1_n_0 ;
  wire \txeq_txcoeff[3]_i_2__1_n_0 ;
  wire \txeq_txcoeff[4]_i_1__1_n_0 ;
  wire \txeq_txcoeff[4]_i_2__1_n_0 ;
  wire \txeq_txcoeff[5]_i_1__1_n_0 ;
  wire \txeq_txcoeff[5]_i_2__1_n_0 ;
  wire \txeq_txcoeff[6]_i_1__1_n_0 ;
  wire \txeq_txcoeff[6]_i_2__1_n_0 ;
  wire \txeq_txcoeff[7]_i_1__1_n_0 ;
  wire \txeq_txcoeff[7]_i_2__1_n_0 ;
  wire \txeq_txcoeff[8]_i_1__1_n_0 ;
  wire \txeq_txcoeff[8]_i_2__1_n_0 ;
  wire \txeq_txcoeff[9]_i_1__1_n_0 ;
  wire \txeq_txcoeff[9]_i_2__1_n_0 ;
  wire [1:0]txeq_txcoeff_cnt;
  wire \txeq_txcoeff_cnt_reg_n_0_[0] ;
  wire \txeq_txcoeff_cnt_reg_n_0_[1] ;
  wire \txeq_txcoeff_reg_n_0_[0] ;
  wire \txeq_txcoeff_reg_n_0_[10] ;
  wire \txeq_txcoeff_reg_n_0_[11] ;
  wire \txeq_txcoeff_reg_n_0_[12] ;
  wire \txeq_txcoeff_reg_n_0_[13] ;
  wire \txeq_txcoeff_reg_n_0_[14] ;
  wire \txeq_txcoeff_reg_n_0_[15] ;
  wire \txeq_txcoeff_reg_n_0_[16] ;
  wire \txeq_txcoeff_reg_n_0_[17] ;
  wire \txeq_txcoeff_reg_n_0_[18] ;
  wire \txeq_txcoeff_reg_n_0_[1] ;
  wire \txeq_txcoeff_reg_n_0_[2] ;
  wire \txeq_txcoeff_reg_n_0_[3] ;
  wire \txeq_txcoeff_reg_n_0_[4] ;
  wire \txeq_txcoeff_reg_n_0_[5] ;
  wire \txeq_txcoeff_reg_n_0_[6] ;
  wire \txeq_txcoeff_reg_n_0_[7] ;
  wire \txeq_txcoeff_reg_n_0_[8] ;
  wire \txeq_txcoeff_reg_n_0_[9] ;

  LUT6 #(
    .INIT(64'h000100010001CDCD)) 
    \FSM_onehot_fsm_tx[1]_i_1__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\FSM_onehot_fsm_tx[1]_i_2__1_n_0 ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I4(txeq_control_reg2[0]),
        .I5(txeq_control_reg2[1]),
        .O(\FSM_onehot_fsm_tx[1]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \FSM_onehot_fsm_tx[1]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm_tx[1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h20202F20)) 
    \FSM_onehot_fsm_tx[2]_i_1__1 
       (.I0(txeq_control_reg2[0]),
        .I1(txeq_control_reg2[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I3(out0),
        .I4(txeq_preset_done),
        .O(\FSM_onehot_fsm_tx[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h45454545FF454545)) 
    \FSM_onehot_fsm_tx[3]_i_1__1 
       (.I0(\FSM_onehot_fsm_tx[3]_i_2__1_n_0 ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I4(txeq_control_reg2[1]),
        .I5(txeq_control_reg2[0]),
        .O(\FSM_onehot_fsm_tx[3]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hFB)) 
    \FSM_onehot_fsm_tx[3]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(out0),
        .O(\FSM_onehot_fsm_tx[3]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \FSM_onehot_fsm_tx[4]_i_1__1 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(out0),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[4]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \FSM_onehot_fsm_tx[5]_i_1__1 
       (.I0(txeq_control_reg2[0]),
        .I1(txeq_control_reg2[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[5]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAAAAA8)) 
    \FSM_onehot_fsm_tx[6]_i_1__1 
       (.I0(\FSM_onehot_fsm_tx[6]_i_2__1_n_0 ),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I3(\FSM_onehot_fsm_tx[6]_i_3__1_n_0 ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[6]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h88888888BBBBBBB8)) 
    \FSM_onehot_fsm_tx[6]_i_2__1 
       (.I0(txeq_preset_done),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm_tx[6]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_fsm_tx[6]_i_3__1 
       (.I0(txeq_control_reg2[1]),
        .I1(txeq_control_reg2[0]),
        .O(\FSM_onehot_fsm_tx[6]_i_3__1_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_fsm_tx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[1]_i_1__1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[2]_i_1__1_n_0 ),
        .Q(out0),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[3]_i_1__1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[4]_i_1__1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[5]_i_1__1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[6]_i_1__1_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hF0D00800)) 
    \FSM_sequential_fsm_rx[0]_i_2__1 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[2] ),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[0] ),
        .I4(fsm_rx[0]),
        .O(\FSM_sequential_fsm_rx[0]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_sequential_fsm_rx[2]_i_2__1 
       (.I0(rxeq_control_reg2[0]),
        .I1(rxeq_control_reg2[1]),
        .O(\FSM_sequential_fsm_rx[2]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hFD)) 
    \FSM_sequential_fsm_rx[2]_i_3__1 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[2] ),
        .I2(\rxeq_cnt_reg_n_0_[0] ),
        .O(\FSM_sequential_fsm_rx[2]_i_3__1_n_0 ));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_2),
        .Q(fsm_rx[0]),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_1),
        .Q(fsm_rx[1]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_0),
        .Q(fsm_rx[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_gen3_2),
        .Q(gen3_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(RST_CPLLRESET));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_22__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[17] ),
        .O(TXPOSTCURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_23__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[16] ),
        .O(TXPOSTCURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_24__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[15] ),
        .O(TXPOSTCURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_25__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[14] ),
        .O(TXPOSTCURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_26__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[13] ),
        .O(TXPOSTCURSOR[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_27__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[4] ),
        .O(TXPRECURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_28__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[3] ),
        .O(TXPRECURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_29__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[2] ),
        .O(TXPRECURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_30__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[1] ),
        .O(TXPRECURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_31__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[0] ),
        .O(TXPRECURSOR[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_32__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[12] ),
        .O(TXMAINCURSOR[6]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_33__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[11] ),
        .O(TXMAINCURSOR[5]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_34__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[10] ),
        .O(TXMAINCURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_35__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[9] ),
        .O(TXMAINCURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_36__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[8] ),
        .O(TXMAINCURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_37__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[7] ),
        .O(TXMAINCURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_38__1 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[6] ),
        .O(TXMAINCURSOR[0]));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_adapt_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_5),
        .Q(USER_RXEQ_ADAPT_DONE),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_adapt_done_reg_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_4),
        .Q(rxeq_adapt_done_reg_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h04041C10)) 
    \rxeq_cnt[0]_i_1__1 
       (.I0(\rxeq_cnt_reg_n_0_[0] ),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[2]),
        .I3(rxeq_control_reg2[1]),
        .I4(fsm_rx[1]),
        .O(rxeq_cnt[0]));
  LUT5 #(
    .INIT(32'h00424200)) 
    \rxeq_cnt[1]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[1] ),
        .I4(\rxeq_cnt_reg_n_0_[0] ),
        .O(rxeq_cnt[1]));
  LUT6 #(
    .INIT(64'h0042420042004200)) 
    \rxeq_cnt[2]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[2] ),
        .I4(\rxeq_cnt_reg_n_0_[1] ),
        .I5(\rxeq_cnt_reg_n_0_[0] ),
        .O(rxeq_cnt[2]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[0]),
        .Q(\rxeq_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[1]),
        .Q(\rxeq_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[2]),
        .Q(\rxeq_cnt_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_control_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_control_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_control_reg1[0]),
        .Q(rxeq_control_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_control_reg1[1]),
        .Q(rxeq_control_reg2[1]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[0]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[0]),
        .O(rxeq_fs[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[1]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[1]),
        .O(rxeq_fs[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[2]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[2]),
        .O(rxeq_fs[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[3]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[3]),
        .O(rxeq_fs[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[4]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[4]),
        .O(rxeq_fs[4]));
  LUT4 #(
    .INIT(16'hC203)) 
    \rxeq_fs[5]_i_1__1 
       (.I0(rxeq_control_reg2[1]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[0]),
        .O(\rxeq_fs[5]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[5]_i_2__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[5]),
        .O(rxeq_fs[5]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[0] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__1_n_0 ),
        .D(rxeq_fs[0]),
        .Q(rxeq_fs__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[1] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__1_n_0 ),
        .D(rxeq_fs[1]),
        .Q(rxeq_fs__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[2] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__1_n_0 ),
        .D(rxeq_fs[2]),
        .Q(rxeq_fs__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[3] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__1_n_0 ),
        .D(rxeq_fs[3]),
        .Q(rxeq_fs__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[4] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__1_n_0 ),
        .D(rxeq_fs[4]),
        .Q(rxeq_fs__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[5] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__1_n_0 ),
        .D(rxeq_fs[5]),
        .Q(rxeq_fs__0[5]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[0]_i_1__1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[0]),
        .O(rxeq_lf[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[1]_i_1__1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[1]),
        .O(rxeq_lf[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[2]_i_1__1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[2]),
        .O(rxeq_lf[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[3]_i_1__1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[3]),
        .O(rxeq_lf[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[4]_i_1__1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[4]),
        .O(rxeq_lf[4]));
  LUT6 #(
    .INIT(64'hFF000000000080FF)) 
    \rxeq_lf[5]_i_1__1 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[0] ),
        .I2(\rxeq_cnt_reg_n_0_[2] ),
        .I3(fsm_rx[2]),
        .I4(fsm_rx[1]),
        .I5(fsm_rx[0]),
        .O(\rxeq_lf[5]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[5]_i_2__1 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[5]),
        .O(rxeq_lf[5]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[0] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__1_n_0 ),
        .D(rxeq_lf[0]),
        .Q(rxeq_lf__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[1] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__1_n_0 ),
        .D(rxeq_lf[1]),
        .Q(rxeq_lf__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[2] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__1_n_0 ),
        .D(rxeq_lf[2]),
        .Q(rxeq_lf__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[3] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__1_n_0 ),
        .D(rxeq_lf[3]),
        .Q(rxeq_lf__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[4] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__1_n_0 ),
        .D(rxeq_lf[4]),
        .Q(rxeq_lf__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[5] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__1_n_0 ),
        .D(rxeq_lf[5]),
        .Q(rxeq_lf__0[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[0]),
        .Q(rxeq_lffs_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[1]),
        .Q(rxeq_lffs_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[2]),
        .Q(rxeq_lffs_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[3]),
        .Q(rxeq_lffs_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[4]),
        .Q(rxeq_lffs_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[5]),
        .Q(rxeq_lffs_reg2[5]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_new_txcoeff_req_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_new_txcoeff_req),
        .Q(rxeq_new_txcoeff_req_reg_n_0),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[0]_i_1__1 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[0]),
        .I4(\rxeq_preset[2]_i_2__1_n_0 ),
        .I5(rxeq_preset__0[0]),
        .O(\rxeq_preset[0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[1]_i_1__1 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[1]),
        .I4(\rxeq_preset[2]_i_2__1_n_0 ),
        .I5(rxeq_preset__0[1]),
        .O(\rxeq_preset[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[2]_i_1__1 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[2]),
        .I4(\rxeq_preset[2]_i_2__1_n_0 ),
        .I5(rxeq_preset__0[2]),
        .O(\rxeq_preset[2]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hF00400FF)) 
    \rxeq_preset[2]_i_2__1 
       (.I0(rxeq_control_reg2[1]),
        .I1(rxeq_control_reg2[0]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[2]),
        .I4(fsm_rx[0]),
        .O(\rxeq_preset[2]_i_2__1_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[0]),
        .Q(rxeq_preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[1]),
        .Q(rxeq_preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[2]),
        .Q(rxeq_preset_reg2[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[0]_i_1__1_n_0 ),
        .Q(rxeq_preset__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[1]_i_1__1_n_0 ),
        .Q(rxeq_preset__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[2]_i_1__1_n_0 ),
        .Q(rxeq_preset__0[2]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h04)) 
    rxeq_preset_valid_i_1__1
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[1]),
        .I2(fsm_rx[0]),
        .O(rxeq_preset_valid));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_preset_valid_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_valid),
        .Q(rxeq_preset_valid_reg_n_0),
        .R(RST_CPLLRESET));
  pcie_7x_0_pcie_7x_0_rxeq_scan_39 rxeq_scan_i
       (.CLK(CLK),
        .D({rxeq_scan_i_n_0,rxeq_scan_i_n_1,rxeq_scan_i_n_2}),
        .Q(rxeq_txpreset__0),
        .RST_CPLLRESET(RST_CPLLRESET),
        .USER_RXEQ_ADAPT_DONE(USER_RXEQ_ADAPT_DONE),
        .out(fsm_rx),
        .rxeq_adapt_done_reg(rxeq_scan_i_n_5),
        .rxeq_adapt_done_reg_reg(rxeq_scan_i_n_4),
        .rxeq_adapt_done_reg_reg_0(rxeq_adapt_done_reg_reg_n_0),
        .\rxeq_cnt_reg[1] (\FSM_sequential_fsm_rx[2]_i_3__1_n_0 ),
        .\rxeq_cnt_reg[1]_0 (\FSM_sequential_fsm_rx[0]_i_2__1_n_0 ),
        .\rxeq_control_reg2_reg[0] (\FSM_sequential_fsm_rx[2]_i_2__1_n_0 ),
        .\rxeq_control_reg2_reg[1] (rxeq_control_reg2),
        .\rxeq_fs_reg[5] (rxeq_fs__0),
        .\rxeq_lf_reg[5] (rxeq_lf__0),
        .rxeq_new_txcoeff_req(rxeq_new_txcoeff_req),
        .rxeq_new_txcoeff_req_reg(rxeq_new_txcoeff_req_reg_n_0),
        .\rxeq_preset_reg[2] (rxeq_preset__0),
        .rxeq_preset_valid_reg(rxeq_preset_valid_reg_n_0),
        .\rxeq_txcoeff_reg[17] ({\rxeq_txcoeff_reg_n_0_[17] ,\rxeq_txcoeff_reg_n_0_[16] ,\rxeq_txcoeff_reg_n_0_[15] ,\rxeq_txcoeff_reg_n_0_[14] ,\rxeq_txcoeff_reg_n_0_[13] ,\rxeq_txcoeff_reg_n_0_[12] ,\rxeq_txcoeff_reg_n_0_[11] ,\rxeq_txcoeff_reg_n_0_[10] ,\rxeq_txcoeff_reg_n_0_[9] ,\rxeq_txcoeff_reg_n_0_[8] ,\rxeq_txcoeff_reg_n_0_[7] ,\rxeq_txcoeff_reg_n_0_[6] ,rxeq_txcoeff__0}));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[0]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[6] ),
        .O(rxeq_txcoeff[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[10]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[16] ),
        .O(rxeq_txcoeff[10]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[11]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[17] ),
        .O(rxeq_txcoeff[11]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[12]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[0]),
        .O(rxeq_txcoeff[12]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[13]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[1]),
        .O(rxeq_txcoeff[13]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[14]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[2]),
        .O(rxeq_txcoeff[14]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[15]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[3]),
        .O(rxeq_txcoeff[15]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[16]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[4]),
        .O(rxeq_txcoeff[16]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[17]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[5]),
        .O(rxeq_txcoeff[17]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[1]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[7] ),
        .O(rxeq_txcoeff[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[2]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[8] ),
        .O(rxeq_txcoeff[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[3]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[9] ),
        .O(rxeq_txcoeff[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[4]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[10] ),
        .O(rxeq_txcoeff[4]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[5]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[11] ),
        .O(rxeq_txcoeff[5]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[6]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[12] ),
        .O(rxeq_txcoeff[6]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[7]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[13] ),
        .O(rxeq_txcoeff[7]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[8]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[14] ),
        .O(rxeq_txcoeff[8]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[9]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[15] ),
        .O(rxeq_txcoeff[9]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[0] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[0]),
        .Q(rxeq_txcoeff__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[10] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[10]),
        .Q(\rxeq_txcoeff_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[11] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[11]),
        .Q(\rxeq_txcoeff_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[12] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[12]),
        .Q(\rxeq_txcoeff_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[13] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[13]),
        .Q(\rxeq_txcoeff_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[14] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[14]),
        .Q(\rxeq_txcoeff_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[15] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[15]),
        .Q(\rxeq_txcoeff_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[16] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[16]),
        .Q(\rxeq_txcoeff_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[17] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[17]),
        .Q(\rxeq_txcoeff_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[1] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[1]),
        .Q(rxeq_txcoeff__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[2] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[2]),
        .Q(rxeq_txcoeff__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[3] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[3]),
        .Q(rxeq_txcoeff__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[4] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[4]),
        .Q(rxeq_txcoeff__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[5] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[5]),
        .Q(rxeq_txcoeff__0[5]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[6] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[6]),
        .Q(\rxeq_txcoeff_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[7] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[7]),
        .Q(\rxeq_txcoeff_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[8] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[8]),
        .Q(\rxeq_txcoeff_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[9] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txcoeff[9]),
        .Q(\rxeq_txcoeff_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[0]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[0]),
        .O(rxeq_txpreset[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[1]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[1]),
        .O(rxeq_txpreset[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[2]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[2]),
        .O(rxeq_txpreset[2]));
  LUT4 #(
    .INIT(16'hF405)) 
    \rxeq_txpreset[3]_i_1__1 
       (.I0(fsm_rx[2]),
        .I1(rxeq_control_reg2[1]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[0]),
        .O(\rxeq_txpreset[3]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[3]_i_2__1 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[3]),
        .O(rxeq_txpreset[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[0]),
        .Q(rxeq_txpreset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[1]),
        .Q(rxeq_txpreset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[2]),
        .Q(rxeq_txpreset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[3]),
        .Q(rxeq_txpreset_reg2[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[0] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txpreset[0]),
        .Q(rxeq_txpreset__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[1] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txpreset[1]),
        .Q(rxeq_txpreset__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[2] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txpreset[2]),
        .Q(rxeq_txpreset__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[3] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__1_n_0 ),
        .D(rxeq_txpreset[3]),
        .Q(rxeq_txpreset__0[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_en_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_en_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_en_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_en_reg1),
        .Q(rxeq_user_en_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_mode_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_mode_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_mode_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_mode_reg1),
        .Q(rxeq_user_mode_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[0]),
        .Q(rxeq_user_txcoeff_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[10]),
        .Q(rxeq_user_txcoeff_reg2[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[11]),
        .Q(rxeq_user_txcoeff_reg2[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[12]),
        .Q(rxeq_user_txcoeff_reg2[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[13]),
        .Q(rxeq_user_txcoeff_reg2[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[14]),
        .Q(rxeq_user_txcoeff_reg2[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[15]),
        .Q(rxeq_user_txcoeff_reg2[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[16]),
        .Q(rxeq_user_txcoeff_reg2[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[17]),
        .Q(rxeq_user_txcoeff_reg2[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[1]),
        .Q(rxeq_user_txcoeff_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[2]),
        .Q(rxeq_user_txcoeff_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[3]),
        .Q(rxeq_user_txcoeff_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[4]),
        .Q(rxeq_user_txcoeff_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[5]),
        .Q(rxeq_user_txcoeff_reg2[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[6]),
        .Q(rxeq_user_txcoeff_reg2[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[7]),
        .Q(rxeq_user_txcoeff_reg2[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[8]),
        .Q(rxeq_user_txcoeff_reg2[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[9]),
        .Q(rxeq_user_txcoeff_reg2[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_control_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_control_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_control_reg1[0]),
        .Q(txeq_control_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_control_reg1[1]),
        .Q(txeq_control_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \txeq_deemph_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[0]),
        .S(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \txeq_deemph_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[0]),
        .Q(txeq_deemph_reg2[0]),
        .S(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[1]),
        .Q(txeq_deemph_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[2]),
        .Q(txeq_deemph_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[3]),
        .Q(txeq_deemph_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[4]),
        .Q(txeq_deemph_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[5]),
        .Q(txeq_deemph_reg2[5]),
        .R(RST_CPLLRESET));
  LUT4 #(
    .INIT(16'h1000)) 
    \txeq_preset[0]_i_1__1 
       (.I0(txeq_preset_reg2[1]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[0]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[0]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \txeq_preset[10]_i_1__1 
       (.I0(\txeq_preset[10]_i_2__1_n_0 ),
        .I1(RST_CPLLRESET),
        .I2(out0),
        .I3(txeq_preset[10]),
        .O(\txeq_preset[10]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hAEAAABFB)) 
    \txeq_preset[10]_i_2__1 
       (.I0(RST_CPLLRESET),
        .I1(txeq_preset_reg2[1]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[2]),
        .I4(txeq_preset_reg2[0]),
        .O(\txeq_preset[10]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h1811)) 
    \txeq_preset[11]_i_1__1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[11]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h027E)) 
    \txeq_preset[12]_i_1__1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[12]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0140)) 
    \txeq_preset[13]_i_1__1 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[0]),
        .O(\txeq_preset[13]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h1004)) 
    \txeq_preset[14]_i_1__1 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[0]),
        .O(\txeq_preset[14]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \txeq_preset[15]_i_1__1 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[1]),
        .I2(txeq_preset_reg2[3]),
        .O(\txeq_preset[15]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'h06)) 
    \txeq_preset[16]_i_2__1 
       (.I0(txeq_preset_reg2[3]),
        .I1(txeq_preset_reg2[0]),
        .I2(txeq_preset_reg2[2]),
        .O(\txeq_preset[16]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h1091)) 
    \txeq_preset[17]_i_1__1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[17]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h1004)) 
    \txeq_preset[1]_i_1__1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[2]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[1]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h00E0)) 
    \txeq_preset[2]_i_1__1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(RST_CPLLRESET),
        .O(\txeq_preset[2]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0C38)) 
    \txeq_preset[3]_i_1__1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[3]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h1400)) 
    \txeq_preset[7]_i_1__1 
       (.I0(txeq_preset_reg2[3]),
        .I1(txeq_preset_reg2[0]),
        .I2(txeq_preset_reg2[2]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[7]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \txeq_preset[8]_i_1__1 
       (.I0(\txeq_preset[8]_i_2__1_n_0 ),
        .I1(RST_CPLLRESET),
        .I2(out0),
        .I3(txeq_preset[8]),
        .O(\txeq_preset[8]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hABAEBBBB)) 
    \txeq_preset[8]_i_2__1 
       (.I0(RST_CPLLRESET),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[0]),
        .I4(txeq_preset_reg2[1]),
        .O(\txeq_preset[8]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h1819)) 
    \txeq_preset[9]_i_1__1 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    txeq_preset_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out0),
        .Q(txeq_preset_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[0]),
        .Q(txeq_preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[1]),
        .Q(txeq_preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[2]),
        .Q(txeq_preset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[3]),
        .Q(txeq_preset_reg2[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[0] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[0]_i_1__1_n_0 ),
        .Q(txeq_preset[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txeq_preset[10]_i_1__1_n_0 ),
        .Q(txeq_preset[10]),
        .R(1'b0));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[11] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[11]_i_1__1_n_0 ),
        .Q(txeq_preset[11]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[12] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[12]_i_1__1_n_0 ),
        .Q(txeq_preset[12]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[13] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[13]_i_1__1_n_0 ),
        .Q(txeq_preset[13]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[14] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[14]_i_1__1_n_0 ),
        .Q(txeq_preset[14]),
        .R(RST_CPLLRESET));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[15] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[15]_i_1__1_n_0 ),
        .Q(txeq_preset[15]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[16] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[16]_i_2__1_n_0 ),
        .Q(txeq_preset[16]),
        .R(RST_CPLLRESET));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[17] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[17]_i_1__1_n_0 ),
        .Q(txeq_preset[17]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[1] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[1]_i_1__1_n_0 ),
        .Q(txeq_preset[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[2] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[2]_i_1__1_n_0 ),
        .Q(txeq_preset[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[3] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[3]_i_1__1_n_0 ),
        .Q(txeq_preset[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[7] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[7]_i_1__1_n_0 ),
        .Q(txeq_preset[7]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txeq_preset[8]_i_1__1_n_0 ),
        .Q(txeq_preset[8]),
        .R(1'b0));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[9] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[9]_i_1__1_n_0 ),
        .Q(txeq_preset[9]),
        .S(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[0]_i_1__1 
       (.I0(\txeq_txcoeff_reg_n_0_[6] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(out0),
        .I3(txeq_preset[0]),
        .I4(\txeq_txcoeff[0]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[0]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[0]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[6] ),
        .I4(\txeq_txcoeff_reg_n_0_[7] ),
        .O(\txeq_txcoeff[0]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[10]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[10]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[9] ),
        .I4(\txeq_txcoeff[10]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[10]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[10]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[17] ),
        .I2(\txeq_txcoeff_reg_n_0_[16] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[10]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[11]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[11]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[10] ),
        .I4(\txeq_txcoeff[11]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[11]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[11]_i_2__1 
       (.I0(\txeq_txcoeff_reg_n_0_[18] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(\txeq_txcoeff_reg_n_0_[17] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[11]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[12]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[12]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[11] ),
        .I4(\txeq_txcoeff[12]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[12]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[12]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[0]),
        .I2(\txeq_txcoeff_reg_n_0_[18] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[12]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[13]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[13]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[12] ),
        .I4(\txeq_txcoeff[13]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[13]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[13]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[1]),
        .I2(txeq_deemph_reg2[0]),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[13]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[14]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[14]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[13] ),
        .I4(\txeq_txcoeff[14]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[14]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[14]_i_2__1 
       (.I0(txeq_deemph_reg2[2]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[1]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[14]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[15]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[15]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[14] ),
        .I4(\txeq_txcoeff[15]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[15]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[15]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[3]),
        .I2(txeq_deemph_reg2[2]),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[15]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[16]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[16]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[15] ),
        .I4(\txeq_txcoeff[16]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[16]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[16]_i_2__1 
       (.I0(txeq_deemph_reg2[4]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[3]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[16]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[17]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[17]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[16] ),
        .I4(\txeq_txcoeff[17]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[17]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[17]_i_2__1 
       (.I0(txeq_deemph_reg2[5]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[4]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[17]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hAAABFFABAAABAAAB)) 
    \txeq_txcoeff[18]_i_1__1 
       (.I0(\FSM_onehot_fsm_tx[1]_i_2__1_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I4(txeq_control_reg2[0]),
        .I5(txeq_control_reg2[1]),
        .O(txeq_txcoeff));
  LUT6 #(
    .INIT(64'hFFFFAE00AE00AE00)) 
    \txeq_txcoeff[18]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(\txeq_txcoeff[18]_i_3__1_n_0 ),
        .I3(txeq_deemph_reg2[5]),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I5(\txeq_txcoeff_reg_n_0_[17] ),
        .O(\txeq_txcoeff[18]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \txeq_txcoeff[18]_i_3__1 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .O(\txeq_txcoeff[18]_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[1]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[0] ),
        .I4(\txeq_txcoeff[1]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[1]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[8] ),
        .I2(\txeq_txcoeff_reg_n_0_[7] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[1]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[2]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[2]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[1] ),
        .I4(\txeq_txcoeff[2]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[2]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[9] ),
        .I2(\txeq_txcoeff_reg_n_0_[8] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[2]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[3]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[3]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[2] ),
        .I4(\txeq_txcoeff[3]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[3]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[10] ),
        .I2(\txeq_txcoeff_reg_n_0_[9] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[3]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[4]_i_1__1 
       (.I0(\txeq_txcoeff[4]_i_2__1_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[10] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[3] ),
        .O(\txeq_txcoeff[4]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[4]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[10] ),
        .I4(\txeq_txcoeff_reg_n_0_[11] ),
        .O(\txeq_txcoeff[4]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[5]_i_1__1 
       (.I0(\txeq_txcoeff[5]_i_2__1_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[11] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[4] ),
        .O(\txeq_txcoeff[5]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[5]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[11] ),
        .I4(\txeq_txcoeff_reg_n_0_[12] ),
        .O(\txeq_txcoeff[5]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[6]_i_1__1 
       (.I0(\txeq_txcoeff[6]_i_2__1_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[12] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[5] ),
        .O(\txeq_txcoeff[6]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[6]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[12] ),
        .I4(\txeq_txcoeff_reg_n_0_[13] ),
        .O(\txeq_txcoeff[6]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[7]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[7]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[6] ),
        .I4(\txeq_txcoeff[7]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[7]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[7]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[14] ),
        .I2(\txeq_txcoeff_reg_n_0_[13] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[7]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[8]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[8]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[7] ),
        .I4(\txeq_txcoeff[8]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[8]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[8]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[15] ),
        .I2(\txeq_txcoeff_reg_n_0_[14] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[8]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[9]_i_1__1 
       (.I0(out0),
        .I1(txeq_preset[9]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[8] ),
        .I4(\txeq_txcoeff[9]_i_2__1_n_0 ),
        .O(\txeq_txcoeff[9]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[9]_i_2__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[16] ),
        .I2(\txeq_txcoeff_reg_n_0_[15] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[9]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h4444F444)) 
    \txeq_txcoeff_cnt[0]_i_1__1 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I3(txeq_control_reg2[1]),
        .I4(txeq_control_reg2[0]),
        .O(txeq_txcoeff_cnt[0]));
  LUT3 #(
    .INIT(8'h28)) 
    \txeq_txcoeff_cnt[1]_i_1__1 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .O(txeq_txcoeff_cnt[1]));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_txcoeff_cnt[0]),
        .Q(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_txcoeff_cnt[1]),
        .Q(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[0] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[0]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[10] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[10]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[11] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[11]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[12] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[12]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[13] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[13]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[14] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[14]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[15] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[15]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[16] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[16]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[17] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[17]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[18] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[18]_i_2__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[18] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[1] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[1]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[2] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[2]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[3] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[3]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[4] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[4]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[5] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[5]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[6] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[6]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[7] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[7]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[8] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[8]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[9] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[9]_i_1__1_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_eq" *) 
module pcie_7x_0_pcie_7x_0_pipe_eq_35
   (out0,
    TXPRECURSOR,
    TXMAINCURSOR,
    TXPOSTCURSOR,
    USER_RXEQ_ADAPT_DONE,
    RST_CPLLRESET,
    CLK,
    cpllreset_reg,
    rate_gen3_3);
  output [0:0]out0;
  output [4:0]TXPRECURSOR;
  output [6:0]TXMAINCURSOR;
  output [4:0]TXPOSTCURSOR;
  output USER_RXEQ_ADAPT_DONE;
  input RST_CPLLRESET;
  input CLK;
  input cpllreset_reg;
  input rate_gen3_3;

  wire CLK;
  wire \FSM_onehot_fsm_tx[1]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm_tx[1]_i_2__2_n_0 ;
  wire \FSM_onehot_fsm_tx[2]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm_tx[3]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm_tx[3]_i_2__2_n_0 ;
  wire \FSM_onehot_fsm_tx[4]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm_tx[5]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_2__2_n_0 ;
  wire \FSM_onehot_fsm_tx[6]_i_3__2_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_tx_reg_n_0_[6] ;
  wire \FSM_sequential_fsm_rx[0]_i_2__2_n_0 ;
  wire \FSM_sequential_fsm_rx[2]_i_2__2_n_0 ;
  wire \FSM_sequential_fsm_rx[2]_i_3__2_n_0 ;
  wire RST_CPLLRESET;
  wire [6:0]TXMAINCURSOR;
  wire [4:0]TXPOSTCURSOR;
  wire [4:0]TXPRECURSOR;
  wire USER_RXEQ_ADAPT_DONE;
  wire cpllreset_reg;
  (* RTL_KEEP = "yes" *) wire [2:0]fsm_rx;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  (* RTL_KEEP = "yes" *) wire [0:0]out0;
  wire rate_gen3_3;
  wire rxeq_adapt_done_reg_reg_n_0;
  wire [2:0]rxeq_cnt;
  wire \rxeq_cnt_reg_n_0_[0] ;
  wire \rxeq_cnt_reg_n_0_[1] ;
  wire \rxeq_cnt_reg_n_0_[2] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rxeq_control_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rxeq_control_reg2;
  wire [5:0]rxeq_fs;
  wire \rxeq_fs[5]_i_1__2_n_0 ;
  wire [5:0]rxeq_fs__0;
  wire [5:0]rxeq_lf;
  wire \rxeq_lf[5]_i_1__2_n_0 ;
  wire [5:0]rxeq_lf__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]rxeq_lffs_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]rxeq_lffs_reg2;
  wire rxeq_new_txcoeff_req;
  wire rxeq_new_txcoeff_req_reg_n_0;
  wire \rxeq_preset[0]_i_1__2_n_0 ;
  wire \rxeq_preset[1]_i_1__2_n_0 ;
  wire \rxeq_preset[2]_i_1__2_n_0 ;
  wire \rxeq_preset[2]_i_2__2_n_0 ;
  wire [2:0]rxeq_preset__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]rxeq_preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]rxeq_preset_reg2;
  wire rxeq_preset_valid;
  wire rxeq_preset_valid_reg_n_0;
  wire rxeq_scan_i_n_0;
  wire rxeq_scan_i_n_1;
  wire rxeq_scan_i_n_2;
  wire rxeq_scan_i_n_4;
  wire rxeq_scan_i_n_5;
  wire [17:0]rxeq_txcoeff;
  wire [5:0]rxeq_txcoeff__0;
  wire \rxeq_txcoeff_reg_n_0_[10] ;
  wire \rxeq_txcoeff_reg_n_0_[11] ;
  wire \rxeq_txcoeff_reg_n_0_[12] ;
  wire \rxeq_txcoeff_reg_n_0_[13] ;
  wire \rxeq_txcoeff_reg_n_0_[14] ;
  wire \rxeq_txcoeff_reg_n_0_[15] ;
  wire \rxeq_txcoeff_reg_n_0_[16] ;
  wire \rxeq_txcoeff_reg_n_0_[17] ;
  wire \rxeq_txcoeff_reg_n_0_[6] ;
  wire \rxeq_txcoeff_reg_n_0_[7] ;
  wire \rxeq_txcoeff_reg_n_0_[8] ;
  wire \rxeq_txcoeff_reg_n_0_[9] ;
  wire [3:0]rxeq_txpreset;
  wire \rxeq_txpreset[3]_i_1__2_n_0 ;
  wire [3:0]rxeq_txpreset__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxeq_txpreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxeq_txpreset_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_en_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_en_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_mode_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_user_mode_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]rxeq_user_txcoeff_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]rxeq_user_txcoeff_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]txeq_control_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]txeq_control_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]txeq_deemph_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]txeq_deemph_reg2;
  wire [17:0]txeq_preset;
  wire \txeq_preset[0]_i_1__2_n_0 ;
  wire \txeq_preset[10]_i_1__2_n_0 ;
  wire \txeq_preset[10]_i_2__2_n_0 ;
  wire \txeq_preset[11]_i_1__2_n_0 ;
  wire \txeq_preset[12]_i_1__2_n_0 ;
  wire \txeq_preset[13]_i_1__2_n_0 ;
  wire \txeq_preset[14]_i_1__2_n_0 ;
  wire \txeq_preset[15]_i_1__2_n_0 ;
  wire \txeq_preset[16]_i_2__2_n_0 ;
  wire \txeq_preset[17]_i_1__2_n_0 ;
  wire \txeq_preset[1]_i_1__2_n_0 ;
  wire \txeq_preset[2]_i_1__2_n_0 ;
  wire \txeq_preset[3]_i_1__2_n_0 ;
  wire \txeq_preset[7]_i_1__2_n_0 ;
  wire \txeq_preset[8]_i_1__2_n_0 ;
  wire \txeq_preset[8]_i_2__2_n_0 ;
  wire \txeq_preset[9]_i_1__2_n_0 ;
  wire txeq_preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txeq_preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txeq_preset_reg2;
  wire txeq_txcoeff;
  wire \txeq_txcoeff[0]_i_1__2_n_0 ;
  wire \txeq_txcoeff[0]_i_2__2_n_0 ;
  wire \txeq_txcoeff[10]_i_1__2_n_0 ;
  wire \txeq_txcoeff[10]_i_2__2_n_0 ;
  wire \txeq_txcoeff[11]_i_1__2_n_0 ;
  wire \txeq_txcoeff[11]_i_2__2_n_0 ;
  wire \txeq_txcoeff[12]_i_1__2_n_0 ;
  wire \txeq_txcoeff[12]_i_2__2_n_0 ;
  wire \txeq_txcoeff[13]_i_1__2_n_0 ;
  wire \txeq_txcoeff[13]_i_2__2_n_0 ;
  wire \txeq_txcoeff[14]_i_1__2_n_0 ;
  wire \txeq_txcoeff[14]_i_2__2_n_0 ;
  wire \txeq_txcoeff[15]_i_1__2_n_0 ;
  wire \txeq_txcoeff[15]_i_2__2_n_0 ;
  wire \txeq_txcoeff[16]_i_1__2_n_0 ;
  wire \txeq_txcoeff[16]_i_2__2_n_0 ;
  wire \txeq_txcoeff[17]_i_1__2_n_0 ;
  wire \txeq_txcoeff[17]_i_2__2_n_0 ;
  wire \txeq_txcoeff[18]_i_2__2_n_0 ;
  wire \txeq_txcoeff[18]_i_3__2_n_0 ;
  wire \txeq_txcoeff[1]_i_1__2_n_0 ;
  wire \txeq_txcoeff[1]_i_2__2_n_0 ;
  wire \txeq_txcoeff[2]_i_1__2_n_0 ;
  wire \txeq_txcoeff[2]_i_2__2_n_0 ;
  wire \txeq_txcoeff[3]_i_1__2_n_0 ;
  wire \txeq_txcoeff[3]_i_2__2_n_0 ;
  wire \txeq_txcoeff[4]_i_1__2_n_0 ;
  wire \txeq_txcoeff[4]_i_2__2_n_0 ;
  wire \txeq_txcoeff[5]_i_1__2_n_0 ;
  wire \txeq_txcoeff[5]_i_2__2_n_0 ;
  wire \txeq_txcoeff[6]_i_1__2_n_0 ;
  wire \txeq_txcoeff[6]_i_2__2_n_0 ;
  wire \txeq_txcoeff[7]_i_1__2_n_0 ;
  wire \txeq_txcoeff[7]_i_2__2_n_0 ;
  wire \txeq_txcoeff[8]_i_1__2_n_0 ;
  wire \txeq_txcoeff[8]_i_2__2_n_0 ;
  wire \txeq_txcoeff[9]_i_1__2_n_0 ;
  wire \txeq_txcoeff[9]_i_2__2_n_0 ;
  wire [1:0]txeq_txcoeff_cnt;
  wire \txeq_txcoeff_cnt_reg_n_0_[0] ;
  wire \txeq_txcoeff_cnt_reg_n_0_[1] ;
  wire \txeq_txcoeff_reg_n_0_[0] ;
  wire \txeq_txcoeff_reg_n_0_[10] ;
  wire \txeq_txcoeff_reg_n_0_[11] ;
  wire \txeq_txcoeff_reg_n_0_[12] ;
  wire \txeq_txcoeff_reg_n_0_[13] ;
  wire \txeq_txcoeff_reg_n_0_[14] ;
  wire \txeq_txcoeff_reg_n_0_[15] ;
  wire \txeq_txcoeff_reg_n_0_[16] ;
  wire \txeq_txcoeff_reg_n_0_[17] ;
  wire \txeq_txcoeff_reg_n_0_[18] ;
  wire \txeq_txcoeff_reg_n_0_[1] ;
  wire \txeq_txcoeff_reg_n_0_[2] ;
  wire \txeq_txcoeff_reg_n_0_[3] ;
  wire \txeq_txcoeff_reg_n_0_[4] ;
  wire \txeq_txcoeff_reg_n_0_[5] ;
  wire \txeq_txcoeff_reg_n_0_[6] ;
  wire \txeq_txcoeff_reg_n_0_[7] ;
  wire \txeq_txcoeff_reg_n_0_[8] ;
  wire \txeq_txcoeff_reg_n_0_[9] ;

  LUT6 #(
    .INIT(64'h000100010001CDCD)) 
    \FSM_onehot_fsm_tx[1]_i_1__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\FSM_onehot_fsm_tx[1]_i_2__2_n_0 ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I4(txeq_control_reg2[0]),
        .I5(txeq_control_reg2[1]),
        .O(\FSM_onehot_fsm_tx[1]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \FSM_onehot_fsm_tx[1]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm_tx[1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h20202F20)) 
    \FSM_onehot_fsm_tx[2]_i_1__2 
       (.I0(txeq_control_reg2[0]),
        .I1(txeq_control_reg2[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I3(out0),
        .I4(txeq_preset_done),
        .O(\FSM_onehot_fsm_tx[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h45454545FF454545)) 
    \FSM_onehot_fsm_tx[3]_i_1__2 
       (.I0(\FSM_onehot_fsm_tx[3]_i_2__2_n_0 ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I4(txeq_control_reg2[1]),
        .I5(txeq_control_reg2[0]),
        .O(\FSM_onehot_fsm_tx[3]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hFB)) 
    \FSM_onehot_fsm_tx[3]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(out0),
        .O(\FSM_onehot_fsm_tx[3]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \FSM_onehot_fsm_tx[4]_i_1__2 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(out0),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[4]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \FSM_onehot_fsm_tx[5]_i_1__2 
       (.I0(txeq_control_reg2[0]),
        .I1(txeq_control_reg2[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[5]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAAAAA8)) 
    \FSM_onehot_fsm_tx[6]_i_1__2 
       (.I0(\FSM_onehot_fsm_tx[6]_i_2__2_n_0 ),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I3(\FSM_onehot_fsm_tx[6]_i_3__2_n_0 ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm_tx[6]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h88888888BBBBBBB8)) 
    \FSM_onehot_fsm_tx[6]_i_2__2 
       (.I0(txeq_preset_done),
        .I1(out0),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm_tx[6]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_fsm_tx[6]_i_3__2 
       (.I0(txeq_control_reg2[1]),
        .I1(txeq_control_reg2[0]),
        .O(\FSM_onehot_fsm_tx[6]_i_3__2_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_fsm_tx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[1]_i_1__2_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[2]_i_1__2_n_0 ),
        .Q(out0),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[3]_i_1__2_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[4]_i_1__2_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[5]_i_1__2_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_tx_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_tx[6]_i_1__2_n_0 ),
        .Q(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hF0D00800)) 
    \FSM_sequential_fsm_rx[0]_i_2__2 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[2] ),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[0] ),
        .I4(fsm_rx[0]),
        .O(\FSM_sequential_fsm_rx[0]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_sequential_fsm_rx[2]_i_2__2 
       (.I0(rxeq_control_reg2[0]),
        .I1(rxeq_control_reg2[1]),
        .O(\FSM_sequential_fsm_rx[2]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'hFD)) 
    \FSM_sequential_fsm_rx[2]_i_3__2 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[2] ),
        .I2(\rxeq_cnt_reg_n_0_[0] ),
        .O(\FSM_sequential_fsm_rx[2]_i_3__2_n_0 ));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_2),
        .Q(fsm_rx[0]),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_1),
        .Q(fsm_rx[1]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_fsm_rx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_0),
        .Q(fsm_rx[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_gen3_3),
        .Q(gen3_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(RST_CPLLRESET));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_23__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[17] ),
        .O(TXPOSTCURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_24__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[16] ),
        .O(TXPOSTCURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_25__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[15] ),
        .O(TXPOSTCURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_26__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[14] ),
        .O(TXPOSTCURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_27__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[13] ),
        .O(TXPOSTCURSOR[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_28__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[4] ),
        .O(TXPRECURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_29__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[3] ),
        .O(TXPRECURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_30__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[2] ),
        .O(TXPRECURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_31__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[1] ),
        .O(TXPRECURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_32__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[0] ),
        .O(TXPRECURSOR[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_33__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[12] ),
        .O(TXMAINCURSOR[6]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_34__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[11] ),
        .O(TXMAINCURSOR[5]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_35__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[10] ),
        .O(TXMAINCURSOR[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_36__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[9] ),
        .O(TXMAINCURSOR[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_37__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[8] ),
        .O(TXMAINCURSOR[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_38__2 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[7] ),
        .O(TXMAINCURSOR[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \gtx_channel.gtxe2_channel_i_i_39 
       (.I0(gen3_reg2),
        .I1(\txeq_txcoeff_reg_n_0_[6] ),
        .O(TXMAINCURSOR[0]));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_adapt_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_5),
        .Q(USER_RXEQ_ADAPT_DONE),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_adapt_done_reg_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_scan_i_n_4),
        .Q(rxeq_adapt_done_reg_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h04041C10)) 
    \rxeq_cnt[0]_i_1__2 
       (.I0(\rxeq_cnt_reg_n_0_[0] ),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[2]),
        .I3(rxeq_control_reg2[1]),
        .I4(fsm_rx[1]),
        .O(rxeq_cnt[0]));
  LUT5 #(
    .INIT(32'h00424200)) 
    \rxeq_cnt[1]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[1] ),
        .I4(\rxeq_cnt_reg_n_0_[0] ),
        .O(rxeq_cnt[1]));
  LUT6 #(
    .INIT(64'h0042420042004200)) 
    \rxeq_cnt[2]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(fsm_rx[1]),
        .I3(\rxeq_cnt_reg_n_0_[2] ),
        .I4(\rxeq_cnt_reg_n_0_[1] ),
        .I5(\rxeq_cnt_reg_n_0_[0] ),
        .O(rxeq_cnt[2]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[0]),
        .Q(\rxeq_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[1]),
        .Q(\rxeq_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_cnt[2]),
        .Q(\rxeq_cnt_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_control_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_control_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_control_reg1[0]),
        .Q(rxeq_control_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_control_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_control_reg1[1]),
        .Q(rxeq_control_reg2[1]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[0]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[0]),
        .O(rxeq_fs[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[1]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[1]),
        .O(rxeq_fs[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[2]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[2]),
        .O(rxeq_fs[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[3]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[3]),
        .O(rxeq_fs[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[4]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[4]),
        .O(rxeq_fs[4]));
  LUT4 #(
    .INIT(16'hC203)) 
    \rxeq_fs[5]_i_1__2 
       (.I0(rxeq_control_reg2[1]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[0]),
        .O(\rxeq_fs[5]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_fs[5]_i_2__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_lffs_reg2[5]),
        .O(rxeq_fs[5]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[0] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__2_n_0 ),
        .D(rxeq_fs[0]),
        .Q(rxeq_fs__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[1] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__2_n_0 ),
        .D(rxeq_fs[1]),
        .Q(rxeq_fs__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[2] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__2_n_0 ),
        .D(rxeq_fs[2]),
        .Q(rxeq_fs__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[3] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__2_n_0 ),
        .D(rxeq_fs[3]),
        .Q(rxeq_fs__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[4] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__2_n_0 ),
        .D(rxeq_fs[4]),
        .Q(rxeq_fs__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_fs_reg[5] 
       (.C(CLK),
        .CE(\rxeq_fs[5]_i_1__2_n_0 ),
        .D(rxeq_fs[5]),
        .Q(rxeq_fs__0[5]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[0]_i_1__2 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[0]),
        .O(rxeq_lf[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[1]_i_1__2 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[1]),
        .O(rxeq_lf[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[2]_i_1__2 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[2]),
        .O(rxeq_lf[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[3]_i_1__2 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[3]),
        .O(rxeq_lf[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[4]_i_1__2 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[4]),
        .O(rxeq_lf[4]));
  LUT6 #(
    .INIT(64'hFF000000000080FF)) 
    \rxeq_lf[5]_i_1__2 
       (.I0(\rxeq_cnt_reg_n_0_[1] ),
        .I1(\rxeq_cnt_reg_n_0_[0] ),
        .I2(\rxeq_cnt_reg_n_0_[2] ),
        .I3(fsm_rx[2]),
        .I4(fsm_rx[1]),
        .I5(fsm_rx[0]),
        .O(\rxeq_lf[5]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_lf[5]_i_2__2 
       (.I0(fsm_rx[1]),
        .I1(fsm_rx[2]),
        .I2(rxeq_lffs_reg2[5]),
        .O(rxeq_lf[5]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[0] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__2_n_0 ),
        .D(rxeq_lf[0]),
        .Q(rxeq_lf__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[1] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__2_n_0 ),
        .D(rxeq_lf[1]),
        .Q(rxeq_lf__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[2] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__2_n_0 ),
        .D(rxeq_lf[2]),
        .Q(rxeq_lf__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[3] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__2_n_0 ),
        .D(rxeq_lf[3]),
        .Q(rxeq_lf__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[4] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__2_n_0 ),
        .D(rxeq_lf[4]),
        .Q(rxeq_lf__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_lf_reg[5] 
       (.C(CLK),
        .CE(\rxeq_lf[5]_i_1__2_n_0 ),
        .D(rxeq_lf[5]),
        .Q(rxeq_lf__0[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_lffs_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[0]),
        .Q(rxeq_lffs_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[1]),
        .Q(rxeq_lffs_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[2]),
        .Q(rxeq_lffs_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[3]),
        .Q(rxeq_lffs_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[4]),
        .Q(rxeq_lffs_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_lffs_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_lffs_reg1[5]),
        .Q(rxeq_lffs_reg2[5]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_new_txcoeff_req_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_new_txcoeff_req),
        .Q(rxeq_new_txcoeff_req_reg_n_0),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[0]_i_1__2 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[0]),
        .I4(\rxeq_preset[2]_i_2__2_n_0 ),
        .I5(rxeq_preset__0[0]),
        .O(\rxeq_preset[0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[1]_i_1__2 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[1]),
        .I4(\rxeq_preset[2]_i_2__2_n_0 ),
        .I5(rxeq_preset__0[1]),
        .O(\rxeq_preset[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h3200FFFF32000000)) 
    \rxeq_preset[2]_i_1__2 
       (.I0(fsm_rx[0]),
        .I1(fsm_rx[2]),
        .I2(fsm_rx[1]),
        .I3(rxeq_preset_reg2[2]),
        .I4(\rxeq_preset[2]_i_2__2_n_0 ),
        .I5(rxeq_preset__0[2]),
        .O(\rxeq_preset[2]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hF00400FF)) 
    \rxeq_preset[2]_i_2__2 
       (.I0(rxeq_control_reg2[1]),
        .I1(rxeq_control_reg2[0]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[2]),
        .I4(fsm_rx[0]),
        .O(\rxeq_preset[2]_i_2__2_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[0]),
        .Q(rxeq_preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[1]),
        .Q(rxeq_preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_reg1[2]),
        .Q(rxeq_preset_reg2[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[0]_i_1__2_n_0 ),
        .Q(rxeq_preset__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[1]_i_1__2_n_0 ),
        .Q(rxeq_preset__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_preset_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset[2]_i_1__2_n_0 ),
        .Q(rxeq_preset__0[2]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h04)) 
    rxeq_preset_valid_i_1__2
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[1]),
        .I2(fsm_rx[0]),
        .O(rxeq_preset_valid));
  FDRE #(
    .INIT(1'b0)) 
    rxeq_preset_valid_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_valid),
        .Q(rxeq_preset_valid_reg_n_0),
        .R(RST_CPLLRESET));
  pcie_7x_0_pcie_7x_0_rxeq_scan rxeq_scan_i
       (.CLK(CLK),
        .D({rxeq_scan_i_n_0,rxeq_scan_i_n_1,rxeq_scan_i_n_2}),
        .Q(rxeq_txpreset__0),
        .RST_CPLLRESET(RST_CPLLRESET),
        .USER_RXEQ_ADAPT_DONE(USER_RXEQ_ADAPT_DONE),
        .out(fsm_rx),
        .rxeq_adapt_done_reg(rxeq_scan_i_n_5),
        .rxeq_adapt_done_reg_reg(rxeq_scan_i_n_4),
        .rxeq_adapt_done_reg_reg_0(rxeq_adapt_done_reg_reg_n_0),
        .\rxeq_cnt_reg[1] (\FSM_sequential_fsm_rx[2]_i_3__2_n_0 ),
        .\rxeq_cnt_reg[1]_0 (\FSM_sequential_fsm_rx[0]_i_2__2_n_0 ),
        .\rxeq_control_reg2_reg[0] (\FSM_sequential_fsm_rx[2]_i_2__2_n_0 ),
        .\rxeq_control_reg2_reg[1] (rxeq_control_reg2),
        .\rxeq_fs_reg[5] (rxeq_fs__0),
        .\rxeq_lf_reg[5] (rxeq_lf__0),
        .rxeq_new_txcoeff_req(rxeq_new_txcoeff_req),
        .rxeq_new_txcoeff_req_reg(rxeq_new_txcoeff_req_reg_n_0),
        .\rxeq_preset_reg[2] (rxeq_preset__0),
        .rxeq_preset_valid_reg(rxeq_preset_valid_reg_n_0),
        .\rxeq_txcoeff_reg[17] ({\rxeq_txcoeff_reg_n_0_[17] ,\rxeq_txcoeff_reg_n_0_[16] ,\rxeq_txcoeff_reg_n_0_[15] ,\rxeq_txcoeff_reg_n_0_[14] ,\rxeq_txcoeff_reg_n_0_[13] ,\rxeq_txcoeff_reg_n_0_[12] ,\rxeq_txcoeff_reg_n_0_[11] ,\rxeq_txcoeff_reg_n_0_[10] ,\rxeq_txcoeff_reg_n_0_[9] ,\rxeq_txcoeff_reg_n_0_[8] ,\rxeq_txcoeff_reg_n_0_[7] ,\rxeq_txcoeff_reg_n_0_[6] ,rxeq_txcoeff__0}));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[0]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[6] ),
        .O(rxeq_txcoeff[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[10]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[16] ),
        .O(rxeq_txcoeff[10]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[11]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[17] ),
        .O(rxeq_txcoeff[11]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[12]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[0]),
        .O(rxeq_txcoeff[12]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[13]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[1]),
        .O(rxeq_txcoeff[13]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[14]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[2]),
        .O(rxeq_txcoeff[14]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[15]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[3]),
        .O(rxeq_txcoeff[15]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[16]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[4]),
        .O(rxeq_txcoeff[16]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[17]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(txeq_deemph_reg2[5]),
        .O(rxeq_txcoeff[17]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[1]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[7] ),
        .O(rxeq_txcoeff[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[2]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[8] ),
        .O(rxeq_txcoeff[2]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[3]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[9] ),
        .O(rxeq_txcoeff[3]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[4]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[10] ),
        .O(rxeq_txcoeff[4]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[5]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[11] ),
        .O(rxeq_txcoeff[5]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[6]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[12] ),
        .O(rxeq_txcoeff[6]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[7]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[13] ),
        .O(rxeq_txcoeff[7]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[8]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[14] ),
        .O(rxeq_txcoeff[8]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txcoeff[9]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(\rxeq_txcoeff_reg_n_0_[15] ),
        .O(rxeq_txcoeff[9]));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[0] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[0]),
        .Q(rxeq_txcoeff__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[10] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[10]),
        .Q(\rxeq_txcoeff_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[11] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[11]),
        .Q(\rxeq_txcoeff_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[12] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[12]),
        .Q(\rxeq_txcoeff_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[13] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[13]),
        .Q(\rxeq_txcoeff_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[14] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[14]),
        .Q(\rxeq_txcoeff_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[15] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[15]),
        .Q(\rxeq_txcoeff_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[16] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[16]),
        .Q(\rxeq_txcoeff_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[17] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[17]),
        .Q(\rxeq_txcoeff_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[1] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[1]),
        .Q(rxeq_txcoeff__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[2] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[2]),
        .Q(rxeq_txcoeff__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[3] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[3]),
        .Q(rxeq_txcoeff__0[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[4] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[4]),
        .Q(rxeq_txcoeff__0[4]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[5] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[5]),
        .Q(rxeq_txcoeff__0[5]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[6] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[6]),
        .Q(\rxeq_txcoeff_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[7] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[7]),
        .Q(\rxeq_txcoeff_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[8] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[8]),
        .Q(\rxeq_txcoeff_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txcoeff_reg[9] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txcoeff[9]),
        .Q(\rxeq_txcoeff_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[0]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[0]),
        .O(rxeq_txpreset[0]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[1]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[1]),
        .O(rxeq_txpreset[1]));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[2]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[2]),
        .O(rxeq_txpreset[2]));
  LUT4 #(
    .INIT(16'hF405)) 
    \rxeq_txpreset[3]_i_1__2 
       (.I0(fsm_rx[2]),
        .I1(rxeq_control_reg2[1]),
        .I2(fsm_rx[1]),
        .I3(fsm_rx[0]),
        .O(\rxeq_txpreset[3]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \rxeq_txpreset[3]_i_2__2 
       (.I0(fsm_rx[2]),
        .I1(fsm_rx[0]),
        .I2(rxeq_txpreset_reg2[3]),
        .O(rxeq_txpreset[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_txpreset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[0]),
        .Q(rxeq_txpreset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[1]),
        .Q(rxeq_txpreset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[2]),
        .Q(rxeq_txpreset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_txpreset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_txpreset_reg1[3]),
        .Q(rxeq_txpreset_reg2[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[0] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txpreset[0]),
        .Q(rxeq_txpreset__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[1] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txpreset[1]),
        .Q(rxeq_txpreset__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[2] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txpreset[2]),
        .Q(rxeq_txpreset__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxeq_txpreset_reg[3] 
       (.C(CLK),
        .CE(\rxeq_txpreset[3]_i_1__2_n_0 ),
        .D(rxeq_txpreset[3]),
        .Q(rxeq_txpreset__0[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_en_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_en_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_en_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_en_reg1),
        .Q(rxeq_user_en_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_mode_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_mode_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_user_mode_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_mode_reg1),
        .Q(rxeq_user_mode_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg1_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxeq_user_txcoeff_reg1[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[0]),
        .Q(rxeq_user_txcoeff_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[10]),
        .Q(rxeq_user_txcoeff_reg2[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[11]),
        .Q(rxeq_user_txcoeff_reg2[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[12]),
        .Q(rxeq_user_txcoeff_reg2[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[13]),
        .Q(rxeq_user_txcoeff_reg2[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[14]),
        .Q(rxeq_user_txcoeff_reg2[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[15]),
        .Q(rxeq_user_txcoeff_reg2[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[16]),
        .Q(rxeq_user_txcoeff_reg2[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[17]),
        .Q(rxeq_user_txcoeff_reg2[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[1]),
        .Q(rxeq_user_txcoeff_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[2]),
        .Q(rxeq_user_txcoeff_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[3]),
        .Q(rxeq_user_txcoeff_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[4]),
        .Q(rxeq_user_txcoeff_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[5]),
        .Q(rxeq_user_txcoeff_reg2[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[6]),
        .Q(rxeq_user_txcoeff_reg2[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[7]),
        .Q(rxeq_user_txcoeff_reg2[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[8]),
        .Q(rxeq_user_txcoeff_reg2[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxeq_user_txcoeff_reg2_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_user_txcoeff_reg1[9]),
        .Q(rxeq_user_txcoeff_reg2[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_control_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_control_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_control_reg1[0]),
        .Q(txeq_control_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_control_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_control_reg1[1]),
        .Q(txeq_control_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \txeq_deemph_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[0]),
        .S(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_deemph_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \txeq_deemph_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[0]),
        .Q(txeq_deemph_reg2[0]),
        .S(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[1]),
        .Q(txeq_deemph_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[2]),
        .Q(txeq_deemph_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[3]),
        .Q(txeq_deemph_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[4]),
        .Q(txeq_deemph_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_deemph_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_deemph_reg1[5]),
        .Q(txeq_deemph_reg2[5]),
        .R(RST_CPLLRESET));
  LUT4 #(
    .INIT(16'h1000)) 
    \txeq_preset[0]_i_1__2 
       (.I0(txeq_preset_reg2[1]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[0]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[0]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \txeq_preset[10]_i_1__2 
       (.I0(\txeq_preset[10]_i_2__2_n_0 ),
        .I1(RST_CPLLRESET),
        .I2(out0),
        .I3(txeq_preset[10]),
        .O(\txeq_preset[10]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hAEAAABFB)) 
    \txeq_preset[10]_i_2__2 
       (.I0(RST_CPLLRESET),
        .I1(txeq_preset_reg2[1]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[2]),
        .I4(txeq_preset_reg2[0]),
        .O(\txeq_preset[10]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h1811)) 
    \txeq_preset[11]_i_1__2 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[11]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h027E)) 
    \txeq_preset[12]_i_1__2 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[12]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0140)) 
    \txeq_preset[13]_i_1__2 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[0]),
        .O(\txeq_preset[13]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h1004)) 
    \txeq_preset[14]_i_1__2 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[0]),
        .O(\txeq_preset[14]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \txeq_preset[15]_i_1__2 
       (.I0(txeq_preset_reg2[2]),
        .I1(txeq_preset_reg2[1]),
        .I2(txeq_preset_reg2[3]),
        .O(\txeq_preset[15]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'h06)) 
    \txeq_preset[16]_i_2__2 
       (.I0(txeq_preset_reg2[3]),
        .I1(txeq_preset_reg2[0]),
        .I2(txeq_preset_reg2[2]),
        .O(\txeq_preset[16]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h1091)) 
    \txeq_preset[17]_i_1__2 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[1]),
        .I3(txeq_preset_reg2[3]),
        .O(\txeq_preset[17]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h1004)) 
    \txeq_preset[1]_i_1__2 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[3]),
        .I2(txeq_preset_reg2[2]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[1]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h00E0)) 
    \txeq_preset[2]_i_1__2 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(RST_CPLLRESET),
        .O(\txeq_preset[2]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0C38)) 
    \txeq_preset[3]_i_1__2 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[3]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h1400)) 
    \txeq_preset[7]_i_1__2 
       (.I0(txeq_preset_reg2[3]),
        .I1(txeq_preset_reg2[0]),
        .I2(txeq_preset_reg2[2]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[7]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \txeq_preset[8]_i_1__2 
       (.I0(\txeq_preset[8]_i_2__2_n_0 ),
        .I1(RST_CPLLRESET),
        .I2(out0),
        .I3(txeq_preset[8]),
        .O(\txeq_preset[8]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hABAEBBBB)) 
    \txeq_preset[8]_i_2__2 
       (.I0(RST_CPLLRESET),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[0]),
        .I4(txeq_preset_reg2[1]),
        .O(\txeq_preset[8]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h1819)) 
    \txeq_preset[9]_i_1__2 
       (.I0(txeq_preset_reg2[0]),
        .I1(txeq_preset_reg2[2]),
        .I2(txeq_preset_reg2[3]),
        .I3(txeq_preset_reg2[1]),
        .O(\txeq_preset[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    txeq_preset_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out0),
        .Q(txeq_preset_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txeq_preset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[0]),
        .Q(txeq_preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[1]),
        .Q(txeq_preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[2]),
        .Q(txeq_preset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txeq_preset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_preset_reg1[3]),
        .Q(txeq_preset_reg2[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[0] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[0]_i_1__2_n_0 ),
        .Q(txeq_preset[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txeq_preset[10]_i_1__2_n_0 ),
        .Q(txeq_preset[10]),
        .R(1'b0));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[11] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[11]_i_1__2_n_0 ),
        .Q(txeq_preset[11]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[12] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[12]_i_1__2_n_0 ),
        .Q(txeq_preset[12]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[13] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[13]_i_1__2_n_0 ),
        .Q(txeq_preset[13]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[14] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[14]_i_1__2_n_0 ),
        .Q(txeq_preset[14]),
        .R(RST_CPLLRESET));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[15] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[15]_i_1__2_n_0 ),
        .Q(txeq_preset[15]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[16] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[16]_i_2__2_n_0 ),
        .Q(txeq_preset[16]),
        .R(RST_CPLLRESET));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[17] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[17]_i_1__2_n_0 ),
        .Q(txeq_preset[17]),
        .S(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[1] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[1]_i_1__2_n_0 ),
        .Q(txeq_preset[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[2] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[2]_i_1__2_n_0 ),
        .Q(txeq_preset[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[3] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[3]_i_1__2_n_0 ),
        .Q(txeq_preset[3]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[7] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[7]_i_1__2_n_0 ),
        .Q(txeq_preset[7]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txeq_preset[8]_i_1__2_n_0 ),
        .Q(txeq_preset[8]),
        .R(1'b0));
  FDSE #(
    .INIT(1'b0)) 
    \txeq_preset_reg[9] 
       (.C(CLK),
        .CE(cpllreset_reg),
        .D(\txeq_preset[9]_i_1__2_n_0 ),
        .Q(txeq_preset[9]),
        .S(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[0]_i_1__2 
       (.I0(\txeq_txcoeff_reg_n_0_[6] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(out0),
        .I3(txeq_preset[0]),
        .I4(\txeq_txcoeff[0]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[0]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[6] ),
        .I4(\txeq_txcoeff_reg_n_0_[7] ),
        .O(\txeq_txcoeff[0]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[10]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[10]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[9] ),
        .I4(\txeq_txcoeff[10]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[10]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[10]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[17] ),
        .I2(\txeq_txcoeff_reg_n_0_[16] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[10]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[11]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[11]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[10] ),
        .I4(\txeq_txcoeff[11]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[11]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[11]_i_2__2 
       (.I0(\txeq_txcoeff_reg_n_0_[18] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(\txeq_txcoeff_reg_n_0_[17] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[11]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[12]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[12]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[11] ),
        .I4(\txeq_txcoeff[12]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[12]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[12]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[0]),
        .I2(\txeq_txcoeff_reg_n_0_[18] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[12]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[13]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[13]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[12] ),
        .I4(\txeq_txcoeff[13]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[13]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[13]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[1]),
        .I2(txeq_deemph_reg2[0]),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[13]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[14]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[14]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[13] ),
        .I4(\txeq_txcoeff[14]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[14]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[14]_i_2__2 
       (.I0(txeq_deemph_reg2[2]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[1]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[14]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[15]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[15]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[14] ),
        .I4(\txeq_txcoeff[15]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[15]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[15]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(txeq_deemph_reg2[3]),
        .I2(txeq_deemph_reg2[2]),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[15]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[16]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[16]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[15] ),
        .I4(\txeq_txcoeff[16]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[16]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[16]_i_2__2 
       (.I0(txeq_deemph_reg2[4]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[3]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[16]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[17]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[17]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[16] ),
        .I4(\txeq_txcoeff[17]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[17]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0800FB000800)) 
    \txeq_txcoeff[17]_i_2__2 
       (.I0(txeq_deemph_reg2[5]),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I4(txeq_deemph_reg2[4]),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .O(\txeq_txcoeff[17]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABFFABAAABAAAB)) 
    \txeq_txcoeff[18]_i_1__2 
       (.I0(\FSM_onehot_fsm_tx[1]_i_2__2_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[6] ),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[5] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I4(txeq_control_reg2[0]),
        .I5(txeq_control_reg2[1]),
        .O(txeq_txcoeff));
  LUT6 #(
    .INIT(64'hFFFFAE00AE00AE00)) 
    \txeq_txcoeff[18]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(\txeq_txcoeff[18]_i_3__2_n_0 ),
        .I3(txeq_deemph_reg2[5]),
        .I4(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I5(\txeq_txcoeff_reg_n_0_[17] ),
        .O(\txeq_txcoeff[18]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \txeq_txcoeff[18]_i_3__2 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .O(\txeq_txcoeff[18]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[1]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[1]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[0] ),
        .I4(\txeq_txcoeff[1]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[1]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[8] ),
        .I2(\txeq_txcoeff_reg_n_0_[7] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[1]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[2]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[2]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[1] ),
        .I4(\txeq_txcoeff[2]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[2]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[9] ),
        .I2(\txeq_txcoeff_reg_n_0_[8] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[2]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[3]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[3]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[2] ),
        .I4(\txeq_txcoeff[3]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[3]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[10] ),
        .I2(\txeq_txcoeff_reg_n_0_[9] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[3]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[4]_i_1__2 
       (.I0(\txeq_txcoeff[4]_i_2__2_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[10] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[3] ),
        .O(\txeq_txcoeff[4]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[4]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[10] ),
        .I4(\txeq_txcoeff_reg_n_0_[11] ),
        .O(\txeq_txcoeff[4]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[5]_i_1__2 
       (.I0(\txeq_txcoeff[5]_i_2__2_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[11] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[4] ),
        .O(\txeq_txcoeff[5]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[5]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[11] ),
        .I4(\txeq_txcoeff_reg_n_0_[12] ),
        .O(\txeq_txcoeff[5]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFEAEAEA)) 
    \txeq_txcoeff[6]_i_1__2 
       (.I0(\txeq_txcoeff[6]_i_2__2_n_0 ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_reg_n_0_[12] ),
        .I3(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I4(\txeq_txcoeff_reg_n_0_[5] ),
        .O(\txeq_txcoeff[6]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hAA208A00)) 
    \txeq_txcoeff[6]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I3(\txeq_txcoeff_reg_n_0_[12] ),
        .I4(\txeq_txcoeff_reg_n_0_[13] ),
        .O(\txeq_txcoeff[6]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[7]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[7]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[6] ),
        .I4(\txeq_txcoeff[7]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[7]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[7]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[14] ),
        .I2(\txeq_txcoeff_reg_n_0_[13] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[7]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[8]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[8]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[7] ),
        .I4(\txeq_txcoeff[8]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[8]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[8]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[15] ),
        .I2(\txeq_txcoeff_reg_n_0_[14] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[8]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \txeq_txcoeff[9]_i_1__2 
       (.I0(out0),
        .I1(txeq_preset[9]),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[4] ),
        .I3(\txeq_txcoeff_reg_n_0_[8] ),
        .I4(\txeq_txcoeff[9]_i_2__2_n_0 ),
        .O(\txeq_txcoeff[9]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0ECF0A0A0A0A0)) 
    \txeq_txcoeff[9]_i_2__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I1(\txeq_txcoeff_reg_n_0_[16] ),
        .I2(\txeq_txcoeff_reg_n_0_[15] ),
        .I3(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I4(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I5(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .O(\txeq_txcoeff[9]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h4444F444)) 
    \txeq_txcoeff_cnt[0]_i_1__2 
       (.I0(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .I1(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I2(\FSM_onehot_fsm_tx_reg_n_0_[1] ),
        .I3(txeq_control_reg2[1]),
        .I4(txeq_control_reg2[0]),
        .O(txeq_txcoeff_cnt[0]));
  LUT3 #(
    .INIT(8'h28)) 
    \txeq_txcoeff_cnt[1]_i_1__2 
       (.I0(\FSM_onehot_fsm_tx_reg_n_0_[3] ),
        .I1(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .I2(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .O(txeq_txcoeff_cnt[1]));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_txcoeff_cnt[0]),
        .Q(\txeq_txcoeff_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txeq_txcoeff_cnt[1]),
        .Q(\txeq_txcoeff_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[0] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[0]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[10] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[10]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[11] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[11]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[12] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[12]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[13] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[13]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[14] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[14]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[15] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[15]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[16] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[16]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[17] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[17]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[18] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[18]_i_2__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[18] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[1] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[1]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[2] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[2]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[3] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[3]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[4] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[4]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[5] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[5]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[6] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[6]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[7] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[7]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[8] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[8]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txeq_txcoeff_reg[9] 
       (.C(CLK),
        .CE(txeq_txcoeff),
        .D(\txeq_txcoeff[9]_i_1__2_n_0 ),
        .Q(\txeq_txcoeff_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_rate" *) 
module pcie_7x_0_pcie_7x_0_pipe_rate
   (Q,
    USER_RESETOVRD_START,
    SYNC_TXSYNC_START,
    rxchbonden_0,
    USER_RATE_GEN3,
    RATE_DRP_START,
    RXSYSCLKSEL,
    RATE_DRP_X16X20_MODE,
    RATE_DRP_X16,
    RXRATE,
    USER_RATE_RXSYNC,
    SYNC_RATE_IDLE,
    SYNC_RXSYNC_START,
    USER_RATE_DONE,
    rate_txpmareset_0,
    USER_PCLK_SEL,
    D,
    rate_cpllpd_0,
    \qpllreset_in_reg1_reg[0] ,
    rate_cpllreset_0,
    out,
    txelecidle_reg2_reg,
    out1,
    RST_CPLLRESET,
    CLK,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    RATE_CPLLLOCK,
    RATE_QPLLLOCK,
    RATE_DRP_DONE,
    SYNC_MMCM_LOCK,
    RATE_PHYSTATUS,
    USER_TXRESETDONE,
    USER_RXRESETDONE,
    RATE_TXRATEDONE,
    RATE_RXRATEDONE,
    RATE_TXSYNC_DONE);
  output [4:0]Q;
  output USER_RESETOVRD_START;
  output SYNC_TXSYNC_START;
  output rxchbonden_0;
  output USER_RATE_GEN3;
  output RATE_DRP_START;
  output [0:0]RXSYSCLKSEL;
  output RATE_DRP_X16X20_MODE;
  output RATE_DRP_X16;
  output [0:0]RXRATE;
  output USER_RATE_RXSYNC;
  output SYNC_RATE_IDLE;
  output SYNC_RXSYNC_START;
  output USER_RATE_DONE;
  output rate_txpmareset_0;
  output USER_PCLK_SEL;
  output [0:0]D;
  output rate_cpllpd_0;
  output [0:0]\qpllreset_in_reg1_reg[0] ;
  output rate_cpllreset_0;
  input out;
  input txelecidle_reg2_reg;
  input [1:0]out1;
  input RST_CPLLRESET;
  input CLK;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input RATE_CPLLLOCK;
  input RATE_QPLLLOCK;
  input RATE_DRP_DONE;
  input SYNC_MMCM_LOCK;
  input RATE_PHYSTATUS;
  input USER_TXRESETDONE;
  input USER_RXRESETDONE;
  input RATE_TXRATEDONE;
  input RATE_RXRATEDONE;
  input RATE_TXSYNC_DONE;

  wire CLK;
  wire [0:0]D;
  wire [4:0]Q;
  wire RATE_CPLLLOCK;
  wire RATE_DRP_DONE;
  wire RATE_DRP_START;
  wire RATE_DRP_X16;
  wire RATE_DRP_X16X20_MODE;
  wire RATE_PHYSTATUS;
  wire RATE_QPLLLOCK;
  wire RATE_RXRATEDONE;
  wire RATE_TXRATEDONE;
  wire RATE_TXSYNC_DONE;
  wire RST_CPLLRESET;
  wire [0:0]RXRATE;
  wire [0:0]RXSYSCLKSEL;
  wire SYNC_MMCM_LOCK;
  wire SYNC_RATE_IDLE;
  wire SYNC_RXSYNC_START;
  wire SYNC_TXSYNC_START;
  wire USER_PCLK_SEL;
  wire USER_RATE_DONE;
  wire USER_RATE_GEN3;
  wire USER_RATE_RXSYNC;
  wire USER_RESETOVRD_START;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire cplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire cplllock_reg2;
  wire cpllpd_i_1_n_0;
  wire cpllreset_i_1__0_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg2;
  wire drp_start_i_1_n_0;
  wire drp_x16_i_1_n_0;
  wire drp_x16x20_mode_i_1_n_0;
  wire [4:0]fsm;
  wire fsm1;
  wire \fsm[0]_i_10_n_0 ;
  wire \fsm[0]_i_11_n_0 ;
  wire \fsm[0]_i_12_n_0 ;
  wire \fsm[0]_i_2_n_0 ;
  wire \fsm[0]_i_3_n_0 ;
  wire \fsm[0]_i_5_n_0 ;
  wire \fsm[0]_i_6_n_0 ;
  wire \fsm[0]_i_7_n_0 ;
  wire \fsm[0]_i_8_n_0 ;
  wire \fsm[1]_i_10_n_0 ;
  wire \fsm[1]_i_4_n_0 ;
  wire \fsm[1]_i_5_n_0 ;
  wire \fsm[1]_i_6_n_0 ;
  wire \fsm[1]_i_7_n_0 ;
  wire \fsm[1]_i_8_n_0 ;
  wire \fsm[1]_i_9_n_0 ;
  wire \fsm[2]_i_2_n_0 ;
  wire \fsm[2]_i_3_n_0 ;
  wire \fsm[2]_i_4_n_0 ;
  wire \fsm[2]_i_6_n_0 ;
  wire \fsm[3]_i_2_n_0 ;
  wire \fsm[3]_i_3_n_0 ;
  wire \fsm[3]_i_4_n_0 ;
  wire \fsm[3]_i_5_n_0 ;
  wire \fsm[3]_i_6_n_0 ;
  wire \fsm[4]_i_2_n_0 ;
  wire \fsm[4]_i_3_n_0 ;
  wire \fsm_reg[0]_i_4_n_0 ;
  wire \fsm_reg[1]_i_2_n_0 ;
  wire \fsm_reg[1]_i_3_n_0 ;
  wire gen3_exit;
  wire gen3_exit_i_1_n_0;
  wire gen3_exit_i_2_n_0;
  wire gen3_i_1_n_0;
  wire gen3_i_2_n_0;
  wire gen3_i_3_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  wire out;
  wire [1:0]out1;
  wire [3:0]p_0_in__0;
  wire pclk_sel_i_1_n_0;
  wire pclk_sel_i_2_n_0;
  wire phystatus;
  wire phystatus_i_1_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire phystatus_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire phystatus_reg2;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  wire pll_lock;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg2;
  wire qpllpd;
  wire qpllpd_i_1_n_0;
  wire qpllreset;
  wire qpllreset_i_1_n_0;
  wire [0:0]\qpllreset_in_reg1_reg[0] ;
  wire rate_cpllpd_0;
  wire rate_cpllreset_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_in_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_in_reg2;
  wire \rate_out[0]_i_1_n_0 ;
  wire \rate_out[0]_i_2_n_0 ;
  wire rate_txpmareset_0;
  wire ratedone;
  wire ratedone0;
  wire ratedone_i_1_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg2;
  wire rxchbonden_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxpmaresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxpmaresetdone_reg2;
  wire rxratedone;
  wire rxratedone_i_1_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxratedone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxratedone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_done_reg2;
  wire \sysclksel[0]_i_1_n_0 ;
  wire \sysclksel[0]_i_2_n_0 ;
  wire \txdata_wait_cnt[3]_i_2_n_0 ;
  wire [3:0]txdata_wait_cnt_reg__0;
  wire txelecidle_reg2_reg;
  wire txpmareset_i_1_n_0;
  wire txpmareset_i_2_n_0;
  wire txratedone;
  wire txratedone_i_1_n_0;
  wire txratedone_i_2_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txratedone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txratedone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_done_reg2;

  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    PIPE_RATE_IDLE_i_2
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(SYNC_RATE_IDLE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE cplllock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_CPLLLOCK),
        .Q(cplllock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE cplllock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1),
        .Q(cplllock_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0400FFFF04000000)) 
    cpllpd_i_1
       (.I0(Q[2]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[4]),
        .I4(qpllpd),
        .I5(rate_cpllpd_0),
        .O(cpllpd_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'h80080002)) 
    cpllpd_i_2
       (.I0(Q[0]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(qpllpd));
  FDRE #(
    .INIT(1'b0)) 
    cpllpd_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllpd_i_1_n_0),
        .Q(rate_cpllpd_0),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0400FFFF04000000)) 
    cpllreset_i_1__0
       (.I0(Q[2]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[4]),
        .I4(qpllreset),
        .I5(rate_cpllreset_0),
        .O(cpllreset_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'h80000024)) 
    cpllreset_i_2
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(Q[0]),
        .O(qpllreset));
  FDRE #(
    .INIT(1'b0)) 
    cpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllreset_i_1__0_n_0),
        .Q(rate_cpllreset_0),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE drp_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_DRP_DONE),
        .Q(drp_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE drp_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_done_reg1),
        .Q(drp_done_reg2),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h08200108)) 
    drp_start_i_1
       (.I0(Q[0]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[1]),
        .O(drp_start_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_start_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_start_i_1_n_0),
        .Q(RATE_DRP_START),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h09010010)) 
    drp_x16_i_1
       (.I0(Q[1]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[0]),
        .I4(Q[2]),
        .O(drp_x16_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_x16_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_x16_i_1_n_0),
        .Q(RATE_DRP_X16),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h0840003A)) 
    drp_x16x20_mode_i_1
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(Q[1]),
        .O(drp_x16x20_mode_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_x16x20_mode_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_x16x20_mode_i_1_n_0),
        .Q(RATE_DRP_X16X20_MODE),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \fsm[0]_i_1 
       (.I0(\fsm[0]_i_2_n_0 ),
        .I1(\fsm[0]_i_3_n_0 ),
        .I2(Q[4]),
        .I3(\fsm_reg[0]_i_4_n_0 ),
        .I4(Q[3]),
        .I5(\fsm[0]_i_5_n_0 ),
        .O(fsm[0]));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \fsm[0]_i_10 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg1[0]),
        .I2(rate_in_reg2[1]),
        .I3(rate_in_reg1[1]),
        .O(\fsm[0]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hBA8A000000000000)) 
    \fsm[0]_i_11 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .I4(drp_done_reg2),
        .I5(rst_idle_reg2),
        .O(\fsm[0]_i_11_n_0 ));
  LUT5 #(
    .INIT(32'hFF080808)) 
    \fsm[0]_i_12 
       (.I0(txresetdone_reg2),
        .I1(rxresetdone_reg2),
        .I2(phystatus_reg2),
        .I3(out),
        .I4(txelecidle_reg2_reg),
        .O(\fsm[0]_i_12_n_0 ));
  LUT5 #(
    .INIT(32'h03880333)) 
    \fsm[0]_i_2 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(txsync_done_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBB8BBB88BB8B88)) 
    \fsm[0]_i_3 
       (.I0(\fsm[0]_i_6_n_0 ),
        .I1(Q[2]),
        .I2(rxpmaresetdone_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(drp_done_reg2),
        .O(\fsm[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h03440344FF77FF44)) 
    \fsm[0]_i_5 
       (.I0(drp_done_reg2),
        .I1(Q[2]),
        .I2(pll_lock),
        .I3(Q[1]),
        .I4(\fsm[0]_i_10_n_0 ),
        .I5(Q[0]),
        .O(\fsm[0]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h47774744)) 
    \fsm[0]_i_6 
       (.I0(resetovrd_done_reg2),
        .I1(Q[1]),
        .I2(fsm1),
        .I3(Q[0]),
        .I4(drp_done_reg2),
        .O(\fsm[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h3088308830BB3088)) 
    \fsm[0]_i_7 
       (.I0(\fsm[0]_i_11_n_0 ),
        .I1(Q[1]),
        .I2(drp_done_reg2),
        .I3(Q[0]),
        .I4(mmcm_lock_reg2),
        .I5(rxpmaresetdone_reg2),
        .O(\fsm[0]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB8CC)) 
    \fsm[0]_i_8 
       (.I0(drp_done_reg2),
        .I1(Q[1]),
        .I2(\fsm[1]_i_9_n_0 ),
        .I3(Q[0]),
        .I4(\fsm[0]_i_12_n_0 ),
        .O(\fsm[0]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \fsm[0]_i_9 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .O(pll_lock));
  LUT6 #(
    .INIT(64'hBABBBFBBFFFFFFFF)) 
    \fsm[1]_i_10 
       (.I0(rst_idle_reg2),
        .I1(cplllock_reg2),
        .I2(rate_in_reg2[0]),
        .I3(rate_in_reg2[1]),
        .I4(qplllock_reg2),
        .I5(drp_done_reg2),
        .O(\fsm[1]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h30BBFC00)) 
    \fsm[1]_i_4 
       (.I0(drp_done_reg2),
        .I1(Q[2]),
        .I2(\fsm[1]_i_8_n_0 ),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hCC44300000773000)) 
    \fsm[1]_i_5 
       (.I0(\fsm[1]_i_9_n_0 ),
        .I1(Q[2]),
        .I2(\fsm[1]_i_10_n_0 ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(drp_done_reg2),
        .O(\fsm[1]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h70F040F0)) 
    \fsm[1]_i_6 
       (.I0(resetovrd_done_reg2),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(drp_done_reg2),
        .O(\fsm[1]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h03777700)) 
    \fsm[1]_i_7 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(txsync_done_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h4D7DFFFFFFFFFFFF)) 
    \fsm[1]_i_8 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .I4(rst_idle_reg2),
        .I5(Q[0]),
        .O(\fsm[1]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \fsm[1]_i_9 
       (.I0(txdata_wait_cnt_reg__0[3]),
        .I1(txdata_wait_cnt_reg__0[2]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[1]),
        .O(\fsm[1]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \fsm[2]_i_1 
       (.I0(\fsm[2]_i_2_n_0 ),
        .I1(Q[3]),
        .I2(\fsm[2]_i_3_n_0 ),
        .I3(Q[4]),
        .I4(\fsm[2]_i_4_n_0 ),
        .O(fsm[2]));
  LUT5 #(
    .INIT(32'h3C0C4040)) 
    \fsm[2]_i_2 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(txsync_done_reg2),
        .I4(Q[0]),
        .O(\fsm[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h505F3F3FF0F0F0F0)) 
    \fsm[2]_i_3 
       (.I0(resetovrd_done_reg2),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(drp_done_reg2),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\fsm[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h83FFF33383FFC000)) 
    \fsm[2]_i_4 
       (.I0(drp_done_reg2),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(\fsm[2]_i_6_n_0 ),
        .O(\fsm[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF2F2F2)) 
    \fsm[2]_i_5 
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .I2(gen3_exit),
        .I3(txelecidle_reg2_reg),
        .I4(out),
        .I5(ratedone),
        .O(fsm1));
  LUT6 #(
    .INIT(64'h8A80FFFF8A800000)) 
    \fsm[2]_i_6 
       (.I0(Q[0]),
        .I1(qplllock_reg2),
        .I2(gen3_i_2_n_0),
        .I3(cplllock_reg2),
        .I4(Q[1]),
        .I5(\fsm[3]_i_5_n_0 ),
        .O(\fsm[2]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hB888B88888BB8888)) 
    \fsm[3]_i_2 
       (.I0(\fsm[3]_i_4_n_0 ),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(\fsm[3]_i_5_n_0 ),
        .I5(Q[1]),
        .O(\fsm[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h26FFFFFF26FF0000)) 
    \fsm[3]_i_3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(rxsync_done_reg2),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(\fsm[3]_i_6_n_0 ),
        .O(\fsm[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF554555FFFFFFFF)) 
    \fsm[3]_i_4 
       (.I0(Q[2]),
        .I1(rst_idle_reg2),
        .I2(pll_lock),
        .I3(drp_done_reg2),
        .I4(Q[0]),
        .I5(Q[1]),
        .O(\fsm[3]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0000309A)) 
    \fsm[3]_i_5 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg1[0]),
        .I3(rate_in_reg1[1]),
        .I4(Q[0]),
        .O(\fsm[3]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hA0800080)) 
    \fsm[3]_i_6 
       (.I0(Q[2]),
        .I1(fsm1),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(resetovrd_done_reg2),
        .O(\fsm[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBC8C8C8C8C8C8C8C)) 
    \fsm[4]_i_1 
       (.I0(\fsm[4]_i_2_n_0 ),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(\fsm[4]_i_3_n_0 ),
        .I5(Q[2]),
        .O(fsm[4]));
  LUT4 #(
    .INIT(16'h26FF)) 
    \fsm[4]_i_2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(rxsync_done_reg2),
        .I3(Q[2]),
        .O(\fsm[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \fsm[4]_i_3 
       (.I0(Q[0]),
        .I1(drp_done_reg2),
        .O(\fsm[4]_i_3_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[0]),
        .Q(Q[0]),
        .S(RST_CPLLRESET));
  MUXF7 \fsm_reg[0]_i_4 
       (.I0(\fsm[0]_i_7_n_0 ),
        .I1(\fsm[0]_i_8_n_0 ),
        .O(\fsm_reg[0]_i_4_n_0 ),
        .S(Q[2]));
  FDSE #(
    .INIT(1'b0)) 
    \fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[1]),
        .Q(Q[1]),
        .S(RST_CPLLRESET));
  MUXF8 \fsm_reg[1]_i_1 
       (.I0(\fsm_reg[1]_i_2_n_0 ),
        .I1(\fsm_reg[1]_i_3_n_0 ),
        .O(fsm[1]),
        .S(Q[4]));
  MUXF7 \fsm_reg[1]_i_2 
       (.I0(\fsm[1]_i_4_n_0 ),
        .I1(\fsm[1]_i_5_n_0 ),
        .O(\fsm_reg[1]_i_2_n_0 ),
        .S(Q[3]));
  MUXF7 \fsm_reg[1]_i_3 
       (.I0(\fsm[1]_i_6_n_0 ),
        .I1(\fsm[1]_i_7_n_0 ),
        .O(\fsm_reg[1]_i_3_n_0 ),
        .S(Q[3]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[2]),
        .Q(Q[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[3]),
        .Q(Q[3]),
        .R(RST_CPLLRESET));
  MUXF7 \fsm_reg[3]_i_1 
       (.I0(\fsm[3]_i_2_n_0 ),
        .I1(\fsm[3]_i_3_n_0 ),
        .O(fsm[3]),
        .S(Q[4]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[4]),
        .Q(Q[4]),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    gen3_exit_i_1
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(Q[4]),
        .I3(gen3_exit_i_2_n_0),
        .I4(gen3_exit),
        .O(gen3_exit_i_1_n_0));
  LUT6 #(
    .INIT(64'h8000800000010000)) 
    gen3_exit_i_2
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(\fsm[0]_i_10_n_0 ),
        .I5(Q[2]),
        .O(gen3_exit_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gen3_exit_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_exit_i_1_n_0),
        .Q(gen3_exit),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h2FFFFFFF20000000)) 
    gen3_i_1
       (.I0(gen3_i_2_n_0),
        .I1(Q[4]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(gen3_i_3_n_0),
        .I5(USER_RATE_GEN3),
        .O(gen3_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    gen3_i_2
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .O(gen3_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT3 #(
    .INIT(8'h81)) 
    gen3_i_3
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[4]),
        .O(gen3_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gen3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_i_1_n_0),
        .Q(USER_RATE_GEN3),
        .R(RST_CPLLRESET));
  LUT1 #(
    .INIT(2'h1)) 
    \gtx_channel.gtxe2_channel_i_i_5 
       (.I0(USER_RATE_GEN3),
        .O(rxchbonden_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h06FF0600)) 
    pclk_sel_i_1
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .I2(Q[4]),
        .I3(pclk_sel_i_2_n_0),
        .I4(USER_PCLK_SEL),
        .O(pclk_sel_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT5 #(
    .INIT(32'h80020080)) 
    pclk_sel_i_2
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(pclk_sel_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    pclk_sel_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_i_1_n_0),
        .Q(USER_PCLK_SEL),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    phystatus_i_1
       (.I0(txratedone_i_2_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(phystatus_reg2),
        .I4(Q[0]),
        .I5(phystatus),
        .O(phystatus_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    phystatus_reg
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_i_1_n_0),
        .Q(phystatus),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE phystatus_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_PHYSTATUS),
        .Q(phystatus_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE phystatus_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_reg1),
        .Q(phystatus_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_QPLLLOCK),
        .Q(qplllock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qplllock_reg1),
        .Q(qplllock_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h4500FFFF45000000)) 
    qpllpd_i_1
       (.I0(Q[2]),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(Q[4]),
        .I4(qpllpd),
        .I5(D),
        .O(qpllpd_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    qpllpd_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qpllpd_i_1_n_0),
        .Q(D),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h4500FFFF45000000)) 
    qpllreset_i_1
       (.I0(Q[2]),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(Q[4]),
        .I4(qpllreset),
        .I5(\qpllreset_in_reg1_reg[0] ),
        .O(qpllreset_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    qpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_i_1_n_0),
        .Q(\qpllreset_in_reg1_reg[0] ),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    rate_done_reg1_i_1
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[4]),
        .O(USER_RATE_DONE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_tx_rate_q_reg ),
        .Q(rate_in_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rate_in_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_in_reg1[0]),
        .Q(rate_in_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_in_reg1[1]),
        .Q(rate_in_reg2[1]),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h02FFFFFF02000000)) 
    \rate_out[0]_i_1 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\rate_out[0]_i_2_n_0 ),
        .I5(RXRATE),
        .O(\rate_out[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8080808014141404)) 
    \rate_out[0]_i_2 
       (.I0(Q[1]),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(gen3_i_2_n_0),
        .I4(gen3_exit),
        .I5(Q[2]),
        .O(\rate_out[0]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rate_out_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rate_out[0]_i_1_n_0 ),
        .Q(RXRATE),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT5 #(
    .INIT(32'h08800000)) 
    rate_rxsync_reg1_i_1
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(USER_RATE_RXSYNC));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    ratedone_i_1
       (.I0(txratedone_i_2_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(ratedone0),
        .I4(Q[0]),
        .I5(ratedone),
        .O(ratedone_i_1_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    ratedone_i_2
       (.I0(phystatus),
        .I1(rxratedone),
        .I2(txratedone),
        .O(ratedone0));
  FDRE #(
    .INIT(1'b0)) 
    ratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(ratedone_i_1_n_0),
        .Q(ratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(resetovrd_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(resetovrd_done_reg1),
        .Q(resetovrd_done_reg2),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    resetovrd_start_reg1_i_1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(USER_RESETOVRD_START));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out1[1]),
        .Q(rst_idle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rst_idle_reg1),
        .Q(rst_idle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxpmaresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxpmaresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxpmaresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxpmaresetdone_reg1),
        .Q(rxpmaresetdone_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    rxratedone_i_1
       (.I0(txratedone_i_2_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(rxratedone_reg2),
        .I4(Q[0]),
        .I5(rxratedone),
        .O(rxratedone_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rxratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxratedone_i_1_n_0),
        .Q(rxratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxratedone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_RXRATEDONE),
        .Q(rxratedone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxratedone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxratedone_reg1),
        .Q(rxratedone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXRESETDONE),
        .Q(rxresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxresetdone_reg1),
        .Q(rxresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsync_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_done_reg1),
        .Q(rxsync_done_reg2),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    rxsync_start_reg1_i_1
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[4]),
        .O(SYNC_RXSYNC_START));
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \sysclksel[0]_i_1 
       (.I0(rate_in_reg2[1]),
        .I1(Q[4]),
        .I2(rate_in_reg2[0]),
        .I3(\sysclksel[0]_i_2_n_0 ),
        .I4(RXSYSCLKSEL),
        .O(\sysclksel[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'h80000080)) 
    \sysclksel[0]_i_2 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\sysclksel[0]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sysclksel_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\sysclksel[0]_i_1_n_0 ),
        .Q(RXSYSCLKSEL),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'h8A0A0A0A)) 
    \txdata_wait_cnt[0]_i_1 
       (.I0(\txdata_wait_cnt[3]_i_2_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'hA8282828)) 
    \txdata_wait_cnt[1]_i_1 
       (.I0(\txdata_wait_cnt[3]_i_2_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'hAA802A80)) 
    \txdata_wait_cnt[2]_i_1 
       (.I0(\txdata_wait_cnt[3]_i_2_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'hAAAA8000)) 
    \txdata_wait_cnt[3]_i_1 
       (.I0(\txdata_wait_cnt[3]_i_2_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'h10000000)) 
    \txdata_wait_cnt[3]_i_2 
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[3]),
        .O(\txdata_wait_cnt[3]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txdata_wait_cnt_reg__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txdata_wait_cnt_reg__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(txdata_wait_cnt_reg__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(txdata_wait_cnt_reg__0[3]),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h00AEFFFF00AE0000)) 
    txpmareset_i_1
       (.I0(gen3_exit),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[3]),
        .I4(txpmareset_i_2_n_0),
        .I5(rate_txpmareset_0),
        .O(txpmareset_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT5 #(
    .INIT(32'h80080020)) 
    txpmareset_i_2
       (.I0(Q[1]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(txpmareset_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    txpmareset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txpmareset_i_1_n_0),
        .Q(rate_txpmareset_0),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    txratedone_i_1
       (.I0(txratedone_i_2_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(txratedone_reg2),
        .I4(Q[0]),
        .I5(txratedone),
        .O(txratedone_i_1_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    txratedone_i_2
       (.I0(Q[2]),
        .I1(Q[4]),
        .O(txratedone_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    txratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txratedone_i_1_n_0),
        .Q(txratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txratedone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_TXRATEDONE),
        .Q(txratedone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txratedone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txratedone_reg1),
        .Q(txratedone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_TXRESETDONE),
        .Q(txresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txresetdone_reg1),
        .Q(txresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_TXSYNC_DONE),
        .Q(txsync_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_done_reg1),
        .Q(txsync_done_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'hFFFFFFFF02000000)) 
    txsync_start_reg1_i_1
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(Q[1]),
        .I5(out1[0]),
        .O(SYNC_TXSYNC_START));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_rate" *) 
module pcie_7x_0_pcie_7x_0_pipe_rate_24
   (Q,
    USER_RESETOVRD_START,
    SYNC_TXSYNC_START,
    QPLL_DRP_GEN3,
    rate_gen3_1,
    rxchbonden_1,
    RATE_DRP_START,
    RXSYSCLKSEL,
    RATE_DRP_X16X20_MODE,
    RATE_DRP_X16,
    RXRATE,
    USER_RATE_RXSYNC,
    SYNC_RATE_IDLE,
    SYNC_RXSYNC_START,
    USER_RATE_DONE,
    rate_txpmareset_1,
    USER_PCLK_SEL,
    D,
    rate_cpllpd_1,
    \qpllreset_in_reg1_reg[1] ,
    rate_cpllreset_1,
    out,
    txelecidle_reg2_reg,
    out1,
    USER_RATE_GEN3,
    rate_gen3_2,
    rate_gen3_3,
    RST_CPLLRESET,
    CLK,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    RATE_CPLLLOCK,
    RATE_QPLLLOCK,
    RATE_DRP_DONE,
    SYNC_MMCM_LOCK,
    RATE_PHYSTATUS,
    USER_TXRESETDONE,
    USER_RXRESETDONE,
    RATE_TXRATEDONE,
    RATE_RXRATEDONE,
    RATE_TXSYNC_DONE);
  output [4:0]Q;
  output USER_RESETOVRD_START;
  output SYNC_TXSYNC_START;
  output QPLL_DRP_GEN3;
  output rate_gen3_1;
  output rxchbonden_1;
  output RATE_DRP_START;
  output [0:0]RXSYSCLKSEL;
  output RATE_DRP_X16X20_MODE;
  output RATE_DRP_X16;
  output [0:0]RXRATE;
  output USER_RATE_RXSYNC;
  output SYNC_RATE_IDLE;
  output SYNC_RXSYNC_START;
  output USER_RATE_DONE;
  output rate_txpmareset_1;
  output USER_PCLK_SEL;
  output [0:0]D;
  output rate_cpllpd_1;
  output [0:0]\qpllreset_in_reg1_reg[1] ;
  output rate_cpllreset_1;
  input out;
  input txelecidle_reg2_reg;
  input [1:0]out1;
  input USER_RATE_GEN3;
  input rate_gen3_2;
  input rate_gen3_3;
  input RST_CPLLRESET;
  input CLK;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input RATE_CPLLLOCK;
  input RATE_QPLLLOCK;
  input RATE_DRP_DONE;
  input SYNC_MMCM_LOCK;
  input RATE_PHYSTATUS;
  input USER_TXRESETDONE;
  input USER_RXRESETDONE;
  input RATE_TXRATEDONE;
  input RATE_RXRATEDONE;
  input RATE_TXSYNC_DONE;

  wire CLK;
  wire [0:0]D;
  wire [4:0]Q;
  wire QPLL_DRP_GEN3;
  wire RATE_CPLLLOCK;
  wire RATE_DRP_DONE;
  wire RATE_DRP_START;
  wire RATE_DRP_X16;
  wire RATE_DRP_X16X20_MODE;
  wire RATE_PHYSTATUS;
  wire RATE_QPLLLOCK;
  wire RATE_RXRATEDONE;
  wire RATE_TXRATEDONE;
  wire RATE_TXSYNC_DONE;
  wire RST_CPLLRESET;
  wire [0:0]RXRATE;
  wire [0:0]RXSYSCLKSEL;
  wire SYNC_MMCM_LOCK;
  wire SYNC_RATE_IDLE;
  wire SYNC_RXSYNC_START;
  wire SYNC_TXSYNC_START;
  wire USER_PCLK_SEL;
  wire USER_RATE_DONE;
  wire USER_RATE_GEN3;
  wire USER_RATE_RXSYNC;
  wire USER_RESETOVRD_START;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire cplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire cplllock_reg2;
  wire cpllpd_i_1__0_n_0;
  wire cpllreset_i_1__1_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg2;
  wire drp_start_i_1__0_n_0;
  wire drp_x16_i_1__0_n_0;
  wire drp_x16x20_mode_i_1__0_n_0;
  wire [4:0]fsm;
  wire fsm1;
  wire \fsm[0]_i_10__0_n_0 ;
  wire \fsm[0]_i_11__0_n_0 ;
  wire \fsm[0]_i_12__0_n_0 ;
  wire \fsm[0]_i_2__2_n_0 ;
  wire \fsm[0]_i_3__1_n_0 ;
  wire \fsm[0]_i_5__0_n_0 ;
  wire \fsm[0]_i_6__0_n_0 ;
  wire \fsm[0]_i_7__0_n_0 ;
  wire \fsm[0]_i_8__0_n_0 ;
  wire \fsm[1]_i_10__0_n_0 ;
  wire \fsm[1]_i_4__0_n_0 ;
  wire \fsm[1]_i_5__0_n_0 ;
  wire \fsm[1]_i_6__0_n_0 ;
  wire \fsm[1]_i_7__0_n_0 ;
  wire \fsm[1]_i_8__0_n_0 ;
  wire \fsm[1]_i_9__0_n_0 ;
  wire \fsm[2]_i_2__0_n_0 ;
  wire \fsm[2]_i_3__0_n_0 ;
  wire \fsm[2]_i_4__0_n_0 ;
  wire \fsm[2]_i_6__0_n_0 ;
  wire \fsm[3]_i_2__0_n_0 ;
  wire \fsm[3]_i_3__0_n_0 ;
  wire \fsm[3]_i_4__0_n_0 ;
  wire \fsm[3]_i_5__0_n_0 ;
  wire \fsm[3]_i_6__0_n_0 ;
  wire \fsm[4]_i_2__0_n_0 ;
  wire \fsm[4]_i_3__0_n_0 ;
  wire \fsm_reg[0]_i_4__0_n_0 ;
  wire \fsm_reg[1]_i_2__0_n_0 ;
  wire \fsm_reg[1]_i_3__0_n_0 ;
  wire gen3_exit;
  wire gen3_exit_i_1__0_n_0;
  wire gen3_exit_i_2__0_n_0;
  wire gen3_i_1__0_n_0;
  wire gen3_i_2__0_n_0;
  wire gen3_i_3__0_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  wire out;
  wire [1:0]out1;
  wire [3:0]p_0_in__0;
  wire pclk_sel_i_1__0_n_0;
  wire pclk_sel_i_2__0_n_0;
  wire phystatus;
  wire phystatus_i_1__0_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire phystatus_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire phystatus_reg2;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  wire pll_lock;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg2;
  wire qpllpd;
  wire qpllpd_i_1__0_n_0;
  wire qpllreset;
  wire qpllreset_i_1__0_n_0;
  wire [0:0]\qpllreset_in_reg1_reg[1] ;
  wire rate_cpllpd_1;
  wire rate_cpllreset_1;
  wire rate_gen3_1;
  wire rate_gen3_2;
  wire rate_gen3_3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_in_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_in_reg2;
  wire \rate_out[0]_i_1__0_n_0 ;
  wire \rate_out[0]_i_2__0_n_0 ;
  wire rate_txpmareset_1;
  wire ratedone;
  wire ratedone0;
  wire ratedone_i_1__0_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg2;
  wire rxchbonden_1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxpmaresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxpmaresetdone_reg2;
  wire rxratedone;
  wire rxratedone_i_1__0_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxratedone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxratedone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_done_reg2;
  wire \sysclksel[0]_i_1__0_n_0 ;
  wire \sysclksel[0]_i_2__0_n_0 ;
  wire \txdata_wait_cnt[3]_i_2__0_n_0 ;
  wire [3:0]txdata_wait_cnt_reg__0__0;
  wire txelecidle_reg2_reg;
  wire txpmareset_i_1__0_n_0;
  wire txpmareset_i_2__0_n_0;
  wire txratedone;
  wire txratedone_i_1__0_n_0;
  wire txratedone_i_2__0_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txratedone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txratedone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_done_reg2;

  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    PIPE_RATE_IDLE_i_1
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(SYNC_RATE_IDLE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE cplllock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_CPLLLOCK),
        .Q(cplllock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE cplllock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1),
        .Q(cplllock_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0400FFFF04000000)) 
    cpllpd_i_1__0
       (.I0(Q[2]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[4]),
        .I4(qpllpd),
        .I5(rate_cpllpd_1),
        .O(cpllpd_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'h80080002)) 
    cpllpd_i_2__0
       (.I0(Q[0]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(qpllpd));
  FDRE #(
    .INIT(1'b0)) 
    cpllpd_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllpd_i_1__0_n_0),
        .Q(rate_cpllpd_1),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0400FFFF04000000)) 
    cpllreset_i_1__1
       (.I0(Q[2]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[4]),
        .I4(qpllreset),
        .I5(rate_cpllreset_1),
        .O(cpllreset_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'h80000024)) 
    cpllreset_i_2__0
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(Q[0]),
        .O(qpllreset));
  FDRE #(
    .INIT(1'b0)) 
    cpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllreset_i_1__1_n_0),
        .Q(rate_cpllreset_1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE drp_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_DRP_DONE),
        .Q(drp_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE drp_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_done_reg1),
        .Q(drp_done_reg2),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h08200108)) 
    drp_start_i_1__0
       (.I0(Q[0]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[1]),
        .O(drp_start_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_start_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_start_i_1__0_n_0),
        .Q(RATE_DRP_START),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h09010010)) 
    drp_x16_i_1__0
       (.I0(Q[1]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[0]),
        .I4(Q[2]),
        .O(drp_x16_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_x16_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_x16_i_1__0_n_0),
        .Q(RATE_DRP_X16),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h0840003A)) 
    drp_x16x20_mode_i_1__0
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(Q[1]),
        .O(drp_x16x20_mode_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_x16x20_mode_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_x16x20_mode_i_1__0_n_0),
        .Q(RATE_DRP_X16X20_MODE),
        .R(RST_CPLLRESET));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \fsm[0]_i_10__0 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg1[0]),
        .I2(rate_in_reg2[1]),
        .I3(rate_in_reg1[1]),
        .O(\fsm[0]_i_10__0_n_0 ));
  LUT6 #(
    .INIT(64'hBA8A000000000000)) 
    \fsm[0]_i_11__0 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .I4(drp_done_reg2),
        .I5(rst_idle_reg2),
        .O(\fsm[0]_i_11__0_n_0 ));
  LUT5 #(
    .INIT(32'hFF080808)) 
    \fsm[0]_i_12__0 
       (.I0(txresetdone_reg2),
        .I1(rxresetdone_reg2),
        .I2(phystatus_reg2),
        .I3(out),
        .I4(txelecidle_reg2_reg),
        .O(\fsm[0]_i_12__0_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \fsm[0]_i_1__1 
       (.I0(\fsm[0]_i_2__2_n_0 ),
        .I1(\fsm[0]_i_3__1_n_0 ),
        .I2(Q[4]),
        .I3(\fsm_reg[0]_i_4__0_n_0 ),
        .I4(Q[3]),
        .I5(\fsm[0]_i_5__0_n_0 ),
        .O(fsm[0]));
  LUT5 #(
    .INIT(32'h03880333)) 
    \fsm[0]_i_2__2 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(txsync_done_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[0]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBB8BBB88BB8B88)) 
    \fsm[0]_i_3__1 
       (.I0(\fsm[0]_i_6__0_n_0 ),
        .I1(Q[2]),
        .I2(rxpmaresetdone_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(drp_done_reg2),
        .O(\fsm[0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h03440344FF77FF44)) 
    \fsm[0]_i_5__0 
       (.I0(drp_done_reg2),
        .I1(Q[2]),
        .I2(pll_lock),
        .I3(Q[1]),
        .I4(\fsm[0]_i_10__0_n_0 ),
        .I5(Q[0]),
        .O(\fsm[0]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h47774744)) 
    \fsm[0]_i_6__0 
       (.I0(resetovrd_done_reg2),
        .I1(Q[1]),
        .I2(fsm1),
        .I3(Q[0]),
        .I4(drp_done_reg2),
        .O(\fsm[0]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h3088308830BB3088)) 
    \fsm[0]_i_7__0 
       (.I0(\fsm[0]_i_11__0_n_0 ),
        .I1(Q[1]),
        .I2(drp_done_reg2),
        .I3(Q[0]),
        .I4(mmcm_lock_reg2),
        .I5(rxpmaresetdone_reg2),
        .O(\fsm[0]_i_7__0_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB8CC)) 
    \fsm[0]_i_8__0 
       (.I0(drp_done_reg2),
        .I1(Q[1]),
        .I2(\fsm[1]_i_9__0_n_0 ),
        .I3(Q[0]),
        .I4(\fsm[0]_i_12__0_n_0 ),
        .O(\fsm[0]_i_8__0_n_0 ));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \fsm[0]_i_9__0 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .O(pll_lock));
  LUT6 #(
    .INIT(64'hBABBBFBBFFFFFFFF)) 
    \fsm[1]_i_10__0 
       (.I0(rst_idle_reg2),
        .I1(cplllock_reg2),
        .I2(rate_in_reg2[0]),
        .I3(rate_in_reg2[1]),
        .I4(qplllock_reg2),
        .I5(drp_done_reg2),
        .O(\fsm[1]_i_10__0_n_0 ));
  LUT5 #(
    .INIT(32'h30BBFC00)) 
    \fsm[1]_i_4__0 
       (.I0(drp_done_reg2),
        .I1(Q[2]),
        .I2(\fsm[1]_i_8__0_n_0 ),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[1]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hCC44300000773000)) 
    \fsm[1]_i_5__0 
       (.I0(\fsm[1]_i_9__0_n_0 ),
        .I1(Q[2]),
        .I2(\fsm[1]_i_10__0_n_0 ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(drp_done_reg2),
        .O(\fsm[1]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h70F040F0)) 
    \fsm[1]_i_6__0 
       (.I0(resetovrd_done_reg2),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(drp_done_reg2),
        .O(\fsm[1]_i_6__0_n_0 ));
  LUT5 #(
    .INIT(32'h03777700)) 
    \fsm[1]_i_7__0 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(txsync_done_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[1]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h4D7DFFFFFFFFFFFF)) 
    \fsm[1]_i_8__0 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .I4(rst_idle_reg2),
        .I5(Q[0]),
        .O(\fsm[1]_i_8__0_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \fsm[1]_i_9__0 
       (.I0(txdata_wait_cnt_reg__0__0[3]),
        .I1(txdata_wait_cnt_reg__0__0[2]),
        .I2(txdata_wait_cnt_reg__0__0[0]),
        .I3(txdata_wait_cnt_reg__0__0[1]),
        .O(\fsm[1]_i_9__0_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \fsm[2]_i_1__2 
       (.I0(\fsm[2]_i_2__0_n_0 ),
        .I1(Q[3]),
        .I2(\fsm[2]_i_3__0_n_0 ),
        .I3(Q[4]),
        .I4(\fsm[2]_i_4__0_n_0 ),
        .O(fsm[2]));
  LUT5 #(
    .INIT(32'h3C0C4040)) 
    \fsm[2]_i_2__0 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(txsync_done_reg2),
        .I4(Q[0]),
        .O(\fsm[2]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h505F3F3FF0F0F0F0)) 
    \fsm[2]_i_3__0 
       (.I0(resetovrd_done_reg2),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(drp_done_reg2),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\fsm[2]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h83FFF33383FFC000)) 
    \fsm[2]_i_4__0 
       (.I0(drp_done_reg2),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(\fsm[2]_i_6__0_n_0 ),
        .O(\fsm[2]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF2F2F2)) 
    \fsm[2]_i_5__0 
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .I2(gen3_exit),
        .I3(txelecidle_reg2_reg),
        .I4(out),
        .I5(ratedone),
        .O(fsm1));
  LUT6 #(
    .INIT(64'h8A80FFFF8A800000)) 
    \fsm[2]_i_6__0 
       (.I0(Q[0]),
        .I1(qplllock_reg2),
        .I2(gen3_i_2__0_n_0),
        .I3(cplllock_reg2),
        .I4(Q[1]),
        .I5(\fsm[3]_i_5__0_n_0 ),
        .O(\fsm[2]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'hB888B88888BB8888)) 
    \fsm[3]_i_2__0 
       (.I0(\fsm[3]_i_4__0_n_0 ),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(\fsm[3]_i_5__0_n_0 ),
        .I5(Q[1]),
        .O(\fsm[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h26FFFFFF26FF0000)) 
    \fsm[3]_i_3__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(rxsync_done_reg2),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(\fsm[3]_i_6__0_n_0 ),
        .O(\fsm[3]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFF554555FFFFFFFF)) 
    \fsm[3]_i_4__0 
       (.I0(Q[2]),
        .I1(rst_idle_reg2),
        .I2(pll_lock),
        .I3(drp_done_reg2),
        .I4(Q[0]),
        .I5(Q[1]),
        .O(\fsm[3]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h0000309A)) 
    \fsm[3]_i_5__0 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg1[0]),
        .I3(rate_in_reg1[1]),
        .I4(Q[0]),
        .O(\fsm[3]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'hA0800080)) 
    \fsm[3]_i_6__0 
       (.I0(Q[2]),
        .I1(fsm1),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(resetovrd_done_reg2),
        .O(\fsm[3]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'hBC8C8C8C8C8C8C8C)) 
    \fsm[4]_i_1__1 
       (.I0(\fsm[4]_i_2__0_n_0 ),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(\fsm[4]_i_3__0_n_0 ),
        .I5(Q[2]),
        .O(fsm[4]));
  LUT4 #(
    .INIT(16'h26FF)) 
    \fsm[4]_i_2__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(rxsync_done_reg2),
        .I3(Q[2]),
        .O(\fsm[4]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \fsm[4]_i_3__0 
       (.I0(Q[0]),
        .I1(drp_done_reg2),
        .O(\fsm[4]_i_3__0_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[0]),
        .Q(Q[0]),
        .S(RST_CPLLRESET));
  MUXF7 \fsm_reg[0]_i_4__0 
       (.I0(\fsm[0]_i_7__0_n_0 ),
        .I1(\fsm[0]_i_8__0_n_0 ),
        .O(\fsm_reg[0]_i_4__0_n_0 ),
        .S(Q[2]));
  FDSE #(
    .INIT(1'b0)) 
    \fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[1]),
        .Q(Q[1]),
        .S(RST_CPLLRESET));
  MUXF8 \fsm_reg[1]_i_1__0 
       (.I0(\fsm_reg[1]_i_2__0_n_0 ),
        .I1(\fsm_reg[1]_i_3__0_n_0 ),
        .O(fsm[1]),
        .S(Q[4]));
  MUXF7 \fsm_reg[1]_i_2__0 
       (.I0(\fsm[1]_i_4__0_n_0 ),
        .I1(\fsm[1]_i_5__0_n_0 ),
        .O(\fsm_reg[1]_i_2__0_n_0 ),
        .S(Q[3]));
  MUXF7 \fsm_reg[1]_i_3__0 
       (.I0(\fsm[1]_i_6__0_n_0 ),
        .I1(\fsm[1]_i_7__0_n_0 ),
        .O(\fsm_reg[1]_i_3__0_n_0 ),
        .S(Q[3]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[2]),
        .Q(Q[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[3]),
        .Q(Q[3]),
        .R(RST_CPLLRESET));
  MUXF7 \fsm_reg[3]_i_1__0 
       (.I0(\fsm[3]_i_2__0_n_0 ),
        .I1(\fsm[3]_i_3__0_n_0 ),
        .O(fsm[3]),
        .S(Q[4]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[4]),
        .Q(Q[4]),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    gen3_exit_i_1__0
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(Q[4]),
        .I3(gen3_exit_i_2__0_n_0),
        .I4(gen3_exit),
        .O(gen3_exit_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h8000800000010000)) 
    gen3_exit_i_2__0
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(\fsm[0]_i_10__0_n_0 ),
        .I5(Q[2]),
        .O(gen3_exit_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gen3_exit_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_exit_i_1__0_n_0),
        .Q(gen3_exit),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h2FFFFFFF20000000)) 
    gen3_i_1__0
       (.I0(gen3_i_2__0_n_0),
        .I1(Q[4]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(gen3_i_3__0_n_0),
        .I5(rate_gen3_1),
        .O(gen3_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    gen3_i_2__0
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .O(gen3_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT3 #(
    .INIT(8'h81)) 
    gen3_i_3__0
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[4]),
        .O(gen3_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gen3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_i_1__0_n_0),
        .Q(rate_gen3_1),
        .R(RST_CPLLRESET));
  LUT4 #(
    .INIT(16'h8000)) 
    gen3_reg1_i_1
       (.I0(rate_gen3_1),
        .I1(USER_RATE_GEN3),
        .I2(rate_gen3_2),
        .I3(rate_gen3_3),
        .O(QPLL_DRP_GEN3));
  LUT1 #(
    .INIT(2'h1)) 
    \gtx_channel.gtxe2_channel_i_i_5__0 
       (.I0(rate_gen3_1),
        .O(rxchbonden_1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h06FF0600)) 
    pclk_sel_i_1__0
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .I2(Q[4]),
        .I3(pclk_sel_i_2__0_n_0),
        .I4(USER_PCLK_SEL),
        .O(pclk_sel_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'h80020080)) 
    pclk_sel_i_2__0
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(pclk_sel_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    pclk_sel_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_i_1__0_n_0),
        .Q(USER_PCLK_SEL),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    phystatus_i_1__0
       (.I0(txratedone_i_2__0_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(phystatus_reg2),
        .I4(Q[0]),
        .I5(phystatus),
        .O(phystatus_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    phystatus_reg
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_i_1__0_n_0),
        .Q(phystatus),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE phystatus_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_PHYSTATUS),
        .Q(phystatus_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE phystatus_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_reg1),
        .Q(phystatus_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_QPLLLOCK),
        .Q(qplllock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qplllock_reg1),
        .Q(qplllock_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h4500FFFF45000000)) 
    qpllpd_i_1__0
       (.I0(Q[2]),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(Q[4]),
        .I4(qpllpd),
        .I5(D),
        .O(qpllpd_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    qpllpd_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qpllpd_i_1__0_n_0),
        .Q(D),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h4500FFFF45000000)) 
    qpllreset_i_1__0
       (.I0(Q[2]),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(Q[4]),
        .I4(qpllreset),
        .I5(\qpllreset_in_reg1_reg[1] ),
        .O(qpllreset_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    qpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_i_1__0_n_0),
        .Q(\qpllreset_in_reg1_reg[1] ),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    rate_done_reg1_i_1__0
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[4]),
        .O(USER_RATE_DONE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_tx_rate_q_reg ),
        .Q(rate_in_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rate_in_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_in_reg1[0]),
        .Q(rate_in_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_in_reg1[1]),
        .Q(rate_in_reg2[1]),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h02FFFFFF02000000)) 
    \rate_out[0]_i_1__0 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\rate_out[0]_i_2__0_n_0 ),
        .I5(RXRATE),
        .O(\rate_out[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h8080808014141404)) 
    \rate_out[0]_i_2__0 
       (.I0(Q[1]),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(gen3_i_2__0_n_0),
        .I4(gen3_exit),
        .I5(Q[2]),
        .O(\rate_out[0]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rate_out_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rate_out[0]_i_1__0_n_0 ),
        .Q(RXRATE),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'h08800000)) 
    rate_rxsync_reg1_i_1__0
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(USER_RATE_RXSYNC));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    ratedone_i_1__0
       (.I0(txratedone_i_2__0_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(ratedone0),
        .I4(Q[0]),
        .I5(ratedone),
        .O(ratedone_i_1__0_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    ratedone_i_2__0
       (.I0(phystatus),
        .I1(rxratedone),
        .I2(txratedone),
        .O(ratedone0));
  FDRE #(
    .INIT(1'b0)) 
    ratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(ratedone_i_1__0_n_0),
        .Q(ratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(resetovrd_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(resetovrd_done_reg1),
        .Q(resetovrd_done_reg2),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    resetovrd_start_reg1_i_1__0
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(USER_RESETOVRD_START));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out1[1]),
        .Q(rst_idle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rst_idle_reg1),
        .Q(rst_idle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxpmaresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxpmaresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxpmaresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxpmaresetdone_reg1),
        .Q(rxpmaresetdone_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    rxratedone_i_1__0
       (.I0(txratedone_i_2__0_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(rxratedone_reg2),
        .I4(Q[0]),
        .I5(rxratedone),
        .O(rxratedone_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rxratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxratedone_i_1__0_n_0),
        .Q(rxratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxratedone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_RXRATEDONE),
        .Q(rxratedone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxratedone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxratedone_reg1),
        .Q(rxratedone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXRESETDONE),
        .Q(rxresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxresetdone_reg1),
        .Q(rxresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsync_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_done_reg1),
        .Q(rxsync_done_reg2),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    rxsync_start_reg1_i_1__0
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[4]),
        .O(SYNC_RXSYNC_START));
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \sysclksel[0]_i_1__0 
       (.I0(rate_in_reg2[1]),
        .I1(Q[4]),
        .I2(rate_in_reg2[0]),
        .I3(\sysclksel[0]_i_2__0_n_0 ),
        .I4(RXSYSCLKSEL),
        .O(\sysclksel[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT5 #(
    .INIT(32'h80000080)) 
    \sysclksel[0]_i_2__0 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\sysclksel[0]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sysclksel_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\sysclksel[0]_i_1__0_n_0 ),
        .Q(RXSYSCLKSEL),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'h8A0A0A0A)) 
    \txdata_wait_cnt[0]_i_1__0 
       (.I0(\txdata_wait_cnt[3]_i_2__0_n_0 ),
        .I1(txdata_wait_cnt_reg__0__0[1]),
        .I2(txdata_wait_cnt_reg__0__0[0]),
        .I3(txdata_wait_cnt_reg__0__0[2]),
        .I4(txdata_wait_cnt_reg__0__0[3]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'hA8282828)) 
    \txdata_wait_cnt[1]_i_1__0 
       (.I0(\txdata_wait_cnt[3]_i_2__0_n_0 ),
        .I1(txdata_wait_cnt_reg__0__0[1]),
        .I2(txdata_wait_cnt_reg__0__0[0]),
        .I3(txdata_wait_cnt_reg__0__0[2]),
        .I4(txdata_wait_cnt_reg__0__0[3]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'hAA802A80)) 
    \txdata_wait_cnt[2]_i_1__0 
       (.I0(\txdata_wait_cnt[3]_i_2__0_n_0 ),
        .I1(txdata_wait_cnt_reg__0__0[1]),
        .I2(txdata_wait_cnt_reg__0__0[0]),
        .I3(txdata_wait_cnt_reg__0__0[2]),
        .I4(txdata_wait_cnt_reg__0__0[3]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'hAAAA8000)) 
    \txdata_wait_cnt[3]_i_1__0 
       (.I0(\txdata_wait_cnt[3]_i_2__0_n_0 ),
        .I1(txdata_wait_cnt_reg__0__0[1]),
        .I2(txdata_wait_cnt_reg__0__0[0]),
        .I3(txdata_wait_cnt_reg__0__0[2]),
        .I4(txdata_wait_cnt_reg__0__0[3]),
        .O(p_0_in__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'h10000000)) 
    \txdata_wait_cnt[3]_i_2__0 
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[3]),
        .O(\txdata_wait_cnt[3]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txdata_wait_cnt_reg__0__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txdata_wait_cnt_reg__0__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(txdata_wait_cnt_reg__0__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(txdata_wait_cnt_reg__0__0[3]),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h00AEFFFF00AE0000)) 
    txpmareset_i_1__0
       (.I0(gen3_exit),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[3]),
        .I4(txpmareset_i_2__0_n_0),
        .I5(rate_txpmareset_1),
        .O(txpmareset_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'h80080020)) 
    txpmareset_i_2__0
       (.I0(Q[1]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(txpmareset_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    txpmareset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txpmareset_i_1__0_n_0),
        .Q(rate_txpmareset_1),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    txratedone_i_1__0
       (.I0(txratedone_i_2__0_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(txratedone_reg2),
        .I4(Q[0]),
        .I5(txratedone),
        .O(txratedone_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    txratedone_i_2__0
       (.I0(Q[2]),
        .I1(Q[4]),
        .O(txratedone_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    txratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txratedone_i_1__0_n_0),
        .Q(txratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txratedone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_TXRATEDONE),
        .Q(txratedone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txratedone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txratedone_reg1),
        .Q(txratedone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_TXRESETDONE),
        .Q(txresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txresetdone_reg1),
        .Q(txresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_TXSYNC_DONE),
        .Q(txsync_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_done_reg1),
        .Q(txsync_done_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'hFFFFFFFF02000000)) 
    txsync_start_reg1_i_1__0
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(Q[1]),
        .I5(out1[0]),
        .O(SYNC_TXSYNC_START));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_rate" *) 
module pcie_7x_0_pcie_7x_0_pipe_rate_30
   (Q,
    USER_RESETOVRD_START,
    SYNC_TXSYNC_START,
    rxchbonden_2,
    rate_gen3_2,
    RATE_DRP_START,
    RXSYSCLKSEL,
    RATE_DRP_X16X20_MODE,
    RATE_DRP_X16,
    RXRATE,
    USER_RATE_RXSYNC,
    SYNC_RATE_IDLE,
    SYNC_RXSYNC_START,
    USER_RATE_DONE,
    rate_txpmareset_2,
    USER_PCLK_SEL,
    D,
    rate_cpllpd_2,
    \qpllreset_in_reg1_reg[2] ,
    rate_cpllreset_2,
    out,
    txelecidle_reg2_reg,
    out1,
    RST_CPLLRESET,
    CLK,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    RATE_CPLLLOCK,
    RATE_QPLLLOCK,
    RATE_DRP_DONE,
    SYNC_MMCM_LOCK,
    RATE_PHYSTATUS,
    USER_TXRESETDONE,
    USER_RXRESETDONE,
    RATE_TXRATEDONE,
    RATE_RXRATEDONE,
    RATE_TXSYNC_DONE);
  output [4:0]Q;
  output USER_RESETOVRD_START;
  output SYNC_TXSYNC_START;
  output rxchbonden_2;
  output rate_gen3_2;
  output RATE_DRP_START;
  output [0:0]RXSYSCLKSEL;
  output RATE_DRP_X16X20_MODE;
  output RATE_DRP_X16;
  output [0:0]RXRATE;
  output USER_RATE_RXSYNC;
  output SYNC_RATE_IDLE;
  output SYNC_RXSYNC_START;
  output USER_RATE_DONE;
  output rate_txpmareset_2;
  output USER_PCLK_SEL;
  output [0:0]D;
  output rate_cpllpd_2;
  output [0:0]\qpllreset_in_reg1_reg[2] ;
  output rate_cpllreset_2;
  input out;
  input txelecidle_reg2_reg;
  input [1:0]out1;
  input RST_CPLLRESET;
  input CLK;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input RATE_CPLLLOCK;
  input RATE_QPLLLOCK;
  input RATE_DRP_DONE;
  input SYNC_MMCM_LOCK;
  input RATE_PHYSTATUS;
  input USER_TXRESETDONE;
  input USER_RXRESETDONE;
  input RATE_TXRATEDONE;
  input RATE_RXRATEDONE;
  input RATE_TXSYNC_DONE;

  wire CLK;
  wire [0:0]D;
  wire [4:0]Q;
  wire RATE_CPLLLOCK;
  wire RATE_DRP_DONE;
  wire RATE_DRP_START;
  wire RATE_DRP_X16;
  wire RATE_DRP_X16X20_MODE;
  wire RATE_PHYSTATUS;
  wire RATE_QPLLLOCK;
  wire RATE_RXRATEDONE;
  wire RATE_TXRATEDONE;
  wire RATE_TXSYNC_DONE;
  wire RST_CPLLRESET;
  wire [0:0]RXRATE;
  wire [0:0]RXSYSCLKSEL;
  wire SYNC_MMCM_LOCK;
  wire SYNC_RATE_IDLE;
  wire SYNC_RXSYNC_START;
  wire SYNC_TXSYNC_START;
  wire USER_PCLK_SEL;
  wire USER_RATE_DONE;
  wire USER_RATE_RXSYNC;
  wire USER_RESETOVRD_START;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire cplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire cplllock_reg2;
  wire cpllpd_i_1__1_n_0;
  wire cpllreset_i_1__2_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg2;
  wire drp_start_i_1__1_n_0;
  wire drp_x16_i_1__1_n_0;
  wire drp_x16x20_mode_i_1__1_n_0;
  wire [4:0]fsm;
  wire fsm1;
  wire \fsm[0]_i_10__1_n_0 ;
  wire \fsm[0]_i_11__1_n_0 ;
  wire \fsm[0]_i_12__1_n_0 ;
  wire \fsm[0]_i_2__4_n_0 ;
  wire \fsm[0]_i_3__3_n_0 ;
  wire \fsm[0]_i_5__1_n_0 ;
  wire \fsm[0]_i_6__1_n_0 ;
  wire \fsm[0]_i_7__1_n_0 ;
  wire \fsm[0]_i_8__1_n_0 ;
  wire \fsm[1]_i_10__1_n_0 ;
  wire \fsm[1]_i_4__1_n_0 ;
  wire \fsm[1]_i_5__1_n_0 ;
  wire \fsm[1]_i_6__1_n_0 ;
  wire \fsm[1]_i_7__1_n_0 ;
  wire \fsm[1]_i_8__1_n_0 ;
  wire \fsm[1]_i_9__1_n_0 ;
  wire \fsm[2]_i_2__1_n_0 ;
  wire \fsm[2]_i_3__1_n_0 ;
  wire \fsm[2]_i_4__1_n_0 ;
  wire \fsm[2]_i_6__1_n_0 ;
  wire \fsm[3]_i_2__1_n_0 ;
  wire \fsm[3]_i_3__1_n_0 ;
  wire \fsm[3]_i_4__1_n_0 ;
  wire \fsm[3]_i_5__1_n_0 ;
  wire \fsm[3]_i_6__1_n_0 ;
  wire \fsm[4]_i_2__1_n_0 ;
  wire \fsm[4]_i_3__1_n_0 ;
  wire \fsm_reg[0]_i_4__1_n_0 ;
  wire \fsm_reg[1]_i_2__1_n_0 ;
  wire \fsm_reg[1]_i_3__1_n_0 ;
  wire gen3_exit;
  wire gen3_exit_i_1__1_n_0;
  wire gen3_exit_i_2__1_n_0;
  wire gen3_i_1__1_n_0;
  wire gen3_i_2__1_n_0;
  wire gen3_i_3__1_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  wire out;
  wire [1:0]out1;
  wire [3:0]p_0_in__0;
  wire pclk_sel_i_1__1_n_0;
  wire pclk_sel_i_2__1_n_0;
  wire phystatus;
  wire phystatus_i_1__1_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire phystatus_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire phystatus_reg2;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  wire pll_lock;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg2;
  wire qpllpd;
  wire qpllpd_i_1__1_n_0;
  wire qpllreset;
  wire qpllreset_i_1__1_n_0;
  wire [0:0]\qpllreset_in_reg1_reg[2] ;
  wire rate_cpllpd_2;
  wire rate_cpllreset_2;
  wire rate_gen3_2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_in_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_in_reg2;
  wire \rate_out[0]_i_1__1_n_0 ;
  wire \rate_out[0]_i_2__1_n_0 ;
  wire rate_txpmareset_2;
  wire ratedone;
  wire ratedone0;
  wire ratedone_i_1__1_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg2;
  wire rxchbonden_2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxpmaresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxpmaresetdone_reg2;
  wire rxratedone;
  wire rxratedone_i_1__1_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxratedone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxratedone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_done_reg2;
  wire \sysclksel[0]_i_1__1_n_0 ;
  wire \sysclksel[0]_i_2__1_n_0 ;
  wire \txdata_wait_cnt[3]_i_2__1_n_0 ;
  wire [3:0]txdata_wait_cnt_reg__0;
  wire txelecidle_reg2_reg;
  wire txpmareset_i_1__1_n_0;
  wire txpmareset_i_2__1_n_0;
  wire txratedone;
  wire txratedone_i_1__1_n_0;
  wire txratedone_i_2__1_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txratedone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txratedone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_done_reg2;

  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    PIPE_RATE_IDLE_i_3
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(SYNC_RATE_IDLE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE cplllock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_CPLLLOCK),
        .Q(cplllock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE cplllock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1),
        .Q(cplllock_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0400FFFF04000000)) 
    cpllpd_i_1__1
       (.I0(Q[2]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[4]),
        .I4(qpllpd),
        .I5(rate_cpllpd_2),
        .O(cpllpd_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'h80080002)) 
    cpllpd_i_2__1
       (.I0(Q[0]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(qpllpd));
  FDRE #(
    .INIT(1'b0)) 
    cpllpd_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllpd_i_1__1_n_0),
        .Q(rate_cpllpd_2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0400FFFF04000000)) 
    cpllreset_i_1__2
       (.I0(Q[2]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[4]),
        .I4(qpllreset),
        .I5(rate_cpllreset_2),
        .O(cpllreset_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h80000024)) 
    cpllreset_i_2__1
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(Q[0]),
        .O(qpllreset));
  FDRE #(
    .INIT(1'b0)) 
    cpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllreset_i_1__2_n_0),
        .Q(rate_cpllreset_2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE drp_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_DRP_DONE),
        .Q(drp_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE drp_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_done_reg1),
        .Q(drp_done_reg2),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h08200108)) 
    drp_start_i_1__1
       (.I0(Q[0]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[1]),
        .O(drp_start_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_start_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_start_i_1__1_n_0),
        .Q(RATE_DRP_START),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h09010010)) 
    drp_x16_i_1__1
       (.I0(Q[1]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[0]),
        .I4(Q[2]),
        .O(drp_x16_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_x16_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_x16_i_1__1_n_0),
        .Q(RATE_DRP_X16),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h0840003A)) 
    drp_x16x20_mode_i_1__1
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(Q[1]),
        .O(drp_x16x20_mode_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_x16x20_mode_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_x16x20_mode_i_1__1_n_0),
        .Q(RATE_DRP_X16X20_MODE),
        .R(RST_CPLLRESET));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \fsm[0]_i_10__1 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg1[0]),
        .I2(rate_in_reg2[1]),
        .I3(rate_in_reg1[1]),
        .O(\fsm[0]_i_10__1_n_0 ));
  LUT6 #(
    .INIT(64'hBA8A000000000000)) 
    \fsm[0]_i_11__1 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .I4(drp_done_reg2),
        .I5(rst_idle_reg2),
        .O(\fsm[0]_i_11__1_n_0 ));
  LUT5 #(
    .INIT(32'hFF080808)) 
    \fsm[0]_i_12__1 
       (.I0(txresetdone_reg2),
        .I1(rxresetdone_reg2),
        .I2(phystatus_reg2),
        .I3(out),
        .I4(txelecidle_reg2_reg),
        .O(\fsm[0]_i_12__1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \fsm[0]_i_1__2 
       (.I0(\fsm[0]_i_2__4_n_0 ),
        .I1(\fsm[0]_i_3__3_n_0 ),
        .I2(Q[4]),
        .I3(\fsm_reg[0]_i_4__1_n_0 ),
        .I4(Q[3]),
        .I5(\fsm[0]_i_5__1_n_0 ),
        .O(fsm[0]));
  LUT5 #(
    .INIT(32'h03880333)) 
    \fsm[0]_i_2__4 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(txsync_done_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[0]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'hBBBB8BBB88BB8B88)) 
    \fsm[0]_i_3__3 
       (.I0(\fsm[0]_i_6__1_n_0 ),
        .I1(Q[2]),
        .I2(rxpmaresetdone_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(drp_done_reg2),
        .O(\fsm[0]_i_3__3_n_0 ));
  LUT6 #(
    .INIT(64'h03440344FF77FF44)) 
    \fsm[0]_i_5__1 
       (.I0(drp_done_reg2),
        .I1(Q[2]),
        .I2(pll_lock),
        .I3(Q[1]),
        .I4(\fsm[0]_i_10__1_n_0 ),
        .I5(Q[0]),
        .O(\fsm[0]_i_5__1_n_0 ));
  LUT5 #(
    .INIT(32'h47774744)) 
    \fsm[0]_i_6__1 
       (.I0(resetovrd_done_reg2),
        .I1(Q[1]),
        .I2(fsm1),
        .I3(Q[0]),
        .I4(drp_done_reg2),
        .O(\fsm[0]_i_6__1_n_0 ));
  LUT6 #(
    .INIT(64'h3088308830BB3088)) 
    \fsm[0]_i_7__1 
       (.I0(\fsm[0]_i_11__1_n_0 ),
        .I1(Q[1]),
        .I2(drp_done_reg2),
        .I3(Q[0]),
        .I4(mmcm_lock_reg2),
        .I5(rxpmaresetdone_reg2),
        .O(\fsm[0]_i_7__1_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB8CC)) 
    \fsm[0]_i_8__1 
       (.I0(drp_done_reg2),
        .I1(Q[1]),
        .I2(\fsm[1]_i_9__1_n_0 ),
        .I3(Q[0]),
        .I4(\fsm[0]_i_12__1_n_0 ),
        .O(\fsm[0]_i_8__1_n_0 ));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \fsm[0]_i_9__1 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .O(pll_lock));
  LUT6 #(
    .INIT(64'hBABBBFBBFFFFFFFF)) 
    \fsm[1]_i_10__1 
       (.I0(rst_idle_reg2),
        .I1(cplllock_reg2),
        .I2(rate_in_reg2[0]),
        .I3(rate_in_reg2[1]),
        .I4(qplllock_reg2),
        .I5(drp_done_reg2),
        .O(\fsm[1]_i_10__1_n_0 ));
  LUT5 #(
    .INIT(32'h30BBFC00)) 
    \fsm[1]_i_4__1 
       (.I0(drp_done_reg2),
        .I1(Q[2]),
        .I2(\fsm[1]_i_8__1_n_0 ),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[1]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'hCC44300000773000)) 
    \fsm[1]_i_5__1 
       (.I0(\fsm[1]_i_9__1_n_0 ),
        .I1(Q[2]),
        .I2(\fsm[1]_i_10__1_n_0 ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(drp_done_reg2),
        .O(\fsm[1]_i_5__1_n_0 ));
  LUT5 #(
    .INIT(32'h70F040F0)) 
    \fsm[1]_i_6__1 
       (.I0(resetovrd_done_reg2),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(drp_done_reg2),
        .O(\fsm[1]_i_6__1_n_0 ));
  LUT5 #(
    .INIT(32'h03777700)) 
    \fsm[1]_i_7__1 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(txsync_done_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[1]_i_7__1_n_0 ));
  LUT6 #(
    .INIT(64'h4D7DFFFFFFFFFFFF)) 
    \fsm[1]_i_8__1 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .I4(rst_idle_reg2),
        .I5(Q[0]),
        .O(\fsm[1]_i_8__1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \fsm[1]_i_9__1 
       (.I0(txdata_wait_cnt_reg__0[3]),
        .I1(txdata_wait_cnt_reg__0[2]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[1]),
        .O(\fsm[1]_i_9__1_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \fsm[2]_i_1__4 
       (.I0(\fsm[2]_i_2__1_n_0 ),
        .I1(Q[3]),
        .I2(\fsm[2]_i_3__1_n_0 ),
        .I3(Q[4]),
        .I4(\fsm[2]_i_4__1_n_0 ),
        .O(fsm[2]));
  LUT5 #(
    .INIT(32'h3C0C4040)) 
    \fsm[2]_i_2__1 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(txsync_done_reg2),
        .I4(Q[0]),
        .O(\fsm[2]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h505F3F3FF0F0F0F0)) 
    \fsm[2]_i_3__1 
       (.I0(resetovrd_done_reg2),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(drp_done_reg2),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\fsm[2]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h83FFF33383FFC000)) 
    \fsm[2]_i_4__1 
       (.I0(drp_done_reg2),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(\fsm[2]_i_6__1_n_0 ),
        .O(\fsm[2]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF2F2F2)) 
    \fsm[2]_i_5__1 
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .I2(gen3_exit),
        .I3(txelecidle_reg2_reg),
        .I4(out),
        .I5(ratedone),
        .O(fsm1));
  LUT6 #(
    .INIT(64'h8A80FFFF8A800000)) 
    \fsm[2]_i_6__1 
       (.I0(Q[0]),
        .I1(qplllock_reg2),
        .I2(gen3_i_2__1_n_0),
        .I3(cplllock_reg2),
        .I4(Q[1]),
        .I5(\fsm[3]_i_5__1_n_0 ),
        .O(\fsm[2]_i_6__1_n_0 ));
  LUT6 #(
    .INIT(64'hB888B88888BB8888)) 
    \fsm[3]_i_2__1 
       (.I0(\fsm[3]_i_4__1_n_0 ),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(\fsm[3]_i_5__1_n_0 ),
        .I5(Q[1]),
        .O(\fsm[3]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h26FFFFFF26FF0000)) 
    \fsm[3]_i_3__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(rxsync_done_reg2),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(\fsm[3]_i_6__1_n_0 ),
        .O(\fsm[3]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hFF554555FFFFFFFF)) 
    \fsm[3]_i_4__1 
       (.I0(Q[2]),
        .I1(rst_idle_reg2),
        .I2(pll_lock),
        .I3(drp_done_reg2),
        .I4(Q[0]),
        .I5(Q[1]),
        .O(\fsm[3]_i_4__1_n_0 ));
  LUT5 #(
    .INIT(32'h0000309A)) 
    \fsm[3]_i_5__1 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg1[0]),
        .I3(rate_in_reg1[1]),
        .I4(Q[0]),
        .O(\fsm[3]_i_5__1_n_0 ));
  LUT5 #(
    .INIT(32'hA0800080)) 
    \fsm[3]_i_6__1 
       (.I0(Q[2]),
        .I1(fsm1),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(resetovrd_done_reg2),
        .O(\fsm[3]_i_6__1_n_0 ));
  LUT6 #(
    .INIT(64'hBC8C8C8C8C8C8C8C)) 
    \fsm[4]_i_1__2 
       (.I0(\fsm[4]_i_2__1_n_0 ),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(\fsm[4]_i_3__1_n_0 ),
        .I5(Q[2]),
        .O(fsm[4]));
  LUT4 #(
    .INIT(16'h26FF)) 
    \fsm[4]_i_2__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(rxsync_done_reg2),
        .I3(Q[2]),
        .O(\fsm[4]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \fsm[4]_i_3__1 
       (.I0(Q[0]),
        .I1(drp_done_reg2),
        .O(\fsm[4]_i_3__1_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[0]),
        .Q(Q[0]),
        .S(RST_CPLLRESET));
  MUXF7 \fsm_reg[0]_i_4__1 
       (.I0(\fsm[0]_i_7__1_n_0 ),
        .I1(\fsm[0]_i_8__1_n_0 ),
        .O(\fsm_reg[0]_i_4__1_n_0 ),
        .S(Q[2]));
  FDSE #(
    .INIT(1'b0)) 
    \fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[1]),
        .Q(Q[1]),
        .S(RST_CPLLRESET));
  MUXF8 \fsm_reg[1]_i_1__1 
       (.I0(\fsm_reg[1]_i_2__1_n_0 ),
        .I1(\fsm_reg[1]_i_3__1_n_0 ),
        .O(fsm[1]),
        .S(Q[4]));
  MUXF7 \fsm_reg[1]_i_2__1 
       (.I0(\fsm[1]_i_4__1_n_0 ),
        .I1(\fsm[1]_i_5__1_n_0 ),
        .O(\fsm_reg[1]_i_2__1_n_0 ),
        .S(Q[3]));
  MUXF7 \fsm_reg[1]_i_3__1 
       (.I0(\fsm[1]_i_6__1_n_0 ),
        .I1(\fsm[1]_i_7__1_n_0 ),
        .O(\fsm_reg[1]_i_3__1_n_0 ),
        .S(Q[3]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[2]),
        .Q(Q[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[3]),
        .Q(Q[3]),
        .R(RST_CPLLRESET));
  MUXF7 \fsm_reg[3]_i_1__1 
       (.I0(\fsm[3]_i_2__1_n_0 ),
        .I1(\fsm[3]_i_3__1_n_0 ),
        .O(fsm[3]),
        .S(Q[4]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[4]),
        .Q(Q[4]),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    gen3_exit_i_1__1
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(Q[4]),
        .I3(gen3_exit_i_2__1_n_0),
        .I4(gen3_exit),
        .O(gen3_exit_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h8000800000010000)) 
    gen3_exit_i_2__1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(\fsm[0]_i_10__1_n_0 ),
        .I5(Q[2]),
        .O(gen3_exit_i_2__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gen3_exit_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_exit_i_1__1_n_0),
        .Q(gen3_exit),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h2FFFFFFF20000000)) 
    gen3_i_1__1
       (.I0(gen3_i_2__1_n_0),
        .I1(Q[4]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(gen3_i_3__1_n_0),
        .I5(rate_gen3_2),
        .O(gen3_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    gen3_i_2__1
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .O(gen3_i_2__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'h81)) 
    gen3_i_3__1
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[4]),
        .O(gen3_i_3__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gen3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_i_1__1_n_0),
        .Q(rate_gen3_2),
        .R(RST_CPLLRESET));
  LUT1 #(
    .INIT(2'h1)) 
    \gtx_channel.gtxe2_channel_i_i_5__1 
       (.I0(rate_gen3_2),
        .O(rxchbonden_2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h06FF0600)) 
    pclk_sel_i_1__1
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .I2(Q[4]),
        .I3(pclk_sel_i_2__1_n_0),
        .I4(USER_PCLK_SEL),
        .O(pclk_sel_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'h80020080)) 
    pclk_sel_i_2__1
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(pclk_sel_i_2__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    pclk_sel_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_i_1__1_n_0),
        .Q(USER_PCLK_SEL),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    phystatus_i_1__1
       (.I0(txratedone_i_2__1_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(phystatus_reg2),
        .I4(Q[0]),
        .I5(phystatus),
        .O(phystatus_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    phystatus_reg
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_i_1__1_n_0),
        .Q(phystatus),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE phystatus_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_PHYSTATUS),
        .Q(phystatus_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE phystatus_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_reg1),
        .Q(phystatus_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_QPLLLOCK),
        .Q(qplllock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qplllock_reg1),
        .Q(qplllock_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h4500FFFF45000000)) 
    qpllpd_i_1__1
       (.I0(Q[2]),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(Q[4]),
        .I4(qpllpd),
        .I5(D),
        .O(qpllpd_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    qpllpd_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qpllpd_i_1__1_n_0),
        .Q(D),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h4500FFFF45000000)) 
    qpllreset_i_1__1
       (.I0(Q[2]),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(Q[4]),
        .I4(qpllreset),
        .I5(\qpllreset_in_reg1_reg[2] ),
        .O(qpllreset_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    qpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_i_1__1_n_0),
        .Q(\qpllreset_in_reg1_reg[2] ),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    rate_done_reg1_i_1__1
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[4]),
        .O(USER_RATE_DONE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_tx_rate_q_reg ),
        .Q(rate_in_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rate_in_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_in_reg1[0]),
        .Q(rate_in_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_in_reg1[1]),
        .Q(rate_in_reg2[1]),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h02FFFFFF02000000)) 
    \rate_out[0]_i_1__1 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\rate_out[0]_i_2__1_n_0 ),
        .I5(RXRATE),
        .O(\rate_out[0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h8080808014141404)) 
    \rate_out[0]_i_2__1 
       (.I0(Q[1]),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(gen3_i_2__1_n_0),
        .I4(gen3_exit),
        .I5(Q[2]),
        .O(\rate_out[0]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rate_out_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rate_out[0]_i_1__1_n_0 ),
        .Q(RXRATE),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'h08800000)) 
    rate_rxsync_reg1_i_1__1
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(USER_RATE_RXSYNC));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    ratedone_i_1__1
       (.I0(txratedone_i_2__1_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(ratedone0),
        .I4(Q[0]),
        .I5(ratedone),
        .O(ratedone_i_1__1_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    ratedone_i_2__1
       (.I0(phystatus),
        .I1(rxratedone),
        .I2(txratedone),
        .O(ratedone0));
  FDRE #(
    .INIT(1'b0)) 
    ratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(ratedone_i_1__1_n_0),
        .Q(ratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(resetovrd_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(resetovrd_done_reg1),
        .Q(resetovrd_done_reg2),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    resetovrd_start_reg1_i_1__1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(USER_RESETOVRD_START));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out1[1]),
        .Q(rst_idle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rst_idle_reg1),
        .Q(rst_idle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxpmaresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxpmaresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxpmaresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxpmaresetdone_reg1),
        .Q(rxpmaresetdone_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    rxratedone_i_1__1
       (.I0(txratedone_i_2__1_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(rxratedone_reg2),
        .I4(Q[0]),
        .I5(rxratedone),
        .O(rxratedone_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rxratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxratedone_i_1__1_n_0),
        .Q(rxratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxratedone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_RXRATEDONE),
        .Q(rxratedone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxratedone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxratedone_reg1),
        .Q(rxratedone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXRESETDONE),
        .Q(rxresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxresetdone_reg1),
        .Q(rxresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsync_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_done_reg1),
        .Q(rxsync_done_reg2),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    rxsync_start_reg1_i_1__1
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[4]),
        .O(SYNC_RXSYNC_START));
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \sysclksel[0]_i_1__1 
       (.I0(rate_in_reg2[1]),
        .I1(Q[4]),
        .I2(rate_in_reg2[0]),
        .I3(\sysclksel[0]_i_2__1_n_0 ),
        .I4(RXSYSCLKSEL),
        .O(\sysclksel[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h80000080)) 
    \sysclksel[0]_i_2__1 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\sysclksel[0]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sysclksel_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\sysclksel[0]_i_1__1_n_0 ),
        .Q(RXSYSCLKSEL),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'h8A0A0A0A)) 
    \txdata_wait_cnt[0]_i_1__1 
       (.I0(\txdata_wait_cnt[3]_i_2__1_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'hA8282828)) 
    \txdata_wait_cnt[1]_i_1__1 
       (.I0(\txdata_wait_cnt[3]_i_2__1_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'hAA802A80)) 
    \txdata_wait_cnt[2]_i_1__1 
       (.I0(\txdata_wait_cnt[3]_i_2__1_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'hAAAA8000)) 
    \txdata_wait_cnt[3]_i_1__1 
       (.I0(\txdata_wait_cnt[3]_i_2__1_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'h10000000)) 
    \txdata_wait_cnt[3]_i_2__1 
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[3]),
        .O(\txdata_wait_cnt[3]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txdata_wait_cnt_reg__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txdata_wait_cnt_reg__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(txdata_wait_cnt_reg__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(txdata_wait_cnt_reg__0[3]),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h00AEFFFF00AE0000)) 
    txpmareset_i_1__1
       (.I0(gen3_exit),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[3]),
        .I4(txpmareset_i_2__1_n_0),
        .I5(rate_txpmareset_2),
        .O(txpmareset_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'h80080020)) 
    txpmareset_i_2__1
       (.I0(Q[1]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(txpmareset_i_2__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    txpmareset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txpmareset_i_1__1_n_0),
        .Q(rate_txpmareset_2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    txratedone_i_1__1
       (.I0(txratedone_i_2__1_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(txratedone_reg2),
        .I4(Q[0]),
        .I5(txratedone),
        .O(txratedone_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    txratedone_i_2__1
       (.I0(Q[2]),
        .I1(Q[4]),
        .O(txratedone_i_2__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    txratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txratedone_i_1__1_n_0),
        .Q(txratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txratedone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_TXRATEDONE),
        .Q(txratedone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txratedone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txratedone_reg1),
        .Q(txratedone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_TXRESETDONE),
        .Q(txresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txresetdone_reg1),
        .Q(txresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_TXSYNC_DONE),
        .Q(txsync_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_done_reg1),
        .Q(txsync_done_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'hFFFFFFFF02000000)) 
    txsync_start_reg1_i_1__1
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(Q[1]),
        .I5(out1[0]),
        .O(SYNC_TXSYNC_START));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_rate" *) 
module pcie_7x_0_pcie_7x_0_pipe_rate_36
   (Q,
    USER_RESETOVRD_START,
    SYNC_TXSYNC_START,
    rxchbonden_3,
    rate_gen3_3,
    RATE_DRP_START,
    RXSYSCLKSEL,
    RATE_DRP_X16X20_MODE,
    RATE_DRP_X16,
    RXRATE,
    USER_RATE_RXSYNC,
    SYNC_RATE_IDLE,
    SYNC_RXSYNC_START,
    USER_RATE_DONE,
    rate_txpmareset_3,
    USER_PCLK_SEL,
    D,
    rate_cpllpd_3,
    \qpllreset_in_reg1_reg[3] ,
    rate_cpllreset_3,
    out,
    txelecidle_reg2_reg,
    out1,
    RST_CPLLRESET,
    CLK,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    RATE_CPLLLOCK,
    QPLL_QPLLLOCK,
    RATE_DRP_DONE,
    SYNC_MMCM_LOCK,
    RATE_PHYSTATUS,
    USER_TXRESETDONE,
    USER_RXRESETDONE,
    RATE_TXRATEDONE,
    RATE_RXRATEDONE,
    RATE_TXSYNC_DONE);
  output [4:0]Q;
  output USER_RESETOVRD_START;
  output SYNC_TXSYNC_START;
  output rxchbonden_3;
  output rate_gen3_3;
  output RATE_DRP_START;
  output [0:0]RXSYSCLKSEL;
  output RATE_DRP_X16X20_MODE;
  output RATE_DRP_X16;
  output [0:0]RXRATE;
  output USER_RATE_RXSYNC;
  output SYNC_RATE_IDLE;
  output SYNC_RXSYNC_START;
  output USER_RATE_DONE;
  output rate_txpmareset_3;
  output USER_PCLK_SEL;
  output [0:0]D;
  output rate_cpllpd_3;
  output [0:0]\qpllreset_in_reg1_reg[3] ;
  output rate_cpllreset_3;
  input out;
  input txelecidle_reg2_reg;
  input [1:0]out1;
  input RST_CPLLRESET;
  input CLK;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input RATE_CPLLLOCK;
  input QPLL_QPLLLOCK;
  input RATE_DRP_DONE;
  input SYNC_MMCM_LOCK;
  input RATE_PHYSTATUS;
  input USER_TXRESETDONE;
  input USER_RXRESETDONE;
  input RATE_TXRATEDONE;
  input RATE_RXRATEDONE;
  input RATE_TXSYNC_DONE;

  wire CLK;
  wire [0:0]D;
  wire [4:0]Q;
  wire QPLL_QPLLLOCK;
  wire RATE_CPLLLOCK;
  wire RATE_DRP_DONE;
  wire RATE_DRP_START;
  wire RATE_DRP_X16;
  wire RATE_DRP_X16X20_MODE;
  wire RATE_PHYSTATUS;
  wire RATE_RXRATEDONE;
  wire RATE_TXRATEDONE;
  wire RATE_TXSYNC_DONE;
  wire RST_CPLLRESET;
  wire [0:0]RXRATE;
  wire [0:0]RXSYSCLKSEL;
  wire SYNC_MMCM_LOCK;
  wire SYNC_RATE_IDLE;
  wire SYNC_RXSYNC_START;
  wire SYNC_TXSYNC_START;
  wire USER_PCLK_SEL;
  wire USER_RATE_DONE;
  wire USER_RATE_RXSYNC;
  wire USER_RESETOVRD_START;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire cplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire cplllock_reg2;
  wire cpllpd_i_1__2_n_0;
  wire cpllreset_i_1__3_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg2;
  wire drp_start_i_1__2_n_0;
  wire drp_x16_i_1__2_n_0;
  wire drp_x16x20_mode_i_1__2_n_0;
  wire [4:0]fsm;
  wire fsm1;
  wire \fsm[0]_i_10__2_n_0 ;
  wire \fsm[0]_i_11__2_n_0 ;
  wire \fsm[0]_i_12__2_n_0 ;
  wire \fsm[0]_i_2__6_n_0 ;
  wire \fsm[0]_i_3__5_n_0 ;
  wire \fsm[0]_i_5__2_n_0 ;
  wire \fsm[0]_i_6__2_n_0 ;
  wire \fsm[0]_i_7__2_n_0 ;
  wire \fsm[0]_i_8__2_n_0 ;
  wire \fsm[1]_i_10__2_n_0 ;
  wire \fsm[1]_i_4__2_n_0 ;
  wire \fsm[1]_i_5__2_n_0 ;
  wire \fsm[1]_i_6__2_n_0 ;
  wire \fsm[1]_i_7__2_n_0 ;
  wire \fsm[1]_i_8__2_n_0 ;
  wire \fsm[1]_i_9__2_n_0 ;
  wire \fsm[2]_i_2__2_n_0 ;
  wire \fsm[2]_i_3__2_n_0 ;
  wire \fsm[2]_i_4__2_n_0 ;
  wire \fsm[2]_i_6__2_n_0 ;
  wire \fsm[3]_i_2__2_n_0 ;
  wire \fsm[3]_i_3__2_n_0 ;
  wire \fsm[3]_i_4__2_n_0 ;
  wire \fsm[3]_i_5__2_n_0 ;
  wire \fsm[3]_i_6__2_n_0 ;
  wire \fsm[4]_i_2__2_n_0 ;
  wire \fsm[4]_i_3__2_n_0 ;
  wire \fsm_reg[0]_i_4__2_n_0 ;
  wire \fsm_reg[1]_i_2__2_n_0 ;
  wire \fsm_reg[1]_i_3__2_n_0 ;
  wire gen3_exit;
  wire gen3_exit_i_1__2_n_0;
  wire gen3_exit_i_2__2_n_0;
  wire gen3_i_1__2_n_0;
  wire gen3_i_2__2_n_0;
  wire gen3_i_3__2_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  wire out;
  wire [1:0]out1;
  wire [3:0]p_0_in__0;
  wire pclk_sel_i_1__2_n_0;
  wire pclk_sel_i_2__2_n_0;
  wire phystatus;
  wire phystatus_i_1__2_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire phystatus_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire phystatus_reg2;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  wire pll_lock;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg2;
  wire qpllpd;
  wire qpllpd_i_1__2_n_0;
  wire qpllreset;
  wire qpllreset_i_1__2_n_0;
  wire [0:0]\qpllreset_in_reg1_reg[3] ;
  wire rate_cpllpd_3;
  wire rate_cpllreset_3;
  wire rate_gen3_3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_in_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_in_reg2;
  wire \rate_out[0]_i_1__2_n_0 ;
  wire \rate_out[0]_i_2__2_n_0 ;
  wire rate_txpmareset_3;
  wire ratedone;
  wire ratedone0;
  wire ratedone_i_1__2_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg2;
  wire rxchbonden_3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxpmaresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxpmaresetdone_reg2;
  wire rxratedone;
  wire rxratedone_i_1__2_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxratedone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxratedone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_done_reg2;
  wire \sysclksel[0]_i_1__2_n_0 ;
  wire \sysclksel[0]_i_2__2_n_0 ;
  wire \txdata_wait_cnt[3]_i_2__2_n_0 ;
  wire [3:0]txdata_wait_cnt_reg__0;
  wire txelecidle_reg2_reg;
  wire txpmareset_i_1__2_n_0;
  wire txpmareset_i_2__2_n_0;
  wire txratedone;
  wire txratedone_i_1__2_n_0;
  wire txratedone_i_2__2_n_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txratedone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txratedone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_done_reg2;

  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    PIPE_RATE_IDLE_i_4
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(SYNC_RATE_IDLE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE cplllock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_CPLLLOCK),
        .Q(cplllock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE cplllock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1),
        .Q(cplllock_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0400FFFF04000000)) 
    cpllpd_i_1__2
       (.I0(Q[2]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[4]),
        .I4(qpllpd),
        .I5(rate_cpllpd_3),
        .O(cpllpd_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'h80080002)) 
    cpllpd_i_2__2
       (.I0(Q[0]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(qpllpd));
  FDRE #(
    .INIT(1'b0)) 
    cpllpd_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllpd_i_1__2_n_0),
        .Q(rate_cpllpd_3),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0400FFFF04000000)) 
    cpllreset_i_1__3
       (.I0(Q[2]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[4]),
        .I4(qpllreset),
        .I5(rate_cpllreset_3),
        .O(cpllreset_i_1__3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT5 #(
    .INIT(32'h80000024)) 
    cpllreset_i_2__2
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(Q[0]),
        .O(qpllreset));
  FDRE #(
    .INIT(1'b0)) 
    cpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllreset_i_1__3_n_0),
        .Q(rate_cpllreset_3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE drp_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_DRP_DONE),
        .Q(drp_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE drp_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_done_reg1),
        .Q(drp_done_reg2),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h08200108)) 
    drp_start_i_1__2
       (.I0(Q[0]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[1]),
        .O(drp_start_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_start_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_start_i_1__2_n_0),
        .Q(RATE_DRP_START),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h09010010)) 
    drp_x16_i_1__2
       (.I0(Q[1]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(Q[0]),
        .I4(Q[2]),
        .O(drp_x16_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_x16_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_x16_i_1__2_n_0),
        .Q(RATE_DRP_X16),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h0840003A)) 
    drp_x16x20_mode_i_1__2
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(Q[1]),
        .O(drp_x16x20_mode_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    drp_x16x20_mode_reg
       (.C(CLK),
        .CE(1'b1),
        .D(drp_x16x20_mode_i_1__2_n_0),
        .Q(RATE_DRP_X16X20_MODE),
        .R(RST_CPLLRESET));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \fsm[0]_i_10__2 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg1[0]),
        .I2(rate_in_reg2[1]),
        .I3(rate_in_reg1[1]),
        .O(\fsm[0]_i_10__2_n_0 ));
  LUT6 #(
    .INIT(64'hBA8A000000000000)) 
    \fsm[0]_i_11__2 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .I4(drp_done_reg2),
        .I5(rst_idle_reg2),
        .O(\fsm[0]_i_11__2_n_0 ));
  LUT5 #(
    .INIT(32'hFF080808)) 
    \fsm[0]_i_12__2 
       (.I0(txresetdone_reg2),
        .I1(rxresetdone_reg2),
        .I2(phystatus_reg2),
        .I3(out),
        .I4(txelecidle_reg2_reg),
        .O(\fsm[0]_i_12__2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \fsm[0]_i_1__3 
       (.I0(\fsm[0]_i_2__6_n_0 ),
        .I1(\fsm[0]_i_3__5_n_0 ),
        .I2(Q[4]),
        .I3(\fsm_reg[0]_i_4__2_n_0 ),
        .I4(Q[3]),
        .I5(\fsm[0]_i_5__2_n_0 ),
        .O(fsm[0]));
  LUT5 #(
    .INIT(32'h03880333)) 
    \fsm[0]_i_2__6 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(txsync_done_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[0]_i_2__6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBB8BBB88BB8B88)) 
    \fsm[0]_i_3__5 
       (.I0(\fsm[0]_i_6__2_n_0 ),
        .I1(Q[2]),
        .I2(rxpmaresetdone_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(drp_done_reg2),
        .O(\fsm[0]_i_3__5_n_0 ));
  LUT6 #(
    .INIT(64'h03440344FF77FF44)) 
    \fsm[0]_i_5__2 
       (.I0(drp_done_reg2),
        .I1(Q[2]),
        .I2(pll_lock),
        .I3(Q[1]),
        .I4(\fsm[0]_i_10__2_n_0 ),
        .I5(Q[0]),
        .O(\fsm[0]_i_5__2_n_0 ));
  LUT5 #(
    .INIT(32'h47774744)) 
    \fsm[0]_i_6__2 
       (.I0(resetovrd_done_reg2),
        .I1(Q[1]),
        .I2(fsm1),
        .I3(Q[0]),
        .I4(drp_done_reg2),
        .O(\fsm[0]_i_6__2_n_0 ));
  LUT6 #(
    .INIT(64'h3088308830BB3088)) 
    \fsm[0]_i_7__2 
       (.I0(\fsm[0]_i_11__2_n_0 ),
        .I1(Q[1]),
        .I2(drp_done_reg2),
        .I3(Q[0]),
        .I4(mmcm_lock_reg2),
        .I5(rxpmaresetdone_reg2),
        .O(\fsm[0]_i_7__2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB8CC)) 
    \fsm[0]_i_8__2 
       (.I0(drp_done_reg2),
        .I1(Q[1]),
        .I2(\fsm[1]_i_9__2_n_0 ),
        .I3(Q[0]),
        .I4(\fsm[0]_i_12__2_n_0 ),
        .O(\fsm[0]_i_8__2_n_0 ));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \fsm[0]_i_9__2 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .O(pll_lock));
  LUT6 #(
    .INIT(64'hBABBBFBBFFFFFFFF)) 
    \fsm[1]_i_10__2 
       (.I0(rst_idle_reg2),
        .I1(cplllock_reg2),
        .I2(rate_in_reg2[0]),
        .I3(rate_in_reg2[1]),
        .I4(qplllock_reg2),
        .I5(drp_done_reg2),
        .O(\fsm[1]_i_10__2_n_0 ));
  LUT5 #(
    .INIT(32'h30BBFC00)) 
    \fsm[1]_i_4__2 
       (.I0(drp_done_reg2),
        .I1(Q[2]),
        .I2(\fsm[1]_i_8__2_n_0 ),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[1]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'hCC44300000773000)) 
    \fsm[1]_i_5__2 
       (.I0(\fsm[1]_i_9__2_n_0 ),
        .I1(Q[2]),
        .I2(\fsm[1]_i_10__2_n_0 ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(drp_done_reg2),
        .O(\fsm[1]_i_5__2_n_0 ));
  LUT5 #(
    .INIT(32'h70F040F0)) 
    \fsm[1]_i_6__2 
       (.I0(resetovrd_done_reg2),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(drp_done_reg2),
        .O(\fsm[1]_i_6__2_n_0 ));
  LUT5 #(
    .INIT(32'h03777700)) 
    \fsm[1]_i_7__2 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(txsync_done_reg2),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(\fsm[1]_i_7__2_n_0 ));
  LUT6 #(
    .INIT(64'h4D7DFFFFFFFFFFFF)) 
    \fsm[1]_i_8__2 
       (.I0(cplllock_reg2),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(qplllock_reg2),
        .I4(rst_idle_reg2),
        .I5(Q[0]),
        .O(\fsm[1]_i_8__2_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \fsm[1]_i_9__2 
       (.I0(txdata_wait_cnt_reg__0[3]),
        .I1(txdata_wait_cnt_reg__0[2]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[1]),
        .O(\fsm[1]_i_9__2_n_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \fsm[2]_i_1__6 
       (.I0(\fsm[2]_i_2__2_n_0 ),
        .I1(Q[3]),
        .I2(\fsm[2]_i_3__2_n_0 ),
        .I3(Q[4]),
        .I4(\fsm[2]_i_4__2_n_0 ),
        .O(fsm[2]));
  LUT5 #(
    .INIT(32'h3C0C4040)) 
    \fsm[2]_i_2__2 
       (.I0(rxsync_done_reg2),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(txsync_done_reg2),
        .I4(Q[0]),
        .O(\fsm[2]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h505F3F3FF0F0F0F0)) 
    \fsm[2]_i_3__2 
       (.I0(resetovrd_done_reg2),
        .I1(fsm1),
        .I2(Q[2]),
        .I3(drp_done_reg2),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\fsm[2]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h83FFF33383FFC000)) 
    \fsm[2]_i_4__2 
       (.I0(drp_done_reg2),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[2]),
        .I5(\fsm[2]_i_6__2_n_0 ),
        .O(\fsm[2]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF2F2F2)) 
    \fsm[2]_i_5__2 
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .I2(gen3_exit),
        .I3(txelecidle_reg2_reg),
        .I4(out),
        .I5(ratedone),
        .O(fsm1));
  LUT6 #(
    .INIT(64'h8A80FFFF8A800000)) 
    \fsm[2]_i_6__2 
       (.I0(Q[0]),
        .I1(qplllock_reg2),
        .I2(gen3_i_2__2_n_0),
        .I3(cplllock_reg2),
        .I4(Q[1]),
        .I5(\fsm[3]_i_5__2_n_0 ),
        .O(\fsm[2]_i_6__2_n_0 ));
  LUT6 #(
    .INIT(64'hB888B88888BB8888)) 
    \fsm[3]_i_2__2 
       (.I0(\fsm[3]_i_4__2_n_0 ),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(\fsm[3]_i_5__2_n_0 ),
        .I5(Q[1]),
        .O(\fsm[3]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h26FFFFFF26FF0000)) 
    \fsm[3]_i_3__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(rxsync_done_reg2),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(\fsm[3]_i_6__2_n_0 ),
        .O(\fsm[3]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'hFF554555FFFFFFFF)) 
    \fsm[3]_i_4__2 
       (.I0(Q[2]),
        .I1(rst_idle_reg2),
        .I2(pll_lock),
        .I3(drp_done_reg2),
        .I4(Q[0]),
        .I5(Q[1]),
        .O(\fsm[3]_i_4__2_n_0 ));
  LUT5 #(
    .INIT(32'h0000309A)) 
    \fsm[3]_i_5__2 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg1[0]),
        .I3(rate_in_reg1[1]),
        .I4(Q[0]),
        .O(\fsm[3]_i_5__2_n_0 ));
  LUT5 #(
    .INIT(32'hA0800080)) 
    \fsm[3]_i_6__2 
       (.I0(Q[2]),
        .I1(fsm1),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(resetovrd_done_reg2),
        .O(\fsm[3]_i_6__2_n_0 ));
  LUT6 #(
    .INIT(64'hBC8C8C8C8C8C8C8C)) 
    \fsm[4]_i_1__3 
       (.I0(\fsm[4]_i_2__2_n_0 ),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(\fsm[4]_i_3__2_n_0 ),
        .I5(Q[2]),
        .O(fsm[4]));
  LUT4 #(
    .INIT(16'h26FF)) 
    \fsm[4]_i_2__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(rxsync_done_reg2),
        .I3(Q[2]),
        .O(\fsm[4]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \fsm[4]_i_3__2 
       (.I0(Q[0]),
        .I1(drp_done_reg2),
        .O(\fsm[4]_i_3__2_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[0]),
        .Q(Q[0]),
        .S(RST_CPLLRESET));
  MUXF7 \fsm_reg[0]_i_4__2 
       (.I0(\fsm[0]_i_7__2_n_0 ),
        .I1(\fsm[0]_i_8__2_n_0 ),
        .O(\fsm_reg[0]_i_4__2_n_0 ),
        .S(Q[2]));
  FDSE #(
    .INIT(1'b0)) 
    \fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[1]),
        .Q(Q[1]),
        .S(RST_CPLLRESET));
  MUXF8 \fsm_reg[1]_i_1__2 
       (.I0(\fsm_reg[1]_i_2__2_n_0 ),
        .I1(\fsm_reg[1]_i_3__2_n_0 ),
        .O(fsm[1]),
        .S(Q[4]));
  MUXF7 \fsm_reg[1]_i_2__2 
       (.I0(\fsm[1]_i_4__2_n_0 ),
        .I1(\fsm[1]_i_5__2_n_0 ),
        .O(\fsm_reg[1]_i_2__2_n_0 ),
        .S(Q[3]));
  MUXF7 \fsm_reg[1]_i_3__2 
       (.I0(\fsm[1]_i_6__2_n_0 ),
        .I1(\fsm[1]_i_7__2_n_0 ),
        .O(\fsm_reg[1]_i_3__2_n_0 ),
        .S(Q[3]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[2]),
        .Q(Q[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[3]),
        .Q(Q[3]),
        .R(RST_CPLLRESET));
  MUXF7 \fsm_reg[3]_i_1__2 
       (.I0(\fsm[3]_i_2__2_n_0 ),
        .I1(\fsm[3]_i_3__2_n_0 ),
        .O(fsm[3]),
        .S(Q[4]));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(fsm[4]),
        .Q(Q[4]),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    gen3_exit_i_1__2
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(Q[4]),
        .I3(gen3_exit_i_2__2_n_0),
        .I4(gen3_exit),
        .O(gen3_exit_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h8000800000010000)) 
    gen3_exit_i_2__2
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(\fsm[0]_i_10__2_n_0 ),
        .I5(Q[2]),
        .O(gen3_exit_i_2__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gen3_exit_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_exit_i_1__2_n_0),
        .Q(gen3_exit),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h2FFFFFFF20000000)) 
    gen3_i_1__2
       (.I0(gen3_i_2__2_n_0),
        .I1(Q[4]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(gen3_i_3__2_n_0),
        .I5(rate_gen3_3),
        .O(gen3_i_1__2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    gen3_i_2__2
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .O(gen3_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'h81)) 
    gen3_i_3__2
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[4]),
        .O(gen3_i_3__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gen3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_i_1__2_n_0),
        .Q(rate_gen3_3),
        .R(RST_CPLLRESET));
  LUT1 #(
    .INIT(2'h1)) 
    \gtx_channel.gtxe2_channel_i_i_5__2 
       (.I0(rate_gen3_3),
        .O(rxchbonden_3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h06FF0600)) 
    pclk_sel_i_1__2
       (.I0(rate_in_reg2[1]),
        .I1(rate_in_reg2[0]),
        .I2(Q[4]),
        .I3(pclk_sel_i_2__2_n_0),
        .I4(USER_PCLK_SEL),
        .O(pclk_sel_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT5 #(
    .INIT(32'h80020080)) 
    pclk_sel_i_2__2
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(pclk_sel_i_2__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    pclk_sel_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_i_1__2_n_0),
        .Q(USER_PCLK_SEL),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    phystatus_i_1__2
       (.I0(txratedone_i_2__2_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(phystatus_reg2),
        .I4(Q[0]),
        .I5(phystatus),
        .O(phystatus_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    phystatus_reg
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_i_1__2_n_0),
        .Q(phystatus),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE phystatus_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_PHYSTATUS),
        .Q(phystatus_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE phystatus_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_reg1),
        .Q(phystatus_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(QPLL_QPLLLOCK),
        .Q(qplllock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qplllock_reg1),
        .Q(qplllock_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h4500FFFF45000000)) 
    qpllpd_i_1__2
       (.I0(Q[2]),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(Q[4]),
        .I4(qpllpd),
        .I5(D),
        .O(qpllpd_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    qpllpd_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qpllpd_i_1__2_n_0),
        .Q(D),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h4500FFFF45000000)) 
    qpllreset_i_1__2
       (.I0(Q[2]),
        .I1(rate_in_reg2[0]),
        .I2(rate_in_reg2[1]),
        .I3(Q[4]),
        .I4(qpllreset),
        .I5(\qpllreset_in_reg1_reg[3] ),
        .O(qpllreset_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    qpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_i_1__2_n_0),
        .Q(\qpllreset_in_reg1_reg[3] ),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    rate_done_reg1_i_1__2
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[4]),
        .O(USER_RATE_DONE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_tx_rate_q_reg ),
        .Q(rate_in_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rate_in_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_in_reg1[0]),
        .Q(rate_in_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_in_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_in_reg1[1]),
        .Q(rate_in_reg2[1]),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h02FFFFFF02000000)) 
    \rate_out[0]_i_1__2 
       (.I0(rate_in_reg2[0]),
        .I1(rate_in_reg2[1]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(\rate_out[0]_i_2__2_n_0 ),
        .I5(RXRATE),
        .O(\rate_out[0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h8080808014141404)) 
    \rate_out[0]_i_2__2 
       (.I0(Q[1]),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(gen3_i_2__2_n_0),
        .I4(gen3_exit),
        .I5(Q[2]),
        .O(\rate_out[0]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rate_out_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rate_out[0]_i_1__2_n_0 ),
        .Q(RXRATE),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT5 #(
    .INIT(32'h08800000)) 
    rate_rxsync_reg1_i_1__2
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(USER_RATE_RXSYNC));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    ratedone_i_1__2
       (.I0(txratedone_i_2__2_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(ratedone0),
        .I4(Q[0]),
        .I5(ratedone),
        .O(ratedone_i_1__2_n_0));
  LUT3 #(
    .INIT(8'h80)) 
    ratedone_i_2__2
       (.I0(phystatus),
        .I1(rxratedone),
        .I2(txratedone),
        .O(ratedone0));
  FDRE #(
    .INIT(1'b0)) 
    ratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(ratedone_i_1__2_n_0),
        .Q(ratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(resetovrd_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(resetovrd_done_reg1),
        .Q(resetovrd_done_reg2),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    resetovrd_start_reg1_i_1__2
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .O(USER_RESETOVRD_START));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out1[1]),
        .Q(rst_idle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rst_idle_reg1),
        .Q(rst_idle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxpmaresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxpmaresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxpmaresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxpmaresetdone_reg1),
        .Q(rxpmaresetdone_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    rxratedone_i_1__2
       (.I0(txratedone_i_2__2_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(rxratedone_reg2),
        .I4(Q[0]),
        .I5(rxratedone),
        .O(rxratedone_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rxratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxratedone_i_1__2_n_0),
        .Q(rxratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxratedone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_RXRATEDONE),
        .Q(rxratedone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxratedone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxratedone_reg1),
        .Q(rxratedone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXRESETDONE),
        .Q(rxresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxresetdone_reg1),
        .Q(rxresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsync_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_done_reg1),
        .Q(rxsync_done_reg2),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    rxsync_start_reg1_i_1__2
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[4]),
        .O(SYNC_RXSYNC_START));
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \sysclksel[0]_i_1__2 
       (.I0(rate_in_reg2[1]),
        .I1(Q[4]),
        .I2(rate_in_reg2[0]),
        .I3(\sysclksel[0]_i_2__2_n_0 ),
        .I4(RXSYSCLKSEL),
        .O(\sysclksel[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT5 #(
    .INIT(32'h80000080)) 
    \sysclksel[0]_i_2__2 
       (.I0(Q[0]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(\sysclksel[0]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sysclksel_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\sysclksel[0]_i_1__2_n_0 ),
        .Q(RXSYSCLKSEL),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT5 #(
    .INIT(32'h8A0A0A0A)) 
    \txdata_wait_cnt[0]_i_1__2 
       (.I0(\txdata_wait_cnt[3]_i_2__2_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT5 #(
    .INIT(32'hA8282828)) 
    \txdata_wait_cnt[1]_i_1__2 
       (.I0(\txdata_wait_cnt[3]_i_2__2_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT5 #(
    .INIT(32'hAA802A80)) 
    \txdata_wait_cnt[2]_i_1__2 
       (.I0(\txdata_wait_cnt[3]_i_2__2_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT5 #(
    .INIT(32'hAAAA8000)) 
    \txdata_wait_cnt[3]_i_1__2 
       (.I0(\txdata_wait_cnt[3]_i_2__2_n_0 ),
        .I1(txdata_wait_cnt_reg__0[1]),
        .I2(txdata_wait_cnt_reg__0[0]),
        .I3(txdata_wait_cnt_reg__0[2]),
        .I4(txdata_wait_cnt_reg__0[3]),
        .O(p_0_in__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT5 #(
    .INIT(32'h10000000)) 
    \txdata_wait_cnt[3]_i_2__2 
       (.I0(Q[4]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(Q[3]),
        .O(\txdata_wait_cnt[3]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(txdata_wait_cnt_reg__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(txdata_wait_cnt_reg__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(txdata_wait_cnt_reg__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \txdata_wait_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(txdata_wait_cnt_reg__0[3]),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h00AEFFFF00AE0000)) 
    txpmareset_i_1__2
       (.I0(gen3_exit),
        .I1(rate_in_reg2[1]),
        .I2(rate_in_reg2[0]),
        .I3(Q[3]),
        .I4(txpmareset_i_2__2_n_0),
        .I5(rate_txpmareset_3),
        .O(txpmareset_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT5 #(
    .INIT(32'h80080020)) 
    txpmareset_i_2__2
       (.I0(Q[1]),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[0]),
        .O(txpmareset_i_2__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    txpmareset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txpmareset_i_1__2_n_0),
        .Q(rate_txpmareset_3),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0202000002000000)) 
    txratedone_i_1__2
       (.I0(txratedone_i_2__2_n_0),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(txratedone_reg2),
        .I4(Q[0]),
        .I5(txratedone),
        .O(txratedone_i_1__2_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    txratedone_i_2__2
       (.I0(Q[2]),
        .I1(Q[4]),
        .O(txratedone_i_2__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    txratedone_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txratedone_i_1__2_n_0),
        .Q(txratedone),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txratedone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_TXRATEDONE),
        .Q(txratedone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txratedone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txratedone_reg1),
        .Q(txratedone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_TXRESETDONE),
        .Q(txresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txresetdone_reg1),
        .Q(txresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RATE_TXSYNC_DONE),
        .Q(txsync_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_done_reg1),
        .Q(txsync_done_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'hFFFFFFFF02000000)) 
    txsync_start_reg1_i_1__2
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[3]),
        .I4(Q[1]),
        .I5(out1[0]),
        .O(SYNC_TXSYNC_START));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_reset" *) 
module pcie_7x_0_pcie_7x_0_pipe_reset
   (\txeq_preset_reg[16] ,
    RST_CPLLRESET,
    \txeq_preset_reg[16]_0 ,
    \txeq_preset_reg[16]_1 ,
    \txeq_preset_reg[16]_2 ,
    DRP_X16X20_MODE,
    x16x20_mode_reg1_reg,
    x16x20_mode_reg1_reg_0,
    x16x20_mode_reg1_reg_1,
    DRP_X16,
    x16_reg1_reg,
    x16_reg1_reg_0,
    x16_reg1_reg_1,
    DRP_START,
    start_reg1_reg,
    start_reg1_reg_0,
    start_reg1_reg_1,
    out,
    SS,
    pipe_rst_fsm,
    RST_RXUSRCLK_RESET,
    RST_DCLK_RESET,
    rst_userrdy,
    DRP_GTXRESET,
    out0,
    \FSM_onehot_fsm_tx_reg[2] ,
    \FSM_onehot_fsm_tx_reg[2]_0 ,
    \FSM_onehot_fsm_tx_reg[2]_1 ,
    RATE_DRP_X16X20_MODE,
    drp_x16x20_mode_reg,
    drp_x16x20_mode_reg_0,
    drp_x16x20_mode_reg_1,
    RATE_DRP_X16,
    drp_x16_reg,
    drp_x16_reg_0,
    drp_x16_reg_1,
    RATE_DRP_START,
    drp_start_reg,
    drp_start_reg_0,
    drp_start_reg_1,
    CLK,
    SYNC_MMCM_LOCK,
    D,
    gtreset_reg_0,
    rate_idle,
    done_reg,
    gtreset_reg_1,
    \txsync_fsm.txsync_done_reg ,
    gtreset_reg_2,
    pipe_qrst_idle,
    \rxcdrlock_cnt_reg[2] ,
    reset_n_reg2_reg);
  output \txeq_preset_reg[16] ;
  output RST_CPLLRESET;
  output \txeq_preset_reg[16]_0 ;
  output \txeq_preset_reg[16]_1 ;
  output \txeq_preset_reg[16]_2 ;
  output DRP_X16X20_MODE;
  output x16x20_mode_reg1_reg;
  output x16x20_mode_reg1_reg_0;
  output x16x20_mode_reg1_reg_1;
  output DRP_X16;
  output x16_reg1_reg;
  output x16_reg1_reg_0;
  output x16_reg1_reg_1;
  output DRP_START;
  output start_reg1_reg;
  output start_reg1_reg_0;
  output start_reg1_reg_1;
  output [2:0]out;
  output [0:0]SS;
  output [3:0]pipe_rst_fsm;
  output RST_RXUSRCLK_RESET;
  output RST_DCLK_RESET;
  output rst_userrdy;
  output DRP_GTXRESET;
  input [0:0]out0;
  input [0:0]\FSM_onehot_fsm_tx_reg[2] ;
  input [0:0]\FSM_onehot_fsm_tx_reg[2]_0 ;
  input [0:0]\FSM_onehot_fsm_tx_reg[2]_1 ;
  input RATE_DRP_X16X20_MODE;
  input drp_x16x20_mode_reg;
  input drp_x16x20_mode_reg_0;
  input drp_x16x20_mode_reg_1;
  input RATE_DRP_X16;
  input drp_x16_reg;
  input drp_x16_reg_0;
  input drp_x16_reg_1;
  input RATE_DRP_START;
  input drp_start_reg;
  input drp_start_reg_0;
  input drp_start_reg_1;
  input CLK;
  input SYNC_MMCM_LOCK;
  input [3:0]D;
  input [3:0]gtreset_reg_0;
  input [3:0]rate_idle;
  input [3:0]done_reg;
  input [3:0]gtreset_reg_1;
  input [3:0]\txsync_fsm.txsync_done_reg ;
  input gtreset_reg_2;
  input pipe_qrst_idle;
  input [3:0]\rxcdrlock_cnt_reg[2] ;
  input reset_n_reg2_reg;

  wire CLK;
  wire [3:0]D;
  wire DRP_GTXRESET;
  wire DRP_START;
  wire DRP_X16;
  wire DRP_X16X20_MODE;
  wire \FSM_onehot_fsm[0]_i_1_n_0 ;
  wire \FSM_onehot_fsm[13]_i_1_n_0 ;
  wire \FSM_onehot_fsm[13]_i_2_n_0 ;
  wire \FSM_onehot_fsm[14]_i_1_n_0 ;
  wire \FSM_onehot_fsm[15]_i_1_n_0 ;
  wire \FSM_onehot_fsm[16]_i_2_n_0 ;
  wire \FSM_onehot_fsm[16]_i_3_n_0 ;
  wire \FSM_onehot_fsm[16]_i_4_n_0 ;
  wire \FSM_onehot_fsm[16]_i_5_n_0 ;
  wire \FSM_onehot_fsm[16]_i_6_n_0 ;
  wire \FSM_onehot_fsm[1]_i_1_n_0 ;
  wire \FSM_onehot_fsm[1]_i_2_n_0 ;
  wire \FSM_onehot_fsm[2]_i_1_n_0 ;
  wire \FSM_onehot_fsm[2]_i_2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_2_n_0 ;
  wire \FSM_onehot_fsm[4]_i_3_n_0 ;
  wire \FSM_onehot_fsm[5]_i_1_n_0 ;
  wire \FSM_onehot_fsm[8]_i_1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[13] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[14] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[7] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[9] ;
  wire [0:0]\FSM_onehot_fsm_tx_reg[2] ;
  wire [0:0]\FSM_onehot_fsm_tx_reg[2]_0 ;
  wire [0:0]\FSM_onehot_fsm_tx_reg[2]_1 ;
  wire RATE_DRP_START;
  wire RATE_DRP_X16;
  wire RATE_DRP_X16X20_MODE;
  wire RST_DRP_START0;
  wire RST_DRP_X16X20_MODE0;
  wire [0:0]SS;
  wire SYNC_MMCM_LOCK;
  wire \cfg_wait_cnt[2]_i_2_n_0 ;
  wire \cfg_wait_cnt[5]_i_2_n_0 ;
  wire [5:0]cfg_wait_cnt_reg__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]cplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]cplllock_reg2;
  wire cpllreset;
  wire cpllreset_i_1_n_0;
  wire dclk_rst;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire dclk_rst_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire dclk_rst_reg2;
  wire [3:0]done_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]drp_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]drp_done_reg2;
  wire drp_start_reg;
  wire drp_start_reg_0;
  wire drp_start_reg_1;
  wire drp_x16_reg;
  wire drp_x16_reg_0;
  wire drp_x16_reg_1;
  wire drp_x16x20_mode_reg;
  wire drp_x16x20_mode_reg_0;
  wire drp_x16x20_mode_reg_1;
  wire fsm2;
  wire fsm23_out;
  wire fsm2_inferred__1_n_0;
  wire fsm3;
  wire fsm31_in;
  wire gtreset_i_1_n_0;
  wire [3:0]gtreset_reg_0;
  wire [3:0]gtreset_reg_1;
  wire gtreset_reg_2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  (* RTL_KEEP = "yes" *) wire [2:0]out;
  wire [0:0]out0;
  (* RTL_KEEP = "yes" *) wire p_0_in0_in;
  wire [5:0]p_0_in__0;
  (* RTL_KEEP = "yes" *) wire p_1_in;
  (* RTL_KEEP = "yes" *) wire p_1_in1_in;
  wire p_2_in;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]phystatus_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]phystatus_reg2;
  wire pipe_qrst_idle;
  wire [3:0]pipe_rst_fsm;
  wire \pipe_rst_fsm[2]_INST_0_i_1_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qpll_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qpll_idle_reg2;
  wire [3:0]rate_idle;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rate_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rate_idle_reg2;
  wire reset_n_reg2_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]resetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]resetdone_reg2;
  wire rst_drp_start;
  wire rst_drp_x16;
  wire rst_drp_x16x20_mode;
  wire rst_userrdy;
  wire [3:0]\rxcdrlock_cnt_reg[2] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxcdrlock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxcdrlock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxpmaresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]rxpmaresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxusrclk_rst_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxusrclk_rst_reg2;
  wire start_reg1_reg;
  wire start_reg1_reg_0;
  wire start_reg1_reg_1;
  wire \txeq_preset_reg[16] ;
  wire \txeq_preset_reg[16]_0 ;
  wire \txeq_preset_reg[16]_1 ;
  wire \txeq_preset_reg[16]_2 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txsync_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txsync_done_reg2;
  wire [3:0]\txsync_fsm.txsync_done_reg ;
  (* RTL_KEEP = "yes" *) wire userrdy;
  wire userrdy_i_1_n_0;
  wire x16_reg1_reg;
  wire x16_reg1_reg_0;
  wire x16_reg1_reg_1;
  wire x16x20_mode_reg1_reg;
  wire x16x20_mode_reg1_reg_0;
  wire x16x20_mode_reg1_reg_1;

  assign RST_CPLLRESET = cpllreset;
  assign RST_DCLK_RESET = dclk_rst_reg2;
  assign RST_RXUSRCLK_RESET = rxusrclk_rst_reg2;
  LUT5 #(
    .INIT(32'h04040704)) 
    \FSM_onehot_fsm[0]_i_1 
       (.I0(\FSM_onehot_fsm[1]_i_2_n_0 ),
        .I1(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I2(out[0]),
        .I3(\FSM_onehot_fsm_reg_n_0_[0] ),
        .I4(fsm23_out),
        .O(\FSM_onehot_fsm[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000088880C00)) 
    \FSM_onehot_fsm[13]_i_1 
       (.I0(mmcm_lock_reg2),
        .I1(\FSM_onehot_fsm[16]_i_4_n_0 ),
        .I2(fsm2),
        .I3(\FSM_onehot_fsm_reg_n_0_[13] ),
        .I4(userrdy),
        .I5(\FSM_onehot_fsm[13]_i_2_n_0 ),
        .O(\FSM_onehot_fsm[13]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_fsm[13]_i_2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[5] ),
        .O(\FSM_onehot_fsm[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \FSM_onehot_fsm[14]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[5] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I2(userrdy),
        .I3(fsm2),
        .I4(\FSM_onehot_fsm_reg_n_0_[13] ),
        .I5(\FSM_onehot_fsm[16]_i_4_n_0 ),
        .O(\FSM_onehot_fsm[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \FSM_onehot_fsm[14]_i_2 
       (.I0(resetdone_reg2[3]),
        .I1(resetdone_reg2[2]),
        .I2(resetdone_reg2[0]),
        .I3(resetdone_reg2[1]),
        .I4(fsm3),
        .O(fsm2));
  LUT4 #(
    .INIT(16'h0001)) 
    \FSM_onehot_fsm[14]_i_3 
       (.I0(phystatus_reg2[1]),
        .I1(phystatus_reg2[0]),
        .I2(phystatus_reg2[2]),
        .I3(phystatus_reg2[3]),
        .O(fsm3));
  LUT5 #(
    .INIT(32'h55100000)) 
    \FSM_onehot_fsm[15]_i_1 
       (.I0(\FSM_onehot_fsm[16]_i_6_n_0 ),
        .I1(\FSM_onehot_fsm[16]_i_5_n_0 ),
        .I2(out[1]),
        .I3(\FSM_onehot_fsm_reg_n_0_[14] ),
        .I4(\FSM_onehot_fsm[16]_i_4_n_0 ),
        .O(\FSM_onehot_fsm[15]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \FSM_onehot_fsm[16]_i_1 
       (.I0(reset_n_reg2_reg),
        .O(SS));
  LUT6 #(
    .INIT(64'h000000000000C088)) 
    \FSM_onehot_fsm[16]_i_2 
       (.I0(\FSM_onehot_fsm[16]_i_3_n_0 ),
        .I1(\FSM_onehot_fsm[16]_i_4_n_0 ),
        .I2(\FSM_onehot_fsm[16]_i_5_n_0 ),
        .I3(out[1]),
        .I4(\FSM_onehot_fsm_reg_n_0_[14] ),
        .I5(\FSM_onehot_fsm[16]_i_6_n_0 ),
        .O(\FSM_onehot_fsm[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h2AAAAAAA)) 
    \FSM_onehot_fsm[16]_i_3 
       (.I0(out[2]),
        .I1(txsync_done_reg2[3]),
        .I2(txsync_done_reg2[2]),
        .I3(txsync_done_reg2[0]),
        .I4(txsync_done_reg2[1]),
        .O(\FSM_onehot_fsm[16]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \FSM_onehot_fsm[16]_i_4 
       (.I0(\FSM_onehot_fsm_reg_n_0_[0] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I2(out[0]),
        .I3(\FSM_onehot_fsm_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm[16]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \FSM_onehot_fsm[16]_i_5 
       (.I0(txsync_done_reg2[1]),
        .I1(txsync_done_reg2[0]),
        .I2(txsync_done_reg2[2]),
        .I3(txsync_done_reg2[3]),
        .O(\FSM_onehot_fsm[16]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_onehot_fsm[16]_i_6 
       (.I0(userrdy),
        .I1(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[5] ),
        .I3(\FSM_onehot_fsm_reg_n_0_[13] ),
        .O(\FSM_onehot_fsm[16]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h202020FF20202020)) 
    \FSM_onehot_fsm[1]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(out[0]),
        .I2(\FSM_onehot_fsm[1]_i_2_n_0 ),
        .I3(\pipe_rst_fsm[2]_INST_0_i_1_n_0 ),
        .I4(out[2]),
        .I5(\FSM_onehot_fsm[16]_i_4_n_0 ),
        .O(\FSM_onehot_fsm[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \FSM_onehot_fsm[1]_i_2 
       (.I0(cfg_wait_cnt_reg__0[4]),
        .I1(cfg_wait_cnt_reg__0[5]),
        .I2(cfg_wait_cnt_reg__0[2]),
        .I3(cfg_wait_cnt_reg__0[3]),
        .I4(cfg_wait_cnt_reg__0[1]),
        .I5(cfg_wait_cnt_reg__0[0]),
        .O(\FSM_onehot_fsm[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0400)) 
    \FSM_onehot_fsm[2]_i_1 
       (.I0(\pipe_rst_fsm[2]_INST_0_i_1_n_0 ),
        .I1(\FSM_onehot_fsm[2]_i_2_n_0 ),
        .I2(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I3(out[2]),
        .I4(out[0]),
        .O(\FSM_onehot_fsm[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    \FSM_onehot_fsm[2]_i_2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[0] ),
        .I2(txsync_done_reg2[3]),
        .I3(txsync_done_reg2[2]),
        .I4(txsync_done_reg2[0]),
        .I5(txsync_done_reg2[1]),
        .O(\FSM_onehot_fsm[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0200020002030200)) 
    \FSM_onehot_fsm[3]_i_1 
       (.I0(fsm23_out),
        .I1(out[0]),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I3(\FSM_onehot_fsm_reg_n_0_[0] ),
        .I4(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I5(\FSM_onehot_fsm[4]_i_2_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00010000)) 
    \FSM_onehot_fsm[3]_i_2 
       (.I0(cplllock_reg2[3]),
        .I1(cplllock_reg2[2]),
        .I2(cplllock_reg2[0]),
        .I3(cplllock_reg2[1]),
        .I4(fsm31_in),
        .O(fsm23_out));
  LUT4 #(
    .INIT(16'h0001)) 
    \FSM_onehot_fsm[3]_i_3 
       (.I0(resetdone_reg2[1]),
        .I1(resetdone_reg2[0]),
        .I2(resetdone_reg2[2]),
        .I3(resetdone_reg2[3]),
        .O(fsm31_in));
  LUT6 #(
    .INIT(64'h0200020002030200)) 
    \FSM_onehot_fsm[4]_i_1 
       (.I0(\FSM_onehot_fsm[4]_i_2_n_0 ),
        .I1(\FSM_onehot_fsm_reg_n_0_[0] ),
        .I2(\FSM_onehot_fsm[4]_i_3_n_0 ),
        .I3(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I4(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I5(fsm2_inferred__1_n_0),
        .O(\FSM_onehot_fsm[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \FSM_onehot_fsm[4]_i_2 
       (.I0(cplllock_reg2[1]),
        .I1(cplllock_reg2[0]),
        .I2(cplllock_reg2[2]),
        .I3(cplllock_reg2[3]),
        .O(\FSM_onehot_fsm[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_fsm[4]_i_3 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(out[0]),
        .O(\FSM_onehot_fsm[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \FSM_onehot_fsm[5]_i_1 
       (.I0(rate_idle_reg2[1]),
        .I1(rate_idle_reg2[0]),
        .I2(rate_idle_reg2[2]),
        .I3(rate_idle_reg2[3]),
        .I4(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I5(\FSM_onehot_fsm[16]_i_4_n_0 ),
        .O(\FSM_onehot_fsm[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h55100000)) 
    \FSM_onehot_fsm[8]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(mmcm_lock_reg2),
        .I2(userrdy),
        .I3(\FSM_onehot_fsm_reg_n_0_[5] ),
        .I4(\FSM_onehot_fsm[16]_i_4_n_0 ),
        .O(\FSM_onehot_fsm[8]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[0]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[0] ),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_reg_n_0_[10] ),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(p_0_in0_in),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(p_1_in1_in),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[13]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[13] ),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[14]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[14] ),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[15]_i_1_n_0 ),
        .Q(out[1]),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[16]_i_2_n_0 ),
        .Q(out[2]),
        .R(SS));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[1]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[1] ),
        .S(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[2]_i_1_n_0 ),
        .Q(out[0]),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[3]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[3] ),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[4]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[4] ),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[5]_i_1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[5] ),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(p_1_in),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_reg_n_0_[7] ),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[8]_i_1_n_0 ),
        .Q(userrdy),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_reg_n_0_[9] ),
        .R(SS));
  LUT2 #(
    .INIT(4'hE)) 
    RST_DRP_START_i_1
       (.I0(p_1_in),
        .I1(p_0_in0_in),
        .O(RST_DRP_START0));
  FDRE RST_DRP_START_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RST_DRP_START0),
        .Q(rst_drp_start),
        .R(SS));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RST_DRP_X16X20_MODE_i_1
       (.I0(p_1_in1_in),
        .I1(p_1_in),
        .I2(\FSM_onehot_fsm_reg_n_0_[7] ),
        .I3(p_0_in0_in),
        .O(RST_DRP_X16X20_MODE0));
  FDRE RST_DRP_X16X20_MODE_reg
       (.C(CLK),
        .CE(1'b1),
        .D(RST_DRP_X16X20_MODE0),
        .Q(rst_drp_x16x20_mode),
        .R(SS));
  LUT2 #(
    .INIT(4'hE)) 
    RST_DRP_X16_i_1
       (.I0(p_1_in),
        .I1(\FSM_onehot_fsm_reg_n_0_[7] ),
        .O(p_2_in));
  FDRE RST_DRP_X16_reg
       (.C(CLK),
        .CE(1'b1),
        .D(p_2_in),
        .Q(rst_drp_x16),
        .R(SS));
  LUT3 #(
    .INIT(8'h2A)) 
    \cfg_wait_cnt[0]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\cfg_wait_cnt[2]_i_2_n_0 ),
        .I2(cfg_wait_cnt_reg__0[0]),
        .O(p_0_in__0[0]));
  LUT4 #(
    .INIT(16'h28AA)) 
    \cfg_wait_cnt[1]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(cfg_wait_cnt_reg__0[0]),
        .I2(cfg_wait_cnt_reg__0[1]),
        .I3(\cfg_wait_cnt[2]_i_2_n_0 ),
        .O(p_0_in__0[1]));
  LUT5 #(
    .INIT(32'h2AA2A2A2)) 
    \cfg_wait_cnt[2]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\cfg_wait_cnt[2]_i_2_n_0 ),
        .I2(cfg_wait_cnt_reg__0[2]),
        .I3(cfg_wait_cnt_reg__0[1]),
        .I4(cfg_wait_cnt_reg__0[0]),
        .O(p_0_in__0[2]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \cfg_wait_cnt[2]_i_2 
       (.I0(cfg_wait_cnt_reg__0[2]),
        .I1(cfg_wait_cnt_reg__0[3]),
        .I2(cfg_wait_cnt_reg__0[0]),
        .I3(cfg_wait_cnt_reg__0[1]),
        .I4(cfg_wait_cnt_reg__0[5]),
        .I5(cfg_wait_cnt_reg__0[4]),
        .O(\cfg_wait_cnt[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A88828882888288)) 
    \cfg_wait_cnt[3]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(cfg_wait_cnt_reg__0[3]),
        .I2(\cfg_wait_cnt[5]_i_2_n_0 ),
        .I3(cfg_wait_cnt_reg__0[2]),
        .I4(cfg_wait_cnt_reg__0[5]),
        .I5(cfg_wait_cnt_reg__0[4]),
        .O(p_0_in__0[3]));
  LUT6 #(
    .INIT(64'hCCCC8CCC0000C000)) 
    \cfg_wait_cnt[4]_i_1 
       (.I0(cfg_wait_cnt_reg__0[5]),
        .I1(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I2(cfg_wait_cnt_reg__0[2]),
        .I3(cfg_wait_cnt_reg__0[3]),
        .I4(\cfg_wait_cnt[5]_i_2_n_0 ),
        .I5(cfg_wait_cnt_reg__0[4]),
        .O(p_0_in__0[4]));
  LUT6 #(
    .INIT(64'h8888A88888888888)) 
    \cfg_wait_cnt[5]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(cfg_wait_cnt_reg__0[5]),
        .I2(cfg_wait_cnt_reg__0[2]),
        .I3(cfg_wait_cnt_reg__0[3]),
        .I4(\cfg_wait_cnt[5]_i_2_n_0 ),
        .I5(cfg_wait_cnt_reg__0[4]),
        .O(p_0_in__0[5]));
  LUT2 #(
    .INIT(4'h7)) 
    \cfg_wait_cnt[5]_i_2 
       (.I0(cfg_wait_cnt_reg__0[0]),
        .I1(cfg_wait_cnt_reg__0[1]),
        .O(\cfg_wait_cnt[5]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cfg_wait_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(cfg_wait_cnt_reg__0[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \cfg_wait_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(cfg_wait_cnt_reg__0[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \cfg_wait_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(cfg_wait_cnt_reg__0[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \cfg_wait_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(cfg_wait_cnt_reg__0[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \cfg_wait_cnt_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(cfg_wait_cnt_reg__0[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \cfg_wait_cnt_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[5]),
        .Q(cfg_wait_cnt_reg__0[5]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \cplllock_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg_0[0]),
        .Q(cplllock_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \cplllock_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg_0[1]),
        .Q(cplllock_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \cplllock_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg_0[2]),
        .Q(cplllock_reg1[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \cplllock_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg_0[3]),
        .Q(cplllock_reg1[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \cplllock_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1[0]),
        .Q(cplllock_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \cplllock_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1[1]),
        .Q(cplllock_reg2[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \cplllock_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1[2]),
        .Q(cplllock_reg2[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \cplllock_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1[3]),
        .Q(cplllock_reg2[3]),
        .R(SS));
  LUT6 #(
    .INIT(64'hFFAAFFAAFFAAFEAA)) 
    cpllreset_i_1
       (.I0(\FSM_onehot_fsm_reg_n_0_[0] ),
        .I1(out[0]),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I3(cpllreset),
        .I4(\pipe_rst_fsm[2]_INST_0_i_1_n_0 ),
        .I5(out[2]),
        .O(cpllreset_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    cpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllreset_i_1_n_0),
        .Q(cpllreset),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    dclk_rst_reg
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm_reg_n_0_[1] ),
        .Q(dclk_rst),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    dclk_rst_reg1_reg
       (.C(gtreset_reg_2),
        .CE(1'b1),
        .D(dclk_rst),
        .Q(dclk_rst_reg1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    dclk_rst_reg2_reg
       (.C(gtreset_reg_2),
        .CE(1'b1),
        .D(dclk_rst_reg1),
        .Q(dclk_rst_reg2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(done_reg[0]),
        .Q(drp_done_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(done_reg[1]),
        .Q(drp_done_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(done_reg[2]),
        .Q(drp_done_reg1[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(done_reg[3]),
        .Q(drp_done_reg1[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(drp_done_reg1[0]),
        .Q(drp_done_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(drp_done_reg1[1]),
        .Q(drp_done_reg2[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(drp_done_reg1[2]),
        .Q(drp_done_reg2[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(drp_done_reg1[3]),
        .Q(drp_done_reg2[3]),
        .R(SS));
  LUT4 #(
    .INIT(16'h8000)) 
    fsm2_inferred__1
       (.I0(rate_idle_reg2[1]),
        .I1(rate_idle_reg2[0]),
        .I2(rate_idle_reg2[2]),
        .I3(rate_idle_reg2[3]),
        .O(fsm2_inferred__1_n_0));
  LUT3 #(
    .INIT(8'hBA)) 
    gtreset_i_1
       (.I0(\FSM_onehot_fsm_reg_n_0_[0] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[5] ),
        .I2(DRP_GTXRESET),
        .O(gtreset_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gtreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_i_1_n_0),
        .Q(DRP_GTXRESET),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \phystatus_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg_1[0]),
        .Q(phystatus_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \phystatus_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg_1[1]),
        .Q(phystatus_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \phystatus_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg_1[2]),
        .Q(phystatus_reg1[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \phystatus_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg_1[3]),
        .Q(phystatus_reg1[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \phystatus_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_reg1[0]),
        .Q(phystatus_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \phystatus_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_reg1[1]),
        .Q(phystatus_reg2[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \phystatus_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_reg1[2]),
        .Q(phystatus_reg2[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \phystatus_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(phystatus_reg1[3]),
        .Q(phystatus_reg2[3]),
        .R(SS));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \pipe_rst_fsm[0]_INST_0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[5] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[13] ),
        .I2(out[1]),
        .I3(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I4(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(pipe_rst_fsm[0]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \pipe_rst_fsm[1]_INST_0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[14] ),
        .I1(out[1]),
        .I2(\FSM_onehot_fsm_reg_n_0_[0] ),
        .I3(\FSM_onehot_fsm_reg_n_0_[5] ),
        .I4(\FSM_onehot_fsm_reg_n_0_[4] ),
        .O(pipe_rst_fsm[1]));
  LUT2 #(
    .INIT(4'hE)) 
    \pipe_rst_fsm[2]_INST_0 
       (.I0(\pipe_rst_fsm[2]_INST_0_i_1_n_0 ),
        .I1(\FSM_onehot_fsm_reg_n_0_[3] ),
        .O(pipe_rst_fsm[2]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \pipe_rst_fsm[2]_INST_0_i_1 
       (.I0(out[1]),
        .I1(\FSM_onehot_fsm_reg_n_0_[14] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[13] ),
        .I3(\FSM_onehot_fsm_reg_n_0_[5] ),
        .I4(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I5(userrdy),
        .O(\pipe_rst_fsm[2]_INST_0_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \pipe_rst_fsm[3]_INST_0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[14] ),
        .I1(out[1]),
        .I2(\FSM_onehot_fsm_reg_n_0_[13] ),
        .I3(userrdy),
        .O(pipe_rst_fsm[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qpll_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_qrst_idle),
        .Q(qpll_idle_reg1),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qpll_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(qpll_idle_reg1),
        .Q(qpll_idle_reg2),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_idle_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle[0]),
        .Q(rate_idle_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_idle_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle[1]),
        .Q(rate_idle_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_idle_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle[2]),
        .Q(rate_idle_reg1[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_idle_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle[3]),
        .Q(rate_idle_reg1[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_idle_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1[0]),
        .Q(rate_idle_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_idle_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1[1]),
        .Q(rate_idle_reg2[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_idle_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1[2]),
        .Q(rate_idle_reg2[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_idle_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1[3]),
        .Q(rate_idle_reg2[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \resetdone_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[0]),
        .Q(resetdone_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \resetdone_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[1]),
        .Q(resetdone_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \resetdone_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[2]),
        .Q(resetdone_reg1[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \resetdone_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[3]),
        .Q(resetdone_reg1[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \resetdone_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(resetdone_reg1[0]),
        .Q(resetdone_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \resetdone_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(resetdone_reg1[1]),
        .Q(resetdone_reg2[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \resetdone_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(resetdone_reg1[2]),
        .Q(resetdone_reg2[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \resetdone_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(resetdone_reg1[3]),
        .Q(resetdone_reg2[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxcdrlock_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxcdrlock_cnt_reg[2] [0]),
        .Q(rxcdrlock_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxcdrlock_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxcdrlock_cnt_reg[2] [1]),
        .Q(rxcdrlock_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxcdrlock_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxcdrlock_cnt_reg[2] [2]),
        .Q(rxcdrlock_reg1[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxcdrlock_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxcdrlock_cnt_reg[2] [3]),
        .Q(rxcdrlock_reg1[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxcdrlock_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1[0]),
        .Q(rxcdrlock_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxcdrlock_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1[1]),
        .Q(rxcdrlock_reg2[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxcdrlock_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1[2]),
        .Q(rxcdrlock_reg2[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxcdrlock_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1[3]),
        .Q(rxcdrlock_reg2[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxpmaresetdone_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxpmaresetdone_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxpmaresetdone_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxpmaresetdone_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxpmaresetdone_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxpmaresetdone_reg1[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxpmaresetdone_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxpmaresetdone_reg1[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxpmaresetdone_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxpmaresetdone_reg1[0]),
        .Q(rxpmaresetdone_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxpmaresetdone_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxpmaresetdone_reg1[1]),
        .Q(rxpmaresetdone_reg2[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxpmaresetdone_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxpmaresetdone_reg1[2]),
        .Q(rxpmaresetdone_reg2[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rxpmaresetdone_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(rxpmaresetdone_reg1[3]),
        .Q(rxpmaresetdone_reg2[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    rxusrclk_rst_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(cpllreset),
        .Q(rxusrclk_rst_reg1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE #(
    .INIT(1'b0)) 
    rxusrclk_rst_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxusrclk_rst_reg1),
        .Q(rxusrclk_rst_reg2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    start_reg1_i_1__0
       (.I0(rst_drp_start),
        .I1(RATE_DRP_START),
        .O(DRP_START));
  LUT2 #(
    .INIT(4'hE)) 
    start_reg1_i_1__1
       (.I0(rst_drp_start),
        .I1(drp_start_reg),
        .O(start_reg1_reg));
  LUT2 #(
    .INIT(4'hE)) 
    start_reg1_i_1__2
       (.I0(rst_drp_start),
        .I1(drp_start_reg_0),
        .O(start_reg1_reg_0));
  LUT2 #(
    .INIT(4'hE)) 
    start_reg1_i_1__3
       (.I0(rst_drp_start),
        .I1(drp_start_reg_1),
        .O(start_reg1_reg_1));
  LUT2 #(
    .INIT(4'hE)) 
    \txeq_preset[16]_i_1 
       (.I0(cpllreset),
        .I1(out0),
        .O(\txeq_preset_reg[16] ));
  LUT2 #(
    .INIT(4'hE)) 
    \txeq_preset[16]_i_1__0 
       (.I0(cpllreset),
        .I1(\FSM_onehot_fsm_tx_reg[2] ),
        .O(\txeq_preset_reg[16]_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \txeq_preset[16]_i_1__1 
       (.I0(cpllreset),
        .I1(\FSM_onehot_fsm_tx_reg[2]_0 ),
        .O(\txeq_preset_reg[16]_1 ));
  LUT2 #(
    .INIT(4'hE)) 
    \txeq_preset[16]_i_1__2 
       (.I0(cpllreset),
        .I1(\FSM_onehot_fsm_tx_reg[2]_1 ),
        .O(\txeq_preset_reg[16]_2 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txsync_done_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txsync_fsm.txsync_done_reg [0]),
        .Q(txsync_done_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txsync_done_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txsync_fsm.txsync_done_reg [1]),
        .Q(txsync_done_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txsync_done_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txsync_fsm.txsync_done_reg [2]),
        .Q(txsync_done_reg1[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txsync_done_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\txsync_fsm.txsync_done_reg [3]),
        .Q(txsync_done_reg1[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txsync_done_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_done_reg1[0]),
        .Q(txsync_done_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txsync_done_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_done_reg1[1]),
        .Q(txsync_done_reg2[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txsync_done_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_done_reg1[2]),
        .Q(txsync_done_reg2[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txsync_done_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_done_reg1[3]),
        .Q(txsync_done_reg2[3]),
        .R(SS));
  LUT3 #(
    .INIT(8'hB8)) 
    userrdy_i_1
       (.I0(mmcm_lock_reg2),
        .I1(userrdy),
        .I2(rst_userrdy),
        .O(userrdy_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    userrdy_reg
       (.C(CLK),
        .CE(1'b1),
        .D(userrdy_i_1_n_0),
        .Q(rst_userrdy),
        .R(SS));
  LUT2 #(
    .INIT(4'hE)) 
    x16_reg1_i_1
       (.I0(rst_drp_x16),
        .I1(RATE_DRP_X16),
        .O(DRP_X16));
  LUT2 #(
    .INIT(4'hE)) 
    x16_reg1_i_1__0
       (.I0(rst_drp_x16),
        .I1(drp_x16_reg),
        .O(x16_reg1_reg));
  LUT2 #(
    .INIT(4'hE)) 
    x16_reg1_i_1__1
       (.I0(rst_drp_x16),
        .I1(drp_x16_reg_0),
        .O(x16_reg1_reg_0));
  LUT2 #(
    .INIT(4'hE)) 
    x16_reg1_i_1__2
       (.I0(rst_drp_x16),
        .I1(drp_x16_reg_1),
        .O(x16_reg1_reg_1));
  LUT2 #(
    .INIT(4'hE)) 
    x16x20_mode_reg1_i_1
       (.I0(rst_drp_x16x20_mode),
        .I1(RATE_DRP_X16X20_MODE),
        .O(DRP_X16X20_MODE));
  LUT2 #(
    .INIT(4'hE)) 
    x16x20_mode_reg1_i_1__0
       (.I0(rst_drp_x16x20_mode),
        .I1(drp_x16x20_mode_reg),
        .O(x16x20_mode_reg1_reg));
  LUT2 #(
    .INIT(4'hE)) 
    x16x20_mode_reg1_i_1__1
       (.I0(rst_drp_x16x20_mode),
        .I1(drp_x16x20_mode_reg_0),
        .O(x16x20_mode_reg1_reg_0));
  LUT2 #(
    .INIT(4'hE)) 
    x16x20_mode_reg1_i_1__2
       (.I0(rst_drp_x16x20_mode),
        .I1(drp_x16x20_mode_reg_1),
        .O(x16x20_mode_reg1_reg_1));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_sync" *) 
module pcie_7x_0_pcie_7x_0_pipe_sync
   (\txsync_fsm.txdlyen_reg_0 ,
    pipe_sync_fsm_rx,
    RST_TXSYNC_DONE,
    sync_txdlyen_0,
    out,
    txelecidle_reg2_reg,
    RST_CPLLRESET,
    CLK,
    user_active_lane,
    SYNC_TXPHALIGNDONE,
    SYNC_TXSYNC_START,
    SYNC_MMCM_LOCK,
    SYNC_TXDLYSRESETDONE,
    SYNC_TXPHINITDONE,
    USER_RATE_GEN3,
    SYNC_RATE_IDLE,
    SYNC_RXELECIDLE,
    SYNC_RXCDRLOCK,
    SYNC_RXSYNC_START,
    SYNC_RXDLYSRESETDONE,
    SYNC_RXPHALIGNDONE_M,
    SYNC_RXPHALIGNDONE_S);
  output [5:0]\txsync_fsm.txdlyen_reg_0 ;
  output [0:0]pipe_sync_fsm_rx;
  output [0:0]RST_TXSYNC_DONE;
  output sync_txdlyen_0;
  input out;
  input txelecidle_reg2_reg;
  input RST_CPLLRESET;
  input CLK;
  input [0:0]user_active_lane;
  input SYNC_TXPHALIGNDONE;
  input SYNC_TXSYNC_START;
  input SYNC_MMCM_LOCK;
  input SYNC_TXDLYSRESETDONE;
  input SYNC_TXPHINITDONE;
  input USER_RATE_GEN3;
  input SYNC_RATE_IDLE;
  input SYNC_RXELECIDLE;
  input SYNC_RXCDRLOCK;
  input SYNC_RXSYNC_START;
  input SYNC_RXDLYSRESETDONE;
  input SYNC_RXPHALIGNDONE_M;
  input SYNC_RXPHALIGNDONE_S;

  wire CLK;
  wire \FSM_onehot_txsync_fsm.fsm_tx[1]_i_1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[2]_i_1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[3]_i_1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[4]_i_1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[4]_i_2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_3_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_4_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[6]_i_1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[6]_i_2_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_txsync_fsm.fsm_tx_reg_n_0_[0] ;
  wire RST_CPLLRESET;
  wire [0:0]RST_TXSYNC_DONE;
  wire SYNC_MMCM_LOCK;
  wire SYNC_RATE_IDLE;
  wire SYNC_RXCDRLOCK;
  wire SYNC_RXDLYSRESETDONE;
  wire SYNC_RXELECIDLE;
  wire SYNC_RXPHALIGNDONE_M;
  wire SYNC_RXPHALIGNDONE_S;
  wire SYNC_RXSYNC_START;
  wire SYNC_TXDLYSRESETDONE;
  wire SYNC_TXPHALIGNDONE;
  wire SYNC_TXPHINITDONE;
  wire SYNC_TXSYNC_START;
  wire USER_RATE_GEN3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  wire out;
  wire [0:0]pipe_sync_fsm_rx;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxdlysresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxdlysresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxelecidle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxelecidle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_m_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_m_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_s_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_s_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_donem_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_donem_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsyncdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsyncdone_reg2;
  wire sync_txdlyen_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg3;
  wire txelecidle_reg2_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg3;
  wire \txsync_fsm.txdlyen_i_1_n_0 ;
  wire \txsync_fsm.txdlyen_i_2_n_0 ;
  (* RTL_KEEP = "yes" *) wire [5:0]\txsync_fsm.txdlyen_reg_0 ;
  wire \txsync_fsm.txsync_done_i_1_n_0 ;
  wire \txsync_fsm.txsync_done_i_2_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg3;
  wire [0:0]user_active_lane;

  LUT6 #(
    .INIT(64'h44444444F4F444F4)) 
    \FSM_onehot_txsync_fsm.fsm_tx[1]_i_1 
       (.I0(txsync_start_reg2),
        .I1(\txsync_fsm.txdlyen_reg_0 [0]),
        .I2(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_2_n_0 ),
        .I3(\txsync_fsm.txdlyen_reg_0 [5]),
        .I4(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_4_n_0 ),
        .I5(\txsync_fsm.txdlyen_reg_0 [4]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \FSM_onehot_txsync_fsm.fsm_tx[2]_i_1 
       (.I0(txsync_start_reg2),
        .I1(\txsync_fsm.txdlyen_reg_0 [0]),
        .I2(\txsync_fsm.txdlyen_reg_0 [1]),
        .I3(mmcm_lock_reg2),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h2320202023202320)) 
    \FSM_onehot_txsync_fsm.fsm_tx[3]_i_1 
       (.I0(mmcm_lock_reg2),
        .I1(\txsync_fsm.txdlyen_reg_0 [0]),
        .I2(\txsync_fsm.txdlyen_reg_0 [1]),
        .I3(\txsync_fsm.txdlyen_reg_0 [2]),
        .I4(txdlysresetdone_reg3),
        .I5(txdlysresetdone_reg2),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4000400040F04000)) 
    \FSM_onehot_txsync_fsm.fsm_tx[4]_i_1 
       (.I0(txdlysresetdone_reg3),
        .I1(txdlysresetdone_reg2),
        .I2(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_2_n_0 ),
        .I3(\txsync_fsm.txdlyen_reg_0 [2]),
        .I4(\txsync_fsm.txdlyen_reg_0 [3]),
        .I5(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_2_n_0 ),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_onehot_txsync_fsm.fsm_tx[4]_i_2 
       (.I0(\txsync_fsm.txdlyen_reg_0 [0]),
        .I1(\txsync_fsm.txdlyen_reg_0 [1]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h80808C80)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_1 
       (.I0(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_2_n_0 ),
        .I1(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3_n_0 ),
        .I2(\txsync_fsm.txdlyen_reg_0 [3]),
        .I3(\txsync_fsm.txdlyen_reg_0 [4]),
        .I4(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_4_n_0 ),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_2 
       (.I0(txphinitdone_reg3),
        .I1(txphinitdone_reg2),
        .I2(out),
        .I3(txelecidle_reg2_reg),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_3 
       (.I0(\txsync_fsm.txdlyen_reg_0 [1]),
        .I1(\txsync_fsm.txdlyen_reg_0 [0]),
        .I2(\txsync_fsm.txdlyen_reg_0 [2]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_4 
       (.I0(txphaligndone_reg3),
        .I1(txphaligndone_reg2),
        .I2(out),
        .I3(txelecidle_reg2_reg),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0A00AAAA80880000)) 
    \FSM_onehot_txsync_fsm.fsm_tx[6]_i_1 
       (.I0(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_2_n_0 ),
        .I1(\txsync_fsm.txdlyen_reg_0 [5]),
        .I2(txphaligndone_reg3),
        .I3(txphaligndone_reg2),
        .I4(user_active_lane),
        .I5(\txsync_fsm.txdlyen_reg_0 [4]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \FSM_onehot_txsync_fsm.fsm_tx[6]_i_2 
       (.I0(\txsync_fsm.txdlyen_reg_0 [2]),
        .I1(\txsync_fsm.txdlyen_reg_0 [0]),
        .I2(\txsync_fsm.txdlyen_reg_0 [1]),
        .I3(\txsync_fsm.txdlyen_reg_0 [3]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_2_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_txsync_fsm.fsm_tx_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[1]_i_1_n_0 ),
        .Q(\txsync_fsm.txdlyen_reg_0 [0]),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[2]_i_1_n_0 ),
        .Q(\txsync_fsm.txdlyen_reg_0 [1]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[3]_i_1_n_0 ),
        .Q(\txsync_fsm.txdlyen_reg_0 [2]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_1_n_0 ),
        .Q(\txsync_fsm.txdlyen_reg_0 [3]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_1_n_0 ),
        .Q(\txsync_fsm.txdlyen_reg_0 [4]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_1_n_0 ),
        .Q(\txsync_fsm.txdlyen_reg_0 [5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_GEN3),
        .Q(gen3_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RATE_IDLE),
        .Q(rate_idle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1),
        .Q(rate_idle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXCDRLOCK),
        .Q(rxcdrlock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1),
        .Q(rxcdrlock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxdlysresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXDLYSRESETDONE),
        .Q(rxdlysresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxdlysresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxdlysresetdone_reg1),
        .Q(rxdlysresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxelecidle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXELECIDLE),
        .Q(rxelecidle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxelecidle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxelecidle_reg1),
        .Q(rxelecidle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_m_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXPHALIGNDONE_M),
        .Q(rxphaligndone_m_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_m_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxphaligndone_m_reg1),
        .Q(rxphaligndone_m_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_s_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXPHALIGNDONE_S),
        .Q(rxphaligndone_s_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_s_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxphaligndone_s_reg1),
        .Q(rxphaligndone_s_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_donem_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsync_donem_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_donem_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_donem_reg1),
        .Q(rxsync_donem_reg2),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxsync_fsm_disable.fsm_rx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(pipe_sync_fsm_rx),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXSYNC_START),
        .Q(rxsync_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_start_reg1),
        .Q(rxsync_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsyncdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsyncdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsyncdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsyncdone_reg1),
        .Q(rxsyncdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXDLYSRESETDONE),
        .Q(txdlysresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txdlysresetdone_reg1),
        .Q(txdlysresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txdlysresetdone_reg2),
        .Q(txdlysresetdone_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXPHALIGNDONE),
        .Q(txphaligndone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphaligndone_reg1),
        .Q(txphaligndone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphaligndone_reg2),
        .Q(txphaligndone_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXPHINITDONE),
        .Q(txphinitdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphinitdone_reg1),
        .Q(txphinitdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphinitdone_reg2),
        .Q(txphinitdone_reg3),
        .R(RST_CPLLRESET));
  LUT4 #(
    .INIT(16'hABA8)) 
    \txsync_fsm.txdlyen_i_1 
       (.I0(\txsync_fsm.txdlyen_reg_0 [5]),
        .I1(\txsync_fsm.txdlyen_i_2_n_0 ),
        .I2(txsync_start_reg2),
        .I3(sync_txdlyen_0),
        .O(\txsync_fsm.txdlyen_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFFFF)) 
    \txsync_fsm.txdlyen_i_2 
       (.I0(\txsync_fsm.txdlyen_reg_0 [4]),
        .I1(\txsync_fsm.txdlyen_reg_0 [5]),
        .I2(\txsync_fsm.txdlyen_reg_0 [2]),
        .I3(\txsync_fsm.txdlyen_reg_0 [3]),
        .I4(\txsync_fsm.txdlyen_reg_0 [0]),
        .I5(\txsync_fsm.txdlyen_reg_0 [1]),
        .O(\txsync_fsm.txdlyen_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txsync_fsm.txdlyen_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(\txsync_fsm.txdlyen_i_1_n_0 ),
        .Q(sync_txdlyen_0),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h22A2FFFF22A20000)) 
    \txsync_fsm.txsync_done_i_1 
       (.I0(\txsync_fsm.txdlyen_reg_0 [5]),
        .I1(user_active_lane),
        .I2(txphaligndone_reg2),
        .I3(txphaligndone_reg3),
        .I4(\txsync_fsm.txsync_done_i_2_n_0 ),
        .I5(RST_TXSYNC_DONE),
        .O(\txsync_fsm.txsync_done_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \txsync_fsm.txsync_done_i_2 
       (.I0(\txsync_fsm.txdlyen_i_2_n_0 ),
        .I1(txsync_start_reg2),
        .O(\txsync_fsm.txsync_done_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txsync_fsm.txsync_done_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(\txsync_fsm.txsync_done_i_1_n_0 ),
        .Q(RST_TXSYNC_DONE),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXSYNC_START),
        .Q(txsync_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_start_reg1),
        .Q(txsync_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_start_reg2),
        .Q(txsync_start_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txsyncdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsyncdone_reg1),
        .Q(txsyncdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsyncdone_reg2),
        .Q(txsyncdone_reg3),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_sync" *) 
module pcie_7x_0_pcie_7x_0_pipe_sync_25
   (out,
    pipe_sync_fsm_rx,
    RST_TXSYNC_DONE,
    txelecidle_reg2_reg,
    txcompliance_reg2_reg,
    RST_CPLLRESET,
    CLK,
    SYNC_TXPHALIGNDONE,
    SYNC_TXSYNC_START,
    SYNC_MMCM_LOCK,
    SYNC_TXDLYSRESETDONE,
    SYNC_TXPHINITDONE,
    SYNC_GEN3,
    SYNC_RATE_IDLE,
    gtreset_reg,
    SYNC_RXCDRLOCK,
    SYNC_RXSYNC_START,
    SYNC_RXDLYSRESETDONE,
    SYNC_RXPHALIGNDONE_M,
    SYNC_RXPHALIGNDONE_S);
  output [5:0]out;
  output [0:0]pipe_sync_fsm_rx;
  output [0:0]RST_TXSYNC_DONE;
  input txelecidle_reg2_reg;
  input txcompliance_reg2_reg;
  input RST_CPLLRESET;
  input CLK;
  input SYNC_TXPHALIGNDONE;
  input SYNC_TXSYNC_START;
  input SYNC_MMCM_LOCK;
  input SYNC_TXDLYSRESETDONE;
  input SYNC_TXPHINITDONE;
  input SYNC_GEN3;
  input SYNC_RATE_IDLE;
  input gtreset_reg;
  input SYNC_RXCDRLOCK;
  input SYNC_RXSYNC_START;
  input SYNC_RXDLYSRESETDONE;
  input SYNC_RXPHALIGNDONE_M;
  input SYNC_RXPHALIGNDONE_S;

  wire CLK;
  wire \FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__0_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__0_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__0_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__0_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__0_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__0_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__0_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__0_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__0_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__0_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_txsync_fsm.fsm_tx_reg_n_0_[0] ;
  wire RST_CPLLRESET;
  wire [0:0]RST_TXSYNC_DONE;
  wire SYNC_GEN3;
  wire SYNC_MMCM_LOCK;
  wire SYNC_RATE_IDLE;
  wire SYNC_RXCDRLOCK;
  wire SYNC_RXDLYSRESETDONE;
  wire SYNC_RXPHALIGNDONE_M;
  wire SYNC_RXPHALIGNDONE_S;
  wire SYNC_RXSYNC_START;
  wire SYNC_TXDLYSRESETDONE;
  wire SYNC_TXPHALIGNDONE;
  wire SYNC_TXPHINITDONE;
  wire SYNC_TXSYNC_START;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  wire gtreset_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  (* RTL_KEEP = "yes" *) wire [5:0]out;
  wire [0:0]pipe_sync_fsm_rx;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxdlysresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxdlysresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxelecidle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxelecidle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_m_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_m_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_s_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_s_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_donem_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_donem_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsyncdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsyncdone_reg2;
  wire txcompliance_reg2_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg3;
  wire txelecidle_reg2_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg3;
  wire \txsync_fsm.txsync_done_i_1__0_n_0 ;
  wire \txsync_fsm.txsync_done_i_2__0_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg3;

  LUT6 #(
    .INIT(64'h00000001FFFF0001)) 
    \FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__0 
       (.I0(out[2]),
        .I1(out[1]),
        .I2(out[3]),
        .I3(out[4]),
        .I4(out[0]),
        .I5(txsync_start_reg2),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__0 
       (.I0(txsync_start_reg2),
        .I1(out[0]),
        .I2(out[1]),
        .I3(mmcm_lock_reg2),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFD000D0)) 
    \FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__0 
       (.I0(txdlysresetdone_reg2),
        .I1(txdlysresetdone_reg3),
        .I2(out[2]),
        .I3(out[1]),
        .I4(mmcm_lock_reg2),
        .I5(out[0]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000004F40404)) 
    \FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__0 
       (.I0(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__0_n_0 ),
        .I1(out[3]),
        .I2(out[2]),
        .I3(txdlysresetdone_reg3),
        .I4(txdlysresetdone_reg2),
        .I5(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__0_n_0 ),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__0 
       (.I0(out[1]),
        .I1(out[0]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0101010000000100)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__0 
       (.I0(out[2]),
        .I1(out[0]),
        .I2(out[1]),
        .I3(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__0_n_0 ),
        .I4(out[3]),
        .I5(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__0_n_0 ),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h2A2A002A)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__0 
       (.I0(out[4]),
        .I1(txelecidle_reg2_reg),
        .I2(txcompliance_reg2_reg),
        .I3(txphaligndone_reg2),
        .I4(txphaligndone_reg3),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__0 
       (.I0(txphinitdone_reg3),
        .I1(txphinitdone_reg2),
        .I2(txcompliance_reg2_reg),
        .I3(txelecidle_reg2_reg),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__0 
       (.I0(out[1]),
        .I1(out[0]),
        .I2(out[3]),
        .I3(out[2]),
        .I4(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__0_n_0 ),
        .I5(out[4]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__0 
       (.I0(txphaligndone_reg3),
        .I1(txphaligndone_reg2),
        .I2(txcompliance_reg2_reg),
        .I3(txelecidle_reg2_reg),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__0_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_txsync_fsm.fsm_tx_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__0_n_0 ),
        .Q(out[0]),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__0_n_0 ),
        .Q(out[1]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__0_n_0 ),
        .Q(out[2]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__0_n_0 ),
        .Q(out[3]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__0_n_0 ),
        .Q(out[4]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__0_n_0 ),
        .Q(out[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_GEN3),
        .Q(gen3_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RATE_IDLE),
        .Q(rate_idle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1),
        .Q(rate_idle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXCDRLOCK),
        .Q(rxcdrlock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1),
        .Q(rxcdrlock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxdlysresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXDLYSRESETDONE),
        .Q(rxdlysresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxdlysresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxdlysresetdone_reg1),
        .Q(rxdlysresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxelecidle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg),
        .Q(rxelecidle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxelecidle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxelecidle_reg1),
        .Q(rxelecidle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_m_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXPHALIGNDONE_M),
        .Q(rxphaligndone_m_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_m_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxphaligndone_m_reg1),
        .Q(rxphaligndone_m_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_s_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXPHALIGNDONE_S),
        .Q(rxphaligndone_s_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_s_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxphaligndone_s_reg1),
        .Q(rxphaligndone_s_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_donem_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsync_donem_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_donem_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_donem_reg1),
        .Q(rxsync_donem_reg2),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxsync_fsm_disable.fsm_rx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(pipe_sync_fsm_rx),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXSYNC_START),
        .Q(rxsync_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_start_reg1),
        .Q(rxsync_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsyncdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsyncdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsyncdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsyncdone_reg1),
        .Q(rxsyncdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXDLYSRESETDONE),
        .Q(txdlysresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txdlysresetdone_reg1),
        .Q(txdlysresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txdlysresetdone_reg2),
        .Q(txdlysresetdone_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXPHALIGNDONE),
        .Q(txphaligndone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphaligndone_reg1),
        .Q(txphaligndone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphaligndone_reg2),
        .Q(txphaligndone_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXPHINITDONE),
        .Q(txphinitdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphinitdone_reg1),
        .Q(txphinitdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphinitdone_reg2),
        .Q(txphinitdone_reg3),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hAABAAAAA)) 
    \txsync_fsm.txsync_done_i_1__0 
       (.I0(out[5]),
        .I1(out[4]),
        .I2(out[0]),
        .I3(\txsync_fsm.txsync_done_i_2__0_n_0 ),
        .I4(RST_TXSYNC_DONE),
        .O(\txsync_fsm.txsync_done_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \txsync_fsm.txsync_done_i_2__0 
       (.I0(out[2]),
        .I1(out[3]),
        .I2(txsync_start_reg2),
        .I3(out[1]),
        .O(\txsync_fsm.txsync_done_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txsync_fsm.txsync_done_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(\txsync_fsm.txsync_done_i_1__0_n_0 ),
        .Q(RST_TXSYNC_DONE),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXSYNC_START),
        .Q(txsync_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_start_reg1),
        .Q(txsync_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_start_reg2),
        .Q(txsync_start_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txsyncdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsyncdone_reg1),
        .Q(txsyncdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsyncdone_reg2),
        .Q(txsyncdone_reg3),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_sync" *) 
module pcie_7x_0_pcie_7x_0_pipe_sync_31
   (out,
    pipe_sync_fsm_rx,
    RST_TXSYNC_DONE,
    txelecidle_reg2_reg,
    txcompliance_reg2_reg,
    RST_CPLLRESET,
    CLK,
    SYNC_TXPHALIGNDONE,
    SYNC_TXSYNC_START,
    SYNC_MMCM_LOCK,
    SYNC_TXDLYSRESETDONE,
    SYNC_TXPHINITDONE,
    SYNC_GEN3,
    SYNC_RATE_IDLE,
    gtreset_reg,
    SYNC_RXCDRLOCK,
    SYNC_RXSYNC_START,
    SYNC_RXDLYSRESETDONE,
    SYNC_RXPHALIGNDONE_M,
    SYNC_RXPHALIGNDONE_S);
  output [5:0]out;
  output [0:0]pipe_sync_fsm_rx;
  output [0:0]RST_TXSYNC_DONE;
  input txelecidle_reg2_reg;
  input txcompliance_reg2_reg;
  input RST_CPLLRESET;
  input CLK;
  input SYNC_TXPHALIGNDONE;
  input SYNC_TXSYNC_START;
  input SYNC_MMCM_LOCK;
  input SYNC_TXDLYSRESETDONE;
  input SYNC_TXPHINITDONE;
  input SYNC_GEN3;
  input SYNC_RATE_IDLE;
  input gtreset_reg;
  input SYNC_RXCDRLOCK;
  input SYNC_RXSYNC_START;
  input SYNC_RXDLYSRESETDONE;
  input SYNC_RXPHALIGNDONE_M;
  input SYNC_RXPHALIGNDONE_S;

  wire CLK;
  wire \FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__1_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_txsync_fsm.fsm_tx_reg_n_0_[0] ;
  wire RST_CPLLRESET;
  wire [0:0]RST_TXSYNC_DONE;
  wire SYNC_GEN3;
  wire SYNC_MMCM_LOCK;
  wire SYNC_RATE_IDLE;
  wire SYNC_RXCDRLOCK;
  wire SYNC_RXDLYSRESETDONE;
  wire SYNC_RXPHALIGNDONE_M;
  wire SYNC_RXPHALIGNDONE_S;
  wire SYNC_RXSYNC_START;
  wire SYNC_TXDLYSRESETDONE;
  wire SYNC_TXPHALIGNDONE;
  wire SYNC_TXPHINITDONE;
  wire SYNC_TXSYNC_START;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  wire gtreset_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  (* RTL_KEEP = "yes" *) wire [5:0]out;
  wire [0:0]pipe_sync_fsm_rx;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxdlysresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxdlysresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxelecidle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxelecidle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_m_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_m_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_s_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_s_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_donem_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_donem_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsyncdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsyncdone_reg2;
  wire txcompliance_reg2_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg3;
  wire txelecidle_reg2_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg3;
  wire \txsync_fsm.txsync_done_i_1__1_n_0 ;
  wire \txsync_fsm.txsync_done_i_2__1_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg3;

  LUT6 #(
    .INIT(64'h00000001FFFF0001)) 
    \FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__1 
       (.I0(out[2]),
        .I1(out[1]),
        .I2(out[3]),
        .I3(out[4]),
        .I4(out[0]),
        .I5(txsync_start_reg2),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__1 
       (.I0(txsync_start_reg2),
        .I1(out[0]),
        .I2(out[1]),
        .I3(mmcm_lock_reg2),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFD000D0)) 
    \FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__1 
       (.I0(txdlysresetdone_reg2),
        .I1(txdlysresetdone_reg3),
        .I2(out[2]),
        .I3(out[1]),
        .I4(mmcm_lock_reg2),
        .I5(out[0]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000004F40404)) 
    \FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__1 
       (.I0(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__1_n_0 ),
        .I1(out[3]),
        .I2(out[2]),
        .I3(txdlysresetdone_reg3),
        .I4(txdlysresetdone_reg2),
        .I5(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__1_n_0 ),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__1 
       (.I0(out[1]),
        .I1(out[0]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0101010000000100)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__1 
       (.I0(out[2]),
        .I1(out[0]),
        .I2(out[1]),
        .I3(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__1_n_0 ),
        .I4(out[3]),
        .I5(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__1_n_0 ),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h2A2A002A)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__1 
       (.I0(out[4]),
        .I1(txelecidle_reg2_reg),
        .I2(txcompliance_reg2_reg),
        .I3(txphaligndone_reg2),
        .I4(txphaligndone_reg3),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__1 
       (.I0(txphinitdone_reg3),
        .I1(txphinitdone_reg2),
        .I2(txcompliance_reg2_reg),
        .I3(txelecidle_reg2_reg),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__1 
       (.I0(out[1]),
        .I1(out[0]),
        .I2(out[3]),
        .I3(out[2]),
        .I4(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__1_n_0 ),
        .I5(out[4]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__1 
       (.I0(txphaligndone_reg3),
        .I1(txphaligndone_reg2),
        .I2(txcompliance_reg2_reg),
        .I3(txelecidle_reg2_reg),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__1_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_txsync_fsm.fsm_tx_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__1_n_0 ),
        .Q(out[0]),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__1_n_0 ),
        .Q(out[1]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__1_n_0 ),
        .Q(out[2]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__1_n_0 ),
        .Q(out[3]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__1_n_0 ),
        .Q(out[4]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__1_n_0 ),
        .Q(out[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_GEN3),
        .Q(gen3_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RATE_IDLE),
        .Q(rate_idle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1),
        .Q(rate_idle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXCDRLOCK),
        .Q(rxcdrlock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1),
        .Q(rxcdrlock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxdlysresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXDLYSRESETDONE),
        .Q(rxdlysresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxdlysresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxdlysresetdone_reg1),
        .Q(rxdlysresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxelecidle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg),
        .Q(rxelecidle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxelecidle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxelecidle_reg1),
        .Q(rxelecidle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_m_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXPHALIGNDONE_M),
        .Q(rxphaligndone_m_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_m_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxphaligndone_m_reg1),
        .Q(rxphaligndone_m_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_s_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXPHALIGNDONE_S),
        .Q(rxphaligndone_s_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_s_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxphaligndone_s_reg1),
        .Q(rxphaligndone_s_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_donem_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsync_donem_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_donem_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_donem_reg1),
        .Q(rxsync_donem_reg2),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxsync_fsm_disable.fsm_rx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(pipe_sync_fsm_rx),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXSYNC_START),
        .Q(rxsync_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_start_reg1),
        .Q(rxsync_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsyncdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsyncdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsyncdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsyncdone_reg1),
        .Q(rxsyncdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXDLYSRESETDONE),
        .Q(txdlysresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txdlysresetdone_reg1),
        .Q(txdlysresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txdlysresetdone_reg2),
        .Q(txdlysresetdone_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXPHALIGNDONE),
        .Q(txphaligndone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphaligndone_reg1),
        .Q(txphaligndone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphaligndone_reg2),
        .Q(txphaligndone_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXPHINITDONE),
        .Q(txphinitdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphinitdone_reg1),
        .Q(txphinitdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphinitdone_reg2),
        .Q(txphinitdone_reg3),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hAABAAAAA)) 
    \txsync_fsm.txsync_done_i_1__1 
       (.I0(out[5]),
        .I1(out[4]),
        .I2(out[0]),
        .I3(\txsync_fsm.txsync_done_i_2__1_n_0 ),
        .I4(RST_TXSYNC_DONE),
        .O(\txsync_fsm.txsync_done_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \txsync_fsm.txsync_done_i_2__1 
       (.I0(out[2]),
        .I1(out[3]),
        .I2(txsync_start_reg2),
        .I3(out[1]),
        .O(\txsync_fsm.txsync_done_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txsync_fsm.txsync_done_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(\txsync_fsm.txsync_done_i_1__1_n_0 ),
        .Q(RST_TXSYNC_DONE),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXSYNC_START),
        .Q(txsync_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_start_reg1),
        .Q(txsync_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_start_reg2),
        .Q(txsync_start_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txsyncdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsyncdone_reg1),
        .Q(txsyncdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsyncdone_reg2),
        .Q(txsyncdone_reg3),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_sync" *) 
module pcie_7x_0_pcie_7x_0_pipe_sync_37
   (out,
    pipe_sync_fsm_rx,
    RST_TXSYNC_DONE,
    txelecidle_reg2_reg,
    txcompliance_reg2_reg,
    RST_CPLLRESET,
    CLK,
    SYNC_TXPHALIGNDONE,
    SYNC_TXSYNC_START,
    SYNC_MMCM_LOCK,
    SYNC_TXDLYSRESETDONE,
    SYNC_TXPHINITDONE,
    SYNC_GEN3,
    SYNC_RATE_IDLE,
    gtreset_reg,
    SYNC_RXCDRLOCK,
    SYNC_RXSYNC_START,
    SYNC_RXDLYSRESETDONE,
    SYNC_RXPHALIGNDONE_M,
    SYNC_RXPHALIGNDONE_S);
  output [5:0]out;
  output [0:0]pipe_sync_fsm_rx;
  output [0:0]RST_TXSYNC_DONE;
  input txelecidle_reg2_reg;
  input txcompliance_reg2_reg;
  input RST_CPLLRESET;
  input CLK;
  input SYNC_TXPHALIGNDONE;
  input SYNC_TXSYNC_START;
  input SYNC_MMCM_LOCK;
  input SYNC_TXDLYSRESETDONE;
  input SYNC_TXPHINITDONE;
  input SYNC_GEN3;
  input SYNC_RATE_IDLE;
  input gtreset_reg;
  input SYNC_RXCDRLOCK;
  input SYNC_RXSYNC_START;
  input SYNC_RXDLYSRESETDONE;
  input SYNC_RXPHALIGNDONE_M;
  input SYNC_RXPHALIGNDONE_S;

  wire CLK;
  wire \FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__2_n_0 ;
  wire \FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__2_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_txsync_fsm.fsm_tx_reg_n_0_[0] ;
  wire RST_CPLLRESET;
  wire [0:0]RST_TXSYNC_DONE;
  wire SYNC_GEN3;
  wire SYNC_MMCM_LOCK;
  wire SYNC_RATE_IDLE;
  wire SYNC_RXCDRLOCK;
  wire SYNC_RXDLYSRESETDONE;
  wire SYNC_RXPHALIGNDONE_M;
  wire SYNC_RXPHALIGNDONE_S;
  wire SYNC_RXSYNC_START;
  wire SYNC_TXDLYSRESETDONE;
  wire SYNC_TXPHALIGNDONE;
  wire SYNC_TXPHINITDONE;
  wire SYNC_TXSYNC_START;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  wire gtreset_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  (* RTL_KEEP = "yes" *) wire [5:0]out;
  wire [0:0]pipe_sync_fsm_rx;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxdlysresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxdlysresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxelecidle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxelecidle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_m_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_m_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_s_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxphaligndone_s_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_donem_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_donem_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsync_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsyncdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxsyncdone_reg2;
  wire txcompliance_reg2_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txdlysresetdone_reg3;
  wire txelecidle_reg2_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphaligndone_reg3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txphinitdone_reg3;
  wire \txsync_fsm.txsync_done_i_1__2_n_0 ;
  wire \txsync_fsm.txsync_done_i_2__2_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsync_start_reg3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txsyncdone_reg3;

  LUT6 #(
    .INIT(64'h00000001FFFF0001)) 
    \FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__2 
       (.I0(out[2]),
        .I1(out[1]),
        .I2(out[3]),
        .I3(out[4]),
        .I4(out[0]),
        .I5(txsync_start_reg2),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__2 
       (.I0(txsync_start_reg2),
        .I1(out[0]),
        .I2(out[1]),
        .I3(mmcm_lock_reg2),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFD000D0)) 
    \FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__2 
       (.I0(txdlysresetdone_reg2),
        .I1(txdlysresetdone_reg3),
        .I2(out[2]),
        .I3(out[1]),
        .I4(mmcm_lock_reg2),
        .I5(out[0]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000004F40404)) 
    \FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__2 
       (.I0(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__2_n_0 ),
        .I1(out[3]),
        .I2(out[2]),
        .I3(txdlysresetdone_reg3),
        .I4(txdlysresetdone_reg2),
        .I5(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__2_n_0 ),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__2 
       (.I0(out[1]),
        .I1(out[0]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0101010000000100)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__2 
       (.I0(out[2]),
        .I1(out[0]),
        .I2(out[1]),
        .I3(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__2_n_0 ),
        .I4(out[3]),
        .I5(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__2_n_0 ),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h2A2A002A)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__2 
       (.I0(out[4]),
        .I1(txelecidle_reg2_reg),
        .I2(txcompliance_reg2_reg),
        .I3(txphaligndone_reg2),
        .I4(txphaligndone_reg3),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__2 
       (.I0(txphinitdone_reg3),
        .I1(txphinitdone_reg2),
        .I2(txcompliance_reg2_reg),
        .I3(txelecidle_reg2_reg),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__2 
       (.I0(out[1]),
        .I1(out[0]),
        .I2(out[3]),
        .I3(out[2]),
        .I4(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__2_n_0 ),
        .I5(out[4]),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hF444)) 
    \FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__2 
       (.I0(txphaligndone_reg3),
        .I1(txphaligndone_reg2),
        .I2(txcompliance_reg2_reg),
        .I3(txelecidle_reg2_reg),
        .O(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_2__2_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_txsync_fsm.fsm_tx_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[1]_i_1__2_n_0 ),
        .Q(out[0]),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[2]_i_1__2_n_0 ),
        .Q(out[1]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[3]_i_1__2_n_0 ),
        .Q(out[2]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[4]_i_1__2_n_0 ),
        .Q(out[3]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[5]_i_1__2_n_0 ),
        .Q(out[4]),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_txsync_fsm.fsm_tx_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_txsync_fsm.fsm_tx[6]_i_1__2_n_0 ),
        .Q(out[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_GEN3),
        .Q(gen3_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RATE_IDLE),
        .Q(rate_idle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1),
        .Q(rate_idle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXCDRLOCK),
        .Q(rxcdrlock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1),
        .Q(rxcdrlock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxdlysresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXDLYSRESETDONE),
        .Q(rxdlysresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxdlysresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxdlysresetdone_reg1),
        .Q(rxdlysresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxelecidle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg),
        .Q(rxelecidle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxelecidle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxelecidle_reg1),
        .Q(rxelecidle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_m_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXPHALIGNDONE_M),
        .Q(rxphaligndone_m_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_m_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxphaligndone_m_reg1),
        .Q(rxphaligndone_m_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_s_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXPHALIGNDONE_S),
        .Q(rxphaligndone_s_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxphaligndone_s_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxphaligndone_s_reg1),
        .Q(rxphaligndone_s_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_donem_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsync_donem_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_donem_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_donem_reg1),
        .Q(rxsync_donem_reg2),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxsync_fsm_disable.fsm_rx_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(pipe_sync_fsm_rx),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_RXSYNC_START),
        .Q(rxsync_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsync_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsync_start_reg1),
        .Q(rxsync_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsyncdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rxsyncdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxsyncdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxsyncdone_reg1),
        .Q(rxsyncdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXDLYSRESETDONE),
        .Q(txdlysresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txdlysresetdone_reg1),
        .Q(txdlysresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txdlysresetdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txdlysresetdone_reg2),
        .Q(txdlysresetdone_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXPHALIGNDONE),
        .Q(txphaligndone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphaligndone_reg1),
        .Q(txphaligndone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphaligndone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphaligndone_reg2),
        .Q(txphaligndone_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXPHINITDONE),
        .Q(txphinitdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphinitdone_reg1),
        .Q(txphinitdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txphinitdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txphinitdone_reg2),
        .Q(txphinitdone_reg3),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hAABAAAAA)) 
    \txsync_fsm.txsync_done_i_1__2 
       (.I0(out[5]),
        .I1(out[4]),
        .I2(out[0]),
        .I3(\txsync_fsm.txsync_done_i_2__2_n_0 ),
        .I4(RST_TXSYNC_DONE),
        .O(\txsync_fsm.txsync_done_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \txsync_fsm.txsync_done_i_2__2 
       (.I0(out[2]),
        .I1(out[3]),
        .I2(txsync_start_reg2),
        .I3(out[1]),
        .O(\txsync_fsm.txsync_done_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txsync_fsm.txsync_done_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(\txsync_fsm.txsync_done_i_1__2_n_0 ),
        .Q(RST_TXSYNC_DONE),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_TXSYNC_START),
        .Q(txsync_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_start_reg1),
        .Q(txsync_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsync_start_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsync_start_reg2),
        .Q(txsync_start_reg3),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(txsyncdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsyncdone_reg1),
        .Q(txsyncdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txsyncdone_reg3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txsyncdone_reg2),
        .Q(txsyncdone_reg3),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_user" *) 
module pcie_7x_0_pcie_7x_0_pipe_user
   (gt_rxvalid_q_reg,
    out,
    SYNC_TXPHINITDONE,
    txphinitdone_reg1_reg,
    txphinitdone_reg1_reg_0,
    SYNC_TXPHALIGNDONE,
    USER_OOBCLK,
    RST_RXCDRLOCK,
    gt_rx_phy_status_q_reg,
    \converge_cnt_reg[0]_0 ,
    \cplllock_reg1_reg[3] ,
    \cplllock_reg1_reg[3]_0 ,
    RST_RESETDONE,
    \FSM_onehot_txsync_fsm.fsm_tx_reg[6] ,
    converge_gen3_reg_0,
    SYNC_RXELECIDLE,
    pipe_rx0_valid_gt,
    gt_rxvalid_0,
    pipe_txphinitdone,
    user_active_lane,
    txelecidle_reg2_reg_0,
    pipe_txphaligndone,
    txelecidle_reg2_reg_1,
    RST_CPLLRESET,
    CLK,
    D,
    USER_RXRESETDONE,
    USER_TXRESETDONE,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    gt_rxcdrlock_0,
    RST_RXUSRCLK_RESET,
    pipe_rxstatus,
    out1,
    USER_RATE_IDLE,
    USER_RATE_RXSYNC,
    USER_RATE_DONE,
    USER_RATE_GEN3,
    USER_RXEQ_ADAPT_DONE,
    USER_RESETOVRD_START,
    RST_PHYSTATUS);
  output gt_rxvalid_q_reg;
  output out;
  output SYNC_TXPHINITDONE;
  output txphinitdone_reg1_reg;
  output txphinitdone_reg1_reg_0;
  output SYNC_TXPHALIGNDONE;
  output USER_OOBCLK;
  output [0:0]RST_RXCDRLOCK;
  output gt_rx_phy_status_q_reg;
  output \converge_cnt_reg[0]_0 ;
  output \cplllock_reg1_reg[3] ;
  output \cplllock_reg1_reg[3]_0 ;
  output [0:0]RST_RESETDONE;
  output [0:0]\FSM_onehot_txsync_fsm.fsm_tx_reg[6] ;
  output converge_gen3_reg_0;
  input SYNC_RXELECIDLE;
  input pipe_rx0_valid_gt;
  input gt_rxvalid_0;
  input [1:0]pipe_txphinitdone;
  input [0:0]user_active_lane;
  input txelecidle_reg2_reg_0;
  input [1:0]pipe_txphaligndone;
  input txelecidle_reg2_reg_1;
  input RST_CPLLRESET;
  input CLK;
  input [0:0]D;
  input USER_RXRESETDONE;
  input USER_TXRESETDONE;
  input [0:0]PIPE_TXCOMPLIANCE;
  input [0:0]PIPE_TXELECIDLE;
  input gt_rxcdrlock_0;
  input RST_RXUSRCLK_RESET;
  input [0:0]pipe_rxstatus;
  input [0:0]out1;
  input USER_RATE_IDLE;
  input USER_RATE_RXSYNC;
  input USER_RATE_DONE;
  input USER_RATE_GEN3;
  input USER_RXEQ_ADAPT_DONE;
  input USER_RESETOVRD_START;
  input [0:0]RST_PHYSTATUS;

  wire CLK;
  wire [0:0]D;
  wire [0:0]\FSM_onehot_txsync_fsm.fsm_tx_reg[6] ;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [0:0]PIPE_TXELECIDLE;
  wire RST_CPLLRESET;
  wire [0:0]RST_PHYSTATUS;
  wire [0:0]RST_RESETDONE;
  wire [0:0]RST_RXCDRLOCK;
  wire RST_RXUSRCLK_RESET;
  wire SYNC_RXELECIDLE;
  wire SYNC_TXPHALIGNDONE;
  wire SYNC_TXPHINITDONE;
  wire USER_OOBCLK;
  wire USER_RATE_DONE;
  wire USER_RATE_GEN3;
  wire USER_RATE_IDLE;
  wire USER_RATE_RXSYNC;
  wire USER_RESETOVRD_START;
  wire USER_RXEQ_ADAPT_DONE;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  wire \converge_cnt[0]_i_1__0_n_0 ;
  wire \converge_cnt[0]_i_4_n_0 ;
  wire \converge_cnt[0]_i_5_n_0 ;
  wire \converge_cnt[0]_i_9_n_0 ;
  wire [21:0]converge_cnt_reg;
  wire \converge_cnt_reg[0]_0 ;
  wire \converge_cnt_reg[0]_i_3_n_0 ;
  wire \converge_cnt_reg[0]_i_3_n_1 ;
  wire \converge_cnt_reg[0]_i_3_n_2 ;
  wire \converge_cnt_reg[0]_i_3_n_3 ;
  wire \converge_cnt_reg[0]_i_3_n_4 ;
  wire \converge_cnt_reg[0]_i_3_n_5 ;
  wire \converge_cnt_reg[0]_i_3_n_6 ;
  wire \converge_cnt_reg[0]_i_3_n_7 ;
  wire \converge_cnt_reg[12]_i_1_n_0 ;
  wire \converge_cnt_reg[12]_i_1_n_1 ;
  wire \converge_cnt_reg[12]_i_1_n_2 ;
  wire \converge_cnt_reg[12]_i_1_n_3 ;
  wire \converge_cnt_reg[12]_i_1_n_4 ;
  wire \converge_cnt_reg[12]_i_1_n_5 ;
  wire \converge_cnt_reg[12]_i_1_n_6 ;
  wire \converge_cnt_reg[12]_i_1_n_7 ;
  wire \converge_cnt_reg[16]_i_1_n_0 ;
  wire \converge_cnt_reg[16]_i_1_n_1 ;
  wire \converge_cnt_reg[16]_i_1_n_2 ;
  wire \converge_cnt_reg[16]_i_1_n_3 ;
  wire \converge_cnt_reg[16]_i_1_n_4 ;
  wire \converge_cnt_reg[16]_i_1_n_5 ;
  wire \converge_cnt_reg[16]_i_1_n_6 ;
  wire \converge_cnt_reg[16]_i_1_n_7 ;
  wire \converge_cnt_reg[20]_i_1_n_3 ;
  wire \converge_cnt_reg[20]_i_1_n_6 ;
  wire \converge_cnt_reg[20]_i_1_n_7 ;
  wire \converge_cnt_reg[4]_i_1_n_0 ;
  wire \converge_cnt_reg[4]_i_1_n_1 ;
  wire \converge_cnt_reg[4]_i_1_n_2 ;
  wire \converge_cnt_reg[4]_i_1_n_3 ;
  wire \converge_cnt_reg[4]_i_1_n_4 ;
  wire \converge_cnt_reg[4]_i_1_n_5 ;
  wire \converge_cnt_reg[4]_i_1_n_6 ;
  wire \converge_cnt_reg[4]_i_1_n_7 ;
  wire \converge_cnt_reg[8]_i_1_n_0 ;
  wire \converge_cnt_reg[8]_i_1_n_1 ;
  wire \converge_cnt_reg[8]_i_1_n_2 ;
  wire \converge_cnt_reg[8]_i_1_n_3 ;
  wire \converge_cnt_reg[8]_i_1_n_4 ;
  wire \converge_cnt_reg[8]_i_1_n_5 ;
  wire \converge_cnt_reg[8]_i_1_n_6 ;
  wire \converge_cnt_reg[8]_i_1_n_7 ;
  wire converge_gen3_i_1_n_0;
  wire converge_gen3_reg_0;
  wire \cplllock_reg1_reg[3] ;
  wire \cplllock_reg1_reg[3]_0 ;
  wire gt_rx_phy_status_q_reg;
  wire gt_rxcdrlock_0;
  wire gt_rxvalid_0;
  wire gt_rxvalid_q_i_4_n_0;
  wire gt_rxvalid_q_reg;
  wire \gtx_channel.gtxe2_channel_i_i_59_n_0 ;
  wire \gtx_channel.gtxe2_channel_i_i_60_n_0 ;
  wire [1:0]oobclk_cnt;
  wire \oobclk_div.oobclk_i_1_n_0 ;
  wire [0:0]out1;
  wire [3:0]p_0_in__0;
  wire [3:0]p_0_in__0__0;
  wire [1:0]p_1_in__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire pclk_sel_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire pclk_sel_reg2;
  wire pipe_rx0_valid_gt;
  wire [0:0]pipe_rxstatus;
  wire [1:0]pipe_txphaligndone;
  wire [1:0]pipe_txphinitdone;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_gen3_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_rxsync_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_rxsync_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg2;
  wire [3:0]rxcdrlock_cnt_reg__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_adapt_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_adapt_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxstatus_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxstatus_reg2;
  wire [3:0]rxvalid_cnt_reg__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxvalid_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxvalid_reg2;
  wire sel;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txcompliance_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txcompliance_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txelecidle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txelecidle_reg2;
  wire txelecidle_reg2_reg_0;
  wire txelecidle_reg2_reg_1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg2;
  wire [0:0]user_active_lane;
  wire [3:1]\NLW_converge_cnt_reg[20]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_converge_cnt_reg[20]_i_1_O_UNCONNECTED ;

  assign out = rst_idle_reg2;
  assign txphinitdone_reg1_reg = txcompliance_reg2;
  assign txphinitdone_reg1_reg_0 = txelecidle_reg2;
  LUT2 #(
    .INIT(4'h7)) 
    \FSM_onehot_txsync_fsm.fsm_tx[6]_i_3 
       (.I0(txelecidle_reg2),
        .I1(txcompliance_reg2),
        .O(\FSM_onehot_txsync_fsm.fsm_tx_reg[6] ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \converge_cnt[0]_i_1__0 
       (.I0(rate_idle_reg2),
        .I1(RST_CPLLRESET),
        .I2(rst_idle_reg2),
        .I3(rate_gen3_reg2),
        .O(\converge_cnt[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF5555555D)) 
    \converge_cnt[0]_i_2 
       (.I0(converge_cnt_reg[21]),
        .I1(\converge_cnt[0]_i_4_n_0 ),
        .I2(converge_cnt_reg[12]),
        .I3(converge_cnt_reg[14]),
        .I4(converge_cnt_reg[20]),
        .I5(\converge_cnt[0]_i_5_n_0 ),
        .O(sel));
  LUT5 #(
    .INIT(32'h00000001)) 
    \converge_cnt[0]_i_4 
       (.I0(converge_cnt_reg[3]),
        .I1(converge_cnt_reg[4]),
        .I2(converge_cnt_reg[5]),
        .I3(converge_cnt_reg[7]),
        .I4(converge_cnt_reg[6]),
        .O(\converge_cnt[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0A0B0A0F0A0B0A0B)) 
    \converge_cnt[0]_i_5 
       (.I0(\converge_cnt_reg[0]_0 ),
        .I1(converge_cnt_reg[13]),
        .I2(converge_cnt_reg[20]),
        .I3(converge_cnt_reg[14]),
        .I4(converge_cnt_reg[12]),
        .I5(\gtx_channel.gtxe2_channel_i_i_60_n_0 ),
        .O(\converge_cnt[0]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \converge_cnt[0]_i_9 
       (.I0(converge_cnt_reg[0]),
        .O(\converge_cnt[0]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[0] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3_n_7 ),
        .Q(converge_cnt_reg[0]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  CARRY4 \converge_cnt_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\converge_cnt_reg[0]_i_3_n_0 ,\converge_cnt_reg[0]_i_3_n_1 ,\converge_cnt_reg[0]_i_3_n_2 ,\converge_cnt_reg[0]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\converge_cnt_reg[0]_i_3_n_4 ,\converge_cnt_reg[0]_i_3_n_5 ,\converge_cnt_reg[0]_i_3_n_6 ,\converge_cnt_reg[0]_i_3_n_7 }),
        .S({converge_cnt_reg[3:1],\converge_cnt[0]_i_9_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[10] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1_n_5 ),
        .Q(converge_cnt_reg[10]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[11] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1_n_4 ),
        .Q(converge_cnt_reg[11]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[12] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1_n_7 ),
        .Q(converge_cnt_reg[12]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  CARRY4 \converge_cnt_reg[12]_i_1 
       (.CI(\converge_cnt_reg[8]_i_1_n_0 ),
        .CO({\converge_cnt_reg[12]_i_1_n_0 ,\converge_cnt_reg[12]_i_1_n_1 ,\converge_cnt_reg[12]_i_1_n_2 ,\converge_cnt_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[12]_i_1_n_4 ,\converge_cnt_reg[12]_i_1_n_5 ,\converge_cnt_reg[12]_i_1_n_6 ,\converge_cnt_reg[12]_i_1_n_7 }),
        .S(converge_cnt_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[13] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1_n_6 ),
        .Q(converge_cnt_reg[13]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[14] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1_n_5 ),
        .Q(converge_cnt_reg[14]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[15] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1_n_4 ),
        .Q(converge_cnt_reg[15]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[16] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1_n_7 ),
        .Q(converge_cnt_reg[16]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  CARRY4 \converge_cnt_reg[16]_i_1 
       (.CI(\converge_cnt_reg[12]_i_1_n_0 ),
        .CO({\converge_cnt_reg[16]_i_1_n_0 ,\converge_cnt_reg[16]_i_1_n_1 ,\converge_cnt_reg[16]_i_1_n_2 ,\converge_cnt_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[16]_i_1_n_4 ,\converge_cnt_reg[16]_i_1_n_5 ,\converge_cnt_reg[16]_i_1_n_6 ,\converge_cnt_reg[16]_i_1_n_7 }),
        .S(converge_cnt_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[17] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1_n_6 ),
        .Q(converge_cnt_reg[17]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[18] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1_n_5 ),
        .Q(converge_cnt_reg[18]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[19] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1_n_4 ),
        .Q(converge_cnt_reg[19]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[1] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3_n_6 ),
        .Q(converge_cnt_reg[1]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[20] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[20]_i_1_n_7 ),
        .Q(converge_cnt_reg[20]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  CARRY4 \converge_cnt_reg[20]_i_1 
       (.CI(\converge_cnt_reg[16]_i_1_n_0 ),
        .CO({\NLW_converge_cnt_reg[20]_i_1_CO_UNCONNECTED [3:1],\converge_cnt_reg[20]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_converge_cnt_reg[20]_i_1_O_UNCONNECTED [3:2],\converge_cnt_reg[20]_i_1_n_6 ,\converge_cnt_reg[20]_i_1_n_7 }),
        .S({1'b0,1'b0,converge_cnt_reg[21:20]}));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[21] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[20]_i_1_n_6 ),
        .Q(converge_cnt_reg[21]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[2] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3_n_5 ),
        .Q(converge_cnt_reg[2]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[3] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3_n_4 ),
        .Q(converge_cnt_reg[3]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[4] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1_n_7 ),
        .Q(converge_cnt_reg[4]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  CARRY4 \converge_cnt_reg[4]_i_1 
       (.CI(\converge_cnt_reg[0]_i_3_n_0 ),
        .CO({\converge_cnt_reg[4]_i_1_n_0 ,\converge_cnt_reg[4]_i_1_n_1 ,\converge_cnt_reg[4]_i_1_n_2 ,\converge_cnt_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[4]_i_1_n_4 ,\converge_cnt_reg[4]_i_1_n_5 ,\converge_cnt_reg[4]_i_1_n_6 ,\converge_cnt_reg[4]_i_1_n_7 }),
        .S(converge_cnt_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[5] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1_n_6 ),
        .Q(converge_cnt_reg[5]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[6] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1_n_5 ),
        .Q(converge_cnt_reg[6]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[7] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1_n_4 ),
        .Q(converge_cnt_reg[7]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[8] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1_n_7 ),
        .Q(converge_cnt_reg[8]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  CARRY4 \converge_cnt_reg[8]_i_1 
       (.CI(\converge_cnt_reg[4]_i_1_n_0 ),
        .CO({\converge_cnt_reg[8]_i_1_n_0 ,\converge_cnt_reg[8]_i_1_n_1 ,\converge_cnt_reg[8]_i_1_n_2 ,\converge_cnt_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[8]_i_1_n_4 ,\converge_cnt_reg[8]_i_1_n_5 ,\converge_cnt_reg[8]_i_1_n_6 ,\converge_cnt_reg[8]_i_1_n_7 }),
        .S(converge_cnt_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[9] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1_n_6 ),
        .Q(converge_cnt_reg[9]),
        .R(\converge_cnt[0]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hC8)) 
    converge_gen3_i_1
       (.I0(rxeq_adapt_done_reg2),
        .I1(rate_gen3_reg2),
        .I2(converge_gen3_reg_0),
        .O(converge_gen3_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    converge_gen3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(converge_gen3_i_1_n_0),
        .Q(converge_gen3_reg_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hFFFFA8FF)) 
    gt_rx_phy_status_q_i_1
       (.I0(RST_PHYSTATUS),
        .I1(rate_idle_reg2),
        .I2(rate_rxsync_reg2),
        .I3(rst_idle_reg2),
        .I4(rate_done_reg2),
        .O(gt_rx_phy_status_q_reg));
  LUT6 #(
    .INIT(64'hD000000000000000)) 
    gt_rxvalid_q_i_3
       (.I0(SYNC_RXELECIDLE),
        .I1(pipe_rx0_valid_gt),
        .I2(gt_rxvalid_q_i_4_n_0),
        .I3(rst_idle_reg2),
        .I4(gt_rxvalid_0),
        .I5(rate_idle_reg2),
        .O(gt_rxvalid_q_reg));
  LUT4 #(
    .INIT(16'h8000)) 
    gt_rxvalid_q_i_4
       (.I0(rxvalid_cnt_reg__0[0]),
        .I1(rxvalid_cnt_reg__0[1]),
        .I2(rxvalid_cnt_reg__0[2]),
        .I3(rxvalid_cnt_reg__0[3]),
        .O(gt_rxvalid_q_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000000020000)) 
    \gtx_channel.gtxe2_channel_i_i_50 
       (.I0(\gtx_channel.gtxe2_channel_i_i_59_n_0 ),
        .I1(converge_cnt_reg[1]),
        .I2(converge_cnt_reg[0]),
        .I3(converge_cnt_reg[2]),
        .I4(converge_cnt_reg[3]),
        .I5(\gtx_channel.gtxe2_channel_i_i_60_n_0 ),
        .O(\cplllock_reg1_reg[3] ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \gtx_channel.gtxe2_channel_i_i_51 
       (.I0(converge_cnt_reg[6]),
        .I1(converge_cnt_reg[7]),
        .I2(converge_cnt_reg[4]),
        .I3(converge_cnt_reg[5]),
        .I4(converge_cnt_reg[21]),
        .I5(converge_cnt_reg[13]),
        .O(\cplllock_reg1_reg[3]_0 ));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \gtx_channel.gtxe2_channel_i_i_52 
       (.I0(converge_cnt_reg[15]),
        .I1(converge_cnt_reg[18]),
        .I2(converge_cnt_reg[19]),
        .I3(converge_cnt_reg[17]),
        .I4(converge_cnt_reg[16]),
        .O(\converge_cnt_reg[0]_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \gtx_channel.gtxe2_channel_i_i_59 
       (.I0(converge_cnt_reg[20]),
        .I1(converge_cnt_reg[14]),
        .I2(converge_cnt_reg[12]),
        .O(\gtx_channel.gtxe2_channel_i_i_59_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \gtx_channel.gtxe2_channel_i_i_60 
       (.I0(converge_cnt_reg[9]),
        .I1(converge_cnt_reg[8]),
        .I2(converge_cnt_reg[11]),
        .I3(converge_cnt_reg[10]),
        .O(\gtx_channel.gtxe2_channel_i_i_60_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \oobclk_div.oobclk_cnt[0]_i_1 
       (.I0(oobclk_cnt[0]),
        .O(p_1_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \oobclk_div.oobclk_cnt[1]_i_1 
       (.I0(oobclk_cnt[0]),
        .I1(oobclk_cnt[1]),
        .O(p_1_in__0[1]));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_1_in__0[0]),
        .Q(oobclk_cnt[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_1_in__0[1]),
        .Q(oobclk_cnt[1]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'hB8)) 
    \oobclk_div.oobclk_i_1 
       (.I0(oobclk_cnt[1]),
        .I1(pclk_sel_reg2),
        .I2(oobclk_cnt[0]),
        .O(\oobclk_div.oobclk_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(\oobclk_div.oobclk_i_1_n_0 ),
        .Q(USER_OOBCLK),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE pclk_sel_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(D),
        .Q(pclk_sel_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE pclk_sel_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_reg1),
        .Q(pclk_sel_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_DONE),
        .Q(rate_done_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_done_reg1),
        .Q(rate_done_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_GEN3),
        .Q(rate_gen3_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_gen3_reg1),
        .Q(rate_gen3_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_IDLE),
        .Q(rate_idle_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1),
        .Q(rate_idle_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_rxsync_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_RXSYNC),
        .Q(rate_rxsync_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_rxsync_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_rxsync_reg1),
        .Q(rate_rxsync_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT2 #(
    .INIT(4'h8)) 
    \resetdone_reg1[0]_i_1 
       (.I0(txresetdone_reg2),
        .I1(rxresetdone_reg2),
        .O(RST_RESETDONE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RESETOVRD_START),
        .Q(resetovrd_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(resetovrd_start_reg1),
        .Q(resetovrd_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out1),
        .Q(rst_idle_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rst_idle_reg1),
        .Q(rst_idle_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT5 #(
    .INIT(32'hD0505050)) 
    \rxcdrlock_cnt[0]_i_1 
       (.I0(rxcdrlock_cnt_reg__0[0]),
        .I1(rxcdrlock_cnt_reg__0[2]),
        .I2(rxcdrlock_reg2),
        .I3(rxcdrlock_cnt_reg__0[1]),
        .I4(rxcdrlock_cnt_reg__0[3]),
        .O(p_0_in__0[0]));
  LUT5 #(
    .INIT(32'h8FF00000)) 
    \rxcdrlock_cnt[1]_i_1 
       (.I0(rxcdrlock_cnt_reg__0[3]),
        .I1(rxcdrlock_cnt_reg__0[2]),
        .I2(rxcdrlock_cnt_reg__0[0]),
        .I3(rxcdrlock_cnt_reg__0[1]),
        .I4(rxcdrlock_reg2),
        .O(p_0_in__0[1]));
  LUT5 #(
    .INIT(32'hF8780000)) 
    \rxcdrlock_cnt[2]_i_1 
       (.I0(rxcdrlock_cnt_reg__0[0]),
        .I1(rxcdrlock_cnt_reg__0[1]),
        .I2(rxcdrlock_cnt_reg__0[2]),
        .I3(rxcdrlock_cnt_reg__0[3]),
        .I4(rxcdrlock_reg2),
        .O(p_0_in__0[2]));
  LUT5 #(
    .INIT(32'hFF008000)) 
    \rxcdrlock_cnt[3]_i_1 
       (.I0(rxcdrlock_cnt_reg__0[0]),
        .I1(rxcdrlock_cnt_reg__0[1]),
        .I2(rxcdrlock_cnt_reg__0[2]),
        .I3(rxcdrlock_reg2),
        .I4(rxcdrlock_cnt_reg__0[3]),
        .O(p_0_in__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(rxcdrlock_cnt_reg__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(rxcdrlock_cnt_reg__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(rxcdrlock_cnt_reg__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(rxcdrlock_cnt_reg__0[3]),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h80000000)) 
    \rxcdrlock_reg1[0]_i_1 
       (.I0(rxcdrlock_cnt_reg__0[2]),
        .I1(rxcdrlock_cnt_reg__0[3]),
        .I2(gt_rxcdrlock_0),
        .I3(rxcdrlock_cnt_reg__0[1]),
        .I4(rxcdrlock_cnt_reg__0[0]),
        .O(RST_RXCDRLOCK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxcdrlock_0),
        .Q(rxcdrlock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1),
        .Q(rxcdrlock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_adapt_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXEQ_ADAPT_DONE),
        .Q(rxeq_adapt_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_adapt_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_adapt_done_reg1),
        .Q(rxeq_adapt_done_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXRESETDONE),
        .Q(rxresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxresetdone_reg1),
        .Q(rxresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxstatus_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rxstatus),
        .Q(rxstatus_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxstatus_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxstatus_reg1),
        .Q(rxstatus_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT6 #(
    .INIT(64'hC404040404040404)) 
    \rxvalid_cnt[0]_i_1 
       (.I0(rxstatus_reg2),
        .I1(rxvalid_reg2),
        .I2(rxvalid_cnt_reg__0[0]),
        .I3(rxvalid_cnt_reg__0[1]),
        .I4(rxvalid_cnt_reg__0[2]),
        .I5(rxvalid_cnt_reg__0[3]),
        .O(p_0_in__0__0[0]));
  LUT6 #(
    .INIT(64'h808000F000F00000)) 
    \rxvalid_cnt[1]_i_1 
       (.I0(rxvalid_cnt_reg__0[3]),
        .I1(rxvalid_cnt_reg__0[2]),
        .I2(rxvalid_reg2),
        .I3(rxstatus_reg2),
        .I4(rxvalid_cnt_reg__0[1]),
        .I5(rxvalid_cnt_reg__0[0]),
        .O(p_0_in__0__0[1]));
  LUT6 #(
    .INIT(64'h80BF000000C00000)) 
    \rxvalid_cnt[2]_i_1 
       (.I0(rxvalid_cnt_reg__0[3]),
        .I1(rxvalid_cnt_reg__0[0]),
        .I2(rxvalid_cnt_reg__0[1]),
        .I3(rxstatus_reg2),
        .I4(rxvalid_reg2),
        .I5(rxvalid_cnt_reg__0[2]),
        .O(p_0_in__0__0[2]));
  LUT6 #(
    .INIT(64'h8C08080808080808)) 
    \rxvalid_cnt[3]_i_1 
       (.I0(rxvalid_cnt_reg__0[3]),
        .I1(rxvalid_reg2),
        .I2(rxstatus_reg2),
        .I3(rxvalid_cnt_reg__0[2]),
        .I4(rxvalid_cnt_reg__0[1]),
        .I5(rxvalid_cnt_reg__0[0]),
        .O(p_0_in__0__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[0]),
        .Q(rxvalid_cnt_reg__0[0]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[1]),
        .Q(rxvalid_cnt_reg__0[1]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[2]),
        .Q(rxvalid_cnt_reg__0[2]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[3]),
        .Q(rxvalid_cnt_reg__0[3]),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxvalid_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxvalid_0),
        .Q(rxvalid_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxvalid_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxvalid_reg1),
        .Q(rxvalid_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txcompliance_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_TXCOMPLIANCE),
        .Q(txcompliance_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txcompliance_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txcompliance_reg1),
        .Q(txcompliance_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txelecidle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_TXELECIDLE),
        .Q(txelecidle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txelecidle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txelecidle_reg1),
        .Q(txelecidle_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h00000000BBB0B0B0)) 
    txphaligndone_reg1_i_1
       (.I0(pipe_txphaligndone[1]),
        .I1(user_active_lane),
        .I2(pipe_txphaligndone[0]),
        .I3(txcompliance_reg2),
        .I4(txelecidle_reg2),
        .I5(txelecidle_reg2_reg_1),
        .O(SYNC_TXPHALIGNDONE));
  LUT6 #(
    .INIT(64'h00000000BBB0B0B0)) 
    txphinitdone_reg1_i_1
       (.I0(pipe_txphinitdone[1]),
        .I1(user_active_lane),
        .I2(pipe_txphinitdone[0]),
        .I3(txcompliance_reg2),
        .I4(txelecidle_reg2),
        .I5(txelecidle_reg2_reg_0),
        .O(SYNC_TXPHINITDONE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_TXRESETDONE),
        .Q(txresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txresetdone_reg1),
        .Q(txresetdone_reg2),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_user" *) 
module pcie_7x_0_pcie_7x_0_pipe_user_26
   (gt_rxvalid_q_reg,
    out,
    txphinitdone_reg1_reg,
    txphinitdone_reg1_reg_0,
    USER_OOBCLK,
    RST_RXCDRLOCK,
    gt_rx_phy_status_q_reg,
    user_rx_converge,
    RST_RESETDONE,
    user_active_lane,
    gtreset_reg,
    pipe_rx1_valid_gt,
    gt_rxvalid_1,
    RST_CPLLRESET,
    CLK,
    D,
    USER_RXRESETDONE,
    USER_TXRESETDONE,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    gt_rxcdrlock_1,
    RST_RXUSRCLK_RESET,
    pipe_rxstatus,
    out1,
    USER_RATE_IDLE,
    USER_RATE_RXSYNC,
    USER_RATE_DONE,
    USER_RATE_GEN3,
    USER_RXEQ_ADAPT_DONE,
    USER_RESETOVRD_START,
    RST_PHYSTATUS);
  output gt_rxvalid_q_reg;
  output out;
  output txphinitdone_reg1_reg;
  output txphinitdone_reg1_reg_0;
  output USER_OOBCLK;
  output [0:0]RST_RXCDRLOCK;
  output gt_rx_phy_status_q_reg;
  output [0:0]user_rx_converge;
  output [0:0]RST_RESETDONE;
  output [0:0]user_active_lane;
  input gtreset_reg;
  input pipe_rx1_valid_gt;
  input gt_rxvalid_1;
  input RST_CPLLRESET;
  input CLK;
  input [0:0]D;
  input USER_RXRESETDONE;
  input USER_TXRESETDONE;
  input [0:0]PIPE_TXCOMPLIANCE;
  input [0:0]PIPE_TXELECIDLE;
  input gt_rxcdrlock_1;
  input RST_RXUSRCLK_RESET;
  input [0:0]pipe_rxstatus;
  input [0:0]out1;
  input USER_RATE_IDLE;
  input USER_RATE_RXSYNC;
  input USER_RATE_DONE;
  input USER_RATE_GEN3;
  input USER_RXEQ_ADAPT_DONE;
  input USER_RESETOVRD_START;
  input [0:0]RST_PHYSTATUS;

  wire CLK;
  wire [0:0]D;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [0:0]PIPE_TXELECIDLE;
  wire RST_CPLLRESET;
  wire [0:0]RST_PHYSTATUS;
  wire [0:0]RST_RESETDONE;
  wire [0:0]RST_RXCDRLOCK;
  wire RST_RXUSRCLK_RESET;
  wire USER_OOBCLK;
  wire USER_RATE_DONE;
  wire USER_RATE_GEN3;
  wire USER_RATE_IDLE;
  wire USER_RATE_RXSYNC;
  wire USER_RESETOVRD_START;
  wire USER_RXEQ_ADAPT_DONE;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  wire \converge_cnt[0]_i_1__2_n_0 ;
  wire \converge_cnt[0]_i_4__0_n_0 ;
  wire \converge_cnt[0]_i_5__0_n_0 ;
  wire \converge_cnt[0]_i_9__0_n_0 ;
  wire [21:0]converge_cnt_reg;
  wire \converge_cnt_reg[0]_i_3__0_n_0 ;
  wire \converge_cnt_reg[0]_i_3__0_n_1 ;
  wire \converge_cnt_reg[0]_i_3__0_n_2 ;
  wire \converge_cnt_reg[0]_i_3__0_n_3 ;
  wire \converge_cnt_reg[0]_i_3__0_n_4 ;
  wire \converge_cnt_reg[0]_i_3__0_n_5 ;
  wire \converge_cnt_reg[0]_i_3__0_n_6 ;
  wire \converge_cnt_reg[0]_i_3__0_n_7 ;
  wire \converge_cnt_reg[12]_i_1__0_n_0 ;
  wire \converge_cnt_reg[12]_i_1__0_n_1 ;
  wire \converge_cnt_reg[12]_i_1__0_n_2 ;
  wire \converge_cnt_reg[12]_i_1__0_n_3 ;
  wire \converge_cnt_reg[12]_i_1__0_n_4 ;
  wire \converge_cnt_reg[12]_i_1__0_n_5 ;
  wire \converge_cnt_reg[12]_i_1__0_n_6 ;
  wire \converge_cnt_reg[12]_i_1__0_n_7 ;
  wire \converge_cnt_reg[16]_i_1__0_n_0 ;
  wire \converge_cnt_reg[16]_i_1__0_n_1 ;
  wire \converge_cnt_reg[16]_i_1__0_n_2 ;
  wire \converge_cnt_reg[16]_i_1__0_n_3 ;
  wire \converge_cnt_reg[16]_i_1__0_n_4 ;
  wire \converge_cnt_reg[16]_i_1__0_n_5 ;
  wire \converge_cnt_reg[16]_i_1__0_n_6 ;
  wire \converge_cnt_reg[16]_i_1__0_n_7 ;
  wire \converge_cnt_reg[20]_i_1__0_n_3 ;
  wire \converge_cnt_reg[20]_i_1__0_n_6 ;
  wire \converge_cnt_reg[20]_i_1__0_n_7 ;
  wire \converge_cnt_reg[4]_i_1__0_n_0 ;
  wire \converge_cnt_reg[4]_i_1__0_n_1 ;
  wire \converge_cnt_reg[4]_i_1__0_n_2 ;
  wire \converge_cnt_reg[4]_i_1__0_n_3 ;
  wire \converge_cnt_reg[4]_i_1__0_n_4 ;
  wire \converge_cnt_reg[4]_i_1__0_n_5 ;
  wire \converge_cnt_reg[4]_i_1__0_n_6 ;
  wire \converge_cnt_reg[4]_i_1__0_n_7 ;
  wire \converge_cnt_reg[8]_i_1__0_n_0 ;
  wire \converge_cnt_reg[8]_i_1__0_n_1 ;
  wire \converge_cnt_reg[8]_i_1__0_n_2 ;
  wire \converge_cnt_reg[8]_i_1__0_n_3 ;
  wire \converge_cnt_reg[8]_i_1__0_n_4 ;
  wire \converge_cnt_reg[8]_i_1__0_n_5 ;
  wire \converge_cnt_reg[8]_i_1__0_n_6 ;
  wire \converge_cnt_reg[8]_i_1__0_n_7 ;
  wire converge_gen3_i_1__0_n_0;
  wire converge_gen3_reg_n_0;
  wire gt_rx_phy_status_q_reg;
  wire gt_rxcdrlock_1;
  wire gt_rxvalid_1;
  wire gt_rxvalid_q_i_4__0_n_0;
  wire gt_rxvalid_q_reg;
  wire gtreset_reg;
  wire \gtx_channel.gtxe2_channel_i_i_54_n_0 ;
  wire \gtx_channel.gtxe2_channel_i_i_55_n_0 ;
  wire \gtx_channel.gtxe2_channel_i_i_56_n_0 ;
  wire \gtx_channel.gtxe2_channel_i_i_57_n_0 ;
  wire \gtx_channel.gtxe2_channel_i_i_58_n_0 ;
  wire [1:0]oobclk_cnt;
  wire \oobclk_div.oobclk_i_1__0_n_0 ;
  wire [0:0]out1;
  wire [3:0]p_0_in__0;
  wire [3:0]p_0_in__0__0;
  wire [1:0]p_1_in__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire pclk_sel_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire pclk_sel_reg2;
  wire pipe_rx1_valid_gt;
  wire [0:0]pipe_rxstatus;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_gen3_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_rxsync_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_rxsync_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg2;
  wire [3:0]rxcdrlock_cnt_reg__0__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_adapt_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_adapt_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxstatus_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxstatus_reg2;
  wire [3:0]rxvalid_cnt_reg__0__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxvalid_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxvalid_reg2;
  wire sel;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txcompliance_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txcompliance_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txelecidle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txelecidle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg2;
  wire [0:0]user_active_lane;
  wire [0:0]user_rx_converge;
  wire [3:1]\NLW_converge_cnt_reg[20]_i_1__0_CO_UNCONNECTED ;
  wire [3:2]\NLW_converge_cnt_reg[20]_i_1__0_O_UNCONNECTED ;

  assign out = rst_idle_reg2;
  assign txphinitdone_reg1_reg = txcompliance_reg2;
  assign txphinitdone_reg1_reg_0 = txelecidle_reg2;
  LUT4 #(
    .INIT(16'hFFDF)) 
    \converge_cnt[0]_i_1__2 
       (.I0(rate_idle_reg2),
        .I1(RST_CPLLRESET),
        .I2(rst_idle_reg2),
        .I3(rate_gen3_reg2),
        .O(\converge_cnt[0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF5555555D)) 
    \converge_cnt[0]_i_2__0 
       (.I0(converge_cnt_reg[21]),
        .I1(\converge_cnt[0]_i_4__0_n_0 ),
        .I2(converge_cnt_reg[12]),
        .I3(converge_cnt_reg[14]),
        .I4(converge_cnt_reg[20]),
        .I5(\converge_cnt[0]_i_5__0_n_0 ),
        .O(sel));
  LUT5 #(
    .INIT(32'h00000001)) 
    \converge_cnt[0]_i_4__0 
       (.I0(converge_cnt_reg[3]),
        .I1(converge_cnt_reg[4]),
        .I2(converge_cnt_reg[5]),
        .I3(converge_cnt_reg[7]),
        .I4(converge_cnt_reg[6]),
        .O(\converge_cnt[0]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0A0B0A0F0A0B0A0B)) 
    \converge_cnt[0]_i_5__0 
       (.I0(\gtx_channel.gtxe2_channel_i_i_58_n_0 ),
        .I1(converge_cnt_reg[13]),
        .I2(converge_cnt_reg[20]),
        .I3(converge_cnt_reg[14]),
        .I4(converge_cnt_reg[12]),
        .I5(\gtx_channel.gtxe2_channel_i_i_56_n_0 ),
        .O(\converge_cnt[0]_i_5__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \converge_cnt[0]_i_9__0 
       (.I0(converge_cnt_reg[0]),
        .O(\converge_cnt[0]_i_9__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[0] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__0_n_7 ),
        .Q(converge_cnt_reg[0]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  CARRY4 \converge_cnt_reg[0]_i_3__0 
       (.CI(1'b0),
        .CO({\converge_cnt_reg[0]_i_3__0_n_0 ,\converge_cnt_reg[0]_i_3__0_n_1 ,\converge_cnt_reg[0]_i_3__0_n_2 ,\converge_cnt_reg[0]_i_3__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\converge_cnt_reg[0]_i_3__0_n_4 ,\converge_cnt_reg[0]_i_3__0_n_5 ,\converge_cnt_reg[0]_i_3__0_n_6 ,\converge_cnt_reg[0]_i_3__0_n_7 }),
        .S({converge_cnt_reg[3:1],\converge_cnt[0]_i_9__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[10] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__0_n_5 ),
        .Q(converge_cnt_reg[10]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[11] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__0_n_4 ),
        .Q(converge_cnt_reg[11]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[12] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__0_n_7 ),
        .Q(converge_cnt_reg[12]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  CARRY4 \converge_cnt_reg[12]_i_1__0 
       (.CI(\converge_cnt_reg[8]_i_1__0_n_0 ),
        .CO({\converge_cnt_reg[12]_i_1__0_n_0 ,\converge_cnt_reg[12]_i_1__0_n_1 ,\converge_cnt_reg[12]_i_1__0_n_2 ,\converge_cnt_reg[12]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[12]_i_1__0_n_4 ,\converge_cnt_reg[12]_i_1__0_n_5 ,\converge_cnt_reg[12]_i_1__0_n_6 ,\converge_cnt_reg[12]_i_1__0_n_7 }),
        .S(converge_cnt_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[13] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__0_n_6 ),
        .Q(converge_cnt_reg[13]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[14] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__0_n_5 ),
        .Q(converge_cnt_reg[14]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[15] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__0_n_4 ),
        .Q(converge_cnt_reg[15]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[16] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__0_n_7 ),
        .Q(converge_cnt_reg[16]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  CARRY4 \converge_cnt_reg[16]_i_1__0 
       (.CI(\converge_cnt_reg[12]_i_1__0_n_0 ),
        .CO({\converge_cnt_reg[16]_i_1__0_n_0 ,\converge_cnt_reg[16]_i_1__0_n_1 ,\converge_cnt_reg[16]_i_1__0_n_2 ,\converge_cnt_reg[16]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[16]_i_1__0_n_4 ,\converge_cnt_reg[16]_i_1__0_n_5 ,\converge_cnt_reg[16]_i_1__0_n_6 ,\converge_cnt_reg[16]_i_1__0_n_7 }),
        .S(converge_cnt_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[17] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__0_n_6 ),
        .Q(converge_cnt_reg[17]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[18] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__0_n_5 ),
        .Q(converge_cnt_reg[18]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[19] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__0_n_4 ),
        .Q(converge_cnt_reg[19]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[1] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__0_n_6 ),
        .Q(converge_cnt_reg[1]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[20] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[20]_i_1__0_n_7 ),
        .Q(converge_cnt_reg[20]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  CARRY4 \converge_cnt_reg[20]_i_1__0 
       (.CI(\converge_cnt_reg[16]_i_1__0_n_0 ),
        .CO({\NLW_converge_cnt_reg[20]_i_1__0_CO_UNCONNECTED [3:1],\converge_cnt_reg[20]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_converge_cnt_reg[20]_i_1__0_O_UNCONNECTED [3:2],\converge_cnt_reg[20]_i_1__0_n_6 ,\converge_cnt_reg[20]_i_1__0_n_7 }),
        .S({1'b0,1'b0,converge_cnt_reg[21:20]}));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[21] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[20]_i_1__0_n_6 ),
        .Q(converge_cnt_reg[21]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[2] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__0_n_5 ),
        .Q(converge_cnt_reg[2]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[3] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__0_n_4 ),
        .Q(converge_cnt_reg[3]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[4] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__0_n_7 ),
        .Q(converge_cnt_reg[4]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  CARRY4 \converge_cnt_reg[4]_i_1__0 
       (.CI(\converge_cnt_reg[0]_i_3__0_n_0 ),
        .CO({\converge_cnt_reg[4]_i_1__0_n_0 ,\converge_cnt_reg[4]_i_1__0_n_1 ,\converge_cnt_reg[4]_i_1__0_n_2 ,\converge_cnt_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[4]_i_1__0_n_4 ,\converge_cnt_reg[4]_i_1__0_n_5 ,\converge_cnt_reg[4]_i_1__0_n_6 ,\converge_cnt_reg[4]_i_1__0_n_7 }),
        .S(converge_cnt_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[5] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__0_n_6 ),
        .Q(converge_cnt_reg[5]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[6] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__0_n_5 ),
        .Q(converge_cnt_reg[6]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[7] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__0_n_4 ),
        .Q(converge_cnt_reg[7]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[8] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__0_n_7 ),
        .Q(converge_cnt_reg[8]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  CARRY4 \converge_cnt_reg[8]_i_1__0 
       (.CI(\converge_cnt_reg[4]_i_1__0_n_0 ),
        .CO({\converge_cnt_reg[8]_i_1__0_n_0 ,\converge_cnt_reg[8]_i_1__0_n_1 ,\converge_cnt_reg[8]_i_1__0_n_2 ,\converge_cnt_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[8]_i_1__0_n_4 ,\converge_cnt_reg[8]_i_1__0_n_5 ,\converge_cnt_reg[8]_i_1__0_n_6 ,\converge_cnt_reg[8]_i_1__0_n_7 }),
        .S(converge_cnt_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[9] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__0_n_6 ),
        .Q(converge_cnt_reg[9]),
        .R(\converge_cnt[0]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hC8)) 
    converge_gen3_i_1__0
       (.I0(rxeq_adapt_done_reg2),
        .I1(rate_gen3_reg2),
        .I2(converge_gen3_reg_n_0),
        .O(converge_gen3_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    converge_gen3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(converge_gen3_i_1__0_n_0),
        .Q(converge_gen3_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hFFFFA8FF)) 
    gt_rx_phy_status_q_i_1__0
       (.I0(RST_PHYSTATUS),
        .I1(rate_idle_reg2),
        .I2(rate_rxsync_reg2),
        .I3(rst_idle_reg2),
        .I4(rate_done_reg2),
        .O(gt_rx_phy_status_q_reg));
  LUT6 #(
    .INIT(64'hD000000000000000)) 
    gt_rxvalid_q_i_3__0
       (.I0(gtreset_reg),
        .I1(pipe_rx1_valid_gt),
        .I2(gt_rxvalid_q_i_4__0_n_0),
        .I3(rst_idle_reg2),
        .I4(gt_rxvalid_1),
        .I5(rate_idle_reg2),
        .O(gt_rxvalid_q_reg));
  LUT4 #(
    .INIT(16'h8000)) 
    gt_rxvalid_q_i_4__0
       (.I0(rxvalid_cnt_reg__0__0[0]),
        .I1(rxvalid_cnt_reg__0__0[1]),
        .I2(rxvalid_cnt_reg__0__0[2]),
        .I3(rxvalid_cnt_reg__0__0[3]),
        .O(gt_rxvalid_q_i_4__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000800)) 
    \gtx_channel.gtxe2_channel_i_i_49 
       (.I0(\gtx_channel.gtxe2_channel_i_i_54_n_0 ),
        .I1(\gtx_channel.gtxe2_channel_i_i_55_n_0 ),
        .I2(\gtx_channel.gtxe2_channel_i_i_56_n_0 ),
        .I3(\gtx_channel.gtxe2_channel_i_i_57_n_0 ),
        .I4(\gtx_channel.gtxe2_channel_i_i_58_n_0 ),
        .I5(converge_gen3_reg_n_0),
        .O(user_rx_converge));
  LUT3 #(
    .INIT(8'h01)) 
    \gtx_channel.gtxe2_channel_i_i_54 
       (.I0(converge_cnt_reg[20]),
        .I1(converge_cnt_reg[14]),
        .I2(converge_cnt_reg[12]),
        .O(\gtx_channel.gtxe2_channel_i_i_54_n_0 ));
  LUT4 #(
    .INIT(16'h0100)) 
    \gtx_channel.gtxe2_channel_i_i_55 
       (.I0(converge_cnt_reg[1]),
        .I1(converge_cnt_reg[0]),
        .I2(converge_cnt_reg[2]),
        .I3(converge_cnt_reg[3]),
        .O(\gtx_channel.gtxe2_channel_i_i_55_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \gtx_channel.gtxe2_channel_i_i_56 
       (.I0(converge_cnt_reg[9]),
        .I1(converge_cnt_reg[8]),
        .I2(converge_cnt_reg[11]),
        .I3(converge_cnt_reg[10]),
        .O(\gtx_channel.gtxe2_channel_i_i_56_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \gtx_channel.gtxe2_channel_i_i_57 
       (.I0(converge_cnt_reg[6]),
        .I1(converge_cnt_reg[7]),
        .I2(converge_cnt_reg[4]),
        .I3(converge_cnt_reg[5]),
        .I4(converge_cnt_reg[21]),
        .I5(converge_cnt_reg[13]),
        .O(\gtx_channel.gtxe2_channel_i_i_57_n_0 ));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \gtx_channel.gtxe2_channel_i_i_58 
       (.I0(converge_cnt_reg[15]),
        .I1(converge_cnt_reg[18]),
        .I2(converge_cnt_reg[19]),
        .I3(converge_cnt_reg[17]),
        .I4(converge_cnt_reg[16]),
        .O(\gtx_channel.gtxe2_channel_i_i_58_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \oobclk_div.oobclk_cnt[0]_i_1__0 
       (.I0(oobclk_cnt[0]),
        .O(p_1_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \oobclk_div.oobclk_cnt[1]_i_1__0 
       (.I0(oobclk_cnt[0]),
        .I1(oobclk_cnt[1]),
        .O(p_1_in__0[1]));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_1_in__0[0]),
        .Q(oobclk_cnt[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_1_in__0[1]),
        .Q(oobclk_cnt[1]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'hB8)) 
    \oobclk_div.oobclk_i_1__0 
       (.I0(oobclk_cnt[1]),
        .I1(pclk_sel_reg2),
        .I2(oobclk_cnt[0]),
        .O(\oobclk_div.oobclk_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(\oobclk_div.oobclk_i_1__0_n_0 ),
        .Q(USER_OOBCLK),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE pclk_sel_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(D),
        .Q(pclk_sel_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE pclk_sel_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_reg1),
        .Q(pclk_sel_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_DONE),
        .Q(rate_done_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_done_reg1),
        .Q(rate_done_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_GEN3),
        .Q(rate_gen3_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_gen3_reg1),
        .Q(rate_gen3_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_IDLE),
        .Q(rate_idle_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1),
        .Q(rate_idle_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_rxsync_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_RXSYNC),
        .Q(rate_rxsync_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_rxsync_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_rxsync_reg1),
        .Q(rate_rxsync_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT2 #(
    .INIT(4'h8)) 
    \resetdone_reg1[1]_i_1 
       (.I0(txresetdone_reg2),
        .I1(rxresetdone_reg2),
        .O(RST_RESETDONE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RESETOVRD_START),
        .Q(resetovrd_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(resetovrd_start_reg1),
        .Q(resetovrd_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out1),
        .Q(rst_idle_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rst_idle_reg1),
        .Q(rst_idle_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT5 #(
    .INIT(32'hD0505050)) 
    \rxcdrlock_cnt[0]_i_1__0 
       (.I0(rxcdrlock_cnt_reg__0__0[0]),
        .I1(rxcdrlock_cnt_reg__0__0[2]),
        .I2(rxcdrlock_reg2),
        .I3(rxcdrlock_cnt_reg__0__0[1]),
        .I4(rxcdrlock_cnt_reg__0__0[3]),
        .O(p_0_in__0[0]));
  LUT5 #(
    .INIT(32'h8FF00000)) 
    \rxcdrlock_cnt[1]_i_1__0 
       (.I0(rxcdrlock_cnt_reg__0__0[3]),
        .I1(rxcdrlock_cnt_reg__0__0[2]),
        .I2(rxcdrlock_cnt_reg__0__0[0]),
        .I3(rxcdrlock_cnt_reg__0__0[1]),
        .I4(rxcdrlock_reg2),
        .O(p_0_in__0[1]));
  LUT5 #(
    .INIT(32'hF8780000)) 
    \rxcdrlock_cnt[2]_i_1__0 
       (.I0(rxcdrlock_cnt_reg__0__0[0]),
        .I1(rxcdrlock_cnt_reg__0__0[1]),
        .I2(rxcdrlock_cnt_reg__0__0[2]),
        .I3(rxcdrlock_cnt_reg__0__0[3]),
        .I4(rxcdrlock_reg2),
        .O(p_0_in__0[2]));
  LUT5 #(
    .INIT(32'hFF008000)) 
    \rxcdrlock_cnt[3]_i_1__0 
       (.I0(rxcdrlock_cnt_reg__0__0[0]),
        .I1(rxcdrlock_cnt_reg__0__0[1]),
        .I2(rxcdrlock_cnt_reg__0__0[2]),
        .I3(rxcdrlock_reg2),
        .I4(rxcdrlock_cnt_reg__0__0[3]),
        .O(p_0_in__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(rxcdrlock_cnt_reg__0__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(rxcdrlock_cnt_reg__0__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(rxcdrlock_cnt_reg__0__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(rxcdrlock_cnt_reg__0__0[3]),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h80000000)) 
    \rxcdrlock_reg1[1]_i_1 
       (.I0(rxcdrlock_cnt_reg__0__0[2]),
        .I1(rxcdrlock_cnt_reg__0__0[3]),
        .I2(gt_rxcdrlock_1),
        .I3(rxcdrlock_cnt_reg__0__0[1]),
        .I4(rxcdrlock_cnt_reg__0__0[0]),
        .O(RST_RXCDRLOCK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxcdrlock_1),
        .Q(rxcdrlock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1),
        .Q(rxcdrlock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_adapt_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXEQ_ADAPT_DONE),
        .Q(rxeq_adapt_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_adapt_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_adapt_done_reg1),
        .Q(rxeq_adapt_done_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXRESETDONE),
        .Q(rxresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxresetdone_reg1),
        .Q(rxresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxstatus_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rxstatus),
        .Q(rxstatus_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxstatus_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxstatus_reg1),
        .Q(rxstatus_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT6 #(
    .INIT(64'hC404040404040404)) 
    \rxvalid_cnt[0]_i_1__0 
       (.I0(rxstatus_reg2),
        .I1(rxvalid_reg2),
        .I2(rxvalid_cnt_reg__0__0[0]),
        .I3(rxvalid_cnt_reg__0__0[1]),
        .I4(rxvalid_cnt_reg__0__0[2]),
        .I5(rxvalid_cnt_reg__0__0[3]),
        .O(p_0_in__0__0[0]));
  LUT6 #(
    .INIT(64'h808000F000F00000)) 
    \rxvalid_cnt[1]_i_1__0 
       (.I0(rxvalid_cnt_reg__0__0[3]),
        .I1(rxvalid_cnt_reg__0__0[2]),
        .I2(rxvalid_reg2),
        .I3(rxstatus_reg2),
        .I4(rxvalid_cnt_reg__0__0[1]),
        .I5(rxvalid_cnt_reg__0__0[0]),
        .O(p_0_in__0__0[1]));
  LUT6 #(
    .INIT(64'h80BF000000C00000)) 
    \rxvalid_cnt[2]_i_1__0 
       (.I0(rxvalid_cnt_reg__0__0[3]),
        .I1(rxvalid_cnt_reg__0__0[0]),
        .I2(rxvalid_cnt_reg__0__0[1]),
        .I3(rxstatus_reg2),
        .I4(rxvalid_reg2),
        .I5(rxvalid_cnt_reg__0__0[2]),
        .O(p_0_in__0__0[2]));
  LUT6 #(
    .INIT(64'h8C08080808080808)) 
    \rxvalid_cnt[3]_i_1__0 
       (.I0(rxvalid_cnt_reg__0__0[3]),
        .I1(rxvalid_reg2),
        .I2(rxstatus_reg2),
        .I3(rxvalid_cnt_reg__0__0[2]),
        .I4(rxvalid_cnt_reg__0__0[1]),
        .I5(rxvalid_cnt_reg__0__0[0]),
        .O(p_0_in__0__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[0]),
        .Q(rxvalid_cnt_reg__0__0[0]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[1]),
        .Q(rxvalid_cnt_reg__0__0[1]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[2]),
        .Q(rxvalid_cnt_reg__0__0[2]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[3]),
        .Q(rxvalid_cnt_reg__0__0[3]),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxvalid_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxvalid_1),
        .Q(rxvalid_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxvalid_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxvalid_reg1),
        .Q(rxvalid_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txcompliance_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_TXCOMPLIANCE),
        .Q(txcompliance_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txcompliance_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txcompliance_reg1),
        .Q(txcompliance_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txelecidle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_TXELECIDLE),
        .Q(txelecidle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txelecidle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txelecidle_reg1),
        .Q(txelecidle_reg2),
        .R(RST_CPLLRESET));
  LUT2 #(
    .INIT(4'h7)) 
    txphaligndone_reg1_i_2
       (.I0(txelecidle_reg2),
        .I1(txcompliance_reg2),
        .O(user_active_lane));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_TXRESETDONE),
        .Q(txresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txresetdone_reg1),
        .Q(txresetdone_reg2),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_user" *) 
module pcie_7x_0_pcie_7x_0_pipe_user_32
   (gt_rxvalid_q_reg,
    out,
    txphinitdone_reg1_reg,
    txphinitdone_reg1_reg_0,
    USER_OOBCLK,
    RST_RXCDRLOCK,
    gt_rx_phy_status_q_reg,
    user_rx_converge,
    RST_RESETDONE,
    gtreset_reg,
    pipe_rx2_valid_gt,
    gt_rxvalid_2,
    RST_CPLLRESET,
    CLK,
    D,
    USER_RXRESETDONE,
    USER_TXRESETDONE,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    gt_rxcdrlock_2,
    RST_RXUSRCLK_RESET,
    pipe_rxstatus,
    out1,
    USER_RATE_IDLE,
    USER_RATE_RXSYNC,
    USER_RATE_DONE,
    rate_gen3_2,
    USER_RXEQ_ADAPT_DONE,
    USER_RESETOVRD_START,
    RST_PHYSTATUS);
  output gt_rxvalid_q_reg;
  output out;
  output txphinitdone_reg1_reg;
  output txphinitdone_reg1_reg_0;
  output USER_OOBCLK;
  output [0:0]RST_RXCDRLOCK;
  output gt_rx_phy_status_q_reg;
  output [0:0]user_rx_converge;
  output [0:0]RST_RESETDONE;
  input gtreset_reg;
  input pipe_rx2_valid_gt;
  input gt_rxvalid_2;
  input RST_CPLLRESET;
  input CLK;
  input [0:0]D;
  input USER_RXRESETDONE;
  input USER_TXRESETDONE;
  input [0:0]PIPE_TXCOMPLIANCE;
  input [0:0]PIPE_TXELECIDLE;
  input gt_rxcdrlock_2;
  input RST_RXUSRCLK_RESET;
  input [0:0]pipe_rxstatus;
  input [0:0]out1;
  input USER_RATE_IDLE;
  input USER_RATE_RXSYNC;
  input USER_RATE_DONE;
  input rate_gen3_2;
  input USER_RXEQ_ADAPT_DONE;
  input USER_RESETOVRD_START;
  input [0:0]RST_PHYSTATUS;

  wire CLK;
  wire [0:0]D;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [0:0]PIPE_TXELECIDLE;
  wire RST_CPLLRESET;
  wire [0:0]RST_PHYSTATUS;
  wire [0:0]RST_RESETDONE;
  wire [0:0]RST_RXCDRLOCK;
  wire RST_RXUSRCLK_RESET;
  wire USER_OOBCLK;
  wire USER_RATE_DONE;
  wire USER_RATE_IDLE;
  wire USER_RATE_RXSYNC;
  wire USER_RESETOVRD_START;
  wire USER_RXEQ_ADAPT_DONE;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  wire \converge_cnt[0]_i_10_n_0 ;
  wire \converge_cnt[0]_i_11_n_0 ;
  wire \converge_cnt[0]_i_1__4_n_0 ;
  wire \converge_cnt[0]_i_4__1_n_0 ;
  wire \converge_cnt[0]_i_5__1_n_0 ;
  wire \converge_cnt[0]_i_9__1_n_0 ;
  wire [21:0]converge_cnt_reg;
  wire \converge_cnt_reg[0]_i_3__1_n_0 ;
  wire \converge_cnt_reg[0]_i_3__1_n_1 ;
  wire \converge_cnt_reg[0]_i_3__1_n_2 ;
  wire \converge_cnt_reg[0]_i_3__1_n_3 ;
  wire \converge_cnt_reg[0]_i_3__1_n_4 ;
  wire \converge_cnt_reg[0]_i_3__1_n_5 ;
  wire \converge_cnt_reg[0]_i_3__1_n_6 ;
  wire \converge_cnt_reg[0]_i_3__1_n_7 ;
  wire \converge_cnt_reg[12]_i_1__1_n_0 ;
  wire \converge_cnt_reg[12]_i_1__1_n_1 ;
  wire \converge_cnt_reg[12]_i_1__1_n_2 ;
  wire \converge_cnt_reg[12]_i_1__1_n_3 ;
  wire \converge_cnt_reg[12]_i_1__1_n_4 ;
  wire \converge_cnt_reg[12]_i_1__1_n_5 ;
  wire \converge_cnt_reg[12]_i_1__1_n_6 ;
  wire \converge_cnt_reg[12]_i_1__1_n_7 ;
  wire \converge_cnt_reg[16]_i_1__1_n_0 ;
  wire \converge_cnt_reg[16]_i_1__1_n_1 ;
  wire \converge_cnt_reg[16]_i_1__1_n_2 ;
  wire \converge_cnt_reg[16]_i_1__1_n_3 ;
  wire \converge_cnt_reg[16]_i_1__1_n_4 ;
  wire \converge_cnt_reg[16]_i_1__1_n_5 ;
  wire \converge_cnt_reg[16]_i_1__1_n_6 ;
  wire \converge_cnt_reg[16]_i_1__1_n_7 ;
  wire \converge_cnt_reg[20]_i_1__1_n_3 ;
  wire \converge_cnt_reg[20]_i_1__1_n_6 ;
  wire \converge_cnt_reg[20]_i_1__1_n_7 ;
  wire \converge_cnt_reg[4]_i_1__1_n_0 ;
  wire \converge_cnt_reg[4]_i_1__1_n_1 ;
  wire \converge_cnt_reg[4]_i_1__1_n_2 ;
  wire \converge_cnt_reg[4]_i_1__1_n_3 ;
  wire \converge_cnt_reg[4]_i_1__1_n_4 ;
  wire \converge_cnt_reg[4]_i_1__1_n_5 ;
  wire \converge_cnt_reg[4]_i_1__1_n_6 ;
  wire \converge_cnt_reg[4]_i_1__1_n_7 ;
  wire \converge_cnt_reg[8]_i_1__1_n_0 ;
  wire \converge_cnt_reg[8]_i_1__1_n_1 ;
  wire \converge_cnt_reg[8]_i_1__1_n_2 ;
  wire \converge_cnt_reg[8]_i_1__1_n_3 ;
  wire \converge_cnt_reg[8]_i_1__1_n_4 ;
  wire \converge_cnt_reg[8]_i_1__1_n_5 ;
  wire \converge_cnt_reg[8]_i_1__1_n_6 ;
  wire \converge_cnt_reg[8]_i_1__1_n_7 ;
  wire converge_gen3_i_1__1_n_0;
  wire converge_gen3_reg_n_0;
  wire gt_rx_phy_status_q_reg;
  wire gt_rxcdrlock_2;
  wire gt_rxvalid_2;
  wire gt_rxvalid_q_i_4__1_n_0;
  wire gt_rxvalid_q_reg;
  wire gtreset_reg;
  wire \gtx_channel.gtxe2_channel_i_i_66_n_0 ;
  wire \gtx_channel.gtxe2_channel_i_i_67_n_0 ;
  wire \gtx_channel.gtxe2_channel_i_i_68_n_0 ;
  wire [1:0]oobclk_cnt;
  wire \oobclk_div.oobclk_i_1__1_n_0 ;
  wire [0:0]out1;
  wire [3:0]p_0_in__0;
  wire [3:0]p_0_in__0__0;
  wire [1:0]p_1_in__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire pclk_sel_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire pclk_sel_reg2;
  wire pipe_rx2_valid_gt;
  wire [0:0]pipe_rxstatus;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_done_reg2;
  wire rate_gen3_2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_gen3_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_rxsync_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_rxsync_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg2;
  wire [3:0]rxcdrlock_cnt_reg__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_adapt_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_adapt_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxstatus_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxstatus_reg2;
  wire [3:0]rxvalid_cnt_reg__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxvalid_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxvalid_reg2;
  wire sel;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txcompliance_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txcompliance_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txelecidle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txelecidle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg2;
  wire [0:0]user_rx_converge;
  wire [3:1]\NLW_converge_cnt_reg[20]_i_1__1_CO_UNCONNECTED ;
  wire [3:2]\NLW_converge_cnt_reg[20]_i_1__1_O_UNCONNECTED ;

  assign out = rst_idle_reg2;
  assign txphinitdone_reg1_reg = txcompliance_reg2;
  assign txphinitdone_reg1_reg_0 = txelecidle_reg2;
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \converge_cnt[0]_i_10 
       (.I0(converge_cnt_reg[15]),
        .I1(converge_cnt_reg[18]),
        .I2(converge_cnt_reg[19]),
        .I3(converge_cnt_reg[17]),
        .I4(converge_cnt_reg[16]),
        .O(\converge_cnt[0]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \converge_cnt[0]_i_11 
       (.I0(converge_cnt_reg[9]),
        .I1(converge_cnt_reg[8]),
        .I2(converge_cnt_reg[11]),
        .I3(converge_cnt_reg[10]),
        .O(\converge_cnt[0]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \converge_cnt[0]_i_1__4 
       (.I0(rate_idle_reg2),
        .I1(RST_CPLLRESET),
        .I2(rst_idle_reg2),
        .I3(rate_gen3_reg2),
        .O(\converge_cnt[0]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF5555555D)) 
    \converge_cnt[0]_i_2__1 
       (.I0(converge_cnt_reg[21]),
        .I1(\converge_cnt[0]_i_4__1_n_0 ),
        .I2(converge_cnt_reg[12]),
        .I3(converge_cnt_reg[14]),
        .I4(converge_cnt_reg[20]),
        .I5(\converge_cnt[0]_i_5__1_n_0 ),
        .O(sel));
  LUT5 #(
    .INIT(32'h00000001)) 
    \converge_cnt[0]_i_4__1 
       (.I0(converge_cnt_reg[3]),
        .I1(converge_cnt_reg[4]),
        .I2(converge_cnt_reg[5]),
        .I3(converge_cnt_reg[7]),
        .I4(converge_cnt_reg[6]),
        .O(\converge_cnt[0]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0A0B0A0F0A0B0A0B)) 
    \converge_cnt[0]_i_5__1 
       (.I0(\converge_cnt[0]_i_10_n_0 ),
        .I1(converge_cnt_reg[13]),
        .I2(converge_cnt_reg[20]),
        .I3(converge_cnt_reg[14]),
        .I4(converge_cnt_reg[12]),
        .I5(\converge_cnt[0]_i_11_n_0 ),
        .O(\converge_cnt[0]_i_5__1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \converge_cnt[0]_i_9__1 
       (.I0(converge_cnt_reg[0]),
        .O(\converge_cnt[0]_i_9__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[0] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__1_n_7 ),
        .Q(converge_cnt_reg[0]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  CARRY4 \converge_cnt_reg[0]_i_3__1 
       (.CI(1'b0),
        .CO({\converge_cnt_reg[0]_i_3__1_n_0 ,\converge_cnt_reg[0]_i_3__1_n_1 ,\converge_cnt_reg[0]_i_3__1_n_2 ,\converge_cnt_reg[0]_i_3__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\converge_cnt_reg[0]_i_3__1_n_4 ,\converge_cnt_reg[0]_i_3__1_n_5 ,\converge_cnt_reg[0]_i_3__1_n_6 ,\converge_cnt_reg[0]_i_3__1_n_7 }),
        .S({converge_cnt_reg[3:1],\converge_cnt[0]_i_9__1_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[10] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__1_n_5 ),
        .Q(converge_cnt_reg[10]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[11] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__1_n_4 ),
        .Q(converge_cnt_reg[11]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[12] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__1_n_7 ),
        .Q(converge_cnt_reg[12]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  CARRY4 \converge_cnt_reg[12]_i_1__1 
       (.CI(\converge_cnt_reg[8]_i_1__1_n_0 ),
        .CO({\converge_cnt_reg[12]_i_1__1_n_0 ,\converge_cnt_reg[12]_i_1__1_n_1 ,\converge_cnt_reg[12]_i_1__1_n_2 ,\converge_cnt_reg[12]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[12]_i_1__1_n_4 ,\converge_cnt_reg[12]_i_1__1_n_5 ,\converge_cnt_reg[12]_i_1__1_n_6 ,\converge_cnt_reg[12]_i_1__1_n_7 }),
        .S(converge_cnt_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[13] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__1_n_6 ),
        .Q(converge_cnt_reg[13]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[14] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__1_n_5 ),
        .Q(converge_cnt_reg[14]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[15] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__1_n_4 ),
        .Q(converge_cnt_reg[15]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[16] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__1_n_7 ),
        .Q(converge_cnt_reg[16]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  CARRY4 \converge_cnt_reg[16]_i_1__1 
       (.CI(\converge_cnt_reg[12]_i_1__1_n_0 ),
        .CO({\converge_cnt_reg[16]_i_1__1_n_0 ,\converge_cnt_reg[16]_i_1__1_n_1 ,\converge_cnt_reg[16]_i_1__1_n_2 ,\converge_cnt_reg[16]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[16]_i_1__1_n_4 ,\converge_cnt_reg[16]_i_1__1_n_5 ,\converge_cnt_reg[16]_i_1__1_n_6 ,\converge_cnt_reg[16]_i_1__1_n_7 }),
        .S(converge_cnt_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[17] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__1_n_6 ),
        .Q(converge_cnt_reg[17]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[18] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__1_n_5 ),
        .Q(converge_cnt_reg[18]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[19] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__1_n_4 ),
        .Q(converge_cnt_reg[19]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[1] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__1_n_6 ),
        .Q(converge_cnt_reg[1]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[20] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[20]_i_1__1_n_7 ),
        .Q(converge_cnt_reg[20]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  CARRY4 \converge_cnt_reg[20]_i_1__1 
       (.CI(\converge_cnt_reg[16]_i_1__1_n_0 ),
        .CO({\NLW_converge_cnt_reg[20]_i_1__1_CO_UNCONNECTED [3:1],\converge_cnt_reg[20]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_converge_cnt_reg[20]_i_1__1_O_UNCONNECTED [3:2],\converge_cnt_reg[20]_i_1__1_n_6 ,\converge_cnt_reg[20]_i_1__1_n_7 }),
        .S({1'b0,1'b0,converge_cnt_reg[21:20]}));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[21] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[20]_i_1__1_n_6 ),
        .Q(converge_cnt_reg[21]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[2] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__1_n_5 ),
        .Q(converge_cnt_reg[2]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[3] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__1_n_4 ),
        .Q(converge_cnt_reg[3]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[4] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__1_n_7 ),
        .Q(converge_cnt_reg[4]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  CARRY4 \converge_cnt_reg[4]_i_1__1 
       (.CI(\converge_cnt_reg[0]_i_3__1_n_0 ),
        .CO({\converge_cnt_reg[4]_i_1__1_n_0 ,\converge_cnt_reg[4]_i_1__1_n_1 ,\converge_cnt_reg[4]_i_1__1_n_2 ,\converge_cnt_reg[4]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[4]_i_1__1_n_4 ,\converge_cnt_reg[4]_i_1__1_n_5 ,\converge_cnt_reg[4]_i_1__1_n_6 ,\converge_cnt_reg[4]_i_1__1_n_7 }),
        .S(converge_cnt_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[5] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__1_n_6 ),
        .Q(converge_cnt_reg[5]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[6] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__1_n_5 ),
        .Q(converge_cnt_reg[6]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[7] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__1_n_4 ),
        .Q(converge_cnt_reg[7]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[8] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__1_n_7 ),
        .Q(converge_cnt_reg[8]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  CARRY4 \converge_cnt_reg[8]_i_1__1 
       (.CI(\converge_cnt_reg[4]_i_1__1_n_0 ),
        .CO({\converge_cnt_reg[8]_i_1__1_n_0 ,\converge_cnt_reg[8]_i_1__1_n_1 ,\converge_cnt_reg[8]_i_1__1_n_2 ,\converge_cnt_reg[8]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[8]_i_1__1_n_4 ,\converge_cnt_reg[8]_i_1__1_n_5 ,\converge_cnt_reg[8]_i_1__1_n_6 ,\converge_cnt_reg[8]_i_1__1_n_7 }),
        .S(converge_cnt_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[9] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__1_n_6 ),
        .Q(converge_cnt_reg[9]),
        .R(\converge_cnt[0]_i_1__4_n_0 ));
  LUT3 #(
    .INIT(8'hC8)) 
    converge_gen3_i_1__1
       (.I0(rxeq_adapt_done_reg2),
        .I1(rate_gen3_reg2),
        .I2(converge_gen3_reg_n_0),
        .O(converge_gen3_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    converge_gen3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(converge_gen3_i_1__1_n_0),
        .Q(converge_gen3_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hFFFFA8FF)) 
    gt_rx_phy_status_q_i_1__1
       (.I0(RST_PHYSTATUS),
        .I1(rate_idle_reg2),
        .I2(rate_rxsync_reg2),
        .I3(rst_idle_reg2),
        .I4(rate_done_reg2),
        .O(gt_rx_phy_status_q_reg));
  LUT6 #(
    .INIT(64'hD000000000000000)) 
    gt_rxvalid_q_i_3__1
       (.I0(gtreset_reg),
        .I1(pipe_rx2_valid_gt),
        .I2(gt_rxvalid_q_i_4__1_n_0),
        .I3(rst_idle_reg2),
        .I4(gt_rxvalid_2),
        .I5(rate_idle_reg2),
        .O(gt_rxvalid_q_reg));
  LUT4 #(
    .INIT(16'h8000)) 
    gt_rxvalid_q_i_4__1
       (.I0(rxvalid_cnt_reg__0[0]),
        .I1(rxvalid_cnt_reg__0[1]),
        .I2(rxvalid_cnt_reg__0[2]),
        .I3(rxvalid_cnt_reg__0[3]),
        .O(gt_rxvalid_q_i_4__1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000800)) 
    \gtx_channel.gtxe2_channel_i_i_64 
       (.I0(\gtx_channel.gtxe2_channel_i_i_66_n_0 ),
        .I1(\gtx_channel.gtxe2_channel_i_i_67_n_0 ),
        .I2(\converge_cnt[0]_i_11_n_0 ),
        .I3(\gtx_channel.gtxe2_channel_i_i_68_n_0 ),
        .I4(\converge_cnt[0]_i_10_n_0 ),
        .I5(converge_gen3_reg_n_0),
        .O(user_rx_converge));
  LUT3 #(
    .INIT(8'h01)) 
    \gtx_channel.gtxe2_channel_i_i_66 
       (.I0(converge_cnt_reg[20]),
        .I1(converge_cnt_reg[14]),
        .I2(converge_cnt_reg[12]),
        .O(\gtx_channel.gtxe2_channel_i_i_66_n_0 ));
  LUT4 #(
    .INIT(16'h0100)) 
    \gtx_channel.gtxe2_channel_i_i_67 
       (.I0(converge_cnt_reg[1]),
        .I1(converge_cnt_reg[0]),
        .I2(converge_cnt_reg[2]),
        .I3(converge_cnt_reg[3]),
        .O(\gtx_channel.gtxe2_channel_i_i_67_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \gtx_channel.gtxe2_channel_i_i_68 
       (.I0(converge_cnt_reg[6]),
        .I1(converge_cnt_reg[7]),
        .I2(converge_cnt_reg[4]),
        .I3(converge_cnt_reg[5]),
        .I4(converge_cnt_reg[21]),
        .I5(converge_cnt_reg[13]),
        .O(\gtx_channel.gtxe2_channel_i_i_68_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \oobclk_div.oobclk_cnt[0]_i_1__1 
       (.I0(oobclk_cnt[0]),
        .O(p_1_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \oobclk_div.oobclk_cnt[1]_i_1__1 
       (.I0(oobclk_cnt[0]),
        .I1(oobclk_cnt[1]),
        .O(p_1_in__0[1]));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_1_in__0[0]),
        .Q(oobclk_cnt[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_1_in__0[1]),
        .Q(oobclk_cnt[1]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'hB8)) 
    \oobclk_div.oobclk_i_1__1 
       (.I0(oobclk_cnt[1]),
        .I1(pclk_sel_reg2),
        .I2(oobclk_cnt[0]),
        .O(\oobclk_div.oobclk_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(\oobclk_div.oobclk_i_1__1_n_0 ),
        .Q(USER_OOBCLK),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE pclk_sel_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(D),
        .Q(pclk_sel_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE pclk_sel_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_reg1),
        .Q(pclk_sel_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_DONE),
        .Q(rate_done_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_done_reg1),
        .Q(rate_done_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_gen3_2),
        .Q(rate_gen3_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_gen3_reg1),
        .Q(rate_gen3_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_IDLE),
        .Q(rate_idle_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1),
        .Q(rate_idle_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_rxsync_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_RXSYNC),
        .Q(rate_rxsync_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_rxsync_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_rxsync_reg1),
        .Q(rate_rxsync_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT2 #(
    .INIT(4'h8)) 
    \resetdone_reg1[2]_i_1 
       (.I0(txresetdone_reg2),
        .I1(rxresetdone_reg2),
        .O(RST_RESETDONE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RESETOVRD_START),
        .Q(resetovrd_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(resetovrd_start_reg1),
        .Q(resetovrd_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out1),
        .Q(rst_idle_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rst_idle_reg1),
        .Q(rst_idle_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT5 #(
    .INIT(32'hD0505050)) 
    \rxcdrlock_cnt[0]_i_1__1 
       (.I0(rxcdrlock_cnt_reg__0[0]),
        .I1(rxcdrlock_cnt_reg__0[2]),
        .I2(rxcdrlock_reg2),
        .I3(rxcdrlock_cnt_reg__0[1]),
        .I4(rxcdrlock_cnt_reg__0[3]),
        .O(p_0_in__0[0]));
  LUT5 #(
    .INIT(32'h8FF00000)) 
    \rxcdrlock_cnt[1]_i_1__1 
       (.I0(rxcdrlock_cnt_reg__0[3]),
        .I1(rxcdrlock_cnt_reg__0[2]),
        .I2(rxcdrlock_cnt_reg__0[0]),
        .I3(rxcdrlock_cnt_reg__0[1]),
        .I4(rxcdrlock_reg2),
        .O(p_0_in__0[1]));
  LUT5 #(
    .INIT(32'hF8780000)) 
    \rxcdrlock_cnt[2]_i_1__1 
       (.I0(rxcdrlock_cnt_reg__0[0]),
        .I1(rxcdrlock_cnt_reg__0[1]),
        .I2(rxcdrlock_cnt_reg__0[2]),
        .I3(rxcdrlock_cnt_reg__0[3]),
        .I4(rxcdrlock_reg2),
        .O(p_0_in__0[2]));
  LUT5 #(
    .INIT(32'hFF008000)) 
    \rxcdrlock_cnt[3]_i_1__1 
       (.I0(rxcdrlock_cnt_reg__0[0]),
        .I1(rxcdrlock_cnt_reg__0[1]),
        .I2(rxcdrlock_cnt_reg__0[2]),
        .I3(rxcdrlock_reg2),
        .I4(rxcdrlock_cnt_reg__0[3]),
        .O(p_0_in__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(rxcdrlock_cnt_reg__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(rxcdrlock_cnt_reg__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(rxcdrlock_cnt_reg__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(rxcdrlock_cnt_reg__0[3]),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h80000000)) 
    \rxcdrlock_reg1[2]_i_1 
       (.I0(rxcdrlock_cnt_reg__0[2]),
        .I1(rxcdrlock_cnt_reg__0[3]),
        .I2(gt_rxcdrlock_2),
        .I3(rxcdrlock_cnt_reg__0[1]),
        .I4(rxcdrlock_cnt_reg__0[0]),
        .O(RST_RXCDRLOCK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxcdrlock_2),
        .Q(rxcdrlock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1),
        .Q(rxcdrlock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_adapt_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXEQ_ADAPT_DONE),
        .Q(rxeq_adapt_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_adapt_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_adapt_done_reg1),
        .Q(rxeq_adapt_done_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXRESETDONE),
        .Q(rxresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxresetdone_reg1),
        .Q(rxresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxstatus_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rxstatus),
        .Q(rxstatus_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxstatus_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxstatus_reg1),
        .Q(rxstatus_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT6 #(
    .INIT(64'hC404040404040404)) 
    \rxvalid_cnt[0]_i_1__1 
       (.I0(rxstatus_reg2),
        .I1(rxvalid_reg2),
        .I2(rxvalid_cnt_reg__0[0]),
        .I3(rxvalid_cnt_reg__0[1]),
        .I4(rxvalid_cnt_reg__0[2]),
        .I5(rxvalid_cnt_reg__0[3]),
        .O(p_0_in__0__0[0]));
  LUT6 #(
    .INIT(64'h808000F000F00000)) 
    \rxvalid_cnt[1]_i_1__1 
       (.I0(rxvalid_cnt_reg__0[3]),
        .I1(rxvalid_cnt_reg__0[2]),
        .I2(rxvalid_reg2),
        .I3(rxstatus_reg2),
        .I4(rxvalid_cnt_reg__0[1]),
        .I5(rxvalid_cnt_reg__0[0]),
        .O(p_0_in__0__0[1]));
  LUT6 #(
    .INIT(64'h80BF000000C00000)) 
    \rxvalid_cnt[2]_i_1__1 
       (.I0(rxvalid_cnt_reg__0[3]),
        .I1(rxvalid_cnt_reg__0[0]),
        .I2(rxvalid_cnt_reg__0[1]),
        .I3(rxstatus_reg2),
        .I4(rxvalid_reg2),
        .I5(rxvalid_cnt_reg__0[2]),
        .O(p_0_in__0__0[2]));
  LUT6 #(
    .INIT(64'h8C08080808080808)) 
    \rxvalid_cnt[3]_i_1__1 
       (.I0(rxvalid_cnt_reg__0[3]),
        .I1(rxvalid_reg2),
        .I2(rxstatus_reg2),
        .I3(rxvalid_cnt_reg__0[2]),
        .I4(rxvalid_cnt_reg__0[1]),
        .I5(rxvalid_cnt_reg__0[0]),
        .O(p_0_in__0__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[0]),
        .Q(rxvalid_cnt_reg__0[0]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[1]),
        .Q(rxvalid_cnt_reg__0[1]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[2]),
        .Q(rxvalid_cnt_reg__0[2]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[3]),
        .Q(rxvalid_cnt_reg__0[3]),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxvalid_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxvalid_2),
        .Q(rxvalid_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxvalid_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxvalid_reg1),
        .Q(rxvalid_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txcompliance_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_TXCOMPLIANCE),
        .Q(txcompliance_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txcompliance_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txcompliance_reg1),
        .Q(txcompliance_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txelecidle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_TXELECIDLE),
        .Q(txelecidle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txelecidle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txelecidle_reg1),
        .Q(txelecidle_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_TXRESETDONE),
        .Q(txresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txresetdone_reg1),
        .Q(txresetdone_reg2),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_user" *) 
module pcie_7x_0_pcie_7x_0_pipe_user_38
   (phy_rdy_n_int_reg,
    gt_rxvalid_q_reg,
    txphinitdone_reg1_reg,
    txphinitdone_reg1_reg_0,
    txphinitdone_reg1_reg_1,
    txphaligndone_reg1_reg,
    USER_OOBCLK,
    RST_RXCDRLOCK,
    gt_rx_phy_status_q_reg,
    \converge_cnt_reg[0]_0 ,
    \cplllock_reg1_reg[3] ,
    \cplllock_reg1_reg[3]_0 ,
    RST_RESETDONE,
    converge_gen3_reg_0,
    reg_clock_locked,
    out,
    rst_idle_reg2_reg_0,
    rst_idle_reg2_reg_1,
    gtreset_reg,
    pipe_rx3_valid_gt,
    gt_rxvalid_3,
    pipe_txphinitdone,
    txelecidle_reg2_reg_0,
    txcompliance_reg2_reg_0,
    pipe_txphaligndone,
    RST_CPLLRESET,
    CLK,
    D,
    USER_RXRESETDONE,
    USER_TXRESETDONE,
    PIPE_TXCOMPLIANCE,
    PIPE_TXELECIDLE,
    gt_rxcdrlock_3,
    RST_RXUSRCLK_RESET,
    pipe_rxstatus,
    out1,
    USER_RATE_IDLE,
    USER_RATE_RXSYNC,
    USER_RATE_DONE,
    rate_gen3_3,
    USER_RXEQ_ADAPT_DONE,
    USER_RESETOVRD_START,
    RST_PHYSTATUS);
  output phy_rdy_n_int_reg;
  output gt_rxvalid_q_reg;
  output txphinitdone_reg1_reg;
  output txphinitdone_reg1_reg_0;
  output txphinitdone_reg1_reg_1;
  output txphaligndone_reg1_reg;
  output USER_OOBCLK;
  output [0:0]RST_RXCDRLOCK;
  output gt_rx_phy_status_q_reg;
  output \converge_cnt_reg[0]_0 ;
  output \cplllock_reg1_reg[3] ;
  output \cplllock_reg1_reg[3]_0 ;
  output [0:0]RST_RESETDONE;
  output converge_gen3_reg_0;
  input reg_clock_locked;
  input out;
  input rst_idle_reg2_reg_0;
  input rst_idle_reg2_reg_1;
  input gtreset_reg;
  input pipe_rx3_valid_gt;
  input gt_rxvalid_3;
  input [1:0]pipe_txphinitdone;
  input txelecidle_reg2_reg_0;
  input txcompliance_reg2_reg_0;
  input [1:0]pipe_txphaligndone;
  input RST_CPLLRESET;
  input CLK;
  input [0:0]D;
  input USER_RXRESETDONE;
  input USER_TXRESETDONE;
  input [0:0]PIPE_TXCOMPLIANCE;
  input [0:0]PIPE_TXELECIDLE;
  input gt_rxcdrlock_3;
  input RST_RXUSRCLK_RESET;
  input [0:0]pipe_rxstatus;
  input [0:0]out1;
  input USER_RATE_IDLE;
  input USER_RATE_RXSYNC;
  input USER_RATE_DONE;
  input rate_gen3_3;
  input USER_RXEQ_ADAPT_DONE;
  input USER_RESETOVRD_START;
  input [0:0]RST_PHYSTATUS;

  wire CLK;
  wire [0:0]D;
  wire [0:0]PIPE_TXCOMPLIANCE;
  wire [0:0]PIPE_TXELECIDLE;
  wire RST_CPLLRESET;
  wire [0:0]RST_PHYSTATUS;
  wire [0:0]RST_RESETDONE;
  wire [0:0]RST_RXCDRLOCK;
  wire RST_RXUSRCLK_RESET;
  wire USER_OOBCLK;
  wire USER_RATE_DONE;
  wire USER_RATE_IDLE;
  wire USER_RATE_RXSYNC;
  wire USER_RESETOVRD_START;
  wire USER_RXEQ_ADAPT_DONE;
  wire USER_RXRESETDONE;
  wire USER_TXRESETDONE;
  wire \converge_cnt[0]_i_10__0_n_0 ;
  wire \converge_cnt[0]_i_1__6_n_0 ;
  wire \converge_cnt[0]_i_4__2_n_0 ;
  wire \converge_cnt[0]_i_5__2_n_0 ;
  wire \converge_cnt[0]_i_9__2_n_0 ;
  wire [21:0]converge_cnt_reg;
  wire \converge_cnt_reg[0]_0 ;
  wire \converge_cnt_reg[0]_i_3__2_n_0 ;
  wire \converge_cnt_reg[0]_i_3__2_n_1 ;
  wire \converge_cnt_reg[0]_i_3__2_n_2 ;
  wire \converge_cnt_reg[0]_i_3__2_n_3 ;
  wire \converge_cnt_reg[0]_i_3__2_n_4 ;
  wire \converge_cnt_reg[0]_i_3__2_n_5 ;
  wire \converge_cnt_reg[0]_i_3__2_n_6 ;
  wire \converge_cnt_reg[0]_i_3__2_n_7 ;
  wire \converge_cnt_reg[12]_i_1__2_n_0 ;
  wire \converge_cnt_reg[12]_i_1__2_n_1 ;
  wire \converge_cnt_reg[12]_i_1__2_n_2 ;
  wire \converge_cnt_reg[12]_i_1__2_n_3 ;
  wire \converge_cnt_reg[12]_i_1__2_n_4 ;
  wire \converge_cnt_reg[12]_i_1__2_n_5 ;
  wire \converge_cnt_reg[12]_i_1__2_n_6 ;
  wire \converge_cnt_reg[12]_i_1__2_n_7 ;
  wire \converge_cnt_reg[16]_i_1__2_n_0 ;
  wire \converge_cnt_reg[16]_i_1__2_n_1 ;
  wire \converge_cnt_reg[16]_i_1__2_n_2 ;
  wire \converge_cnt_reg[16]_i_1__2_n_3 ;
  wire \converge_cnt_reg[16]_i_1__2_n_4 ;
  wire \converge_cnt_reg[16]_i_1__2_n_5 ;
  wire \converge_cnt_reg[16]_i_1__2_n_6 ;
  wire \converge_cnt_reg[16]_i_1__2_n_7 ;
  wire \converge_cnt_reg[20]_i_1__2_n_3 ;
  wire \converge_cnt_reg[20]_i_1__2_n_6 ;
  wire \converge_cnt_reg[20]_i_1__2_n_7 ;
  wire \converge_cnt_reg[4]_i_1__2_n_0 ;
  wire \converge_cnt_reg[4]_i_1__2_n_1 ;
  wire \converge_cnt_reg[4]_i_1__2_n_2 ;
  wire \converge_cnt_reg[4]_i_1__2_n_3 ;
  wire \converge_cnt_reg[4]_i_1__2_n_4 ;
  wire \converge_cnt_reg[4]_i_1__2_n_5 ;
  wire \converge_cnt_reg[4]_i_1__2_n_6 ;
  wire \converge_cnt_reg[4]_i_1__2_n_7 ;
  wire \converge_cnt_reg[8]_i_1__2_n_0 ;
  wire \converge_cnt_reg[8]_i_1__2_n_1 ;
  wire \converge_cnt_reg[8]_i_1__2_n_2 ;
  wire \converge_cnt_reg[8]_i_1__2_n_3 ;
  wire \converge_cnt_reg[8]_i_1__2_n_4 ;
  wire \converge_cnt_reg[8]_i_1__2_n_5 ;
  wire \converge_cnt_reg[8]_i_1__2_n_6 ;
  wire \converge_cnt_reg[8]_i_1__2_n_7 ;
  wire converge_gen3_i_1__2_n_0;
  wire converge_gen3_reg_0;
  wire \cplllock_reg1_reg[3] ;
  wire \cplllock_reg1_reg[3]_0 ;
  wire gt_rx_phy_status_q_reg;
  wire gt_rxcdrlock_3;
  wire gt_rxvalid_3;
  wire gt_rxvalid_q_i_4__2_n_0;
  wire gt_rxvalid_q_reg;
  wire gtreset_reg;
  wire \gtx_channel.gtxe2_channel_i_i_65_n_0 ;
  wire [1:0]oobclk_cnt;
  wire \oobclk_div.oobclk_i_1__2_n_0 ;
  wire out;
  wire [0:0]out1;
  wire [3:0]p_0_in__0;
  wire [3:0]p_0_in__0__0;
  wire [1:0]p_1_in__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire pclk_sel_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire pclk_sel_reg2;
  wire phy_rdy_n_int_reg;
  wire pipe_rx3_valid_gt;
  wire [0:0]pipe_rxstatus;
  wire [1:0]pipe_txphaligndone;
  wire [1:0]pipe_txphinitdone;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_done_reg2;
  wire rate_gen3_3;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_gen3_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_idle_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_rxsync_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rate_rxsync_reg2;
  wire reg_clock_locked;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire resetovrd_start_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rst_idle_reg2;
  wire rst_idle_reg2_reg_0;
  wire rst_idle_reg2_reg_1;
  wire [3:0]rxcdrlock_cnt_reg__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxcdrlock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_adapt_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxeq_adapt_done_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxresetdone_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxstatus_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxstatus_reg2;
  wire [3:0]rxvalid_cnt_reg__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxvalid_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rxvalid_reg2;
  wire sel;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txcompliance_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txcompliance_reg2;
  wire txcompliance_reg2_reg_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txelecidle_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txelecidle_reg2;
  wire txelecidle_reg2_reg_0;
  wire txphaligndone_reg1_reg;
  wire txphinitdone_reg1_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire txresetdone_reg2;
  wire [3:1]\NLW_converge_cnt_reg[20]_i_1__2_CO_UNCONNECTED ;
  wire [3:2]\NLW_converge_cnt_reg[20]_i_1__2_O_UNCONNECTED ;

  assign txphinitdone_reg1_reg_0 = txelecidle_reg2;
  assign txphinitdone_reg1_reg_1 = txcompliance_reg2;
  LUT4 #(
    .INIT(16'h7FFF)) 
    \converge_cnt[0]_i_10__0 
       (.I0(converge_cnt_reg[9]),
        .I1(converge_cnt_reg[8]),
        .I2(converge_cnt_reg[11]),
        .I3(converge_cnt_reg[10]),
        .O(\converge_cnt[0]_i_10__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \converge_cnt[0]_i_1__6 
       (.I0(rate_idle_reg2),
        .I1(RST_CPLLRESET),
        .I2(rst_idle_reg2),
        .I3(rate_gen3_reg2),
        .O(\converge_cnt[0]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF5555555D)) 
    \converge_cnt[0]_i_2__2 
       (.I0(converge_cnt_reg[21]),
        .I1(\converge_cnt[0]_i_4__2_n_0 ),
        .I2(converge_cnt_reg[12]),
        .I3(converge_cnt_reg[14]),
        .I4(converge_cnt_reg[20]),
        .I5(\converge_cnt[0]_i_5__2_n_0 ),
        .O(sel));
  LUT5 #(
    .INIT(32'h00000001)) 
    \converge_cnt[0]_i_4__2 
       (.I0(converge_cnt_reg[3]),
        .I1(converge_cnt_reg[4]),
        .I2(converge_cnt_reg[5]),
        .I3(converge_cnt_reg[7]),
        .I4(converge_cnt_reg[6]),
        .O(\converge_cnt[0]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0A0B0A0F0A0B0A0B)) 
    \converge_cnt[0]_i_5__2 
       (.I0(\converge_cnt_reg[0]_0 ),
        .I1(converge_cnt_reg[13]),
        .I2(converge_cnt_reg[20]),
        .I3(converge_cnt_reg[14]),
        .I4(converge_cnt_reg[12]),
        .I5(\converge_cnt[0]_i_10__0_n_0 ),
        .O(\converge_cnt[0]_i_5__2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \converge_cnt[0]_i_9__2 
       (.I0(converge_cnt_reg[0]),
        .O(\converge_cnt[0]_i_9__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[0] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__2_n_7 ),
        .Q(converge_cnt_reg[0]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  CARRY4 \converge_cnt_reg[0]_i_3__2 
       (.CI(1'b0),
        .CO({\converge_cnt_reg[0]_i_3__2_n_0 ,\converge_cnt_reg[0]_i_3__2_n_1 ,\converge_cnt_reg[0]_i_3__2_n_2 ,\converge_cnt_reg[0]_i_3__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\converge_cnt_reg[0]_i_3__2_n_4 ,\converge_cnt_reg[0]_i_3__2_n_5 ,\converge_cnt_reg[0]_i_3__2_n_6 ,\converge_cnt_reg[0]_i_3__2_n_7 }),
        .S({converge_cnt_reg[3:1],\converge_cnt[0]_i_9__2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[10] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__2_n_5 ),
        .Q(converge_cnt_reg[10]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[11] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__2_n_4 ),
        .Q(converge_cnt_reg[11]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[12] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__2_n_7 ),
        .Q(converge_cnt_reg[12]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  CARRY4 \converge_cnt_reg[12]_i_1__2 
       (.CI(\converge_cnt_reg[8]_i_1__2_n_0 ),
        .CO({\converge_cnt_reg[12]_i_1__2_n_0 ,\converge_cnt_reg[12]_i_1__2_n_1 ,\converge_cnt_reg[12]_i_1__2_n_2 ,\converge_cnt_reg[12]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[12]_i_1__2_n_4 ,\converge_cnt_reg[12]_i_1__2_n_5 ,\converge_cnt_reg[12]_i_1__2_n_6 ,\converge_cnt_reg[12]_i_1__2_n_7 }),
        .S(converge_cnt_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[13] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__2_n_6 ),
        .Q(converge_cnt_reg[13]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[14] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__2_n_5 ),
        .Q(converge_cnt_reg[14]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[15] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[12]_i_1__2_n_4 ),
        .Q(converge_cnt_reg[15]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[16] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__2_n_7 ),
        .Q(converge_cnt_reg[16]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  CARRY4 \converge_cnt_reg[16]_i_1__2 
       (.CI(\converge_cnt_reg[12]_i_1__2_n_0 ),
        .CO({\converge_cnt_reg[16]_i_1__2_n_0 ,\converge_cnt_reg[16]_i_1__2_n_1 ,\converge_cnt_reg[16]_i_1__2_n_2 ,\converge_cnt_reg[16]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[16]_i_1__2_n_4 ,\converge_cnt_reg[16]_i_1__2_n_5 ,\converge_cnt_reg[16]_i_1__2_n_6 ,\converge_cnt_reg[16]_i_1__2_n_7 }),
        .S(converge_cnt_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[17] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__2_n_6 ),
        .Q(converge_cnt_reg[17]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[18] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__2_n_5 ),
        .Q(converge_cnt_reg[18]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[19] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[16]_i_1__2_n_4 ),
        .Q(converge_cnt_reg[19]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[1] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__2_n_6 ),
        .Q(converge_cnt_reg[1]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[20] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[20]_i_1__2_n_7 ),
        .Q(converge_cnt_reg[20]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  CARRY4 \converge_cnt_reg[20]_i_1__2 
       (.CI(\converge_cnt_reg[16]_i_1__2_n_0 ),
        .CO({\NLW_converge_cnt_reg[20]_i_1__2_CO_UNCONNECTED [3:1],\converge_cnt_reg[20]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_converge_cnt_reg[20]_i_1__2_O_UNCONNECTED [3:2],\converge_cnt_reg[20]_i_1__2_n_6 ,\converge_cnt_reg[20]_i_1__2_n_7 }),
        .S({1'b0,1'b0,converge_cnt_reg[21:20]}));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[21] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[20]_i_1__2_n_6 ),
        .Q(converge_cnt_reg[21]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[2] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__2_n_5 ),
        .Q(converge_cnt_reg[2]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[3] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[0]_i_3__2_n_4 ),
        .Q(converge_cnt_reg[3]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[4] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__2_n_7 ),
        .Q(converge_cnt_reg[4]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  CARRY4 \converge_cnt_reg[4]_i_1__2 
       (.CI(\converge_cnt_reg[0]_i_3__2_n_0 ),
        .CO({\converge_cnt_reg[4]_i_1__2_n_0 ,\converge_cnt_reg[4]_i_1__2_n_1 ,\converge_cnt_reg[4]_i_1__2_n_2 ,\converge_cnt_reg[4]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[4]_i_1__2_n_4 ,\converge_cnt_reg[4]_i_1__2_n_5 ,\converge_cnt_reg[4]_i_1__2_n_6 ,\converge_cnt_reg[4]_i_1__2_n_7 }),
        .S(converge_cnt_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[5] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__2_n_6 ),
        .Q(converge_cnt_reg[5]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[6] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__2_n_5 ),
        .Q(converge_cnt_reg[6]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[7] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[4]_i_1__2_n_4 ),
        .Q(converge_cnt_reg[7]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[8] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__2_n_7 ),
        .Q(converge_cnt_reg[8]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  CARRY4 \converge_cnt_reg[8]_i_1__2 
       (.CI(\converge_cnt_reg[4]_i_1__2_n_0 ),
        .CO({\converge_cnt_reg[8]_i_1__2_n_0 ,\converge_cnt_reg[8]_i_1__2_n_1 ,\converge_cnt_reg[8]_i_1__2_n_2 ,\converge_cnt_reg[8]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\converge_cnt_reg[8]_i_1__2_n_4 ,\converge_cnt_reg[8]_i_1__2_n_5 ,\converge_cnt_reg[8]_i_1__2_n_6 ,\converge_cnt_reg[8]_i_1__2_n_7 }),
        .S(converge_cnt_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[9] 
       (.C(CLK),
        .CE(sel),
        .D(\converge_cnt_reg[8]_i_1__2_n_6 ),
        .Q(converge_cnt_reg[9]),
        .R(\converge_cnt[0]_i_1__6_n_0 ));
  LUT3 #(
    .INIT(8'hC8)) 
    converge_gen3_i_1__2
       (.I0(rxeq_adapt_done_reg2),
        .I1(rate_gen3_reg2),
        .I2(converge_gen3_reg_0),
        .O(converge_gen3_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    converge_gen3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(converge_gen3_i_1__2_n_0),
        .Q(converge_gen3_reg_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hFFFFA8FF)) 
    gt_rx_phy_status_q_i_1__2
       (.I0(RST_PHYSTATUS),
        .I1(rate_idle_reg2),
        .I2(rate_rxsync_reg2),
        .I3(rst_idle_reg2),
        .I4(rate_done_reg2),
        .O(gt_rx_phy_status_q_reg));
  LUT6 #(
    .INIT(64'hD000000000000000)) 
    gt_rxvalid_q_i_3__2
       (.I0(gtreset_reg),
        .I1(pipe_rx3_valid_gt),
        .I2(gt_rxvalid_q_i_4__2_n_0),
        .I3(rst_idle_reg2),
        .I4(gt_rxvalid_3),
        .I5(rate_idle_reg2),
        .O(gt_rxvalid_q_reg));
  LUT4 #(
    .INIT(16'h8000)) 
    gt_rxvalid_q_i_4__2
       (.I0(rxvalid_cnt_reg__0[0]),
        .I1(rxvalid_cnt_reg__0[1]),
        .I2(rxvalid_cnt_reg__0[2]),
        .I3(rxvalid_cnt_reg__0[3]),
        .O(gt_rxvalid_q_i_4__2_n_0));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \gtx_channel.gtxe2_channel_i_i_61 
       (.I0(converge_cnt_reg[15]),
        .I1(converge_cnt_reg[18]),
        .I2(converge_cnt_reg[19]),
        .I3(converge_cnt_reg[17]),
        .I4(converge_cnt_reg[16]),
        .O(\converge_cnt_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \gtx_channel.gtxe2_channel_i_i_62 
       (.I0(converge_cnt_reg[6]),
        .I1(converge_cnt_reg[7]),
        .I2(converge_cnt_reg[4]),
        .I3(converge_cnt_reg[5]),
        .I4(converge_cnt_reg[21]),
        .I5(converge_cnt_reg[13]),
        .O(\cplllock_reg1_reg[3]_0 ));
  LUT6 #(
    .INIT(64'h0000000000020000)) 
    \gtx_channel.gtxe2_channel_i_i_63 
       (.I0(\gtx_channel.gtxe2_channel_i_i_65_n_0 ),
        .I1(converge_cnt_reg[1]),
        .I2(converge_cnt_reg[0]),
        .I3(converge_cnt_reg[2]),
        .I4(converge_cnt_reg[3]),
        .I5(\converge_cnt[0]_i_10__0_n_0 ),
        .O(\cplllock_reg1_reg[3] ));
  LUT3 #(
    .INIT(8'h01)) 
    \gtx_channel.gtxe2_channel_i_i_65 
       (.I0(converge_cnt_reg[20]),
        .I1(converge_cnt_reg[14]),
        .I2(converge_cnt_reg[12]),
        .O(\gtx_channel.gtxe2_channel_i_i_65_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \oobclk_div.oobclk_cnt[0]_i_1__2 
       (.I0(oobclk_cnt[0]),
        .O(p_1_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \oobclk_div.oobclk_cnt[1]_i_1__2 
       (.I0(oobclk_cnt[0]),
        .I1(oobclk_cnt[1]),
        .O(p_1_in__0[1]));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_1_in__0[0]),
        .Q(oobclk_cnt[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_1_in__0[1]),
        .Q(oobclk_cnt[1]),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'hB8)) 
    \oobclk_div.oobclk_i_1__2 
       (.I0(oobclk_cnt[1]),
        .I1(pclk_sel_reg2),
        .I2(oobclk_cnt[0]),
        .O(\oobclk_div.oobclk_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \oobclk_div.oobclk_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(\oobclk_div.oobclk_i_1__2_n_0 ),
        .Q(USER_OOBCLK),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE pclk_sel_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(D),
        .Q(pclk_sel_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE pclk_sel_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pclk_sel_reg1),
        .Q(pclk_sel_reg2),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h00000002)) 
    phy_rdy_n_int_i_1
       (.I0(reg_clock_locked),
        .I1(rst_idle_reg2),
        .I2(out),
        .I3(rst_idle_reg2_reg_0),
        .I4(rst_idle_reg2_reg_1),
        .O(phy_rdy_n_int_reg));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_DONE),
        .Q(rate_done_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_done_reg1),
        .Q(rate_done_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_gen3_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_gen3_3),
        .Q(rate_gen3_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_gen3_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_gen3_reg1),
        .Q(rate_gen3_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_IDLE),
        .Q(rate_idle_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_idle_reg1),
        .Q(rate_idle_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_rxsync_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RATE_RXSYNC),
        .Q(rate_rxsync_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rate_rxsync_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rate_rxsync_reg1),
        .Q(rate_rxsync_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT2 #(
    .INIT(4'h8)) 
    \resetdone_reg1[3]_i_1 
       (.I0(txresetdone_reg2),
        .I1(rxresetdone_reg2),
        .O(RST_RESETDONE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_start_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RESETOVRD_START),
        .Q(resetovrd_start_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE resetovrd_start_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(resetovrd_start_reg1),
        .Q(resetovrd_start_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(out1),
        .Q(rst_idle_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rst_idle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rst_idle_reg1),
        .Q(rst_idle_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT5 #(
    .INIT(32'hD0505050)) 
    \rxcdrlock_cnt[0]_i_1__2 
       (.I0(rxcdrlock_cnt_reg__0[0]),
        .I1(rxcdrlock_cnt_reg__0[2]),
        .I2(rxcdrlock_reg2),
        .I3(rxcdrlock_cnt_reg__0[1]),
        .I4(rxcdrlock_cnt_reg__0[3]),
        .O(p_0_in__0[0]));
  LUT5 #(
    .INIT(32'h8FF00000)) 
    \rxcdrlock_cnt[1]_i_1__2 
       (.I0(rxcdrlock_cnt_reg__0[3]),
        .I1(rxcdrlock_cnt_reg__0[2]),
        .I2(rxcdrlock_cnt_reg__0[0]),
        .I3(rxcdrlock_cnt_reg__0[1]),
        .I4(rxcdrlock_reg2),
        .O(p_0_in__0[1]));
  LUT5 #(
    .INIT(32'hF8780000)) 
    \rxcdrlock_cnt[2]_i_1__2 
       (.I0(rxcdrlock_cnt_reg__0[0]),
        .I1(rxcdrlock_cnt_reg__0[1]),
        .I2(rxcdrlock_cnt_reg__0[2]),
        .I3(rxcdrlock_cnt_reg__0[3]),
        .I4(rxcdrlock_reg2),
        .O(p_0_in__0[2]));
  LUT5 #(
    .INIT(32'hFF008000)) 
    \rxcdrlock_cnt[3]_i_1__2 
       (.I0(rxcdrlock_cnt_reg__0[0]),
        .I1(rxcdrlock_cnt_reg__0[1]),
        .I2(rxcdrlock_cnt_reg__0[2]),
        .I3(rxcdrlock_reg2),
        .I4(rxcdrlock_cnt_reg__0[3]),
        .O(p_0_in__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(rxcdrlock_cnt_reg__0[0]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(rxcdrlock_cnt_reg__0[1]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(rxcdrlock_cnt_reg__0[2]),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxcdrlock_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(rxcdrlock_cnt_reg__0[3]),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'h80000000)) 
    \rxcdrlock_reg1[3]_i_1 
       (.I0(rxcdrlock_cnt_reg__0[2]),
        .I1(rxcdrlock_cnt_reg__0[3]),
        .I2(gt_rxcdrlock_3),
        .I3(rxcdrlock_cnt_reg__0[1]),
        .I4(rxcdrlock_cnt_reg__0[0]),
        .O(RST_RXCDRLOCK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxcdrlock_3),
        .Q(rxcdrlock_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxcdrlock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxcdrlock_reg1),
        .Q(rxcdrlock_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_adapt_done_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXEQ_ADAPT_DONE),
        .Q(rxeq_adapt_done_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxeq_adapt_done_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_adapt_done_reg1),
        .Q(rxeq_adapt_done_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_RXRESETDONE),
        .Q(rxresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxresetdone_reg1),
        .Q(rxresetdone_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxstatus_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(pipe_rxstatus),
        .Q(rxstatus_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxstatus_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxstatus_reg1),
        .Q(rxstatus_reg2),
        .R(RST_RXUSRCLK_RESET));
  LUT6 #(
    .INIT(64'hC404040404040404)) 
    \rxvalid_cnt[0]_i_1__2 
       (.I0(rxstatus_reg2),
        .I1(rxvalid_reg2),
        .I2(rxvalid_cnt_reg__0[0]),
        .I3(rxvalid_cnt_reg__0[1]),
        .I4(rxvalid_cnt_reg__0[2]),
        .I5(rxvalid_cnt_reg__0[3]),
        .O(p_0_in__0__0[0]));
  LUT6 #(
    .INIT(64'h808000F000F00000)) 
    \rxvalid_cnt[1]_i_1__2 
       (.I0(rxvalid_cnt_reg__0[3]),
        .I1(rxvalid_cnt_reg__0[2]),
        .I2(rxvalid_reg2),
        .I3(rxstatus_reg2),
        .I4(rxvalid_cnt_reg__0[1]),
        .I5(rxvalid_cnt_reg__0[0]),
        .O(p_0_in__0__0[1]));
  LUT6 #(
    .INIT(64'h80BF000000C00000)) 
    \rxvalid_cnt[2]_i_1__2 
       (.I0(rxvalid_cnt_reg__0[3]),
        .I1(rxvalid_cnt_reg__0[0]),
        .I2(rxvalid_cnt_reg__0[1]),
        .I3(rxstatus_reg2),
        .I4(rxvalid_reg2),
        .I5(rxvalid_cnt_reg__0[2]),
        .O(p_0_in__0__0[2]));
  LUT6 #(
    .INIT(64'h8C08080808080808)) 
    \rxvalid_cnt[3]_i_1__2 
       (.I0(rxvalid_cnt_reg__0[3]),
        .I1(rxvalid_reg2),
        .I2(rxstatus_reg2),
        .I3(rxvalid_cnt_reg__0[2]),
        .I4(rxvalid_cnt_reg__0[1]),
        .I5(rxvalid_cnt_reg__0[0]),
        .O(p_0_in__0__0[3]));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[0]),
        .Q(rxvalid_cnt_reg__0[0]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[1]),
        .Q(rxvalid_cnt_reg__0[1]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[2]),
        .Q(rxvalid_cnt_reg__0[2]),
        .R(RST_RXUSRCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \rxvalid_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_0_in__0__0[3]),
        .Q(rxvalid_cnt_reg__0[3]),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxvalid_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(gt_rxvalid_3),
        .Q(rxvalid_reg1),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rxvalid_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxvalid_reg1),
        .Q(rxvalid_reg2),
        .R(RST_RXUSRCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txcompliance_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_TXCOMPLIANCE),
        .Q(txcompliance_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txcompliance_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txcompliance_reg1),
        .Q(txcompliance_reg2),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txelecidle_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(PIPE_TXELECIDLE),
        .Q(txelecidle_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txelecidle_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txelecidle_reg1),
        .Q(txelecidle_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0707070707FFFFFF)) 
    txphaligndone_reg1_i_3
       (.I0(txelecidle_reg2),
        .I1(txcompliance_reg2),
        .I2(pipe_txphaligndone[1]),
        .I3(txelecidle_reg2_reg_0),
        .I4(txcompliance_reg2_reg_0),
        .I5(pipe_txphaligndone[0]),
        .O(txphaligndone_reg1_reg));
  LUT6 #(
    .INIT(64'h0707070707FFFFFF)) 
    txphinitdone_reg1_i_2
       (.I0(txelecidle_reg2),
        .I1(txcompliance_reg2),
        .I2(pipe_txphinitdone[1]),
        .I3(txelecidle_reg2_reg_0),
        .I4(txcompliance_reg2_reg_0),
        .I5(pipe_txphinitdone[0]),
        .O(txphinitdone_reg1_reg));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(USER_TXRESETDONE),
        .Q(txresetdone_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE txresetdone_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(txresetdone_reg1),
        .Q(txresetdone_reg2),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_pipe_wrapper" *) 
module pcie_7x_0_pcie_7x_0_pipe_wrapper
   (cpllpd,
    cpllpd_0,
    cpllpd_1,
    cpllpd_2,
    pipe_txoutclk_out,
    INT_RXUSRCLK_OUT,
    pclk_sel,
    CLK,
    INT_USERCLK1_OUT,
    INT_CLK_100MHZ,
    RATE_MMCM_LOCK,
    out,
    qpllreset_reg,
    \FSM_sequential_fsm_reg[1] ,
    \FSM_sequential_fsm_reg[1]_0 ,
    RST_CPLLLOCK,
    ext_ch_gt_drprdy,
    pipe_eyescandataerror,
    pci_exp_txn,
    pci_exp_txp,
    PIPE_RXCHANISALIGNED,
    pipe_rxcommadet,
    pipe_rxdlysresetdone,
    SYNC_RXELECIDLE,
    pipe_rxoutclk_out,
    SYNC_RXPHALIGNDONE_M,
    pipe_rxprbserr,
    pipe_txdlysresetdone,
    pipe_txphaligndone,
    pipe_txphinitdone,
    ext_ch_gt_drpdo,
    pipe_rxbufstatus,
    pipe_rxstatus,
    PIPE_RXDATA,
    pipe_dmonitorout,
    PIPE_RXDATAK,
    pipe_rxdisperr,
    pipe_rxnotintable,
    QPLL_QPLLOUTCLK,
    QPLL_QPLLOUTREFCLK,
    out0,
    rxelecidle_reg1_reg,
    PIPE_RXPHALIGNDONE,
    \gt_rxdata_q_reg[15] ,
    \gt_rxcharisk_q_reg[1] ,
    \txsync_fsm.txsync_done_reg ,
    rxelecidle_reg1_reg_0,
    \gt_rxdata_q_reg[15]_0 ,
    \gt_rxcharisk_q_reg[1]_0 ,
    \txsync_fsm.txsync_done_reg_0 ,
    rxelecidle_reg1_reg_1,
    \gt_rxdata_q_reg[15]_1 ,
    \gt_rxcharisk_q_reg[1]_1 ,
    \txsync_fsm.txsync_done_reg_1 ,
    rate_gen3_reg1_reg,
    qpllpd_reg,
    qpllreset_reg_0,
    QPLL_QPLLLOCK,
    pipe_rate_idle,
    QPLL_QPLLRESET,
    QPLL_QPLLPD,
    RATE_FSM,
    DRP_FSM,
    \fsm_reg[4] ,
    \index_reg[2] ,
    \fsm_reg[4]_0 ,
    \index_reg[2]_0 ,
    \fsm_reg[4]_1 ,
    \index_reg[2]_1 ,
    phy_rdy_n_int_reg,
    \pl_ltssm_state_q_reg[0] ,
    gt_rxvalid_q_reg,
    gt_rxvalid_q_reg_0,
    gt_rxvalid_q_reg_1,
    gt_rxvalid_q_reg_2,
    D,
    gt_ch_drp_rdy,
    \FSM_sequential_fsm_reg[2] ,
    pipe_qrst_fsm,
    pipe_qrst_idle,
    cpllreset_reg,
    gt_rx_phy_status_q_reg,
    gt_rx_phy_status_q_reg_0,
    gt_rx_phy_status_q_reg_1,
    gt_rx_phy_status_q_reg_2,
    pipe_rst_fsm,
    rate_cpllpd_0,
    pipe_sync_fsm_rx,
    rate_cpllpd_1,
    rate_cpllpd_2,
    rate_cpllpd_3,
    S00,
    SR,
    sys_clk,
    CPLLPD0,
    pci_exp_rxn,
    pci_exp_rxp,
    PIPE_RXPOLARITY,
    pipe_rxprbscntreset,
    pipe_tx_deemph_gt,
    pipe_tx_rcvr_det_gt,
    PIPE_TXELECIDLE,
    pipe_txinhibit,
    pipe_txprbsforceerr,
    PIPE_POWERDOWN,
    pipe_loopback,
    pipe_rxprbssel,
    \pipe_stages_1.pipe_tx_margin_q_reg[2] ,
    pipe_txprbssel,
    PIPE_TXDATA,
    PIPE_TXCOMPLIANCE,
    PIPE_TXDATAK,
    CPLLPD0_3,
    CPLLPD0_4,
    CPLLPD0_5,
    sys_rst_n,
    \pclk_sel_reg2_reg[3] ,
    \FSM_sequential_fsm_reg[2]_0 ,
    \FSM_sequential_fsm_reg[0] ,
    ext_ch_gt_drpaddr,
    reg_clock_locked,
    pipe_rx0_valid_gt,
    pipe_rx1_valid_gt,
    pipe_rx2_valid_gt,
    pipe_rx3_valid_gt,
    int_pclk_sel_slave,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    ext_ch_gt_drpdi,
    ext_ch_gt_drpen,
    ext_ch_gt_drpwe,
    fsm2);
  output cpllpd;
  output cpllpd_0;
  output cpllpd_1;
  output cpllpd_2;
  output pipe_txoutclk_out;
  output INT_RXUSRCLK_OUT;
  output pclk_sel;
  output CLK;
  output INT_USERCLK1_OUT;
  output INT_CLK_100MHZ;
  output RATE_MMCM_LOCK;
  output [3:0]out;
  output [1:0]qpllreset_reg;
  output [3:0]\FSM_sequential_fsm_reg[1] ;
  output \FSM_sequential_fsm_reg[1]_0 ;
  output [3:0]RST_CPLLLOCK;
  output [3:0]ext_ch_gt_drprdy;
  output [3:0]pipe_eyescandataerror;
  output [3:0]pci_exp_txn;
  output [3:0]pci_exp_txp;
  output [3:0]PIPE_RXCHANISALIGNED;
  output [3:0]pipe_rxcommadet;
  output [3:0]pipe_rxdlysresetdone;
  output SYNC_RXELECIDLE;
  output [3:0]pipe_rxoutclk_out;
  output SYNC_RXPHALIGNDONE_M;
  output [3:0]pipe_rxprbserr;
  output [3:0]pipe_txdlysresetdone;
  output [3:0]pipe_txphaligndone;
  output [3:0]pipe_txphinitdone;
  output [63:0]ext_ch_gt_drpdo;
  output [11:0]pipe_rxbufstatus;
  output [11:0]pipe_rxstatus;
  output [15:0]PIPE_RXDATA;
  output [31:0]pipe_dmonitorout;
  output [1:0]PIPE_RXDATAK;
  output [31:0]pipe_rxdisperr;
  output [31:0]pipe_rxnotintable;
  output QPLL_QPLLOUTCLK;
  output QPLL_QPLLOUTREFCLK;
  output [5:0]out0;
  output rxelecidle_reg1_reg;
  output [2:0]PIPE_RXPHALIGNDONE;
  output [15:0]\gt_rxdata_q_reg[15] ;
  output [1:0]\gt_rxcharisk_q_reg[1] ;
  output [5:0]\txsync_fsm.txsync_done_reg ;
  output rxelecidle_reg1_reg_0;
  output [15:0]\gt_rxdata_q_reg[15]_0 ;
  output [1:0]\gt_rxcharisk_q_reg[1]_0 ;
  output [5:0]\txsync_fsm.txsync_done_reg_0 ;
  output rxelecidle_reg1_reg_1;
  output [15:0]\gt_rxdata_q_reg[15]_1 ;
  output [1:0]\gt_rxcharisk_q_reg[1]_1 ;
  output [5:0]\txsync_fsm.txsync_done_reg_1 ;
  output rate_gen3_reg1_reg;
  output qpllpd_reg;
  output qpllreset_reg_0;
  output QPLL_QPLLLOCK;
  output pipe_rate_idle;
  output QPLL_QPLLRESET;
  output QPLL_QPLLPD;
  output [4:0]RATE_FSM;
  output [2:0]DRP_FSM;
  output [4:0]\fsm_reg[4] ;
  output [2:0]\index_reg[2] ;
  output [4:0]\fsm_reg[4]_0 ;
  output [2:0]\index_reg[2]_0 ;
  output [4:0]\fsm_reg[4]_1 ;
  output [2:0]\index_reg[2]_1 ;
  output phy_rdy_n_int_reg;
  output \pl_ltssm_state_q_reg[0] ;
  output gt_rxvalid_q_reg;
  output gt_rxvalid_q_reg_0;
  output gt_rxvalid_q_reg_1;
  output gt_rxvalid_q_reg_2;
  output [3:0]D;
  output [3:0]gt_ch_drp_rdy;
  output [2:0]\FSM_sequential_fsm_reg[2] ;
  output [2:0]pipe_qrst_fsm;
  output pipe_qrst_idle;
  output [1:0]cpllreset_reg;
  output gt_rx_phy_status_q_reg;
  output gt_rx_phy_status_q_reg_0;
  output gt_rx_phy_status_q_reg_1;
  output gt_rx_phy_status_q_reg_2;
  output [3:0]pipe_rst_fsm;
  output rate_cpllpd_0;
  output [3:0]pipe_sync_fsm_rx;
  output rate_cpllpd_1;
  output rate_cpllpd_2;
  output rate_cpllpd_3;
  input S00;
  input [0:0]SR;
  input sys_clk;
  input CPLLPD0;
  input [3:0]pci_exp_rxn;
  input [3:0]pci_exp_rxp;
  input [3:0]PIPE_RXPOLARITY;
  input pipe_rxprbscntreset;
  input pipe_tx_deemph_gt;
  input pipe_tx_rcvr_det_gt;
  input [3:0]PIPE_TXELECIDLE;
  input [3:0]pipe_txinhibit;
  input pipe_txprbsforceerr;
  input [7:0]PIPE_POWERDOWN;
  input [2:0]pipe_loopback;
  input [2:0]pipe_rxprbssel;
  input [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  input [2:0]pipe_txprbssel;
  input [63:0]PIPE_TXDATA;
  input [3:0]PIPE_TXCOMPLIANCE;
  input [7:0]PIPE_TXDATAK;
  input CPLLPD0_3;
  input CPLLPD0_4;
  input CPLLPD0_5;
  input sys_rst_n;
  input \pclk_sel_reg2_reg[3] ;
  input \FSM_sequential_fsm_reg[2]_0 ;
  input \FSM_sequential_fsm_reg[0] ;
  input [35:0]ext_ch_gt_drpaddr;
  input reg_clock_locked;
  input pipe_rx0_valid_gt;
  input pipe_rx1_valid_gt;
  input pipe_rx2_valid_gt;
  input pipe_rx3_valid_gt;
  input [3:0]int_pclk_sel_slave;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input [63:0]ext_ch_gt_drpdi;
  input [3:0]ext_ch_gt_drpen;
  input [3:0]ext_ch_gt_drpwe;
  input fsm2;

  wire CLK;
  wire CPLLPD0;
  wire CPLLPD0_3;
  wire CPLLPD0_4;
  wire CPLLPD0_5;
  wire [3:0]D;
  wire [2:0]DRP_FSM;
  wire DRP_START0;
  wire DRP_START00_out;
  wire DRP_START014_out;
  wire DRP_START05_out;
  wire DRP_X160;
  wire DRP_X16015_out;
  wire DRP_X1601_out;
  wire DRP_X1606_out;
  wire DRP_X16X20_MODE0;
  wire DRP_X16X20_MODE016_out;
  wire DRP_X16X20_MODE017_out;
  wire DRP_X16X20_MODE07_out;
  wire \FSM_sequential_fsm_reg[0] ;
  wire [3:0]\FSM_sequential_fsm_reg[1] ;
  wire \FSM_sequential_fsm_reg[1]_0 ;
  wire [2:0]\FSM_sequential_fsm_reg[2] ;
  wire \FSM_sequential_fsm_reg[2]_0 ;
  wire INT_CLK_100MHZ;
  wire INT_RXUSRCLK_OUT;
  wire INT_USERCLK1_OUT;
  wire [7:0]PIPE_POWERDOWN;
  wire [3:0]PIPE_RXCHANISALIGNED;
  wire [15:0]PIPE_RXDATA;
  wire [1:0]PIPE_RXDATAK;
  wire [2:0]PIPE_RXPHALIGNDONE;
  wire [3:0]PIPE_RXPOLARITY;
  wire [3:0]PIPE_TXCOMPLIANCE;
  wire [63:0]PIPE_TXDATA;
  wire [7:0]PIPE_TXDATAK;
  wire [3:0]PIPE_TXELECIDLE;
  wire QPLL_QPLLLOCK;
  wire QPLL_QPLLOUTCLK;
  wire QPLL_QPLLOUTREFCLK;
  wire QPLL_QPLLPD;
  wire QPLL_QPLLRESET;
  wire [4:0]RATE_FSM;
  wire RATE_MMCM_LOCK;
  wire [3:0]RST_CPLLLOCK;
  wire S00;
  wire [0:0]SR;
  wire SYNC_RXELECIDLE;
  wire SYNC_RXPHALIGNDONE_M;
  wire SYNC_TXSYNC_START0;
  wire SYNC_TXSYNC_START012_out;
  wire SYNC_TXSYNC_START013_out;
  wire SYNC_TXSYNC_START04_out;
  wire cpllpd;
  wire cpllpd_0;
  wire cpllpd_1;
  wire cpllpd_2;
  wire [1:0]cpllreset_reg;
  wire [7:0]drp_mux_addr_0;
  wire [7:0]drp_mux_addr_18;
  wire [7:0]drp_mux_addr_27;
  wire [7:0]drp_mux_addr_9;
  wire [15:0]drp_mux_di_0;
  wire [15:0]drp_mux_di_16;
  wire [15:0]drp_mux_di_32;
  wire [15:0]drp_mux_di_48;
  wire drp_mux_en_0;
  wire drp_mux_en_1;
  wire drp_mux_en_2;
  wire drp_mux_en_3;
  wire drp_mux_we_0;
  wire drp_mux_we_1;
  wire drp_mux_we_2;
  wire drp_mux_we_3;
  wire [6:0]eq_txeq_maincursor_0;
  wire [6:0]eq_txeq_maincursor_14;
  wire [6:0]eq_txeq_maincursor_21;
  wire [6:0]eq_txeq_maincursor_7;
  wire [4:0]eq_txeq_postcursor_0;
  wire [4:0]eq_txeq_postcursor_10;
  wire [4:0]eq_txeq_postcursor_15;
  wire [4:0]eq_txeq_postcursor_5;
  wire [4:0]eq_txeq_precursor_0;
  wire [4:0]eq_txeq_precursor_10;
  wire [4:0]eq_txeq_precursor_15;
  wire [4:0]eq_txeq_precursor_5;
  wire [35:0]ext_ch_gt_drpaddr;
  wire [63:0]ext_ch_gt_drpdi;
  wire [63:0]ext_ch_gt_drpdo;
  wire [3:0]ext_ch_gt_drpen;
  wire [3:0]ext_ch_gt_drprdy;
  wire [3:0]ext_ch_gt_drpwe;
  wire fsm2;
  wire [4:0]\fsm_reg[4] ;
  wire [4:0]\fsm_reg[4]_0 ;
  wire [4:0]\fsm_reg[4]_1 ;
  wire [3:0]gt_ch_drp_rdy;
  wire gt_cpllpdrefclk;
  wire gt_phystatus_0;
  wire gt_phystatus_1;
  wire gt_phystatus_2;
  wire gt_phystatus_3;
  wire gt_rx_phy_status_q_reg;
  wire gt_rx_phy_status_q_reg_0;
  wire gt_rx_phy_status_q_reg_1;
  wire gt_rx_phy_status_q_reg_2;
  wire gt_rxcdrlock_0;
  wire gt_rxcdrlock_1;
  wire gt_rxcdrlock_2;
  wire gt_rxcdrlock_3;
  wire [1:0]\gt_rxcharisk_q_reg[1] ;
  wire [1:0]\gt_rxcharisk_q_reg[1]_0 ;
  wire [1:0]\gt_rxcharisk_q_reg[1]_1 ;
  wire [4:0]\gt_rxchbondo[1]_0 ;
  wire [15:0]\gt_rxdata_q_reg[15] ;
  wire [15:0]\gt_rxdata_q_reg[15]_0 ;
  wire [15:0]\gt_rxdata_q_reg[15]_1 ;
  wire gt_rxratedone_0;
  wire gt_rxratedone_1;
  wire gt_rxratedone_2;
  wire gt_rxratedone_3;
  wire gt_rxresetdone_0;
  wire gt_rxresetdone_1;
  wire gt_rxresetdone_2;
  wire gt_rxresetdone_3;
  wire gt_rxvalid_0;
  wire gt_rxvalid_1;
  wire gt_rxvalid_2;
  wire gt_rxvalid_3;
  wire gt_rxvalid_q_reg;
  wire gt_rxvalid_q_reg_0;
  wire gt_rxvalid_q_reg_1;
  wire gt_rxvalid_q_reg_2;
  wire gt_txratedone_0;
  wire gt_txratedone_1;
  wire gt_txratedone_2;
  wire gt_txratedone_3;
  wire gt_txresetdone_0;
  wire gt_txresetdone_1;
  wire gt_txresetdone_2;
  wire gt_txresetdone_3;
  wire \gtx_channel.gtxe2_channel_i_i_53_n_0 ;
  wire \gtx_channel.gtxe2_channel_i_i_6_n_0 ;
  wire [2:0]\index_reg[2] ;
  wire [2:0]\index_reg[2]_0 ;
  wire [2:0]\index_reg[2]_1 ;
  wire [3:0]int_pclk_sel_slave;
  wire [3:0]out;
  wire [5:0]out0;
  wire p_0_in7_in;
  wire p_0_in7_in_1;
  wire p_0_in7_in_4;
  wire p_0_in7_in_6;
  wire p_101_out;
  wire p_136_out;
  wire p_142_out;
  wire p_154_out;
  wire p_191_out;
  wire p_197_out;
  wire p_1_in;
  wire p_1_in8_in;
  wire p_1_in8_in_0;
  wire p_1_in8_in_3;
  wire p_1_in8_in_7;
  wire p_209_out;
  wire p_2_in;
  wire p_2_in_2;
  wire p_2_in_5;
  wire p_30_out;
  wire p_36_out;
  wire p_48_out;
  wire p_83_out;
  wire p_89_out;
  wire [3:0]pci_exp_rxn;
  wire [3:0]pci_exp_rxp;
  wire [3:0]pci_exp_txn;
  wire [3:0]pci_exp_txp;
  wire pclk_sel;
  wire \pclk_sel_reg2_reg[3] ;
  wire phy_rdy_n_int_reg;
  wire [31:0]pipe_dmonitorout;
  wire [3:0]pipe_eyescandataerror;
  wire \pipe_lane[0].pipe_drp.pipe_drp_i_n_3 ;
  wire \pipe_lane[0].pipe_eq.pipe_eq_i_n_0 ;
  wire \pipe_lane[0].pipe_eq.pipe_eq_i_n_18 ;
  wire \pipe_lane[0].pipe_rate.pipe_rate_i_n_5 ;
  wire \pipe_lane[0].pipe_user_i_n_10 ;
  wire \pipe_lane[0].pipe_user_i_n_11 ;
  wire \pipe_lane[0].pipe_user_i_n_14 ;
  wire \pipe_lane[0].pipe_user_i_n_2 ;
  wire \pipe_lane[0].pipe_user_i_n_9 ;
  wire \pipe_lane[1].pipe_drp.pipe_drp_i_n_3 ;
  wire \pipe_lane[1].pipe_eq.pipe_eq_i_n_0 ;
  wire \pipe_lane[1].pipe_eq.pipe_eq_i_n_18 ;
  wire \pipe_lane[1].pipe_rate.pipe_rate_i_n_5 ;
  wire \pipe_lane[1].pipe_rate.pipe_rate_i_n_7 ;
  wire \pipe_lane[2].pipe_drp.pipe_drp_i_n_3 ;
  wire \pipe_lane[2].pipe_eq.pipe_eq_i_n_0 ;
  wire \pipe_lane[2].pipe_eq.pipe_eq_i_n_18 ;
  wire \pipe_lane[2].pipe_rate.pipe_rate_i_n_5 ;
  wire \pipe_lane[3].pipe_drp.pipe_drp_i_n_3 ;
  wire \pipe_lane[3].pipe_eq.pipe_eq_i_n_0 ;
  wire \pipe_lane[3].pipe_eq.pipe_eq_i_n_18 ;
  wire \pipe_lane[3].pipe_rate.pipe_rate_i_n_5 ;
  wire \pipe_lane[3].pipe_user_i_n_10 ;
  wire \pipe_lane[3].pipe_user_i_n_11 ;
  wire \pipe_lane[3].pipe_user_i_n_13 ;
  wire \pipe_lane[3].pipe_user_i_n_2 ;
  wire \pipe_lane[3].pipe_user_i_n_5 ;
  wire \pipe_lane[3].pipe_user_i_n_9 ;
  wire [2:0]pipe_loopback;
  wire [2:0]pipe_qrst_fsm;
  wire pipe_qrst_idle;
  wire pipe_rate_idle;
  wire \pipe_reset.pipe_reset_i_n_0 ;
  wire \pipe_reset.pipe_reset_i_n_2 ;
  wire \pipe_reset.pipe_reset_i_n_20 ;
  wire \pipe_reset.pipe_reset_i_n_3 ;
  wire \pipe_reset.pipe_reset_i_n_4 ;
  wire [3:0]pipe_rst_fsm;
  wire pipe_rx0_valid_gt;
  wire pipe_rx1_valid_gt;
  wire pipe_rx2_valid_gt;
  wire pipe_rx3_valid_gt;
  wire [11:0]pipe_rxbufstatus;
  wire [3:0]pipe_rxcommadet;
  wire [31:0]pipe_rxdisperr;
  wire [3:0]pipe_rxdlysresetdone;
  wire [31:0]pipe_rxnotintable;
  wire [3:0]pipe_rxoutclk_out;
  wire pipe_rxprbscntreset;
  wire [3:0]pipe_rxprbserr;
  wire [2:0]pipe_rxprbssel;
  wire [11:0]pipe_rxstatus;
  wire [2:0]\pipe_stages_1.pipe_tx_margin_q_reg[2] ;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  wire [3:0]pipe_sync_fsm_rx;
  wire pipe_tx_deemph_gt;
  wire pipe_tx_rcvr_det_gt;
  wire [3:0]pipe_txdlysresetdone;
  wire [3:0]pipe_txinhibit;
  wire pipe_txoutclk_out;
  wire [3:0]pipe_txphaligndone;
  wire [3:0]pipe_txphinitdone;
  wire pipe_txprbsforceerr;
  wire [2:0]pipe_txprbssel;
  wire \pl_ltssm_state_q_reg[0] ;
  wire qdrp_done;
  wire qpllpd_reg;
  wire [1:0]qpllreset_reg;
  wire qpllreset_reg_0;
  wire qrst_drp_start;
  wire rate_cpllpd_0;
  wire rate_cpllpd_1;
  wire rate_cpllpd_2;
  wire rate_cpllpd_3;
  wire rate_cpllreset_0;
  wire rate_cpllreset_1;
  wire rate_cpllreset_2;
  wire rate_cpllreset_3;
  wire rate_done_0;
  wire rate_done_1;
  wire rate_done_2;
  wire rate_done_3;
  wire rate_drp_start_0;
  wire rate_drp_start_1;
  wire rate_drp_start_2;
  wire rate_drp_start_3;
  wire rate_drp_x16_0;
  wire rate_drp_x16_1;
  wire rate_drp_x16_2;
  wire rate_drp_x16_3;
  wire rate_drp_x16x20_mode_0;
  wire rate_drp_x16x20_mode_1;
  wire rate_drp_x16x20_mode_2;
  wire rate_drp_x16x20_mode_3;
  wire rate_gen3_1;
  wire rate_gen3_2;
  wire rate_gen3_3;
  wire rate_gen3_reg1_reg;
  wire [3:0]rate_idle;
  wire [3:0]rate_qpllpd;
  wire [3:0]rate_qpllreset;
  wire [0:0]rate_rate_0;
  wire [0:0]rate_rate_3;
  wire [0:0]rate_rate_6;
  wire [0:0]rate_rate_9;
  wire rate_rxsync_0;
  wire rate_rxsync_1;
  wire rate_rxsync_2;
  wire rate_rxsync_3;
  wire rate_rxsync_start_0;
  wire rate_rxsync_start_1;
  wire rate_rxsync_start_2;
  wire rate_rxsync_start_3;
  wire [0:0]rate_sysclksel_0;
  wire [0:0]rate_sysclksel_2;
  wire [0:0]rate_sysclksel_4;
  wire [0:0]rate_sysclksel_6;
  wire rate_txpmareset_0;
  wire rate_txpmareset_1;
  wire rate_txpmareset_2;
  wire rate_txpmareset_3;
  wire reg_clock_locked;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire reset_n_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire reset_n_reg2;
  wire rst_cpllreset;
  wire rst_dclk_reset;
  wire rst_gtreset;
  wire rst_txsync_start;
  wire rst_userrdy;
  wire rxchbonden_0;
  wire rxchbonden_1;
  wire rxchbonden_2;
  wire rxchbonden_3;
  wire rxdlysresetdone_3;
  wire rxelecidle_reg1_reg;
  wire rxelecidle_reg1_reg_0;
  wire rxelecidle_reg1_reg_1;
  wire rxphaligndone_s_3;
  wire sync_txdlyen_0;
  wire sys_clk;
  wire sys_rst_n;
  wire txdlysresetdone_3;
  wire [5:0]\txsync_fsm.txsync_done_reg ;
  wire [5:0]\txsync_fsm.txsync_done_reg_0 ;
  wire [5:0]\txsync_fsm.txsync_done_reg_1 ;
  wire txsyncallin;
  wire [1:0]user_active_lane;
  wire user_oobclk_0;
  wire user_oobclk_1;
  wire user_oobclk_2;
  wire user_oobclk_3;
  wire [3:0]user_resetdone;
  wire [2:1]user_rx_converge;

  LUT4 #(
    .INIT(16'h8000)) 
    PIPE_RATE_IDLE
       (.I0(rate_idle[1]),
        .I1(rate_idle[0]),
        .I2(rate_idle[2]),
        .I3(rate_idle[3]),
        .O(pipe_rate_idle));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG cpllpd_refclk_inst
       (.I(sys_clk),
        .O(gt_cpllpdrefclk));
  LUT5 #(
    .INIT(32'h4555FFFF)) 
    \gtx_channel.gtxe2_channel_i_i_53 
       (.I0(\pipe_lane[3].pipe_user_i_n_13 ),
        .I1(\pipe_lane[3].pipe_user_i_n_9 ),
        .I2(\pipe_lane[3].pipe_user_i_n_11 ),
        .I3(\pipe_lane[3].pipe_user_i_n_10 ),
        .I4(user_rx_converge[2]),
        .O(\gtx_channel.gtxe2_channel_i_i_53_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAA0080)) 
    \gtx_channel.gtxe2_channel_i_i_6 
       (.I0(user_rx_converge[1]),
        .I1(\pipe_lane[0].pipe_user_i_n_10 ),
        .I2(\pipe_lane[0].pipe_user_i_n_11 ),
        .I3(\pipe_lane[0].pipe_user_i_n_9 ),
        .I4(\pipe_lane[0].pipe_user_i_n_14 ),
        .I5(\gtx_channel.gtxe2_channel_i_i_53_n_0 ),
        .O(\gtx_channel.gtxe2_channel_i_i_6_n_0 ));
  pcie_7x_0_pcie_7x_0_pipe_clock \pipe_clock_int.pipe_clock_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(D),
        .INT_CLK_100MHZ(INT_CLK_100MHZ),
        .INT_USERCLK1_OUT(INT_USERCLK1_OUT),
        .S00(S00),
        .SR(SR),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .USER_RATE_GEN3(rate_gen3_reg1_reg),
        .dclk_rst_reg2_reg(CLK),
        .int_pclk_sel_slave(int_pclk_sel_slave),
        .out(out),
        .pclk_sel(pclk_sel),
        .\pclk_sel_reg2_reg[3]_0 (\pclk_sel_reg2_reg[3] ),
        .pipe_txoutclk_out(pipe_txoutclk_out),
        .\pl_ltssm_state_q_reg[0] (\pl_ltssm_state_q_reg[0] ));
  pcie_7x_0_pcie_7x_0_gt_wrapper \pipe_lane[0].gt_wrapper_i 
       (.CLK(CLK),
        .CPLLPD0(CPLLPD0),
        .DRPADDR({\pipe_lane[0].pipe_drp.pipe_drp_i_n_3 ,drp_mux_addr_0}),
        .DRPDI(drp_mux_di_0),
        .DRP_GTXRESET(rst_gtreset),
        .PIPE_POWERDOWN(PIPE_POWERDOWN[1:0]),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED[0]),
        .PIPE_RXDATA(PIPE_RXDATA),
        .PIPE_RXDATAK(PIPE_RXDATAK),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY[0]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[0]),
        .PIPE_TXDATA(PIPE_TXDATA[15:0]),
        .PIPE_TXDATAK(PIPE_TXDATAK[1:0]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[0]),
        .QPLL_QPLLOUTCLK(QPLL_QPLLOUTCLK),
        .QPLL_QPLLOUTREFCLK(QPLL_QPLLOUTREFCLK),
        .RATE_CPLLLOCK(RST_CPLLLOCK[0]),
        .RATE_PHYSTATUS(gt_phystatus_0),
        .RATE_RXRATEDONE(gt_rxratedone_0),
        .RATE_TXRATEDONE(gt_txratedone_0),
        .RST_CPLLRESET(rst_cpllreset),
        .RXCHBONDO(\gt_rxchbondo[1]_0 ),
        .RXRATE(rate_rate_0),
        .RXSYSCLKSEL(rate_sysclksel_0),
        .SYNC_RXELECIDLE(SYNC_RXELECIDLE),
        .SYNC_RXPHALIGNDONE_M(SYNC_RXPHALIGNDONE_M),
        .TXMAINCURSOR(eq_txeq_maincursor_0),
        .TXPOSTCURSOR(eq_txeq_postcursor_0),
        .TXPRECURSOR(eq_txeq_precursor_0),
        .USER_OOBCLK(user_oobclk_0),
        .USER_RXRESETDONE(gt_rxresetdone_0),
        .USER_TXRESETDONE(gt_txresetdone_0),
        .converge_gen3_reg(\gtx_channel.gtxe2_channel_i_i_6_n_0 ),
        .cpllpd(cpllpd),
        .drp_mux_en_0(drp_mux_en_0),
        .drp_mux_we_0(drp_mux_we_0),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo[15:0]),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy[0]),
        .gt_cpllpdrefclk(gt_cpllpdrefclk),
        .gt_rxcdrlock_0(gt_rxcdrlock_0),
        .gt_rxvalid_0(gt_rxvalid_0),
        .out0(out0[4:2]),
        .pci_exp_rxn(pci_exp_rxn[0]),
        .pci_exp_rxp(pci_exp_rxp[0]),
        .pci_exp_txn(pci_exp_txn[0]),
        .pci_exp_txp(pci_exp_txp[0]),
        .pclk_sel_reg(INT_RXUSRCLK_OUT),
        .pipe_dmonitorout(pipe_dmonitorout[7:0]),
        .pipe_eyescandataerror(pipe_eyescandataerror[0]),
        .pipe_loopback(pipe_loopback),
        .pipe_rxbufstatus(pipe_rxbufstatus[2:0]),
        .pipe_rxcommadet(pipe_rxcommadet[0]),
        .pipe_rxdisperr(pipe_rxdisperr[7:0]),
        .pipe_rxdlysresetdone(pipe_rxdlysresetdone[0]),
        .pipe_rxnotintable(pipe_rxnotintable[7:0]),
        .pipe_rxoutclk_out(pipe_rxoutclk_out[0]),
        .pipe_rxprbscntreset(pipe_rxprbscntreset),
        .pipe_rxprbserr(pipe_rxprbserr[0]),
        .pipe_rxprbssel(pipe_rxprbssel),
        .pipe_rxstatus(pipe_rxstatus[2:0]),
        .\pipe_stages_1.pipe_tx_margin_q_reg[2] (\pipe_stages_1.pipe_tx_margin_q_reg[2] ),
        .pipe_tx_deemph_gt(pipe_tx_deemph_gt),
        .pipe_tx_rcvr_det_gt(pipe_tx_rcvr_det_gt),
        .pipe_txdlysresetdone(pipe_txdlysresetdone[0]),
        .pipe_txinhibit(pipe_txinhibit[0]),
        .pipe_txoutclk_out(pipe_txoutclk_out),
        .pipe_txphaligndone(pipe_txphaligndone[0]),
        .pipe_txphinitdone(pipe_txphinitdone[0]),
        .pipe_txprbsforceerr(pipe_txprbsforceerr),
        .pipe_txprbssel(pipe_txprbssel),
        .rate_cpllreset_0(rate_cpllreset_0),
        .rate_txpmareset_0(rate_txpmareset_0),
        .rst_userrdy(rst_userrdy),
        .rxchbonden_0(rxchbonden_0),
        .sync_txdlyen_0(sync_txdlyen_0),
        .sys_clk(sys_clk));
  pcie_7x_0_pcie_7x_0_pipe_drp \pipe_lane[0].pipe_drp.pipe_drp_i 
       (.DRPADDR({\pipe_lane[0].pipe_drp.pipe_drp_i_n_3 ,drp_mux_addr_0}),
        .DRPDI(drp_mux_di_0),
        .DRP_DONE(p_209_out),
        .DRP_GTXRESET(rst_gtreset),
        .DRP_START(DRP_START0),
        .DRP_X16(DRP_X160),
        .DRP_X16X20_MODE(DRP_X16X20_MODE0),
        .Q(DRP_FSM),
        .RST_DCLK_RESET(rst_dclk_reset),
        .drp_mux_en_0(drp_mux_en_0),
        .drp_mux_we_0(drp_mux_we_0),
        .ext_ch_gt_drpaddr(ext_ch_gt_drpaddr[8:0]),
        .ext_ch_gt_drpdi(ext_ch_gt_drpdi[15:0]),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo[15:0]),
        .ext_ch_gt_drpen(ext_ch_gt_drpen[0]),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy[0]),
        .ext_ch_gt_drpwe(ext_ch_gt_drpwe[0]),
        .gt_ch_drp_rdy(gt_ch_drp_rdy[0]),
        .gtreset_reg(CLK),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ));
  pcie_7x_0_pcie_7x_0_pipe_eq \pipe_lane[0].pipe_eq.pipe_eq_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .RST_CPLLRESET(rst_cpllreset),
        .TXMAINCURSOR(eq_txeq_maincursor_0),
        .TXPOSTCURSOR(eq_txeq_postcursor_0),
        .TXPRECURSOR(eq_txeq_precursor_0),
        .USER_RATE_GEN3(rate_gen3_reg1_reg),
        .USER_RXEQ_ADAPT_DONE(\pipe_lane[0].pipe_eq.pipe_eq_i_n_18 ),
        .cpllreset_reg(\pipe_reset.pipe_reset_i_n_4 ),
        .out0(\pipe_lane[0].pipe_eq.pipe_eq_i_n_0 ));
  pcie_7x_0_pcie_7x_0_gt_common \pipe_lane[0].pipe_quad.gt_common_enabled.gt_common_int.gt_common_i 
       (.QPLL_DRP_DONE(qdrp_done),
        .QPLL_DRP_GEN3(\pipe_lane[1].pipe_rate.pipe_rate_i_n_7 ),
        .QPLL_DRP_START(qrst_drp_start),
        .QPLL_QPLLLOCK(QPLL_QPLLLOCK),
        .QPLL_QPLLOUTCLK(QPLL_QPLLOUTCLK),
        .QPLL_QPLLOUTREFCLK(QPLL_QPLLOUTREFCLK),
        .QPLL_QPLLPD(QPLL_QPLLPD),
        .QPLL_QPLLRESET(QPLL_QPLLRESET),
        .RST_DCLK_RESET(rst_dclk_reset),
        .gtreset_reg(CLK),
        .sys_clk(sys_clk));
  pcie_7x_0_pcie_7x_0_pipe_rate \pipe_lane[0].pipe_rate.pipe_rate_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(rate_qpllpd[0]),
        .Q(RATE_FSM),
        .RATE_CPLLLOCK(RST_CPLLLOCK[0]),
        .RATE_DRP_DONE(p_209_out),
        .RATE_DRP_START(rate_drp_start_0),
        .RATE_DRP_X16(rate_drp_x16_0),
        .RATE_DRP_X16X20_MODE(rate_drp_x16x20_mode_0),
        .RATE_PHYSTATUS(gt_phystatus_0),
        .RATE_QPLLLOCK(QPLL_QPLLLOCK),
        .RATE_RXRATEDONE(gt_rxratedone_0),
        .RATE_TXRATEDONE(gt_txratedone_0),
        .RATE_TXSYNC_DONE(p_191_out),
        .RST_CPLLRESET(rst_cpllreset),
        .RXRATE(rate_rate_0),
        .RXSYSCLKSEL(rate_sysclksel_0),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .SYNC_RATE_IDLE(rate_idle[0]),
        .SYNC_RXSYNC_START(rate_rxsync_start_0),
        .SYNC_TXSYNC_START(SYNC_TXSYNC_START012_out),
        .USER_PCLK_SEL(D[0]),
        .USER_RATE_DONE(rate_done_0),
        .USER_RATE_GEN3(rate_gen3_reg1_reg),
        .USER_RATE_RXSYNC(rate_rxsync_0),
        .USER_RESETOVRD_START(\pipe_lane[0].pipe_rate.pipe_rate_i_n_5 ),
        .USER_RXRESETDONE(gt_rxresetdone_0),
        .USER_TXRESETDONE(gt_txresetdone_0),
        .out(p_0_in7_in),
        .out1({cpllreset_reg[0],rst_txsync_start}),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ),
        .\qpllreset_in_reg1_reg[0] (rate_qpllreset[0]),
        .rate_cpllpd_0(rate_cpllpd_0),
        .rate_cpllreset_0(rate_cpllreset_0),
        .rate_txpmareset_0(rate_txpmareset_0),
        .rxchbonden_0(rxchbonden_0),
        .txelecidle_reg2_reg(p_1_in8_in));
  pcie_7x_0_pcie_7x_0_pipe_sync \pipe_lane[0].pipe_sync_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .RST_CPLLRESET(rst_cpllreset),
        .RST_TXSYNC_DONE(p_191_out),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .SYNC_RATE_IDLE(rate_idle[0]),
        .SYNC_RXCDRLOCK(p_197_out),
        .SYNC_RXDLYSRESETDONE(rxdlysresetdone_3),
        .SYNC_RXELECIDLE(SYNC_RXELECIDLE),
        .SYNC_RXPHALIGNDONE_M(SYNC_RXPHALIGNDONE_M),
        .SYNC_RXPHALIGNDONE_S(rxphaligndone_s_3),
        .SYNC_RXSYNC_START(rate_rxsync_start_0),
        .SYNC_TXDLYSRESETDONE(txdlysresetdone_3),
        .SYNC_TXPHALIGNDONE(txsyncallin),
        .SYNC_TXPHINITDONE(\pipe_lane[0].pipe_user_i_n_2 ),
        .SYNC_TXSYNC_START(SYNC_TXSYNC_START012_out),
        .USER_RATE_GEN3(rate_gen3_reg1_reg),
        .out(p_0_in7_in),
        .pipe_sync_fsm_rx(pipe_sync_fsm_rx[0]),
        .sync_txdlyen_0(sync_txdlyen_0),
        .txelecidle_reg2_reg(p_1_in8_in),
        .\txsync_fsm.txdlyen_reg_0 (out0),
        .user_active_lane(user_active_lane[0]));
  pcie_7x_0_pcie_7x_0_pipe_user \pipe_lane[0].pipe_user_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(D[0]),
        .\FSM_onehot_txsync_fsm.fsm_tx_reg[6] (user_active_lane[0]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[0]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[0]),
        .RST_CPLLRESET(rst_cpllreset),
        .RST_PHYSTATUS(gt_phystatus_0),
        .RST_RESETDONE(user_resetdone[0]),
        .RST_RXCDRLOCK(p_197_out),
        .RST_RXUSRCLK_RESET(p_1_in),
        .SYNC_RXELECIDLE(SYNC_RXELECIDLE),
        .SYNC_TXPHALIGNDONE(txsyncallin),
        .SYNC_TXPHINITDONE(\pipe_lane[0].pipe_user_i_n_2 ),
        .USER_OOBCLK(user_oobclk_0),
        .USER_RATE_DONE(rate_done_0),
        .USER_RATE_GEN3(rate_gen3_reg1_reg),
        .USER_RATE_IDLE(rate_idle[0]),
        .USER_RATE_RXSYNC(rate_rxsync_0),
        .USER_RESETOVRD_START(\pipe_lane[0].pipe_rate.pipe_rate_i_n_5 ),
        .USER_RXEQ_ADAPT_DONE(\pipe_lane[0].pipe_eq.pipe_eq_i_n_18 ),
        .USER_RXRESETDONE(gt_rxresetdone_0),
        .USER_TXRESETDONE(gt_txresetdone_0),
        .\converge_cnt_reg[0]_0 (\pipe_lane[0].pipe_user_i_n_9 ),
        .converge_gen3_reg_0(\pipe_lane[0].pipe_user_i_n_14 ),
        .\cplllock_reg1_reg[3] (\pipe_lane[0].pipe_user_i_n_10 ),
        .\cplllock_reg1_reg[3]_0 (\pipe_lane[0].pipe_user_i_n_11 ),
        .gt_rx_phy_status_q_reg(gt_rx_phy_status_q_reg),
        .gt_rxcdrlock_0(gt_rxcdrlock_0),
        .gt_rxvalid_0(gt_rxvalid_0),
        .gt_rxvalid_q_reg(gt_rxvalid_q_reg),
        .out(p_2_in),
        .out1(cpllreset_reg[0]),
        .pipe_rx0_valid_gt(pipe_rx0_valid_gt),
        .pipe_rxstatus(pipe_rxstatus[2]),
        .pipe_txphaligndone(pipe_txphaligndone[1:0]),
        .pipe_txphinitdone(pipe_txphinitdone[1:0]),
        .txelecidle_reg2_reg_0(\pipe_lane[3].pipe_user_i_n_2 ),
        .txelecidle_reg2_reg_1(\pipe_lane[3].pipe_user_i_n_5 ),
        .txphinitdone_reg1_reg(p_0_in7_in),
        .txphinitdone_reg1_reg_0(p_1_in8_in),
        .user_active_lane(user_active_lane[1]));
  pcie_7x_0_pcie_7x_0_gt_wrapper_21 \pipe_lane[1].gt_wrapper_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .CPLLPD0_3(CPLLPD0_3),
        .DRPADDR({\pipe_lane[1].pipe_drp.pipe_drp_i_n_3 ,drp_mux_addr_9}),
        .DRPDI(drp_mux_di_16),
        .DRP_GTXRESET(rst_gtreset),
        .PIPE_POWERDOWN(PIPE_POWERDOWN[3:2]),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED[1]),
        .PIPE_RXPHALIGNDONE(PIPE_RXPHALIGNDONE[0]),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY[1]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[1]),
        .PIPE_TXDATA(PIPE_TXDATA[31:16]),
        .PIPE_TXDATAK(PIPE_TXDATAK[3:2]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[1]),
        .QPLL_QPLLOUTCLK(QPLL_QPLLOUTCLK),
        .QPLL_QPLLOUTREFCLK(QPLL_QPLLOUTREFCLK),
        .RATE_CPLLLOCK(RST_CPLLLOCK[1]),
        .RATE_PHYSTATUS(gt_phystatus_1),
        .RATE_RXRATEDONE(gt_rxratedone_1),
        .RATE_TXRATEDONE(gt_txratedone_1),
        .RST_CPLLRESET(rst_cpllreset),
        .RXCHBONDO(\gt_rxchbondo[1]_0 ),
        .RXRATE(rate_rate_3),
        .RXSYSCLKSEL(rate_sysclksel_2),
        .TXMAINCURSOR(eq_txeq_maincursor_7),
        .TXPOSTCURSOR(eq_txeq_postcursor_5),
        .TXPRECURSOR(eq_txeq_precursor_5),
        .USER_OOBCLK(user_oobclk_1),
        .USER_RXRESETDONE(gt_rxresetdone_1),
        .USER_TXRESETDONE(gt_txresetdone_1),
        .converge_gen3_reg(\gtx_channel.gtxe2_channel_i_i_6_n_0 ),
        .cpllpd_0(cpllpd_0),
        .drp_mux_en_1(drp_mux_en_1),
        .drp_mux_we_1(drp_mux_we_1),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo[31:16]),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy[1]),
        .gt_cpllpdrefclk(gt_cpllpdrefclk),
        .gt_rxcdrlock_1(gt_rxcdrlock_1),
        .\gt_rxcharisk_q_reg[1] (\gt_rxcharisk_q_reg[1] ),
        .\gt_rxdata_q_reg[15] (\gt_rxdata_q_reg[15] ),
        .gt_rxvalid_1(gt_rxvalid_1),
        .gtreset_reg(CLK),
        .out0(\txsync_fsm.txsync_done_reg [4:2]),
        .pci_exp_rxn(pci_exp_rxn[1]),
        .pci_exp_rxp(pci_exp_rxp[1]),
        .pci_exp_txn(pci_exp_txn[1]),
        .pci_exp_txp(pci_exp_txp[1]),
        .pipe_dmonitorout(pipe_dmonitorout[15:8]),
        .pipe_eyescandataerror(pipe_eyescandataerror[1]),
        .pipe_loopback(pipe_loopback),
        .pipe_rxbufstatus(pipe_rxbufstatus[5:3]),
        .pipe_rxcommadet(pipe_rxcommadet[1]),
        .pipe_rxdisperr(pipe_rxdisperr[15:8]),
        .pipe_rxdlysresetdone(pipe_rxdlysresetdone[1]),
        .pipe_rxnotintable(pipe_rxnotintable[15:8]),
        .pipe_rxoutclk_out(pipe_rxoutclk_out[1]),
        .pipe_rxprbscntreset(pipe_rxprbscntreset),
        .pipe_rxprbserr(pipe_rxprbserr[1]),
        .pipe_rxprbssel(pipe_rxprbssel),
        .pipe_rxstatus(pipe_rxstatus[5:3]),
        .\pipe_stages_1.pipe_tx_margin_q_reg[2] (\pipe_stages_1.pipe_tx_margin_q_reg[2] ),
        .pipe_tx_deemph_gt(pipe_tx_deemph_gt),
        .pipe_tx_rcvr_det_gt(pipe_tx_rcvr_det_gt),
        .pipe_txdlysresetdone(pipe_txdlysresetdone[1]),
        .pipe_txinhibit(pipe_txinhibit[1]),
        .pipe_txphaligndone(pipe_txphaligndone[1]),
        .pipe_txphinitdone(pipe_txphinitdone[1]),
        .pipe_txprbsforceerr(pipe_txprbsforceerr),
        .pipe_txprbssel(pipe_txprbssel),
        .rate_cpllreset_1(rate_cpllreset_1),
        .rate_txpmareset_1(rate_txpmareset_1),
        .rst_userrdy(rst_userrdy),
        .rxchbonden_1(rxchbonden_1),
        .rxelecidle_reg1_reg(rxelecidle_reg1_reg),
        .sys_clk(sys_clk));
  pcie_7x_0_pcie_7x_0_pipe_drp_22 \pipe_lane[1].pipe_drp.pipe_drp_i 
       (.DRPADDR({\pipe_lane[1].pipe_drp.pipe_drp_i_n_3 ,drp_mux_addr_9}),
        .DRPDI(drp_mux_di_16),
        .DRP_DONE(p_154_out),
        .DRP_GTXRESET(rst_gtreset),
        .DRP_START(DRP_START014_out),
        .DRP_X16(DRP_X16015_out),
        .DRP_X16X20_MODE(DRP_X16X20_MODE016_out),
        .Q(\index_reg[2] ),
        .RST_DCLK_RESET(rst_dclk_reset),
        .drp_mux_en_1(drp_mux_en_1),
        .drp_mux_we_1(drp_mux_we_1),
        .ext_ch_gt_drpaddr(ext_ch_gt_drpaddr[17:9]),
        .ext_ch_gt_drpdi(ext_ch_gt_drpdi[31:16]),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo[31:16]),
        .ext_ch_gt_drpen(ext_ch_gt_drpen[1]),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy[1]),
        .ext_ch_gt_drpwe(ext_ch_gt_drpwe[1]),
        .gt_ch_drp_rdy(gt_ch_drp_rdy[1]),
        .gtreset_reg(CLK),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ));
  pcie_7x_0_pcie_7x_0_pipe_eq_23 \pipe_lane[1].pipe_eq.pipe_eq_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .RST_CPLLRESET(rst_cpllreset),
        .TXMAINCURSOR(eq_txeq_maincursor_7),
        .TXPOSTCURSOR(eq_txeq_postcursor_5),
        .TXPRECURSOR(eq_txeq_precursor_5),
        .USER_RXEQ_ADAPT_DONE(\pipe_lane[1].pipe_eq.pipe_eq_i_n_18 ),
        .cpllreset_reg(\pipe_reset.pipe_reset_i_n_0 ),
        .out0(\pipe_lane[1].pipe_eq.pipe_eq_i_n_0 ),
        .rate_gen3_1(rate_gen3_1));
  pcie_7x_0_pcie_7x_0_pipe_rate_24 \pipe_lane[1].pipe_rate.pipe_rate_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(rate_qpllpd[1]),
        .Q(\fsm_reg[4] ),
        .QPLL_DRP_GEN3(\pipe_lane[1].pipe_rate.pipe_rate_i_n_7 ),
        .RATE_CPLLLOCK(RST_CPLLLOCK[1]),
        .RATE_DRP_DONE(p_154_out),
        .RATE_DRP_START(rate_drp_start_1),
        .RATE_DRP_X16(rate_drp_x16_1),
        .RATE_DRP_X16X20_MODE(rate_drp_x16x20_mode_1),
        .RATE_PHYSTATUS(gt_phystatus_1),
        .RATE_QPLLLOCK(QPLL_QPLLLOCK),
        .RATE_RXRATEDONE(gt_rxratedone_1),
        .RATE_TXRATEDONE(gt_txratedone_1),
        .RATE_TXSYNC_DONE(p_136_out),
        .RST_CPLLRESET(rst_cpllreset),
        .RXRATE(rate_rate_3),
        .RXSYSCLKSEL(rate_sysclksel_2),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .SYNC_RATE_IDLE(rate_idle[1]),
        .SYNC_RXSYNC_START(rate_rxsync_start_1),
        .SYNC_TXSYNC_START(SYNC_TXSYNC_START013_out),
        .USER_PCLK_SEL(D[1]),
        .USER_RATE_DONE(rate_done_1),
        .USER_RATE_GEN3(rate_gen3_reg1_reg),
        .USER_RATE_RXSYNC(rate_rxsync_1),
        .USER_RESETOVRD_START(\pipe_lane[1].pipe_rate.pipe_rate_i_n_5 ),
        .USER_RXRESETDONE(gt_rxresetdone_1),
        .USER_TXRESETDONE(gt_txresetdone_1),
        .out(p_0_in7_in_1),
        .out1({cpllreset_reg[0],rst_txsync_start}),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ),
        .\qpllreset_in_reg1_reg[1] (rate_qpllreset[1]),
        .rate_cpllpd_1(rate_cpllpd_1),
        .rate_cpllreset_1(rate_cpllreset_1),
        .rate_gen3_1(rate_gen3_1),
        .rate_gen3_2(rate_gen3_2),
        .rate_gen3_3(rate_gen3_3),
        .rate_txpmareset_1(rate_txpmareset_1),
        .rxchbonden_1(rxchbonden_1),
        .txelecidle_reg2_reg(p_1_in8_in_0));
  pcie_7x_0_pcie_7x_0_pipe_sync_25 \pipe_lane[1].pipe_sync_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .RST_CPLLRESET(rst_cpllreset),
        .RST_TXSYNC_DONE(p_136_out),
        .SYNC_GEN3(rate_gen3_1),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .SYNC_RATE_IDLE(rate_idle[1]),
        .SYNC_RXCDRLOCK(p_142_out),
        .SYNC_RXDLYSRESETDONE(rxdlysresetdone_3),
        .SYNC_RXPHALIGNDONE_M(SYNC_RXPHALIGNDONE_M),
        .SYNC_RXPHALIGNDONE_S(rxphaligndone_s_3),
        .SYNC_RXSYNC_START(rate_rxsync_start_1),
        .SYNC_TXDLYSRESETDONE(txdlysresetdone_3),
        .SYNC_TXPHALIGNDONE(txsyncallin),
        .SYNC_TXPHINITDONE(\pipe_lane[0].pipe_user_i_n_2 ),
        .SYNC_TXSYNC_START(SYNC_TXSYNC_START013_out),
        .gtreset_reg(rxelecidle_reg1_reg),
        .out(\txsync_fsm.txsync_done_reg ),
        .pipe_sync_fsm_rx(pipe_sync_fsm_rx[1]),
        .txcompliance_reg2_reg(p_0_in7_in_1),
        .txelecidle_reg2_reg(p_1_in8_in_0));
  pcie_7x_0_pcie_7x_0_pipe_user_26 \pipe_lane[1].pipe_user_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(D[1]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[1]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[1]),
        .RST_CPLLRESET(rst_cpllreset),
        .RST_PHYSTATUS(gt_phystatus_1),
        .RST_RESETDONE(user_resetdone[1]),
        .RST_RXCDRLOCK(p_142_out),
        .RST_RXUSRCLK_RESET(p_1_in),
        .USER_OOBCLK(user_oobclk_1),
        .USER_RATE_DONE(rate_done_1),
        .USER_RATE_GEN3(rate_gen3_1),
        .USER_RATE_IDLE(rate_idle[1]),
        .USER_RATE_RXSYNC(rate_rxsync_1),
        .USER_RESETOVRD_START(\pipe_lane[1].pipe_rate.pipe_rate_i_n_5 ),
        .USER_RXEQ_ADAPT_DONE(\pipe_lane[1].pipe_eq.pipe_eq_i_n_18 ),
        .USER_RXRESETDONE(gt_rxresetdone_1),
        .USER_TXRESETDONE(gt_txresetdone_1),
        .gt_rx_phy_status_q_reg(gt_rx_phy_status_q_reg_0),
        .gt_rxcdrlock_1(gt_rxcdrlock_1),
        .gt_rxvalid_1(gt_rxvalid_1),
        .gt_rxvalid_q_reg(gt_rxvalid_q_reg_0),
        .gtreset_reg(rxelecidle_reg1_reg),
        .out(p_2_in_2),
        .out1(cpllreset_reg[0]),
        .pipe_rx1_valid_gt(pipe_rx1_valid_gt),
        .pipe_rxstatus(pipe_rxstatus[5]),
        .txphinitdone_reg1_reg(p_0_in7_in_1),
        .txphinitdone_reg1_reg_0(p_1_in8_in_0),
        .user_active_lane(user_active_lane[1]),
        .user_rx_converge(user_rx_converge[1]));
  pcie_7x_0_pcie_7x_0_gt_wrapper_27 \pipe_lane[2].gt_wrapper_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .CPLLPD0_4(CPLLPD0_4),
        .DRPADDR({\pipe_lane[2].pipe_drp.pipe_drp_i_n_3 ,drp_mux_addr_18}),
        .DRPDI(drp_mux_di_32),
        .DRP_GTXRESET(rst_gtreset),
        .PIPE_POWERDOWN(PIPE_POWERDOWN[5:4]),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED[2]),
        .PIPE_RXPHALIGNDONE(PIPE_RXPHALIGNDONE[1]),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY[2]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[2]),
        .PIPE_TXDATA(PIPE_TXDATA[47:32]),
        .PIPE_TXDATAK(PIPE_TXDATAK[5:4]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[2]),
        .QPLL_QPLLOUTCLK(QPLL_QPLLOUTCLK),
        .QPLL_QPLLOUTREFCLK(QPLL_QPLLOUTREFCLK),
        .RATE_CPLLLOCK(RST_CPLLLOCK[2]),
        .RATE_PHYSTATUS(gt_phystatus_2),
        .RATE_RXRATEDONE(gt_rxratedone_2),
        .RATE_TXRATEDONE(gt_txratedone_2),
        .RST_CPLLRESET(rst_cpllreset),
        .RXCHBONDO(\gt_rxchbondo[1]_0 ),
        .RXRATE(rate_rate_6),
        .RXSYSCLKSEL(rate_sysclksel_4),
        .TXMAINCURSOR(eq_txeq_maincursor_14),
        .TXPOSTCURSOR(eq_txeq_postcursor_10),
        .TXPRECURSOR(eq_txeq_precursor_10),
        .USER_OOBCLK(user_oobclk_2),
        .USER_RXRESETDONE(gt_rxresetdone_2),
        .USER_TXRESETDONE(gt_txresetdone_2),
        .converge_gen3_reg(\gtx_channel.gtxe2_channel_i_i_6_n_0 ),
        .cpllpd_1(cpllpd_1),
        .drp_mux_en_2(drp_mux_en_2),
        .drp_mux_we_2(drp_mux_we_2),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo[47:32]),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy[2]),
        .gt_cpllpdrefclk(gt_cpllpdrefclk),
        .gt_rxcdrlock_2(gt_rxcdrlock_2),
        .\gt_rxcharisk_q_reg[1] (\gt_rxcharisk_q_reg[1]_0 ),
        .\gt_rxdata_q_reg[15] (\gt_rxdata_q_reg[15]_0 ),
        .gt_rxvalid_2(gt_rxvalid_2),
        .gtreset_reg(CLK),
        .out0(\txsync_fsm.txsync_done_reg_0 [4:2]),
        .pci_exp_rxn(pci_exp_rxn[2]),
        .pci_exp_rxp(pci_exp_rxp[2]),
        .pci_exp_txn(pci_exp_txn[2]),
        .pci_exp_txp(pci_exp_txp[2]),
        .pipe_dmonitorout(pipe_dmonitorout[23:16]),
        .pipe_eyescandataerror(pipe_eyescandataerror[2]),
        .pipe_loopback(pipe_loopback),
        .pipe_rxbufstatus(pipe_rxbufstatus[8:6]),
        .pipe_rxcommadet(pipe_rxcommadet[2]),
        .pipe_rxdisperr(pipe_rxdisperr[23:16]),
        .pipe_rxdlysresetdone(pipe_rxdlysresetdone[2]),
        .pipe_rxnotintable(pipe_rxnotintable[23:16]),
        .pipe_rxoutclk_out(pipe_rxoutclk_out[2]),
        .pipe_rxprbscntreset(pipe_rxprbscntreset),
        .pipe_rxprbserr(pipe_rxprbserr[2]),
        .pipe_rxprbssel(pipe_rxprbssel),
        .pipe_rxstatus(pipe_rxstatus[8:6]),
        .\pipe_stages_1.pipe_tx_margin_q_reg[2] (\pipe_stages_1.pipe_tx_margin_q_reg[2] ),
        .pipe_tx_deemph_gt(pipe_tx_deemph_gt),
        .pipe_tx_rcvr_det_gt(pipe_tx_rcvr_det_gt),
        .pipe_txdlysresetdone(pipe_txdlysresetdone[2]),
        .pipe_txinhibit(pipe_txinhibit[2]),
        .pipe_txphaligndone(pipe_txphaligndone[2]),
        .pipe_txphinitdone(pipe_txphinitdone[2]),
        .pipe_txprbsforceerr(pipe_txprbsforceerr),
        .pipe_txprbssel(pipe_txprbssel),
        .rate_cpllreset_2(rate_cpllreset_2),
        .rate_txpmareset_2(rate_txpmareset_2),
        .rst_userrdy(rst_userrdy),
        .rxchbonden_2(rxchbonden_2),
        .rxelecidle_reg1_reg(rxelecidle_reg1_reg_0),
        .sys_clk(sys_clk));
  pcie_7x_0_pcie_7x_0_pipe_drp_28 \pipe_lane[2].pipe_drp.pipe_drp_i 
       (.DRPADDR({\pipe_lane[2].pipe_drp.pipe_drp_i_n_3 ,drp_mux_addr_18}),
        .DRPDI(drp_mux_di_32),
        .DRP_DONE(p_101_out),
        .DRP_GTXRESET(rst_gtreset),
        .DRP_START(DRP_START05_out),
        .DRP_X16(DRP_X1606_out),
        .DRP_X16X20_MODE(DRP_X16X20_MODE07_out),
        .Q(\index_reg[2]_0 ),
        .RST_DCLK_RESET(rst_dclk_reset),
        .drp_mux_en_2(drp_mux_en_2),
        .drp_mux_we_2(drp_mux_we_2),
        .ext_ch_gt_drpaddr(ext_ch_gt_drpaddr[26:18]),
        .ext_ch_gt_drpdi(ext_ch_gt_drpdi[47:32]),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo[47:32]),
        .ext_ch_gt_drpen(ext_ch_gt_drpen[2]),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy[2]),
        .ext_ch_gt_drpwe(ext_ch_gt_drpwe[2]),
        .gt_ch_drp_rdy(gt_ch_drp_rdy[2]),
        .gtreset_reg(CLK),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ));
  pcie_7x_0_pcie_7x_0_pipe_eq_29 \pipe_lane[2].pipe_eq.pipe_eq_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .RST_CPLLRESET(rst_cpllreset),
        .TXMAINCURSOR(eq_txeq_maincursor_14),
        .TXPOSTCURSOR(eq_txeq_postcursor_10),
        .TXPRECURSOR(eq_txeq_precursor_10),
        .USER_RXEQ_ADAPT_DONE(\pipe_lane[2].pipe_eq.pipe_eq_i_n_18 ),
        .cpllreset_reg(\pipe_reset.pipe_reset_i_n_3 ),
        .out0(\pipe_lane[2].pipe_eq.pipe_eq_i_n_0 ),
        .rate_gen3_2(rate_gen3_2));
  pcie_7x_0_pcie_7x_0_pipe_rate_30 \pipe_lane[2].pipe_rate.pipe_rate_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(rate_qpllpd[2]),
        .Q(\fsm_reg[4]_0 ),
        .RATE_CPLLLOCK(RST_CPLLLOCK[2]),
        .RATE_DRP_DONE(p_101_out),
        .RATE_DRP_START(rate_drp_start_2),
        .RATE_DRP_X16(rate_drp_x16_2),
        .RATE_DRP_X16X20_MODE(rate_drp_x16x20_mode_2),
        .RATE_PHYSTATUS(gt_phystatus_2),
        .RATE_QPLLLOCK(QPLL_QPLLLOCK),
        .RATE_RXRATEDONE(gt_rxratedone_2),
        .RATE_TXRATEDONE(gt_txratedone_2),
        .RATE_TXSYNC_DONE(p_83_out),
        .RST_CPLLRESET(rst_cpllreset),
        .RXRATE(rate_rate_6),
        .RXSYSCLKSEL(rate_sysclksel_4),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .SYNC_RATE_IDLE(rate_idle[2]),
        .SYNC_RXSYNC_START(rate_rxsync_start_2),
        .SYNC_TXSYNC_START(SYNC_TXSYNC_START04_out),
        .USER_PCLK_SEL(D[2]),
        .USER_RATE_DONE(rate_done_2),
        .USER_RATE_RXSYNC(rate_rxsync_2),
        .USER_RESETOVRD_START(\pipe_lane[2].pipe_rate.pipe_rate_i_n_5 ),
        .USER_RXRESETDONE(gt_rxresetdone_2),
        .USER_TXRESETDONE(gt_txresetdone_2),
        .out(p_0_in7_in_4),
        .out1({cpllreset_reg[0],rst_txsync_start}),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ),
        .\qpllreset_in_reg1_reg[2] (rate_qpllreset[2]),
        .rate_cpllpd_2(rate_cpllpd_2),
        .rate_cpllreset_2(rate_cpllreset_2),
        .rate_gen3_2(rate_gen3_2),
        .rate_txpmareset_2(rate_txpmareset_2),
        .rxchbonden_2(rxchbonden_2),
        .txelecidle_reg2_reg(p_1_in8_in_3));
  pcie_7x_0_pcie_7x_0_pipe_sync_31 \pipe_lane[2].pipe_sync_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .RST_CPLLRESET(rst_cpllreset),
        .RST_TXSYNC_DONE(p_83_out),
        .SYNC_GEN3(rate_gen3_2),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .SYNC_RATE_IDLE(rate_idle[2]),
        .SYNC_RXCDRLOCK(p_89_out),
        .SYNC_RXDLYSRESETDONE(rxdlysresetdone_3),
        .SYNC_RXPHALIGNDONE_M(SYNC_RXPHALIGNDONE_M),
        .SYNC_RXPHALIGNDONE_S(rxphaligndone_s_3),
        .SYNC_RXSYNC_START(rate_rxsync_start_2),
        .SYNC_TXDLYSRESETDONE(txdlysresetdone_3),
        .SYNC_TXPHALIGNDONE(txsyncallin),
        .SYNC_TXPHINITDONE(\pipe_lane[0].pipe_user_i_n_2 ),
        .SYNC_TXSYNC_START(SYNC_TXSYNC_START04_out),
        .gtreset_reg(rxelecidle_reg1_reg_0),
        .out(\txsync_fsm.txsync_done_reg_0 ),
        .pipe_sync_fsm_rx(pipe_sync_fsm_rx[2]),
        .txcompliance_reg2_reg(p_0_in7_in_4),
        .txelecidle_reg2_reg(p_1_in8_in_3));
  pcie_7x_0_pcie_7x_0_pipe_user_32 \pipe_lane[2].pipe_user_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(D[2]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[2]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[2]),
        .RST_CPLLRESET(rst_cpllreset),
        .RST_PHYSTATUS(gt_phystatus_2),
        .RST_RESETDONE(user_resetdone[2]),
        .RST_RXCDRLOCK(p_89_out),
        .RST_RXUSRCLK_RESET(p_1_in),
        .USER_OOBCLK(user_oobclk_2),
        .USER_RATE_DONE(rate_done_2),
        .USER_RATE_IDLE(rate_idle[2]),
        .USER_RATE_RXSYNC(rate_rxsync_2),
        .USER_RESETOVRD_START(\pipe_lane[2].pipe_rate.pipe_rate_i_n_5 ),
        .USER_RXEQ_ADAPT_DONE(\pipe_lane[2].pipe_eq.pipe_eq_i_n_18 ),
        .USER_RXRESETDONE(gt_rxresetdone_2),
        .USER_TXRESETDONE(gt_txresetdone_2),
        .gt_rx_phy_status_q_reg(gt_rx_phy_status_q_reg_1),
        .gt_rxcdrlock_2(gt_rxcdrlock_2),
        .gt_rxvalid_2(gt_rxvalid_2),
        .gt_rxvalid_q_reg(gt_rxvalid_q_reg_1),
        .gtreset_reg(rxelecidle_reg1_reg_0),
        .out(p_2_in_5),
        .out1(cpllreset_reg[0]),
        .pipe_rx2_valid_gt(pipe_rx2_valid_gt),
        .pipe_rxstatus(pipe_rxstatus[8]),
        .rate_gen3_2(rate_gen3_2),
        .txphinitdone_reg1_reg(p_0_in7_in_4),
        .txphinitdone_reg1_reg_0(p_1_in8_in_3),
        .user_rx_converge(user_rx_converge[2]));
  pcie_7x_0_pcie_7x_0_gt_wrapper_33 \pipe_lane[3].gt_wrapper_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .CPLLPD0_5(CPLLPD0_5),
        .DRPADDR({\pipe_lane[3].pipe_drp.pipe_drp_i_n_3 ,drp_mux_addr_27}),
        .DRPDI(drp_mux_di_48),
        .DRP_GTXRESET(rst_gtreset),
        .PIPE_POWERDOWN(PIPE_POWERDOWN[7:6]),
        .PIPE_RXCHANISALIGNED(PIPE_RXCHANISALIGNED[3]),
        .PIPE_RXPHALIGNDONE(PIPE_RXPHALIGNDONE[2]),
        .PIPE_RXPOLARITY(PIPE_RXPOLARITY[3]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[3]),
        .PIPE_TXDATA(PIPE_TXDATA[63:48]),
        .PIPE_TXDATAK(PIPE_TXDATAK[7:6]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[3]),
        .QPLL_QPLLOUTCLK(QPLL_QPLLOUTCLK),
        .QPLL_QPLLOUTREFCLK(QPLL_QPLLOUTREFCLK),
        .RATE_CPLLLOCK(RST_CPLLLOCK[3]),
        .RATE_PHYSTATUS(gt_phystatus_3),
        .RATE_RXRATEDONE(gt_rxratedone_3),
        .RATE_TXRATEDONE(gt_txratedone_3),
        .RST_CPLLRESET(rst_cpllreset),
        .RXCHBONDO(\gt_rxchbondo[1]_0 ),
        .RXRATE(rate_rate_9),
        .RXSYSCLKSEL(rate_sysclksel_6),
        .TXMAINCURSOR(eq_txeq_maincursor_21),
        .TXPOSTCURSOR(eq_txeq_postcursor_15),
        .TXPRECURSOR(eq_txeq_precursor_15),
        .USER_OOBCLK(user_oobclk_3),
        .USER_RXRESETDONE(gt_rxresetdone_3),
        .USER_TXRESETDONE(gt_txresetdone_3),
        .converge_gen3_reg(\gtx_channel.gtxe2_channel_i_i_6_n_0 ),
        .cpllpd_2(cpllpd_2),
        .drp_mux_en_3(drp_mux_en_3),
        .drp_mux_we_3(drp_mux_we_3),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo[63:48]),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy[3]),
        .gt_cpllpdrefclk(gt_cpllpdrefclk),
        .gt_rxcdrlock_3(gt_rxcdrlock_3),
        .\gt_rxcharisk_q_reg[1] (\gt_rxcharisk_q_reg[1]_1 ),
        .\gt_rxdata_q_reg[15] (\gt_rxdata_q_reg[15]_1 ),
        .gt_rxvalid_3(gt_rxvalid_3),
        .gtreset_reg(CLK),
        .out0(\txsync_fsm.txsync_done_reg_1 [4:2]),
        .pci_exp_rxn(pci_exp_rxn[3]),
        .pci_exp_rxp(pci_exp_rxp[3]),
        .pci_exp_txn(pci_exp_txn[3]),
        .pci_exp_txp(pci_exp_txp[3]),
        .pipe_dmonitorout(pipe_dmonitorout[31:24]),
        .pipe_eyescandataerror(pipe_eyescandataerror[3]),
        .pipe_loopback(pipe_loopback),
        .pipe_rxbufstatus(pipe_rxbufstatus[11:9]),
        .pipe_rxcommadet(pipe_rxcommadet[3]),
        .pipe_rxdisperr(pipe_rxdisperr[31:24]),
        .pipe_rxdlysresetdone(pipe_rxdlysresetdone[3]),
        .pipe_rxnotintable(pipe_rxnotintable[31:24]),
        .pipe_rxoutclk_out(pipe_rxoutclk_out[3]),
        .pipe_rxprbscntreset(pipe_rxprbscntreset),
        .pipe_rxprbserr(pipe_rxprbserr[3]),
        .pipe_rxprbssel(pipe_rxprbssel),
        .pipe_rxstatus(pipe_rxstatus[11:9]),
        .\pipe_stages_1.pipe_tx_margin_q_reg[2] (\pipe_stages_1.pipe_tx_margin_q_reg[2] ),
        .pipe_tx_deemph_gt(pipe_tx_deemph_gt),
        .pipe_tx_rcvr_det_gt(pipe_tx_rcvr_det_gt),
        .pipe_txdlysresetdone(pipe_txdlysresetdone[3]),
        .pipe_txinhibit(pipe_txinhibit[3]),
        .pipe_txphaligndone(pipe_txphaligndone[3]),
        .pipe_txphinitdone(pipe_txphinitdone[3]),
        .pipe_txprbsforceerr(pipe_txprbsforceerr),
        .pipe_txprbssel(pipe_txprbssel),
        .rate_cpllreset_3(rate_cpllreset_3),
        .rate_txpmareset_3(rate_txpmareset_3),
        .rst_userrdy(rst_userrdy),
        .rxchbonden_3(rxchbonden_3),
        .rxelecidle_reg1_reg(rxelecidle_reg1_reg_1),
        .sys_clk(sys_clk));
  pcie_7x_0_pcie_7x_0_pipe_drp_34 \pipe_lane[3].pipe_drp.pipe_drp_i 
       (.DRPADDR({\pipe_lane[3].pipe_drp.pipe_drp_i_n_3 ,drp_mux_addr_27}),
        .DRPDI(drp_mux_di_48),
        .DRP_DONE(p_48_out),
        .DRP_GTXRESET(rst_gtreset),
        .DRP_START(DRP_START00_out),
        .DRP_X16(DRP_X1601_out),
        .DRP_X16X20_MODE(DRP_X16X20_MODE017_out),
        .Q(\index_reg[2]_1 ),
        .RST_DCLK_RESET(rst_dclk_reset),
        .drp_mux_en_3(drp_mux_en_3),
        .drp_mux_we_3(drp_mux_we_3),
        .ext_ch_gt_drpaddr(ext_ch_gt_drpaddr[35:27]),
        .ext_ch_gt_drpdi(ext_ch_gt_drpdi[63:48]),
        .ext_ch_gt_drpdo(ext_ch_gt_drpdo[63:48]),
        .ext_ch_gt_drpen(ext_ch_gt_drpen[3]),
        .ext_ch_gt_drprdy(ext_ch_gt_drprdy[3]),
        .ext_ch_gt_drpwe(ext_ch_gt_drpwe[3]),
        .gt_ch_drp_rdy(gt_ch_drp_rdy[3]),
        .gtreset_reg(CLK),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ));
  pcie_7x_0_pcie_7x_0_pipe_eq_35 \pipe_lane[3].pipe_eq.pipe_eq_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .RST_CPLLRESET(rst_cpllreset),
        .TXMAINCURSOR(eq_txeq_maincursor_21),
        .TXPOSTCURSOR(eq_txeq_postcursor_15),
        .TXPRECURSOR(eq_txeq_precursor_15),
        .USER_RXEQ_ADAPT_DONE(\pipe_lane[3].pipe_eq.pipe_eq_i_n_18 ),
        .cpllreset_reg(\pipe_reset.pipe_reset_i_n_2 ),
        .out0(\pipe_lane[3].pipe_eq.pipe_eq_i_n_0 ),
        .rate_gen3_3(rate_gen3_3));
  pcie_7x_0_pcie_7x_0_pipe_rate_36 \pipe_lane[3].pipe_rate.pipe_rate_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(rate_qpllpd[3]),
        .Q(\fsm_reg[4]_1 ),
        .QPLL_QPLLLOCK(QPLL_QPLLLOCK),
        .RATE_CPLLLOCK(RST_CPLLLOCK[3]),
        .RATE_DRP_DONE(p_48_out),
        .RATE_DRP_START(rate_drp_start_3),
        .RATE_DRP_X16(rate_drp_x16_3),
        .RATE_DRP_X16X20_MODE(rate_drp_x16x20_mode_3),
        .RATE_PHYSTATUS(gt_phystatus_3),
        .RATE_RXRATEDONE(gt_rxratedone_3),
        .RATE_TXRATEDONE(gt_txratedone_3),
        .RATE_TXSYNC_DONE(p_30_out),
        .RST_CPLLRESET(rst_cpllreset),
        .RXRATE(rate_rate_9),
        .RXSYSCLKSEL(rate_sysclksel_6),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .SYNC_RATE_IDLE(rate_idle[3]),
        .SYNC_RXSYNC_START(rate_rxsync_start_3),
        .SYNC_TXSYNC_START(SYNC_TXSYNC_START0),
        .USER_PCLK_SEL(D[3]),
        .USER_RATE_DONE(rate_done_3),
        .USER_RATE_RXSYNC(rate_rxsync_3),
        .USER_RESETOVRD_START(\pipe_lane[3].pipe_rate.pipe_rate_i_n_5 ),
        .USER_RXRESETDONE(gt_rxresetdone_3),
        .USER_TXRESETDONE(gt_txresetdone_3),
        .out(p_0_in7_in_6),
        .out1({cpllreset_reg[0],rst_txsync_start}),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ),
        .\qpllreset_in_reg1_reg[3] (rate_qpllreset[3]),
        .rate_cpllpd_3(rate_cpllpd_3),
        .rate_cpllreset_3(rate_cpllreset_3),
        .rate_gen3_3(rate_gen3_3),
        .rate_txpmareset_3(rate_txpmareset_3),
        .rxchbonden_3(rxchbonden_3),
        .txelecidle_reg2_reg(p_1_in8_in_7));
  pcie_7x_0_pcie_7x_0_pipe_sync_37 \pipe_lane[3].pipe_sync_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .RST_CPLLRESET(rst_cpllreset),
        .RST_TXSYNC_DONE(p_30_out),
        .SYNC_GEN3(rate_gen3_3),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .SYNC_RATE_IDLE(rate_idle[3]),
        .SYNC_RXCDRLOCK(p_36_out),
        .SYNC_RXDLYSRESETDONE(rxdlysresetdone_3),
        .SYNC_RXPHALIGNDONE_M(SYNC_RXPHALIGNDONE_M),
        .SYNC_RXPHALIGNDONE_S(rxphaligndone_s_3),
        .SYNC_RXSYNC_START(rate_rxsync_start_3),
        .SYNC_TXDLYSRESETDONE(txdlysresetdone_3),
        .SYNC_TXPHALIGNDONE(txsyncallin),
        .SYNC_TXPHINITDONE(\pipe_lane[0].pipe_user_i_n_2 ),
        .SYNC_TXSYNC_START(SYNC_TXSYNC_START0),
        .gtreset_reg(rxelecidle_reg1_reg_1),
        .out(\txsync_fsm.txsync_done_reg_1 ),
        .pipe_sync_fsm_rx(pipe_sync_fsm_rx[3]),
        .txcompliance_reg2_reg(p_0_in7_in_6),
        .txelecidle_reg2_reg(p_1_in8_in_7));
  pcie_7x_0_pcie_7x_0_pipe_user_38 \pipe_lane[3].pipe_user_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(D[3]),
        .PIPE_TXCOMPLIANCE(PIPE_TXCOMPLIANCE[3]),
        .PIPE_TXELECIDLE(PIPE_TXELECIDLE[3]),
        .RST_CPLLRESET(rst_cpllreset),
        .RST_PHYSTATUS(gt_phystatus_3),
        .RST_RESETDONE(user_resetdone[3]),
        .RST_RXCDRLOCK(p_36_out),
        .RST_RXUSRCLK_RESET(p_1_in),
        .USER_OOBCLK(user_oobclk_3),
        .USER_RATE_DONE(rate_done_3),
        .USER_RATE_IDLE(rate_idle[3]),
        .USER_RATE_RXSYNC(rate_rxsync_3),
        .USER_RESETOVRD_START(\pipe_lane[3].pipe_rate.pipe_rate_i_n_5 ),
        .USER_RXEQ_ADAPT_DONE(\pipe_lane[3].pipe_eq.pipe_eq_i_n_18 ),
        .USER_RXRESETDONE(gt_rxresetdone_3),
        .USER_TXRESETDONE(gt_txresetdone_3),
        .\converge_cnt_reg[0]_0 (\pipe_lane[3].pipe_user_i_n_9 ),
        .converge_gen3_reg_0(\pipe_lane[3].pipe_user_i_n_13 ),
        .\cplllock_reg1_reg[3] (\pipe_lane[3].pipe_user_i_n_10 ),
        .\cplllock_reg1_reg[3]_0 (\pipe_lane[3].pipe_user_i_n_11 ),
        .gt_rx_phy_status_q_reg(gt_rx_phy_status_q_reg_2),
        .gt_rxcdrlock_3(gt_rxcdrlock_3),
        .gt_rxvalid_3(gt_rxvalid_3),
        .gt_rxvalid_q_reg(gt_rxvalid_q_reg_2),
        .gtreset_reg(rxelecidle_reg1_reg_1),
        .out(p_2_in_5),
        .out1(cpllreset_reg[0]),
        .phy_rdy_n_int_reg(phy_rdy_n_int_reg),
        .pipe_rx3_valid_gt(pipe_rx3_valid_gt),
        .pipe_rxstatus(pipe_rxstatus[11]),
        .pipe_txphaligndone(pipe_txphaligndone[3:2]),
        .pipe_txphinitdone(pipe_txphinitdone[3:2]),
        .rate_gen3_3(rate_gen3_3),
        .reg_clock_locked(reg_clock_locked),
        .rst_idle_reg2_reg_0(p_2_in),
        .rst_idle_reg2_reg_1(p_2_in_2),
        .txcompliance_reg2_reg_0(p_0_in7_in_4),
        .txelecidle_reg2_reg_0(p_1_in8_in_3),
        .txphaligndone_reg1_reg(\pipe_lane[3].pipe_user_i_n_5 ),
        .txphinitdone_reg1_reg(\pipe_lane[3].pipe_user_i_n_2 ),
        .txphinitdone_reg1_reg_0(p_1_in8_in_7),
        .txphinitdone_reg1_reg_1(p_0_in7_in_6));
  pcie_7x_0_pcie_7x_0_pipe_reset \pipe_reset.pipe_reset_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(user_resetdone),
        .DRP_GTXRESET(rst_gtreset),
        .DRP_START(DRP_START0),
        .DRP_X16(DRP_X160),
        .DRP_X16X20_MODE(DRP_X16X20_MODE0),
        .\FSM_onehot_fsm_tx_reg[2] (\pipe_lane[3].pipe_eq.pipe_eq_i_n_0 ),
        .\FSM_onehot_fsm_tx_reg[2]_0 (\pipe_lane[2].pipe_eq.pipe_eq_i_n_0 ),
        .\FSM_onehot_fsm_tx_reg[2]_1 (\pipe_lane[0].pipe_eq.pipe_eq_i_n_0 ),
        .RATE_DRP_START(rate_drp_start_0),
        .RATE_DRP_X16(rate_drp_x16_0),
        .RATE_DRP_X16X20_MODE(rate_drp_x16x20_mode_0),
        .RST_CPLLRESET(rst_cpllreset),
        .RST_DCLK_RESET(rst_dclk_reset),
        .RST_RXUSRCLK_RESET(p_1_in),
        .SS(\pipe_reset.pipe_reset_i_n_20 ),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .done_reg({p_48_out,p_101_out,p_154_out,p_209_out}),
        .drp_start_reg(rate_drp_start_1),
        .drp_start_reg_0(rate_drp_start_2),
        .drp_start_reg_1(rate_drp_start_3),
        .drp_x16_reg(rate_drp_x16_1),
        .drp_x16_reg_0(rate_drp_x16_2),
        .drp_x16_reg_1(rate_drp_x16_3),
        .drp_x16x20_mode_reg(rate_drp_x16x20_mode_1),
        .drp_x16x20_mode_reg_0(rate_drp_x16x20_mode_2),
        .drp_x16x20_mode_reg_1(rate_drp_x16x20_mode_3),
        .gtreset_reg_0(RST_CPLLLOCK),
        .gtreset_reg_1({gt_phystatus_3,gt_phystatus_2,gt_phystatus_1,gt_phystatus_0}),
        .gtreset_reg_2(CLK),
        .out({cpllreset_reg[1],rst_txsync_start,cpllreset_reg[0]}),
        .out0(\pipe_lane[1].pipe_eq.pipe_eq_i_n_0 ),
        .pipe_qrst_idle(pipe_qrst_idle),
        .pipe_rst_fsm(pipe_rst_fsm),
        .rate_idle(rate_idle),
        .reset_n_reg2_reg(reset_n_reg2),
        .rst_userrdy(rst_userrdy),
        .\rxcdrlock_cnt_reg[2] ({p_36_out,p_89_out,p_142_out,p_197_out}),
        .start_reg1_reg(DRP_START014_out),
        .start_reg1_reg_0(DRP_START05_out),
        .start_reg1_reg_1(DRP_START00_out),
        .\txeq_preset_reg[16] (\pipe_reset.pipe_reset_i_n_0 ),
        .\txeq_preset_reg[16]_0 (\pipe_reset.pipe_reset_i_n_2 ),
        .\txeq_preset_reg[16]_1 (\pipe_reset.pipe_reset_i_n_3 ),
        .\txeq_preset_reg[16]_2 (\pipe_reset.pipe_reset_i_n_4 ),
        .\txsync_fsm.txsync_done_reg ({p_30_out,p_83_out,p_136_out,p_191_out}),
        .x16_reg1_reg(DRP_X16015_out),
        .x16_reg1_reg_0(DRP_X1606_out),
        .x16_reg1_reg_1(DRP_X1601_out),
        .x16x20_mode_reg1_reg(DRP_X16X20_MODE016_out),
        .x16x20_mode_reg1_reg_0(DRP_X16X20_MODE07_out),
        .x16x20_mode_reg1_reg_1(DRP_X16X20_MODE017_out));
  pcie_7x_0_pcie_7x_0_qpll_reset \qpll_reset.qpll_reset_i 
       (.CLK(INT_RXUSRCLK_OUT),
        .D(rate_qpllpd),
        .\FSM_sequential_fsm_reg[0]_0 (\FSM_sequential_fsm_reg[0] ),
        .\FSM_sequential_fsm_reg[1]_0 (\FSM_sequential_fsm_reg[1] ),
        .\FSM_sequential_fsm_reg[1]_1 (\FSM_sequential_fsm_reg[1]_0 ),
        .\FSM_sequential_fsm_reg[2]_0 (\FSM_sequential_fsm_reg[2]_0 ),
        .QPLL_DRP_DONE(qdrp_done),
        .QPLL_DRP_START(qrst_drp_start),
        .QPLL_QPLLLOCK(QPLL_QPLLLOCK),
        .QPLL_QPLLPD(QPLL_QPLLPD),
        .QPLL_QPLLRESET(QPLL_QPLLRESET),
        .SS(\pipe_reset.pipe_reset_i_n_20 ),
        .SYNC_MMCM_LOCK(RATE_MMCM_LOCK),
        .fsm2(fsm2),
        .gtreset_reg(RST_CPLLLOCK),
        .out(\FSM_sequential_fsm_reg[2] ),
        .pipe_qrst_fsm(pipe_qrst_fsm),
        .pipe_qrst_idle(pipe_qrst_idle),
        .\pipe_stages_1.pipe_tx_rate_q_reg (\pipe_stages_1.pipe_tx_rate_q_reg ),
        .qpllpd_reg_0(qpllpd_reg),
        .qpllreset_reg_0(qpllreset_reg),
        .qpllreset_reg_1(qpllreset_reg_0),
        .qpllreset_reg_2(rate_qpllreset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDCE reset_n_reg1_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .CLR(sys_rst_n),
        .D(1'b1),
        .Q(reset_n_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDCE reset_n_reg2_reg
       (.C(INT_RXUSRCLK_OUT),
        .CE(1'b1),
        .CLR(sys_rst_n),
        .D(reset_n_reg1),
        .Q(reset_n_reg2));
  LUT4 #(
    .INIT(16'h8000)) 
    rxdlysresetdone_0
       (.I0(pipe_rxdlysresetdone[1]),
        .I1(pipe_rxdlysresetdone[0]),
        .I2(pipe_rxdlysresetdone[2]),
        .I3(pipe_rxdlysresetdone[3]),
        .O(rxdlysresetdone_3));
  LUT3 #(
    .INIT(8'h80)) 
    rxphaligndone_s_0
       (.I0(PIPE_RXPHALIGNDONE[1]),
        .I1(PIPE_RXPHALIGNDONE[2]),
        .I2(PIPE_RXPHALIGNDONE[0]),
        .O(rxphaligndone_s_3));
  LUT4 #(
    .INIT(16'h8000)) 
    txdlysresetdone_0
       (.I0(pipe_txdlysresetdone[1]),
        .I1(pipe_txdlysresetdone[0]),
        .I2(pipe_txdlysresetdone[2]),
        .I3(pipe_txdlysresetdone[3]),
        .O(txdlysresetdone_3));
endmodule

(* C_DATA_WIDTH = "64" *) (* KEEP_WIDTH = "8" *) (* ORIG_REF_NAME = "pcie_7x_0_pr_loader" *) 
(* downgradeipidentifiedwarnings = "yes" *) 
module pcie_7x_0_pcie_7x_0_pr_loader
   (sys_clk,
    sys_reset,
    lnk_up,
    conf_clk,
    s_axis_tx_tready,
    s_axis_tx_tdata,
    s_axis_tx_tkeep,
    s_axis_tx_tuser,
    s_axis_tx_tlast,
    s_axis_tx_tvalid,
    m_axis_rx_tdata,
    m_axis_rx_tkeep,
    m_axis_rx_tlast,
    m_axis_rx_tvalid,
    m_axis_rx_tready,
    m_axis_rx_tuser,
    cfg_turnoff_ok,
    cfg_to_turnoff,
    cfg_bus_number,
    cfg_device_number,
    cfg_function_number,
    user_app_rdy_req,
    user_app_rdy_gnt,
    pr_done,
    ICAP_ceb,
    ICAP_wrb,
    ICAP_din_bs);
  input sys_clk;
  input sys_reset;
  input lnk_up;
  input conf_clk;
  input s_axis_tx_tready;
  output [63:0]s_axis_tx_tdata;
  output [7:0]s_axis_tx_tkeep;
  output [3:0]s_axis_tx_tuser;
  output s_axis_tx_tlast;
  output s_axis_tx_tvalid;
  input [63:0]m_axis_rx_tdata;
  input [7:0]m_axis_rx_tkeep;
  input m_axis_rx_tlast;
  input m_axis_rx_tvalid;
  output m_axis_rx_tready;
  input [21:0]m_axis_rx_tuser;
  output cfg_turnoff_ok;
  input cfg_to_turnoff;
  input [7:0]cfg_bus_number;
  input [4:0]cfg_device_number;
  input [2:0]cfg_function_number;
  input user_app_rdy_req;
  output user_app_rdy_gnt;
  output pr_done;
  output ICAP_ceb;
  output ICAP_wrb;
  output [31:0]ICAP_din_bs;

  wire \<const0> ;
  wire ICAP_ceb;
  wire [31:0]ICAP_din_bs;
  wire [7:0]cfg_bus_number;
  wire [4:0]cfg_device_number;
  wire [2:0]cfg_function_number;
  wire cfg_to_turnoff;
  wire cfg_turnoff_ok;
  wire conf_clk;
  wire [63:0]m_axis_rx_tdata;
  wire m_axis_rx_tlast;
  wire m_axis_rx_tready;
  wire m_axis_rx_tvalid;
  wire pr_done;
  wire [63:0]\^s_axis_tx_tdata ;
  wire [6:2]\^s_axis_tx_tkeep ;
  wire s_axis_tx_tlast;
  wire s_axis_tx_tready;
  wire s_axis_tx_tvalid;
  wire sys_clk;
  wire sys_reset;
  wire user_app_rdy_gnt;
  wire user_app_rdy_req;

  assign ICAP_wrb = \<const0> ;
  assign s_axis_tx_tdata[63:48] = \^s_axis_tx_tdata [63:48];
  assign s_axis_tx_tdata[47] = \<const0> ;
  assign s_axis_tx_tdata[46] = \<const0> ;
  assign s_axis_tx_tdata[45] = \<const0> ;
  assign s_axis_tx_tdata[44] = \<const0> ;
  assign s_axis_tx_tdata[43] = \<const0> ;
  assign s_axis_tx_tdata[42] = \<const0> ;
  assign s_axis_tx_tdata[41] = \<const0> ;
  assign s_axis_tx_tdata[40] = \<const0> ;
  assign s_axis_tx_tdata[39] = \<const0> ;
  assign s_axis_tx_tdata[38] = \<const0> ;
  assign s_axis_tx_tdata[37] = \<const0> ;
  assign s_axis_tx_tdata[36] = \<const0> ;
  assign s_axis_tx_tdata[35] = \<const0> ;
  assign s_axis_tx_tdata[34:0] = \^s_axis_tx_tdata [34:0];
  assign s_axis_tx_tkeep[7] = \^s_axis_tx_tkeep [6];
  assign s_axis_tx_tkeep[6] = \^s_axis_tx_tkeep [6];
  assign s_axis_tx_tkeep[5] = \^s_axis_tx_tkeep [6];
  assign s_axis_tx_tkeep[4] = \^s_axis_tx_tkeep [6];
  assign s_axis_tx_tkeep[3] = \^s_axis_tx_tkeep [2];
  assign s_axis_tx_tkeep[2] = \^s_axis_tx_tkeep [2];
  assign s_axis_tx_tkeep[1] = \^s_axis_tx_tkeep [2];
  assign s_axis_tx_tkeep[0] = \^s_axis_tx_tkeep [2];
  assign s_axis_tx_tuser[3] = \<const0> ;
  assign s_axis_tx_tuser[2] = \<const0> ;
  assign s_axis_tx_tuser[1] = \<const0> ;
  assign s_axis_tx_tuser[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  pcie_7x_0_pcie_7x_0_PIO_FPC PIO_FPC_i
       (.ICAP_ceb(ICAP_ceb),
        .ICAP_din_bs(ICAP_din_bs),
        .cfg_bus_number(cfg_bus_number),
        .cfg_device_number(cfg_device_number),
        .cfg_function_number(cfg_function_number),
        .cfg_to_turnoff(cfg_to_turnoff),
        .cfg_turnoff_ok(cfg_turnoff_ok),
        .conf_clk(conf_clk),
        .m_axis_rx_tdata(m_axis_rx_tdata),
        .m_axis_rx_tlast(m_axis_rx_tlast),
        .m_axis_rx_tvalid(m_axis_rx_tvalid),
        .\pio_rx_sm_64.in_packet_q_reg (m_axis_rx_tready),
        .pr_done(pr_done),
        .s_axis_tx_tdata({\^s_axis_tx_tdata [63:48],\^s_axis_tx_tdata [34:0]}),
        .s_axis_tx_tkeep({\^s_axis_tx_tkeep [6],\^s_axis_tx_tkeep [2]}),
        .s_axis_tx_tlast(s_axis_tx_tlast),
        .s_axis_tx_tready(s_axis_tx_tready),
        .s_axis_tx_tvalid(s_axis_tx_tvalid),
        .sys_clk(sys_clk),
        .sys_reset(sys_reset),
        .user_app_rdy_gnt(user_app_rdy_gnt),
        .user_app_rdy_req(user_app_rdy_req));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_qpll_drp" *) 
module pcie_7x_0_pcie_7x_0_qpll_drp
   (QPLL_DRP_DONE,
    Q,
    rdy_reg1_reg_0,
    qpll_drp_en,
    qpll_drp_we,
    RST_DCLK_RESET,
    QPLL_DRP_START,
    gtreset_reg,
    qpll_drp_rdy,
    QPLL_QPLLLOCK,
    QPLL_DRP_GEN3,
    D);
  output QPLL_DRP_DONE;
  output [4:0]Q;
  output [15:0]rdy_reg1_reg_0;
  output qpll_drp_en;
  output qpll_drp_we;
  input RST_DCLK_RESET;
  input QPLL_DRP_START;
  input gtreset_reg;
  input qpll_drp_rdy;
  input QPLL_QPLLLOCK;
  input QPLL_DRP_GEN3;
  input [15:0]D;

  wire [15:0]D;
  wire [4:0]Q;
  wire QPLL_DRP_DONE;
  wire QPLL_DRP_GEN3;
  wire QPLL_DRP_START;
  wire QPLL_QPLLLOCK;
  wire RST_DCLK_RESET;
  wire \crscode[0]_i_1_n_0 ;
  wire \crscode[1]_i_1_n_0 ;
  wire \crscode[2]_i_1_n_0 ;
  wire \crscode[3]_i_1_n_0 ;
  wire \crscode[4]_i_1_n_0 ;
  wire \crscode[5]_i_1_n_0 ;
  wire \crscode[5]_i_2_n_0 ;
  wire \crscode_reg_n_0_[0] ;
  wire \crscode_reg_n_0_[1] ;
  wire \crscode_reg_n_0_[2] ;
  wire \crscode_reg_n_0_[3] ;
  wire \crscode_reg_n_0_[4] ;
  wire \crscode_reg_n_0_[5] ;
  wire [15:0]di;
  wire \di[11]_i_2_n_0 ;
  wire \di[12]_i_2_n_0 ;
  wire \di[13]_i_2_n_0 ;
  wire \di[14]_i_2_n_0 ;
  wire \di[15]_i_2_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [15:0]do_reg2;
  wire done;
  wire [6:0]fsm;
  wire \fsm[0]_i_2__1_n_0 ;
  wire \fsm[1]_i_2_n_0 ;
  wire fsm_inferred__1__0_n_0;
  wire fsm_inferred__1__1_n_0;
  wire fsm_inferred__1_n_0;
  wire \fsm_reg_n_0_[0] ;
  wire \fsm_reg_n_0_[1] ;
  wire \fsm_reg_n_0_[2] ;
  wire \fsm_reg_n_0_[3] ;
  wire \fsm_reg_n_0_[4] ;
  wire \fsm_reg_n_0_[5] ;
  wire \fsm_reg_n_0_[6] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire gen3_reg2;
  wire gtreset_reg;
  wire \gtx_common.gtxe2_common_i_i_3_n_0 ;
  wire \gtx_common.gtxe2_common_i_i_4_n_0 ;
  wire index;
  wire \index[0]_i_1_n_0 ;
  wire \index[1]_i_1_n_0 ;
  wire \index[2]_i_1_n_0 ;
  wire \index[2]_i_2_n_0 ;
  wire \index[2]_i_4_n_0 ;
  wire \index_reg_n_0_[0] ;
  wire \index_reg_n_0_[1] ;
  wire \index_reg_n_0_[2] ;
  wire [1:0]load_cnt;
  wire \load_cnt[0]_i_1__0_n_0 ;
  wire \load_cnt[1]_i_1_n_0 ;
  wire \load_cnt[1]_i_2_n_0 ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire ovrd_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire ovrd_reg2;
  wire [7:0]p_1_in;
  wire qpll_drp_en;
  wire qpll_drp_rdy;
  wire qpll_drp_we;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg1;
  wire [15:0]rdy_reg1_reg_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire rdy_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire start_reg2;

  LUT3 #(
    .INIT(8'h12)) 
    \addr[0]_i_1 
       (.I0(\index_reg_n_0_[1] ),
        .I1(\index_reg_n_0_[0] ),
        .I2(\index_reg_n_0_[2] ),
        .O(p_1_in[0]));
  LUT3 #(
    .INIT(8'h0D)) 
    \addr[1]_i_1 
       (.I0(\index_reg_n_0_[2] ),
        .I1(\index_reg_n_0_[0] ),
        .I2(\index_reg_n_0_[1] ),
        .O(p_1_in[1]));
  LUT3 #(
    .INIT(8'h4D)) 
    \addr[2]_i_1 
       (.I0(\index_reg_n_0_[1] ),
        .I1(\index_reg_n_0_[2] ),
        .I2(\index_reg_n_0_[0] ),
        .O(p_1_in[2]));
  LUT2 #(
    .INIT(4'h7)) 
    \addr[5]_i_1 
       (.I0(\index_reg_n_0_[1] ),
        .I1(\index_reg_n_0_[0] ),
        .O(p_1_in[5]));
  LUT3 #(
    .INIT(8'h08)) 
    \addr[7]_i_1 
       (.I0(\index_reg_n_0_[1] ),
        .I1(\index_reg_n_0_[0] ),
        .I2(\index_reg_n_0_[2] ),
        .O(p_1_in[7]));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(p_1_in[0]),
        .Q(Q[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(p_1_in[1]),
        .Q(Q[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(p_1_in[2]),
        .Q(Q[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(p_1_in[5]),
        .Q(Q[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \addr_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(p_1_in[7]),
        .Q(Q[4]),
        .R(RST_DCLK_RESET));
  LUT2 #(
    .INIT(4'h2)) 
    \crscode[0]_i_1 
       (.I0(do_reg2[1]),
        .I1(\index_reg_n_0_[2] ),
        .O(\crscode[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \crscode[1]_i_1 
       (.I0(do_reg2[2]),
        .I1(\index_reg_n_0_[2] ),
        .O(\crscode[1]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \crscode[2]_i_1 
       (.I0(do_reg2[3]),
        .I1(\index_reg_n_0_[2] ),
        .O(\crscode[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \crscode[3]_i_1 
       (.I0(do_reg2[4]),
        .I1(\index_reg_n_0_[2] ),
        .O(\crscode[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \crscode[4]_i_1 
       (.I0(do_reg2[5]),
        .I1(\index_reg_n_0_[2] ),
        .O(\crscode[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hC080)) 
    \crscode[5]_i_1 
       (.I0(ovrd_reg2),
        .I1(\index_reg_n_0_[0] ),
        .I2(\index_reg_n_0_[1] ),
        .I3(\index_reg_n_0_[2] ),
        .O(\crscode[5]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \crscode[5]_i_2 
       (.I0(do_reg2[6]),
        .I1(\index_reg_n_0_[2] ),
        .O(\crscode[5]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \crscode_reg[0] 
       (.C(gtreset_reg),
        .CE(\crscode[5]_i_1_n_0 ),
        .D(\crscode[0]_i_1_n_0 ),
        .Q(\crscode_reg_n_0_[0] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \crscode_reg[1] 
       (.C(gtreset_reg),
        .CE(\crscode[5]_i_1_n_0 ),
        .D(\crscode[1]_i_1_n_0 ),
        .Q(\crscode_reg_n_0_[1] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \crscode_reg[2] 
       (.C(gtreset_reg),
        .CE(\crscode[5]_i_1_n_0 ),
        .D(\crscode[2]_i_1_n_0 ),
        .Q(\crscode_reg_n_0_[2] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \crscode_reg[3] 
       (.C(gtreset_reg),
        .CE(\crscode[5]_i_1_n_0 ),
        .D(\crscode[3]_i_1_n_0 ),
        .Q(\crscode_reg_n_0_[3] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \crscode_reg[4] 
       (.C(gtreset_reg),
        .CE(\crscode[5]_i_1_n_0 ),
        .D(\crscode[4]_i_1_n_0 ),
        .Q(\crscode_reg_n_0_[4] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \crscode_reg[5] 
       (.C(gtreset_reg),
        .CE(\crscode[5]_i_1_n_0 ),
        .D(\crscode[5]_i_2_n_0 ),
        .Q(\crscode_reg_n_0_[5] ),
        .R(RST_DCLK_RESET));
  LUT4 #(
    .INIT(16'h7E00)) 
    \di[0]_i_1 
       (.I0(\index_reg_n_0_[0] ),
        .I1(\index_reg_n_0_[2] ),
        .I2(\index_reg_n_0_[1] ),
        .I3(do_reg2[0]),
        .O(di[0]));
  LUT5 #(
    .INIT(32'h0CC5CCCC)) 
    \di[10]_i_1 
       (.I0(\crscode_reg_n_0_[0] ),
        .I1(do_reg2[10]),
        .I2(\index_reg_n_0_[1] ),
        .I3(\index_reg_n_0_[0] ),
        .I4(\index_reg_n_0_[2] ),
        .O(di[10]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAEBAA)) 
    \di[11]_i_1 
       (.I0(\di[11]_i_2_n_0 ),
        .I1(\crscode_reg_n_0_[0] ),
        .I2(\crscode_reg_n_0_[1] ),
        .I3(\index_reg_n_0_[2] ),
        .I4(\index_reg_n_0_[0] ),
        .I5(\index_reg_n_0_[1] ),
        .O(di[11]));
  LUT5 #(
    .INIT(32'h20FF2044)) 
    \di[11]_i_2 
       (.I0(\index_reg_n_0_[0] ),
        .I1(\index_reg_n_0_[1] ),
        .I2(ovrd_reg2),
        .I3(\index_reg_n_0_[2] ),
        .I4(do_reg2[11]),
        .O(\di[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00AA0000AAAAC3AA)) 
    \di[12]_i_1 
       (.I0(do_reg2[12]),
        .I1(\di[12]_i_2_n_0 ),
        .I2(\crscode_reg_n_0_[2] ),
        .I3(\index_reg_n_0_[2] ),
        .I4(\index_reg_n_0_[0] ),
        .I5(\index_reg_n_0_[1] ),
        .O(di[12]));
  LUT2 #(
    .INIT(4'hE)) 
    \di[12]_i_2 
       (.I0(\crscode_reg_n_0_[0] ),
        .I1(\crscode_reg_n_0_[1] ),
        .O(\di[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00F0F099F0F0FFF0)) 
    \di[13]_i_1 
       (.I0(\crscode_reg_n_0_[3] ),
        .I1(\di[13]_i_2_n_0 ),
        .I2(do_reg2[13]),
        .I3(\index_reg_n_0_[1] ),
        .I4(\index_reg_n_0_[0] ),
        .I5(\index_reg_n_0_[2] ),
        .O(di[13]));
  LUT3 #(
    .INIT(8'hFE)) 
    \di[13]_i_2 
       (.I0(\crscode_reg_n_0_[1] ),
        .I1(\crscode_reg_n_0_[0] ),
        .I2(\crscode_reg_n_0_[2] ),
        .O(\di[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00F0F099F0F0FFF0)) 
    \di[14]_i_1 
       (.I0(\crscode_reg_n_0_[4] ),
        .I1(\di[14]_i_2_n_0 ),
        .I2(do_reg2[14]),
        .I3(\index_reg_n_0_[1] ),
        .I4(\index_reg_n_0_[0] ),
        .I5(\index_reg_n_0_[2] ),
        .O(di[14]));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \di[14]_i_2 
       (.I0(\crscode_reg_n_0_[2] ),
        .I1(\crscode_reg_n_0_[0] ),
        .I2(\crscode_reg_n_0_[1] ),
        .I3(\crscode_reg_n_0_[3] ),
        .O(\di[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0AACAAAA0AA3AAAA)) 
    \di[15]_i_1 
       (.I0(do_reg2[15]),
        .I1(\di[15]_i_2_n_0 ),
        .I2(\index_reg_n_0_[1] ),
        .I3(\index_reg_n_0_[0] ),
        .I4(\index_reg_n_0_[2] ),
        .I5(\crscode_reg_n_0_[5] ),
        .O(di[15]));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \di[15]_i_2 
       (.I0(\crscode_reg_n_0_[3] ),
        .I1(\crscode_reg_n_0_[1] ),
        .I2(\crscode_reg_n_0_[0] ),
        .I3(\crscode_reg_n_0_[2] ),
        .I4(\crscode_reg_n_0_[4] ),
        .O(\di[15]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h7E00)) 
    \di[1]_i_1 
       (.I0(\index_reg_n_0_[0] ),
        .I1(\index_reg_n_0_[2] ),
        .I2(\index_reg_n_0_[1] ),
        .I3(do_reg2[1]),
        .O(di[1]));
  LUT4 #(
    .INIT(16'h7E00)) 
    \di[2]_i_1 
       (.I0(\index_reg_n_0_[0] ),
        .I1(\index_reg_n_0_[2] ),
        .I2(\index_reg_n_0_[1] ),
        .I3(do_reg2[2]),
        .O(di[2]));
  LUT4 #(
    .INIT(16'h7E00)) 
    \di[3]_i_1 
       (.I0(\index_reg_n_0_[0] ),
        .I1(\index_reg_n_0_[2] ),
        .I2(\index_reg_n_0_[1] ),
        .I3(do_reg2[3]),
        .O(di[3]));
  LUT4 #(
    .INIT(16'h7E00)) 
    \di[4]_i_1 
       (.I0(\index_reg_n_0_[0] ),
        .I1(\index_reg_n_0_[2] ),
        .I2(\index_reg_n_0_[1] ),
        .I3(do_reg2[4]),
        .O(di[4]));
  LUT4 #(
    .INIT(16'h2AAB)) 
    \di[5]_i_1 
       (.I0(do_reg2[5]),
        .I1(\index_reg_n_0_[1] ),
        .I2(\index_reg_n_0_[0] ),
        .I3(\index_reg_n_0_[2] ),
        .O(di[5]));
  LUT4 #(
    .INIT(16'h2BA8)) 
    \di[6]_i_1 
       (.I0(do_reg2[6]),
        .I1(\index_reg_n_0_[1] ),
        .I2(\index_reg_n_0_[2] ),
        .I3(\index_reg_n_0_[0] ),
        .O(di[6]));
  LUT4 #(
    .INIT(16'h7E00)) 
    \di[7]_i_1 
       (.I0(\index_reg_n_0_[0] ),
        .I1(\index_reg_n_0_[2] ),
        .I2(\index_reg_n_0_[1] ),
        .I3(do_reg2[7]),
        .O(di[7]));
  LUT4 #(
    .INIT(16'h2AAB)) 
    \di[8]_i_1 
       (.I0(do_reg2[8]),
        .I1(\index_reg_n_0_[1] ),
        .I2(\index_reg_n_0_[0] ),
        .I3(\index_reg_n_0_[2] ),
        .O(di[8]));
  LUT4 #(
    .INIT(16'h7E00)) 
    \di[9]_i_1 
       (.I0(\index_reg_n_0_[0] ),
        .I1(\index_reg_n_0_[2] ),
        .I2(\index_reg_n_0_[1] ),
        .I3(do_reg2[9]),
        .O(di[9]));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[0]),
        .Q(rdy_reg1_reg_0[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[10]),
        .Q(rdy_reg1_reg_0[10]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[11]),
        .Q(rdy_reg1_reg_0[11]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[12]),
        .Q(rdy_reg1_reg_0[12]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[13]),
        .Q(rdy_reg1_reg_0[13]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[14]),
        .Q(rdy_reg1_reg_0[14]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[15]),
        .Q(rdy_reg1_reg_0[15]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[1]),
        .Q(rdy_reg1_reg_0[1]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[2]),
        .Q(rdy_reg1_reg_0[2]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[3]),
        .Q(rdy_reg1_reg_0[3]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[4]),
        .Q(rdy_reg1_reg_0[4]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[5]),
        .Q(rdy_reg1_reg_0[5]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[6]),
        .Q(rdy_reg1_reg_0[6]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[7]),
        .Q(rdy_reg1_reg_0[7]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[8]),
        .Q(rdy_reg1_reg_0[8]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(di[9]),
        .Q(rdy_reg1_reg_0[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[0]),
        .Q(do_reg1[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[10]),
        .Q(do_reg1[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[11]),
        .Q(do_reg1[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[12]),
        .Q(do_reg1[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[13]),
        .Q(do_reg1[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[14]),
        .Q(do_reg1[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[15]),
        .Q(do_reg1[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[1]),
        .Q(do_reg1[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[2]),
        .Q(do_reg1[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[3]),
        .Q(do_reg1[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[4]),
        .Q(do_reg1[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[5]),
        .Q(do_reg1[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[6]),
        .Q(do_reg1[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[7]),
        .Q(do_reg1[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[8]),
        .Q(do_reg1[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg1_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(D[9]),
        .Q(do_reg1[9]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[0]),
        .Q(do_reg2[0]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[10] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[10]),
        .Q(do_reg2[10]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[11] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[11]),
        .Q(do_reg2[11]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[12] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[12]),
        .Q(do_reg2[12]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[13] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[13]),
        .Q(do_reg2[13]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[14] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[14]),
        .Q(do_reg2[14]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[15] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[15]),
        .Q(do_reg2[15]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[1]),
        .Q(do_reg2[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[2]),
        .Q(do_reg2[2]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[3]),
        .Q(do_reg2[3]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[4]),
        .Q(do_reg2[4]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[5]),
        .Q(do_reg2[5]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[6]),
        .Q(do_reg2[6]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[7] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[7]),
        .Q(do_reg2[7]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[8] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[8]),
        .Q(do_reg2[8]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \do_reg2_reg[9] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(do_reg1[9]),
        .Q(do_reg2[9]),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    done_i_1
       (.I0(\fsm_reg_n_0_[6] ),
        .I1(start_reg2),
        .I2(\fsm_reg_n_0_[0] ),
        .I3(\fsm_reg_n_0_[1] ),
        .I4(\fsm_reg_n_0_[4] ),
        .I5(\gtx_common.gtxe2_common_i_i_4_n_0 ),
        .O(done));
  FDRE #(
    .INIT(1'b0)) 
    done_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(done),
        .Q(QPLL_DRP_DONE),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'h5DFF5D5D5D5D5D5D)) 
    \fsm[0]_i_1__0 
       (.I0(fsm_inferred__1__1_n_0),
        .I1(\fsm_reg_n_0_[0] ),
        .I2(start_reg2),
        .I3(\fsm[0]_i_2__1_n_0 ),
        .I4(\index_reg_n_0_[1] ),
        .I5(\fsm_reg_n_0_[6] ),
        .O(fsm[0]));
  LUT2 #(
    .INIT(4'hB)) 
    \fsm[0]_i_2__1 
       (.I0(\index_reg_n_0_[0] ),
        .I1(\index_reg_n_0_[2] ),
        .O(\fsm[0]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF7000)) 
    \fsm[1]_i_1__0 
       (.I0(load_cnt[0]),
        .I1(load_cnt[1]),
        .I2(fsm_inferred__1__1_n_0),
        .I3(\fsm_reg_n_0_[1] ),
        .I4(\fsm[1]_i_2_n_0 ),
        .O(fsm[1]));
  LUT6 #(
    .INIT(64'hFF00B000B000B000)) 
    \fsm[1]_i_2 
       (.I0(\fsm[0]_i_2__1_n_0 ),
        .I1(\index_reg_n_0_[1] ),
        .I2(\fsm_reg_n_0_[6] ),
        .I3(fsm_inferred__1__1_n_0),
        .I4(\fsm_reg_n_0_[0] ),
        .I5(start_reg2),
        .O(\fsm[1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \fsm[2]_i_1__1 
       (.I0(\fsm_reg_n_0_[1] ),
        .I1(fsm_inferred__1__1_n_0),
        .I2(load_cnt[1]),
        .I3(load_cnt[0]),
        .O(fsm[2]));
  LUT4 #(
    .INIT(16'h88C8)) 
    \fsm[3]_i_1 
       (.I0(\fsm_reg_n_0_[2] ),
        .I1(fsm_inferred__1__1_n_0),
        .I2(\fsm_reg_n_0_[3] ),
        .I3(rdy_reg2),
        .O(fsm[3]));
  LUT3 #(
    .INIT(8'h80)) 
    \fsm[4]_i_1__0 
       (.I0(rdy_reg2),
        .I1(\fsm_reg_n_0_[3] ),
        .I2(fsm_inferred__1__1_n_0),
        .O(fsm[4]));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'h0116)) 
    fsm_inferred__1
       (.I0(\fsm_reg_n_0_[0] ),
        .I1(\fsm_reg_n_0_[1] ),
        .I2(\fsm_reg_n_0_[2] ),
        .I3(\fsm_reg_n_0_[3] ),
        .O(fsm_inferred__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'hFEE8)) 
    fsm_inferred__1__0
       (.I0(\fsm_reg_n_0_[0] ),
        .I1(\fsm_reg_n_0_[1] ),
        .I2(\fsm_reg_n_0_[2] ),
        .I3(\fsm_reg_n_0_[3] ),
        .O(fsm_inferred__1__0_n_0));
  LUT5 #(
    .INIT(32'h00000116)) 
    fsm_inferred__1__1
       (.I0(\fsm_reg_n_0_[4] ),
        .I1(\fsm_reg_n_0_[5] ),
        .I2(\fsm_reg_n_0_[6] ),
        .I3(fsm_inferred__1_n_0),
        .I4(fsm_inferred__1__0_n_0),
        .O(fsm_inferred__1__1_n_0));
  LUT6 #(
    .INIT(64'h0000000200000006)) 
    fsm_inferred__1__1__0
       (.I0(\fsm_reg_n_0_[4] ),
        .I1(\fsm_reg_n_0_[5] ),
        .I2(\fsm_reg_n_0_[6] ),
        .I3(fsm_inferred__1_n_0),
        .I4(fsm_inferred__1__0_n_0),
        .I5(rdy_reg2),
        .O(fsm[5]));
  LUT6 #(
    .INIT(64'h0000000400000000)) 
    fsm_inferred__1__1__1
       (.I0(\fsm_reg_n_0_[4] ),
        .I1(\fsm_reg_n_0_[5] ),
        .I2(\fsm_reg_n_0_[6] ),
        .I3(fsm_inferred__1_n_0),
        .I4(fsm_inferred__1__0_n_0),
        .I5(rdy_reg2),
        .O(fsm[6]));
  FDSE #(
    .INIT(1'b1)) 
    \fsm_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[0]),
        .Q(\fsm_reg_n_0_[0] ),
        .S(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[1]),
        .Q(\fsm_reg_n_0_[1] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[2]),
        .Q(\fsm_reg_n_0_[2] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[3] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[3]),
        .Q(\fsm_reg_n_0_[3] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[4] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[4]),
        .Q(\fsm_reg_n_0_[4] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[5] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[5]),
        .Q(\fsm_reg_n_0_[5] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \fsm_reg[6] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(fsm[6]),
        .Q(\fsm_reg_n_0_[6] ),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(QPLL_DRP_GEN3),
        .Q(gen3_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE gen3_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(gen3_reg1),
        .Q(gen3_reg2),
        .R(RST_DCLK_RESET));
  LUT6 #(
    .INIT(64'h0000000000010100)) 
    \gtx_common.gtxe2_common_i_i_1 
       (.I0(\fsm_reg_n_0_[1] ),
        .I1(\fsm_reg_n_0_[0] ),
        .I2(\fsm_reg_n_0_[6] ),
        .I3(\fsm_reg_n_0_[4] ),
        .I4(\fsm_reg_n_0_[2] ),
        .I5(\gtx_common.gtxe2_common_i_i_3_n_0 ),
        .O(qpll_drp_en));
  LUT5 #(
    .INIT(32'h00000010)) 
    \gtx_common.gtxe2_common_i_i_2 
       (.I0(\fsm_reg_n_0_[0] ),
        .I1(\fsm_reg_n_0_[6] ),
        .I2(\fsm_reg_n_0_[4] ),
        .I3(\fsm_reg_n_0_[1] ),
        .I4(\gtx_common.gtxe2_common_i_i_4_n_0 ),
        .O(qpll_drp_we));
  LUT2 #(
    .INIT(4'hE)) 
    \gtx_common.gtxe2_common_i_i_3 
       (.I0(\fsm_reg_n_0_[3] ),
        .I1(\fsm_reg_n_0_[5] ),
        .O(\gtx_common.gtxe2_common_i_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \gtx_common.gtxe2_common_i_i_4 
       (.I0(\fsm_reg_n_0_[5] ),
        .I1(\fsm_reg_n_0_[3] ),
        .I2(\fsm_reg_n_0_[2] ),
        .O(\gtx_common.gtxe2_common_i_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00FF7000)) 
    \index[0]_i_1 
       (.I0(\index_reg_n_0_[1] ),
        .I1(\index_reg_n_0_[2] ),
        .I2(\index[2]_i_2_n_0 ),
        .I3(index),
        .I4(\index_reg_n_0_[0] ),
        .O(\index[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h10FFC000)) 
    \index[1]_i_1 
       (.I0(\index_reg_n_0_[2] ),
        .I1(\index_reg_n_0_[0] ),
        .I2(\index[2]_i_2_n_0 ),
        .I3(index),
        .I4(\index_reg_n_0_[1] ),
        .O(\index[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h22FF8000)) 
    \index[2]_i_1 
       (.I0(\index[2]_i_2_n_0 ),
        .I1(\index_reg_n_0_[1] ),
        .I2(\index_reg_n_0_[0] ),
        .I3(index),
        .I4(\index_reg_n_0_[2] ),
        .O(\index[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000004)) 
    \index[2]_i_2 
       (.I0(\fsm_reg_n_0_[1] ),
        .I1(\fsm_reg_n_0_[6] ),
        .I2(\fsm_reg_n_0_[0] ),
        .I3(\gtx_common.gtxe2_common_i_i_4_n_0 ),
        .I4(\fsm_reg_n_0_[4] ),
        .O(\index[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEEB)) 
    \index[2]_i_3 
       (.I0(\index[2]_i_4_n_0 ),
        .I1(\fsm_reg_n_0_[5] ),
        .I2(\fsm_reg_n_0_[3] ),
        .I3(\fsm_reg_n_0_[2] ),
        .I4(\fsm_reg_n_0_[1] ),
        .I5(\fsm_reg_n_0_[4] ),
        .O(index));
  LUT2 #(
    .INIT(4'hE)) 
    \index[2]_i_4 
       (.I0(\fsm_reg_n_0_[0] ),
        .I1(\fsm_reg_n_0_[6] ),
        .O(\index[2]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\index[0]_i_1_n_0 ),
        .Q(\index_reg_n_0_[0] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\index[1]_i_1_n_0 ),
        .Q(\index_reg_n_0_[1] ),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \index_reg[2] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\index[2]_i_1_n_0 ),
        .Q(\index_reg_n_0_[2] ),
        .R(RST_DCLK_RESET));
  LUT5 #(
    .INIT(32'h00B00000)) 
    \load_cnt[0]_i_1__0 
       (.I0(load_cnt[1]),
        .I1(load_cnt[0]),
        .I2(\fsm_reg_n_0_[1] ),
        .I3(\fsm_reg_n_0_[6] ),
        .I4(\load_cnt[1]_i_2_n_0 ),
        .O(\load_cnt[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00E00000)) 
    \load_cnt[1]_i_1 
       (.I0(load_cnt[0]),
        .I1(load_cnt[1]),
        .I2(\fsm_reg_n_0_[1] ),
        .I3(\fsm_reg_n_0_[6] ),
        .I4(\load_cnt[1]_i_2_n_0 ),
        .O(\load_cnt[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \load_cnt[1]_i_2 
       (.I0(\fsm_reg_n_0_[4] ),
        .I1(\fsm_reg_n_0_[5] ),
        .I2(\fsm_reg_n_0_[3] ),
        .I3(\fsm_reg_n_0_[2] ),
        .I4(\fsm_reg_n_0_[0] ),
        .O(\load_cnt[1]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \load_cnt_reg[0] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\load_cnt[0]_i_1__0_n_0 ),
        .Q(load_cnt[0]),
        .R(RST_DCLK_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \load_cnt_reg[1] 
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(\load_cnt[1]_i_1_n_0 ),
        .Q(load_cnt[1]),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE ovrd_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(1'b0),
        .Q(ovrd_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE ovrd_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(ovrd_reg1),
        .Q(ovrd_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(QPLL_QPLLLOCK),
        .Q(qplllock_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE qplllock_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(qplllock_reg1),
        .Q(qplllock_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(qpll_drp_rdy),
        .Q(rdy_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE rdy_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(rdy_reg1),
        .Q(rdy_reg2),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg1_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(QPLL_DRP_START),
        .Q(start_reg1),
        .R(RST_DCLK_RESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE start_reg2_reg
       (.C(gtreset_reg),
        .CE(1'b1),
        .D(start_reg1),
        .Q(start_reg2),
        .R(RST_DCLK_RESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_qpll_reset" *) 
module pcie_7x_0_pcie_7x_0_qpll_reset
   (qpllreset_reg_0,
    \FSM_sequential_fsm_reg[1]_0 ,
    \FSM_sequential_fsm_reg[1]_1 ,
    qpllpd_reg_0,
    qpllreset_reg_1,
    QPLL_QPLLRESET,
    QPLL_QPLLPD,
    out,
    pipe_qrst_fsm,
    QPLL_DRP_START,
    pipe_qrst_idle,
    SS,
    QPLL_DRP_DONE,
    CLK,
    QPLL_QPLLLOCK,
    SYNC_MMCM_LOCK,
    \FSM_sequential_fsm_reg[2]_0 ,
    \FSM_sequential_fsm_reg[0]_0 ,
    D,
    \pipe_stages_1.pipe_tx_rate_q_reg ,
    qpllreset_reg_2,
    gtreset_reg,
    fsm2);
  output [1:0]qpllreset_reg_0;
  output [3:0]\FSM_sequential_fsm_reg[1]_0 ;
  output \FSM_sequential_fsm_reg[1]_1 ;
  output qpllpd_reg_0;
  output qpllreset_reg_1;
  output QPLL_QPLLRESET;
  output QPLL_QPLLPD;
  output [2:0]out;
  output [2:0]pipe_qrst_fsm;
  output QPLL_DRP_START;
  output pipe_qrst_idle;
  input [0:0]SS;
  input QPLL_DRP_DONE;
  input CLK;
  input QPLL_QPLLLOCK;
  input SYNC_MMCM_LOCK;
  input \FSM_sequential_fsm_reg[2]_0 ;
  input \FSM_sequential_fsm_reg[0]_0 ;
  input [3:0]D;
  input [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  input [3:0]qpllreset_reg_2;
  input [3:0]gtreset_reg;
  input fsm2;

  wire CLK;
  wire [3:0]D;
  wire \FSM_sequential_fsm[0]_i_1_n_0 ;
  wire \FSM_sequential_fsm[0]_i_2_n_0 ;
  wire \FSM_sequential_fsm[0]_i_3_n_0 ;
  wire \FSM_sequential_fsm[1]_i_1_n_0 ;
  wire \FSM_sequential_fsm[2]_i_1_n_0 ;
  wire \FSM_sequential_fsm_reg[0]_0 ;
  wire \FSM_sequential_fsm_reg[2]_0 ;
  wire QPLL_DRP_DONE;
  wire QPLL_DRP_START;
  wire QPLL_QPLLLOCK;
  wire QPLL_QPLLPD;
  wire QPLL_QPLLRESET;
  wire [0:0]SS;
  wire SYNC_MMCM_LOCK;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]cplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]cplllock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire drp_done_reg2;
  wire fsm2;
  wire [3:0]gtreset_reg;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire mmcm_lock_reg2;
  (* RTL_KEEP = "yes" *) wire [2:0]out;
  wire [2:0]pipe_qrst_fsm;
  wire pipe_qrst_idle;
  wire [0:0]\pipe_stages_1.pipe_tx_rate_q_reg ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire qplllock_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]qpllpd_in_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]qpllpd_in_reg2;
  wire qpllpd_reg_0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]qpllreset_in_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]qpllreset_in_reg2;
  wire qpllreset_reg_1;
  wire [3:0]qpllreset_reg_2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [1:0]rate_reg2;

  assign \FSM_sequential_fsm_reg[1]_0 [3:0] = cplllock_reg2;
  assign \FSM_sequential_fsm_reg[1]_1  = mmcm_lock_reg2;
  assign qpllreset_reg_0[1:0] = rate_reg2;
  LUT4 #(
    .INIT(16'hFF08)) 
    \FSM_sequential_fsm[0]_i_1 
       (.I0(out[2]),
        .I1(qplllock_reg2),
        .I2(out[0]),
        .I3(\FSM_sequential_fsm[0]_i_2_n_0 ),
        .O(\FSM_sequential_fsm[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC4C4C4C7C7C7C4C7)) 
    \FSM_sequential_fsm[0]_i_2 
       (.I0(drp_done_reg2),
        .I1(out[1]),
        .I2(out[2]),
        .I3(\FSM_sequential_fsm[0]_i_3_n_0 ),
        .I4(out[0]),
        .I5(fsm2),
        .O(\FSM_sequential_fsm[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \FSM_sequential_fsm[0]_i_3 
       (.I0(qplllock_reg2),
        .I1(cplllock_reg2[3]),
        .I2(cplllock_reg2[2]),
        .I3(cplllock_reg2[0]),
        .I4(cplllock_reg2[1]),
        .O(\FSM_sequential_fsm[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFF77CCC0)) 
    \FSM_sequential_fsm[1]_i_1 
       (.I0(drp_done_reg2),
        .I1(out[0]),
        .I2(fsm2),
        .I3(out[2]),
        .I4(out[1]),
        .O(\FSM_sequential_fsm[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hEAAA)) 
    \FSM_sequential_fsm[2]_i_1 
       (.I0(out[2]),
        .I1(out[1]),
        .I2(drp_done_reg2),
        .I3(out[0]),
        .O(\FSM_sequential_fsm[2]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_sequential_fsm[0]_i_1_n_0 ),
        .Q(out[0]),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_sequential_fsm[1]_i_1_n_0 ),
        .Q(out[1]),
        .R(SS));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_sequential_fsm[2]_i_1_n_0 ),
        .Q(out[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \cplllock_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg[0]),
        .Q(cplllock_reg1[0]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \cplllock_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg[1]),
        .Q(cplllock_reg1[1]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \cplllock_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg[2]),
        .Q(cplllock_reg1[2]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \cplllock_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(gtreset_reg[3]),
        .Q(cplllock_reg1[3]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \cplllock_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1[0]),
        .Q(cplllock_reg2[0]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \cplllock_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1[1]),
        .Q(cplllock_reg2[1]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \cplllock_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1[2]),
        .Q(cplllock_reg2[2]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \cplllock_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(cplllock_reg1[3]),
        .Q(cplllock_reg2[3]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(QPLL_DRP_DONE),
        .Q(drp_done_reg1),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \drp_done_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(drp_done_reg1),
        .Q(drp_done_reg2),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(SYNC_MMCM_LOCK),
        .Q(mmcm_lock_reg1),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE mmcm_lock_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(mmcm_lock_reg1),
        .Q(mmcm_lock_reg2),
        .R(SS));
  LUT1 #(
    .INIT(2'h1)) 
    \pipe_qrst_fsm[1]_INST_0 
       (.I0(out[1]),
        .O(pipe_qrst_fsm[0]));
  LUT3 #(
    .INIT(8'h74)) 
    \pipe_qrst_fsm[2]_INST_0 
       (.I0(out[0]),
        .I1(out[2]),
        .I2(out[1]),
        .O(pipe_qrst_fsm[1]));
  LUT3 #(
    .INIT(8'h28)) 
    \pipe_qrst_fsm[3]_INST_0 
       (.I0(out[2]),
        .I1(out[1]),
        .I2(out[0]),
        .O(pipe_qrst_fsm[2]));
  LUT3 #(
    .INIT(8'h80)) 
    pipe_qrst_idle_INST_0
       (.I0(out[1]),
        .I1(out[0]),
        .I2(out[2]),
        .O(pipe_qrst_idle));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qplllock_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(QPLL_QPLLLOCK),
        .Q(qplllock_reg1),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qplllock_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(qplllock_reg1),
        .Q(qplllock_reg2),
        .R(SS));
  LUT4 #(
    .INIT(16'h8000)) 
    qpllpd0
       (.I0(qpllpd_in_reg2[1]),
        .I1(qpllpd_in_reg2[0]),
        .I2(qpllpd_in_reg2[2]),
        .I3(qpllpd_in_reg2[3]),
        .O(qpllpd_reg_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qpllpd_in_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[0]),
        .Q(qpllpd_in_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qpllpd_in_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[1]),
        .Q(qpllpd_in_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qpllpd_in_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[2]),
        .Q(qpllpd_in_reg1[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qpllpd_in_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(D[3]),
        .Q(qpllpd_in_reg1[3]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qpllpd_in_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllpd_in_reg1[0]),
        .Q(qpllpd_in_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qpllpd_in_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllpd_in_reg1[1]),
        .Q(qpllpd_in_reg2[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qpllpd_in_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllpd_in_reg1[2]),
        .Q(qpllpd_in_reg2[2]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \qpllpd_in_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllpd_in_reg1[3]),
        .Q(qpllpd_in_reg2[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    qpllpd_reg
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_sequential_fsm_reg[0]_0 ),
        .Q(QPLL_QPLLPD),
        .R(SS));
  LUT4 #(
    .INIT(16'h8000)) 
    qpllreset0_inferred__0
       (.I0(qpllreset_in_reg2[1]),
        .I1(qpllreset_in_reg2[0]),
        .I2(qpllreset_in_reg2[2]),
        .I3(qpllreset_in_reg2[3]),
        .O(qpllreset_reg_1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \qpllreset_in_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_reg_2[0]),
        .Q(qpllreset_in_reg1[0]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \qpllreset_in_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_reg_2[1]),
        .Q(qpllreset_in_reg1[1]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \qpllreset_in_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_reg_2[2]),
        .Q(qpllreset_in_reg1[2]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \qpllreset_in_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_reg_2[3]),
        .Q(qpllreset_in_reg1[3]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \qpllreset_in_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_in_reg1[0]),
        .Q(qpllreset_in_reg2[0]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \qpllreset_in_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_in_reg1[1]),
        .Q(qpllreset_in_reg2[1]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \qpllreset_in_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_in_reg1[2]),
        .Q(qpllreset_in_reg2[2]),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDSE \qpllreset_in_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(qpllreset_in_reg1[3]),
        .Q(qpllreset_in_reg2[3]),
        .S(SS));
  FDSE #(
    .INIT(1'b1)) 
    qpllreset_reg
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_sequential_fsm_reg[2]_0 ),
        .Q(QPLL_QPLLRESET),
        .S(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\pipe_stages_1.pipe_tx_rate_q_reg ),
        .Q(rate_reg1[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(rate_reg1[1]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_reg1[0]),
        .Q(rate_reg2[0]),
        .R(SS));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \rate_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(rate_reg1[1]),
        .Q(rate_reg2[1]),
        .R(SS));
  LUT3 #(
    .INIT(8'h02)) 
    start_reg1_i_1
       (.I0(out[1]),
        .I1(out[2]),
        .I2(out[0]),
        .O(QPLL_DRP_START));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_qpll_wrapper" *) 
module pcie_7x_0_pcie_7x_0_qpll_wrapper
   (qpll_drp_rdy,
    QPLL_QPLLLOCK,
    QPLL_QPLLOUTCLK,
    QPLL_QPLLOUTREFCLK,
    D,
    gtreset_reg,
    qpll_drp_en,
    qpll_drp_we,
    sys_clk,
    QPLL_QPLLPD,
    QPLL_QPLLRESET,
    \di_reg[15] ,
    Q);
  output qpll_drp_rdy;
  output QPLL_QPLLLOCK;
  output QPLL_QPLLOUTCLK;
  output QPLL_QPLLOUTREFCLK;
  output [15:0]D;
  input gtreset_reg;
  input qpll_drp_en;
  input qpll_drp_we;
  input sys_clk;
  input QPLL_QPLLPD;
  input QPLL_QPLLRESET;
  input [15:0]\di_reg[15] ;
  input [4:0]Q;

  wire [15:0]D;
  wire [4:0]Q;
  wire QPLL_QPLLLOCK;
  wire QPLL_QPLLOUTCLK;
  wire QPLL_QPLLOUTREFCLK;
  wire QPLL_QPLLPD;
  wire QPLL_QPLLRESET;
  wire [15:0]\di_reg[15] ;
  wire gtreset_reg;
  wire qpll_drp_en;
  wire qpll_drp_rdy;
  wire qpll_drp_we;
  wire sys_clk;
  wire \NLW_gtx_common.gtxe2_common_i_QPLLFBCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_common.gtxe2_common_i_QPLLREFCLKLOST_UNCONNECTED ;
  wire \NLW_gtx_common.gtxe2_common_i_REFCLKOUTMONITOR_UNCONNECTED ;
  wire [7:0]\NLW_gtx_common.gtxe2_common_i_QPLLDMONITOR_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  GTXE2_COMMON #(
    .BIAS_CFG(64'h0000040000001000),
    .COMMON_CFG(32'h00000000),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_GTGREFCLK_INVERTED(1'b0),
    .IS_QPLLLOCKDETCLK_INVERTED(1'b0),
    .QPLL_CFG(27'h06801C1),
    .QPLL_CLKOUT_CFG(4'b0000),
    .QPLL_COARSE_FREQ_OVRD(6'b010000),
    .QPLL_COARSE_FREQ_OVRD_EN(1'b0),
    .QPLL_CP(10'b0000011111),
    .QPLL_CP_MONITOR_EN(1'b0),
    .QPLL_DMONITOR_SEL(1'b0),
    .QPLL_FBDIV(10'b0100100000),
    .QPLL_FBDIV_MONITOR_EN(1'b0),
    .QPLL_FBDIV_RATIO(1'b1),
    .QPLL_INIT_CFG(24'h000006),
    .QPLL_LOCK_CFG(16'h21E8),
    .QPLL_LPF(4'b1101),
    .QPLL_REFCLK_DIV(1),
    .SIM_QPLLREFCLK_SEL(3'b001),
    .SIM_RESET_SPEEDUP("FALSE"),
    .SIM_VERSION("3.0")) 
    \gtx_common.gtxe2_common_i 
       (.BGBYPASSB(1'b1),
        .BGMONITORENB(1'b1),
        .BGPDB(1'b1),
        .BGRCALOVRD({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DRPADDR({Q[4],1'b0,Q[3],Q[3],Q[4],Q[2:0]}),
        .DRPCLK(gtreset_reg),
        .DRPDI(\di_reg[15] ),
        .DRPDO(D),
        .DRPEN(qpll_drp_en),
        .DRPRDY(qpll_drp_rdy),
        .DRPWE(qpll_drp_we),
        .GTGREFCLK(1'b0),
        .GTNORTHREFCLK0(1'b0),
        .GTNORTHREFCLK1(1'b0),
        .GTREFCLK0(sys_clk),
        .GTREFCLK1(1'b0),
        .GTSOUTHREFCLK0(1'b0),
        .GTSOUTHREFCLK1(1'b0),
        .PMARSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLDMONITOR(\NLW_gtx_common.gtxe2_common_i_QPLLDMONITOR_UNCONNECTED [7:0]),
        .QPLLFBCLKLOST(\NLW_gtx_common.gtxe2_common_i_QPLLFBCLKLOST_UNCONNECTED ),
        .QPLLLOCK(QPLL_QPLLLOCK),
        .QPLLLOCKDETCLK(1'b0),
        .QPLLLOCKEN(1'b1),
        .QPLLOUTCLK(QPLL_QPLLOUTCLK),
        .QPLLOUTREFCLK(QPLL_QPLLOUTREFCLK),
        .QPLLOUTRESET(1'b0),
        .QPLLPD(QPLL_QPLLPD),
        .QPLLREFCLKLOST(\NLW_gtx_common.gtxe2_common_i_QPLLREFCLKLOST_UNCONNECTED ),
        .QPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .QPLLRESET(QPLL_QPLLRESET),
        .QPLLRSVD1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLRSVD2({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .RCALENB(1'b1),
        .REFCLKOUTMONITOR(\NLW_gtx_common.gtxe2_common_i_REFCLKOUTMONITOR_UNCONNECTED ));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_rxeq_scan" *) 
module pcie_7x_0_pcie_7x_0_rxeq_scan
   (D,
    rxeq_new_txcoeff_req,
    rxeq_adapt_done_reg_reg,
    rxeq_adapt_done_reg,
    RST_CPLLRESET,
    rxeq_new_txcoeff_req_reg,
    CLK,
    rxeq_preset_valid_reg,
    \rxeq_control_reg2_reg[0] ,
    out,
    \rxeq_cnt_reg[1] ,
    \rxeq_control_reg2_reg[1] ,
    \rxeq_cnt_reg[1]_0 ,
    rxeq_adapt_done_reg_reg_0,
    USER_RXEQ_ADAPT_DONE,
    \rxeq_preset_reg[2] ,
    Q,
    \rxeq_txcoeff_reg[17] ,
    \rxeq_fs_reg[5] ,
    \rxeq_lf_reg[5] );
  output [2:0]D;
  output rxeq_new_txcoeff_req;
  output rxeq_adapt_done_reg_reg;
  output rxeq_adapt_done_reg;
  input RST_CPLLRESET;
  input rxeq_new_txcoeff_req_reg;
  input CLK;
  input rxeq_preset_valid_reg;
  input \rxeq_control_reg2_reg[0] ;
  input [2:0]out;
  input \rxeq_cnt_reg[1] ;
  input [1:0]\rxeq_control_reg2_reg[1] ;
  input \rxeq_cnt_reg[1]_0 ;
  input rxeq_adapt_done_reg_reg_0;
  input USER_RXEQ_ADAPT_DONE;
  input [2:0]\rxeq_preset_reg[2] ;
  input [3:0]Q;
  input [17:0]\rxeq_txcoeff_reg[17] ;
  input [5:0]\rxeq_fs_reg[5] ;
  input [5:0]\rxeq_lf_reg[5] ;

  wire CLK;
  wire [2:0]D;
  wire \FSM_onehot_fsm[1]_i_1__3_n_0 ;
  wire \FSM_onehot_fsm[2]_i_1__3_n_0 ;
  wire \FSM_onehot_fsm[3]_i_1__3_n_0 ;
  wire \FSM_onehot_fsm[3]_i_2__3_n_0 ;
  wire \FSM_onehot_fsm[3]_i_3__3_n_0 ;
  wire \FSM_onehot_fsm[3]_i_4__2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_5__2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_6__2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_7__2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_8__2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_9__2_n_0 ;
  wire \FSM_onehot_fsm[4]_i_1__3_n_0 ;
  wire \FSM_onehot_fsm[4]_i_2__3_n_0 ;
  wire \FSM_onehot_fsm[4]_i_3__3_n_0 ;
  wire \FSM_onehot_fsm[4]_i_4__2_n_0 ;
  wire \FSM_onehot_fsm[4]_i_5__2_n_0 ;
  wire \FSM_onehot_fsm[4]_i_6__2_n_0 ;
  wire \FSM_onehot_fsm[4]_i_7__2_n_0 ;
  wire \FSM_onehot_fsm[4]_i_8__2_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[4] ;
  wire \FSM_sequential_fsm_rx[0]_i_3__2_n_0 ;
  wire [3:0]Q;
  wire RST_CPLLRESET;
  wire USER_RXEQ_ADAPT_DONE;
  wire adapt_done;
  wire adapt_done_cnt;
  wire adapt_done_cnt_i_1__2_n_0;
  wire adapt_done_cnt_reg_n_0;
  wire [21:0]converge_cnt;
  wire [21:1]converge_cnt0;
  wire converge_cnt0_carry__0_n_0;
  wire converge_cnt0_carry__0_n_1;
  wire converge_cnt0_carry__0_n_2;
  wire converge_cnt0_carry__0_n_3;
  wire converge_cnt0_carry__1_n_0;
  wire converge_cnt0_carry__1_n_1;
  wire converge_cnt0_carry__1_n_2;
  wire converge_cnt0_carry__1_n_3;
  wire converge_cnt0_carry__2_n_0;
  wire converge_cnt0_carry__2_n_1;
  wire converge_cnt0_carry__2_n_2;
  wire converge_cnt0_carry__2_n_3;
  wire converge_cnt0_carry__3_n_0;
  wire converge_cnt0_carry__3_n_1;
  wire converge_cnt0_carry__3_n_2;
  wire converge_cnt0_carry__3_n_3;
  wire converge_cnt0_carry_n_0;
  wire converge_cnt0_carry_n_1;
  wire converge_cnt0_carry_n_2;
  wire converge_cnt0_carry_n_3;
  wire \converge_cnt_reg_n_0_[0] ;
  wire \converge_cnt_reg_n_0_[10] ;
  wire \converge_cnt_reg_n_0_[11] ;
  wire \converge_cnt_reg_n_0_[12] ;
  wire \converge_cnt_reg_n_0_[13] ;
  wire \converge_cnt_reg_n_0_[14] ;
  wire \converge_cnt_reg_n_0_[15] ;
  wire \converge_cnt_reg_n_0_[16] ;
  wire \converge_cnt_reg_n_0_[17] ;
  wire \converge_cnt_reg_n_0_[18] ;
  wire \converge_cnt_reg_n_0_[19] ;
  wire \converge_cnt_reg_n_0_[1] ;
  wire \converge_cnt_reg_n_0_[20] ;
  wire \converge_cnt_reg_n_0_[21] ;
  wire \converge_cnt_reg_n_0_[2] ;
  wire \converge_cnt_reg_n_0_[3] ;
  wire \converge_cnt_reg_n_0_[4] ;
  wire \converge_cnt_reg_n_0_[5] ;
  wire \converge_cnt_reg_n_0_[6] ;
  wire \converge_cnt_reg_n_0_[7] ;
  wire \converge_cnt_reg_n_0_[8] ;
  wire \converge_cnt_reg_n_0_[9] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]fs_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]fs_reg2;
  wire fsm1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]lf_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]lf_reg2;
  wire new_txcoeff_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire new_txcoeff_req_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire new_txcoeff_req_reg2;
  wire [2:0]out;
  wire preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]preset_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire preset_valid_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire preset_valid_reg2;
  wire rxeq_adapt_done_reg;
  wire rxeq_adapt_done_reg0;
  wire rxeq_adapt_done_reg_i_2__2_n_0;
  wire rxeq_adapt_done_reg_reg;
  wire rxeq_adapt_done_reg_reg_0;
  wire \rxeq_cnt_reg[1] ;
  wire \rxeq_cnt_reg[1]_0 ;
  wire \rxeq_control_reg2_reg[0] ;
  wire [1:0]\rxeq_control_reg2_reg[1] ;
  wire [5:0]\rxeq_fs_reg[5] ;
  wire [5:0]\rxeq_lf_reg[5] ;
  wire rxeq_new_txcoeff_req;
  wire rxeq_new_txcoeff_req_reg;
  wire [2:0]\rxeq_preset_reg[2] ;
  wire rxeq_preset_valid_reg;
  wire [17:0]\rxeq_txcoeff_reg[17] ;
  wire rxeqscan_adapt_done;
  wire rxeqscan_new_txcoeff_done;
  wire rxeqscan_preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]txcoeff_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]txcoeff_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txpreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txpreset_reg2;
  wire [3:0]NLW_converge_cnt0_carry__4_CO_UNCONNECTED;
  wire [3:1]NLW_converge_cnt0_carry__4_O_UNCONNECTED;

  LUT6 #(
    .INIT(64'h00000F0F0111CDDD)) 
    \FSM_onehot_fsm[1]_i_1__3 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(new_txcoeff_req_reg2),
        .I3(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I4(preset_valid_reg2),
        .I5(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm[1]_i_1__3_n_0 ));
  LUT3 #(
    .INIT(8'hA8)) 
    \FSM_onehot_fsm[2]_i_1__3 
       (.I0(preset_valid_reg2),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm[2]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAA8AA)) 
    \FSM_onehot_fsm[3]_i_1__3 
       (.I0(\FSM_onehot_fsm[3]_i_2__3_n_0 ),
        .I1(\FSM_onehot_fsm[3]_i_3__3_n_0 ),
        .I2(\FSM_onehot_fsm[3]_i_4__2_n_0 ),
        .I3(\FSM_onehot_fsm[3]_i_5__2_n_0 ),
        .I4(\FSM_onehot_fsm[3]_i_6__2_n_0 ),
        .I5(\FSM_onehot_fsm[3]_i_7__2_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h00000202FF000202)) 
    \FSM_onehot_fsm[3]_i_2__3 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(fsm1),
        .I3(new_txcoeff_req_reg2),
        .I4(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I5(preset_valid_reg2),
        .O(\FSM_onehot_fsm[3]_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'hFFD2)) 
    \FSM_onehot_fsm[3]_i_3__3 
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(\rxeq_control_reg2_reg[1] [0]),
        .I2(\converge_cnt_reg_n_0_[21] ),
        .I3(\FSM_onehot_fsm[3]_i_8__2_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_3__3_n_0 ));
  LUT4 #(
    .INIT(16'hFFEB)) 
    \FSM_onehot_fsm[3]_i_4__2 
       (.I0(\FSM_onehot_fsm[4]_i_8__2_n_0 ),
        .I1(\converge_cnt_reg_n_0_[14] ),
        .I2(\converge_cnt_reg_n_0_[13] ),
        .I3(\FSM_onehot_fsm[4]_i_7__2_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_4__2_n_0 ));
  LUT4 #(
    .INIT(16'h005D)) 
    \FSM_onehot_fsm[3]_i_5__2 
       (.I0(\converge_cnt_reg_n_0_[0] ),
        .I1(\converge_cnt_reg_n_0_[2] ),
        .I2(\converge_cnt_reg_n_0_[3] ),
        .I3(\FSM_onehot_fsm[3]_i_9__2_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_5__2_n_0 ));
  LUT6 #(
    .INIT(64'hF9FFFFFFFFFFFFFF)) 
    \FSM_onehot_fsm[3]_i_6__2 
       (.I0(\converge_cnt_reg_n_0_[20] ),
        .I1(\converge_cnt_reg_n_0_[21] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I3(\converge_cnt_reg_n_0_[9] ),
        .I4(\converge_cnt_reg_n_0_[11] ),
        .I5(\converge_cnt_reg_n_0_[19] ),
        .O(\FSM_onehot_fsm[3]_i_6__2_n_0 ));
  LUT6 #(
    .INIT(64'h2FFFFFFF2F2FFF22)) 
    \FSM_onehot_fsm[3]_i_7__2 
       (.I0(\converge_cnt_reg_n_0_[14] ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[10] ),
        .I3(\converge_cnt_reg_n_0_[8] ),
        .I4(\converge_cnt_reg_n_0_[13] ),
        .I5(\converge_cnt_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm[3]_i_7__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF4FF)) 
    \FSM_onehot_fsm[3]_i_8__2 
       (.I0(\converge_cnt_reg_n_0_[8] ),
        .I1(\converge_cnt_reg_n_0_[10] ),
        .I2(\converge_cnt_reg_n_0_[5] ),
        .I3(\converge_cnt_reg_n_0_[15] ),
        .I4(\converge_cnt_reg_n_0_[4] ),
        .I5(\converge_cnt_reg_n_0_[6] ),
        .O(\FSM_onehot_fsm[3]_i_8__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFEF)) 
    \FSM_onehot_fsm[3]_i_9__2 
       (.I0(\converge_cnt_reg_n_0_[7] ),
        .I1(\converge_cnt_reg_n_0_[1] ),
        .I2(\converge_cnt_reg_n_0_[16] ),
        .I3(\converge_cnt_reg_n_0_[12] ),
        .O(\FSM_onehot_fsm[3]_i_9__2_n_0 ));
  LUT6 #(
    .INIT(64'hAA080808AA08AAAA)) 
    \FSM_onehot_fsm[4]_i_1__3 
       (.I0(\FSM_onehot_fsm[4]_i_2__3_n_0 ),
        .I1(\FSM_onehot_fsm[4]_i_3__3_n_0 ),
        .I2(\FSM_onehot_fsm[4]_i_4__2_n_0 ),
        .I3(fsm1),
        .I4(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I5(\FSM_onehot_fsm[4]_i_5__2_n_0 ),
        .O(\FSM_onehot_fsm[4]_i_1__3_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_onehot_fsm[4]_i_2__3 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .O(\FSM_onehot_fsm[4]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'h0000080000000820)) 
    \FSM_onehot_fsm[4]_i_3__3 
       (.I0(\FSM_onehot_fsm[3]_i_5__2_n_0 ),
        .I1(\converge_cnt_reg_n_0_[13] ),
        .I2(\converge_cnt_reg_n_0_[14] ),
        .I3(\converge_cnt_reg_n_0_[10] ),
        .I4(\FSM_onehot_fsm[4]_i_6__2_n_0 ),
        .I5(\converge_cnt_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm[4]_i_3__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFBAA)) 
    \FSM_onehot_fsm[4]_i_4__2 
       (.I0(\FSM_onehot_fsm[3]_i_3__3_n_0 ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[21] ),
        .I3(\converge_cnt_reg_n_0_[14] ),
        .I4(\FSM_onehot_fsm[4]_i_7__2_n_0 ),
        .I5(\FSM_onehot_fsm[4]_i_8__2_n_0 ),
        .O(\FSM_onehot_fsm[4]_i_4__2_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \FSM_onehot_fsm[4]_i_5__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(new_txcoeff_req_reg2),
        .O(\FSM_onehot_fsm[4]_i_5__2_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \FSM_onehot_fsm[4]_i_6__2 
       (.I0(\converge_cnt_reg_n_0_[9] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I2(\converge_cnt_reg_n_0_[19] ),
        .I3(\converge_cnt_reg_n_0_[11] ),
        .O(\FSM_onehot_fsm[4]_i_6__2_n_0 ));
  LUT4 #(
    .INIT(16'h4FFF)) 
    \FSM_onehot_fsm[4]_i_7__2 
       (.I0(\converge_cnt_reg_n_0_[3] ),
        .I1(\converge_cnt_reg_n_0_[8] ),
        .I2(\converge_cnt_reg_n_0_[17] ),
        .I3(\converge_cnt_reg_n_0_[18] ),
        .O(\FSM_onehot_fsm[4]_i_7__2_n_0 ));
  LUT6 #(
    .INIT(64'h0D0D0D0DFFFF0DFF)) 
    \FSM_onehot_fsm[4]_i_8__2 
       (.I0(\converge_cnt_reg_n_0_[21] ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[14] ),
        .I3(\converge_cnt_reg_n_0_[3] ),
        .I4(\converge_cnt_reg_n_0_[2] ),
        .I5(\converge_cnt_reg_n_0_[0] ),
        .O(\FSM_onehot_fsm[4]_i_8__2_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[1]_i_1__3_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[1] ),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[2]_i_1__3_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[3]_i_1__3_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[4]_i_1__3_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAAAEA)) 
    \FSM_sequential_fsm_rx[0]_i_1__2 
       (.I0(\rxeq_cnt_reg[1]_0 ),
        .I1(out[2]),
        .I2(out[1]),
        .I3(\rxeq_control_reg2_reg[1] [1]),
        .I4(\rxeq_control_reg2_reg[1] [0]),
        .I5(\FSM_sequential_fsm_rx[0]_i_3__2_n_0 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hCCCC0C0C0000BBFF)) 
    \FSM_sequential_fsm_rx[0]_i_3__2 
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(out[0]),
        .I2(rxeqscan_new_txcoeff_done),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(out[1]),
        .I5(out[2]),
        .O(\FSM_sequential_fsm_rx[0]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0CA0FFC00CA00FC0)) 
    \FSM_sequential_fsm_rx[1]_i_1__2 
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(\rxeq_control_reg2_reg[0] ),
        .I2(out[0]),
        .I3(out[1]),
        .I4(out[2]),
        .I5(\rxeq_cnt_reg[1] ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h2230FF0022FCFF00)) 
    \FSM_sequential_fsm_rx[2]_i_1__2 
       (.I0(\rxeq_control_reg2_reg[0] ),
        .I1(out[0]),
        .I2(rxeqscan_preset_done),
        .I3(out[2]),
        .I4(out[1]),
        .I5(\rxeq_cnt_reg[1] ),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h00FF7000)) 
    adapt_done_cnt_i_1__2
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(\rxeq_control_reg2_reg[1] [0]),
        .I2(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I3(adapt_done_cnt),
        .I4(adapt_done_cnt_reg_n_0),
        .O(adapt_done_cnt_i_1__2_n_0));
  LUT6 #(
    .INIT(64'hF000F101FFFFF101)) 
    adapt_done_cnt_i_2__2
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I3(fsm1),
        .I4(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I5(new_txcoeff_req_reg2),
        .O(adapt_done_cnt));
  FDRE #(
    .INIT(1'b0)) 
    adapt_done_cnt_reg
       (.C(CLK),
        .CE(1'b1),
        .D(adapt_done_cnt_i_1__2_n_0),
        .Q(adapt_done_cnt_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hA8880000)) 
    adapt_done_i_1__2
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(adapt_done_cnt_reg_n_0),
        .I2(\rxeq_control_reg2_reg[1] [1]),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(new_txcoeff_req_reg2),
        .O(adapt_done));
  FDRE #(
    .INIT(1'b0)) 
    adapt_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(adapt_done),
        .Q(rxeqscan_adapt_done),
        .R(RST_CPLLRESET));
  CARRY4 converge_cnt0_carry
       (.CI(1'b0),
        .CO({converge_cnt0_carry_n_0,converge_cnt0_carry_n_1,converge_cnt0_carry_n_2,converge_cnt0_carry_n_3}),
        .CYINIT(\converge_cnt_reg_n_0_[0] ),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[4:1]),
        .S({\converge_cnt_reg_n_0_[4] ,\converge_cnt_reg_n_0_[3] ,\converge_cnt_reg_n_0_[2] ,\converge_cnt_reg_n_0_[1] }));
  CARRY4 converge_cnt0_carry__0
       (.CI(converge_cnt0_carry_n_0),
        .CO({converge_cnt0_carry__0_n_0,converge_cnt0_carry__0_n_1,converge_cnt0_carry__0_n_2,converge_cnt0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[8:5]),
        .S({\converge_cnt_reg_n_0_[8] ,\converge_cnt_reg_n_0_[7] ,\converge_cnt_reg_n_0_[6] ,\converge_cnt_reg_n_0_[5] }));
  CARRY4 converge_cnt0_carry__1
       (.CI(converge_cnt0_carry__0_n_0),
        .CO({converge_cnt0_carry__1_n_0,converge_cnt0_carry__1_n_1,converge_cnt0_carry__1_n_2,converge_cnt0_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[12:9]),
        .S({\converge_cnt_reg_n_0_[12] ,\converge_cnt_reg_n_0_[11] ,\converge_cnt_reg_n_0_[10] ,\converge_cnt_reg_n_0_[9] }));
  CARRY4 converge_cnt0_carry__2
       (.CI(converge_cnt0_carry__1_n_0),
        .CO({converge_cnt0_carry__2_n_0,converge_cnt0_carry__2_n_1,converge_cnt0_carry__2_n_2,converge_cnt0_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[16:13]),
        .S({\converge_cnt_reg_n_0_[16] ,\converge_cnt_reg_n_0_[15] ,\converge_cnt_reg_n_0_[14] ,\converge_cnt_reg_n_0_[13] }));
  CARRY4 converge_cnt0_carry__3
       (.CI(converge_cnt0_carry__2_n_0),
        .CO({converge_cnt0_carry__3_n_0,converge_cnt0_carry__3_n_1,converge_cnt0_carry__3_n_2,converge_cnt0_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[20:17]),
        .S({\converge_cnt_reg_n_0_[20] ,\converge_cnt_reg_n_0_[19] ,\converge_cnt_reg_n_0_[18] ,\converge_cnt_reg_n_0_[17] }));
  CARRY4 converge_cnt0_carry__4
       (.CI(converge_cnt0_carry__3_n_0),
        .CO(NLW_converge_cnt0_carry__4_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_converge_cnt0_carry__4_O_UNCONNECTED[3:1],converge_cnt0[21]}),
        .S({1'b0,1'b0,1'b0,\converge_cnt_reg_n_0_[21] }));
  LUT5 #(
    .INIT(32'h0000AAA2)) 
    \converge_cnt[0]_i_1__5 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(\converge_cnt_reg_n_0_[0] ),
        .O(converge_cnt[0]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[10]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[10]),
        .O(converge_cnt[10]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[11]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[11]),
        .O(converge_cnt[11]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[12]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[12]),
        .O(converge_cnt[12]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[13]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[13]),
        .O(converge_cnt[13]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[14]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[14]),
        .O(converge_cnt[14]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[15]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[15]),
        .O(converge_cnt[15]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[16]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[16]),
        .O(converge_cnt[16]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[17]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[17]),
        .O(converge_cnt[17]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[18]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[18]),
        .O(converge_cnt[18]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[19]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[19]),
        .O(converge_cnt[19]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[1]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[1]),
        .O(converge_cnt[1]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[20]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[20]),
        .O(converge_cnt[20]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[21]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[21]),
        .O(converge_cnt[21]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[2]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[2]),
        .O(converge_cnt[2]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[3]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[3]),
        .O(converge_cnt[3]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[4]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[4]),
        .O(converge_cnt[4]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[5]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[5]),
        .O(converge_cnt[5]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[6]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[6]),
        .O(converge_cnt[6]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[7]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[7]),
        .O(converge_cnt[7]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[8]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[8]),
        .O(converge_cnt[8]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[9]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[9]),
        .O(converge_cnt[9]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[0]),
        .Q(\converge_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[10]),
        .Q(\converge_cnt_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[11]),
        .Q(\converge_cnt_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[12]),
        .Q(\converge_cnt_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[13]),
        .Q(\converge_cnt_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[14]),
        .Q(\converge_cnt_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[15]),
        .Q(\converge_cnt_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[16]),
        .Q(\converge_cnt_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[17]),
        .Q(\converge_cnt_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[18]),
        .Q(\converge_cnt_reg_n_0_[18] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[19]),
        .Q(\converge_cnt_reg_n_0_[19] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[1]),
        .Q(\converge_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[20]),
        .Q(\converge_cnt_reg_n_0_[20] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[21]),
        .Q(\converge_cnt_reg_n_0_[21] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[2]),
        .Q(\converge_cnt_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[3]),
        .Q(\converge_cnt_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[4]),
        .Q(\converge_cnt_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[5]),
        .Q(\converge_cnt_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[6]),
        .Q(\converge_cnt_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[7]),
        .Q(\converge_cnt_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[8]),
        .Q(\converge_cnt_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[9]),
        .Q(\converge_cnt_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [0]),
        .Q(fs_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [1]),
        .Q(fs_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [2]),
        .Q(fs_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [3]),
        .Q(fs_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [4]),
        .Q(fs_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [5]),
        .Q(fs_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[0]),
        .Q(fs_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[1]),
        .Q(fs_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[2]),
        .Q(fs_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[3]),
        .Q(fs_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[4]),
        .Q(fs_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[5]),
        .Q(fs_reg2[5]),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'h02)) 
    fsm1_inferred__2
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(adapt_done_cnt_reg_n_0),
        .I2(\rxeq_control_reg2_reg[1] [0]),
        .O(fsm1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [0]),
        .Q(lf_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [1]),
        .Q(lf_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [2]),
        .Q(lf_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [3]),
        .Q(lf_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [4]),
        .Q(lf_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [5]),
        .Q(lf_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[0]),
        .Q(lf_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[1]),
        .Q(lf_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[2]),
        .Q(lf_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[3]),
        .Q(lf_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[4]),
        .Q(lf_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[5]),
        .Q(lf_reg2[5]),
        .R(RST_CPLLRESET));
  LUT2 #(
    .INIT(4'h8)) 
    new_txcoeff_done_i_1__2
       (.I0(new_txcoeff_req_reg2),
        .I1(\FSM_onehot_fsm_reg_n_0_[4] ),
        .O(new_txcoeff_done));
  FDRE #(
    .INIT(1'b0)) 
    new_txcoeff_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(new_txcoeff_done),
        .Q(rxeqscan_new_txcoeff_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE new_txcoeff_req_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_new_txcoeff_req_reg),
        .Q(new_txcoeff_req_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE new_txcoeff_req_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(new_txcoeff_req_reg1),
        .Q(new_txcoeff_req_reg2),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'hEA)) 
    preset_done_i_1__2
       (.I0(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I1(preset_valid_reg2),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(preset_done));
  FDRE #(
    .INIT(1'b0)) 
    preset_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(preset_done),
        .Q(rxeqscan_preset_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [0]),
        .Q(preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [1]),
        .Q(preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [2]),
        .Q(preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[0]),
        .Q(preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[1]),
        .Q(preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[2]),
        .Q(preset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE preset_valid_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_valid_reg),
        .Q(preset_valid_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE preset_valid_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(preset_valid_reg1),
        .Q(preset_valid_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0080F00000800000)) 
    rxeq_adapt_done_i_1__2
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(rxeq_adapt_done_reg0),
        .I2(out[2]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(USER_RXEQ_ADAPT_DONE),
        .O(rxeq_adapt_done_reg));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT2 #(
    .INIT(4'hE)) 
    rxeq_adapt_done_i_2__2
       (.I0(rxeqscan_adapt_done),
        .I1(rxeq_adapt_done_reg_reg_0),
        .O(rxeq_adapt_done_reg0));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'h44FF4000)) 
    rxeq_adapt_done_reg_i_1__2
       (.I0(out[1]),
        .I1(out[2]),
        .I2(rxeqscan_adapt_done),
        .I3(rxeq_adapt_done_reg_i_2__2_n_0),
        .I4(rxeq_adapt_done_reg_reg_0),
        .O(rxeq_adapt_done_reg_reg));
  LUT6 #(
    .INIT(64'hFFAA000010105555)) 
    rxeq_adapt_done_reg_i_2__2
       (.I0(out[1]),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(\rxeq_control_reg2_reg[1] [0]),
        .I3(rxeqscan_new_txcoeff_done),
        .I4(out[0]),
        .I5(out[2]),
        .O(rxeq_adapt_done_reg_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h0400)) 
    rxeq_new_txcoeff_req_i_1__2
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(out[0]),
        .I2(out[1]),
        .I3(out[2]),
        .O(rxeq_new_txcoeff_req));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [0]),
        .Q(txcoeff_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [10]),
        .Q(txcoeff_reg1[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [11]),
        .Q(txcoeff_reg1[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [12]),
        .Q(txcoeff_reg1[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [13]),
        .Q(txcoeff_reg1[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [14]),
        .Q(txcoeff_reg1[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [15]),
        .Q(txcoeff_reg1[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [16]),
        .Q(txcoeff_reg1[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [17]),
        .Q(txcoeff_reg1[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [1]),
        .Q(txcoeff_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [2]),
        .Q(txcoeff_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [3]),
        .Q(txcoeff_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [4]),
        .Q(txcoeff_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [5]),
        .Q(txcoeff_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [6]),
        .Q(txcoeff_reg1[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [7]),
        .Q(txcoeff_reg1[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [8]),
        .Q(txcoeff_reg1[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [9]),
        .Q(txcoeff_reg1[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[0]),
        .Q(txcoeff_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[10]),
        .Q(txcoeff_reg2[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[11]),
        .Q(txcoeff_reg2[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[12]),
        .Q(txcoeff_reg2[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[13]),
        .Q(txcoeff_reg2[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[14]),
        .Q(txcoeff_reg2[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[15]),
        .Q(txcoeff_reg2[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[16]),
        .Q(txcoeff_reg2[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[17]),
        .Q(txcoeff_reg2[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[1]),
        .Q(txcoeff_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[2]),
        .Q(txcoeff_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[3]),
        .Q(txcoeff_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[4]),
        .Q(txcoeff_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[5]),
        .Q(txcoeff_reg2[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[6]),
        .Q(txcoeff_reg2[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[7]),
        .Q(txcoeff_reg2[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[8]),
        .Q(txcoeff_reg2[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[9]),
        .Q(txcoeff_reg2[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[0]),
        .Q(txpreset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[1]),
        .Q(txpreset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[2]),
        .Q(txpreset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[3]),
        .Q(txpreset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[0]),
        .Q(txpreset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[1]),
        .Q(txpreset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[2]),
        .Q(txpreset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[3]),
        .Q(txpreset_reg2[3]),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_rxeq_scan" *) 
module pcie_7x_0_pcie_7x_0_rxeq_scan_39
   (D,
    rxeq_new_txcoeff_req,
    rxeq_adapt_done_reg_reg,
    rxeq_adapt_done_reg,
    RST_CPLLRESET,
    rxeq_new_txcoeff_req_reg,
    CLK,
    rxeq_preset_valid_reg,
    \rxeq_control_reg2_reg[0] ,
    out,
    \rxeq_cnt_reg[1] ,
    \rxeq_control_reg2_reg[1] ,
    \rxeq_cnt_reg[1]_0 ,
    rxeq_adapt_done_reg_reg_0,
    USER_RXEQ_ADAPT_DONE,
    \rxeq_preset_reg[2] ,
    Q,
    \rxeq_txcoeff_reg[17] ,
    \rxeq_fs_reg[5] ,
    \rxeq_lf_reg[5] );
  output [2:0]D;
  output rxeq_new_txcoeff_req;
  output rxeq_adapt_done_reg_reg;
  output rxeq_adapt_done_reg;
  input RST_CPLLRESET;
  input rxeq_new_txcoeff_req_reg;
  input CLK;
  input rxeq_preset_valid_reg;
  input \rxeq_control_reg2_reg[0] ;
  input [2:0]out;
  input \rxeq_cnt_reg[1] ;
  input [1:0]\rxeq_control_reg2_reg[1] ;
  input \rxeq_cnt_reg[1]_0 ;
  input rxeq_adapt_done_reg_reg_0;
  input USER_RXEQ_ADAPT_DONE;
  input [2:0]\rxeq_preset_reg[2] ;
  input [3:0]Q;
  input [17:0]\rxeq_txcoeff_reg[17] ;
  input [5:0]\rxeq_fs_reg[5] ;
  input [5:0]\rxeq_lf_reg[5] ;

  wire CLK;
  wire [2:0]D;
  wire \FSM_onehot_fsm[1]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm[2]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_2__2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_3__2_n_0 ;
  wire \FSM_onehot_fsm[3]_i_4__1_n_0 ;
  wire \FSM_onehot_fsm[3]_i_5__1_n_0 ;
  wire \FSM_onehot_fsm[3]_i_6__1_n_0 ;
  wire \FSM_onehot_fsm[3]_i_7__1_n_0 ;
  wire \FSM_onehot_fsm[3]_i_8__1_n_0 ;
  wire \FSM_onehot_fsm[3]_i_9__1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_1__2_n_0 ;
  wire \FSM_onehot_fsm[4]_i_2__2_n_0 ;
  wire \FSM_onehot_fsm[4]_i_3__2_n_0 ;
  wire \FSM_onehot_fsm[4]_i_4__1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_5__1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_6__1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_7__1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_8__1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[4] ;
  wire \FSM_sequential_fsm_rx[0]_i_3__1_n_0 ;
  wire [3:0]Q;
  wire RST_CPLLRESET;
  wire USER_RXEQ_ADAPT_DONE;
  wire adapt_done;
  wire adapt_done_cnt;
  wire adapt_done_cnt_i_1__1_n_0;
  wire adapt_done_cnt_reg_n_0;
  wire [21:0]converge_cnt;
  wire [21:1]converge_cnt0;
  wire converge_cnt0_carry__0_n_0;
  wire converge_cnt0_carry__0_n_1;
  wire converge_cnt0_carry__0_n_2;
  wire converge_cnt0_carry__0_n_3;
  wire converge_cnt0_carry__1_n_0;
  wire converge_cnt0_carry__1_n_1;
  wire converge_cnt0_carry__1_n_2;
  wire converge_cnt0_carry__1_n_3;
  wire converge_cnt0_carry__2_n_0;
  wire converge_cnt0_carry__2_n_1;
  wire converge_cnt0_carry__2_n_2;
  wire converge_cnt0_carry__2_n_3;
  wire converge_cnt0_carry__3_n_0;
  wire converge_cnt0_carry__3_n_1;
  wire converge_cnt0_carry__3_n_2;
  wire converge_cnt0_carry__3_n_3;
  wire converge_cnt0_carry_n_0;
  wire converge_cnt0_carry_n_1;
  wire converge_cnt0_carry_n_2;
  wire converge_cnt0_carry_n_3;
  wire \converge_cnt_reg_n_0_[0] ;
  wire \converge_cnt_reg_n_0_[10] ;
  wire \converge_cnt_reg_n_0_[11] ;
  wire \converge_cnt_reg_n_0_[12] ;
  wire \converge_cnt_reg_n_0_[13] ;
  wire \converge_cnt_reg_n_0_[14] ;
  wire \converge_cnt_reg_n_0_[15] ;
  wire \converge_cnt_reg_n_0_[16] ;
  wire \converge_cnt_reg_n_0_[17] ;
  wire \converge_cnt_reg_n_0_[18] ;
  wire \converge_cnt_reg_n_0_[19] ;
  wire \converge_cnt_reg_n_0_[1] ;
  wire \converge_cnt_reg_n_0_[20] ;
  wire \converge_cnt_reg_n_0_[21] ;
  wire \converge_cnt_reg_n_0_[2] ;
  wire \converge_cnt_reg_n_0_[3] ;
  wire \converge_cnt_reg_n_0_[4] ;
  wire \converge_cnt_reg_n_0_[5] ;
  wire \converge_cnt_reg_n_0_[6] ;
  wire \converge_cnt_reg_n_0_[7] ;
  wire \converge_cnt_reg_n_0_[8] ;
  wire \converge_cnt_reg_n_0_[9] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]fs_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]fs_reg2;
  wire fsm1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]lf_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]lf_reg2;
  wire new_txcoeff_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire new_txcoeff_req_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire new_txcoeff_req_reg2;
  wire [2:0]out;
  wire preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]preset_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire preset_valid_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire preset_valid_reg2;
  wire rxeq_adapt_done_reg;
  wire rxeq_adapt_done_reg0;
  wire rxeq_adapt_done_reg_i_2__1_n_0;
  wire rxeq_adapt_done_reg_reg;
  wire rxeq_adapt_done_reg_reg_0;
  wire \rxeq_cnt_reg[1] ;
  wire \rxeq_cnt_reg[1]_0 ;
  wire \rxeq_control_reg2_reg[0] ;
  wire [1:0]\rxeq_control_reg2_reg[1] ;
  wire [5:0]\rxeq_fs_reg[5] ;
  wire [5:0]\rxeq_lf_reg[5] ;
  wire rxeq_new_txcoeff_req;
  wire rxeq_new_txcoeff_req_reg;
  wire [2:0]\rxeq_preset_reg[2] ;
  wire rxeq_preset_valid_reg;
  wire [17:0]\rxeq_txcoeff_reg[17] ;
  wire rxeqscan_adapt_done;
  wire rxeqscan_new_txcoeff_done;
  wire rxeqscan_preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]txcoeff_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]txcoeff_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txpreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txpreset_reg2;
  wire [3:0]NLW_converge_cnt0_carry__4_CO_UNCONNECTED;
  wire [3:1]NLW_converge_cnt0_carry__4_O_UNCONNECTED;

  LUT6 #(
    .INIT(64'h00000F0F0111CDDD)) 
    \FSM_onehot_fsm[1]_i_1__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(new_txcoeff_req_reg2),
        .I3(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I4(preset_valid_reg2),
        .I5(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm[1]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hA8)) 
    \FSM_onehot_fsm[2]_i_1__2 
       (.I0(preset_valid_reg2),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAA8AA)) 
    \FSM_onehot_fsm[3]_i_1__2 
       (.I0(\FSM_onehot_fsm[3]_i_2__2_n_0 ),
        .I1(\FSM_onehot_fsm[3]_i_3__2_n_0 ),
        .I2(\FSM_onehot_fsm[3]_i_4__1_n_0 ),
        .I3(\FSM_onehot_fsm[3]_i_5__1_n_0 ),
        .I4(\FSM_onehot_fsm[3]_i_6__1_n_0 ),
        .I5(\FSM_onehot_fsm[3]_i_7__1_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h00000202FF000202)) 
    \FSM_onehot_fsm[3]_i_2__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(fsm1),
        .I3(new_txcoeff_req_reg2),
        .I4(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I5(preset_valid_reg2),
        .O(\FSM_onehot_fsm[3]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT4 #(
    .INIT(16'hFFD2)) 
    \FSM_onehot_fsm[3]_i_3__2 
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(\rxeq_control_reg2_reg[1] [0]),
        .I2(\converge_cnt_reg_n_0_[21] ),
        .I3(\FSM_onehot_fsm[3]_i_8__1_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_3__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFEB)) 
    \FSM_onehot_fsm[3]_i_4__1 
       (.I0(\FSM_onehot_fsm[4]_i_8__1_n_0 ),
        .I1(\converge_cnt_reg_n_0_[14] ),
        .I2(\converge_cnt_reg_n_0_[13] ),
        .I3(\FSM_onehot_fsm[4]_i_7__1_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_4__1_n_0 ));
  LUT4 #(
    .INIT(16'h005D)) 
    \FSM_onehot_fsm[3]_i_5__1 
       (.I0(\converge_cnt_reg_n_0_[0] ),
        .I1(\converge_cnt_reg_n_0_[2] ),
        .I2(\converge_cnt_reg_n_0_[3] ),
        .I3(\FSM_onehot_fsm[3]_i_9__1_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'hF9FFFFFFFFFFFFFF)) 
    \FSM_onehot_fsm[3]_i_6__1 
       (.I0(\converge_cnt_reg_n_0_[20] ),
        .I1(\converge_cnt_reg_n_0_[21] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I3(\converge_cnt_reg_n_0_[9] ),
        .I4(\converge_cnt_reg_n_0_[11] ),
        .I5(\converge_cnt_reg_n_0_[19] ),
        .O(\FSM_onehot_fsm[3]_i_6__1_n_0 ));
  LUT6 #(
    .INIT(64'h2FFFFFFF2F2FFF22)) 
    \FSM_onehot_fsm[3]_i_7__1 
       (.I0(\converge_cnt_reg_n_0_[14] ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[10] ),
        .I3(\converge_cnt_reg_n_0_[8] ),
        .I4(\converge_cnt_reg_n_0_[13] ),
        .I5(\converge_cnt_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm[3]_i_7__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF4FF)) 
    \FSM_onehot_fsm[3]_i_8__1 
       (.I0(\converge_cnt_reg_n_0_[8] ),
        .I1(\converge_cnt_reg_n_0_[10] ),
        .I2(\converge_cnt_reg_n_0_[5] ),
        .I3(\converge_cnt_reg_n_0_[15] ),
        .I4(\converge_cnt_reg_n_0_[4] ),
        .I5(\converge_cnt_reg_n_0_[6] ),
        .O(\FSM_onehot_fsm[3]_i_8__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFEF)) 
    \FSM_onehot_fsm[3]_i_9__1 
       (.I0(\converge_cnt_reg_n_0_[7] ),
        .I1(\converge_cnt_reg_n_0_[1] ),
        .I2(\converge_cnt_reg_n_0_[16] ),
        .I3(\converge_cnt_reg_n_0_[12] ),
        .O(\FSM_onehot_fsm[3]_i_9__1_n_0 ));
  LUT6 #(
    .INIT(64'hAA080808AA08AAAA)) 
    \FSM_onehot_fsm[4]_i_1__2 
       (.I0(\FSM_onehot_fsm[4]_i_2__2_n_0 ),
        .I1(\FSM_onehot_fsm[4]_i_3__2_n_0 ),
        .I2(\FSM_onehot_fsm[4]_i_4__1_n_0 ),
        .I3(fsm1),
        .I4(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I5(\FSM_onehot_fsm[4]_i_5__1_n_0 ),
        .O(\FSM_onehot_fsm[4]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_onehot_fsm[4]_i_2__2 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .O(\FSM_onehot_fsm[4]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000080000000820)) 
    \FSM_onehot_fsm[4]_i_3__2 
       (.I0(\FSM_onehot_fsm[3]_i_5__1_n_0 ),
        .I1(\converge_cnt_reg_n_0_[13] ),
        .I2(\converge_cnt_reg_n_0_[14] ),
        .I3(\converge_cnt_reg_n_0_[10] ),
        .I4(\FSM_onehot_fsm[4]_i_6__1_n_0 ),
        .I5(\converge_cnt_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm[4]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFBAA)) 
    \FSM_onehot_fsm[4]_i_4__1 
       (.I0(\FSM_onehot_fsm[3]_i_3__2_n_0 ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[21] ),
        .I3(\converge_cnt_reg_n_0_[14] ),
        .I4(\FSM_onehot_fsm[4]_i_7__1_n_0 ),
        .I5(\FSM_onehot_fsm[4]_i_8__1_n_0 ),
        .O(\FSM_onehot_fsm[4]_i_4__1_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \FSM_onehot_fsm[4]_i_5__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(new_txcoeff_req_reg2),
        .O(\FSM_onehot_fsm[4]_i_5__1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \FSM_onehot_fsm[4]_i_6__1 
       (.I0(\converge_cnt_reg_n_0_[9] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I2(\converge_cnt_reg_n_0_[19] ),
        .I3(\converge_cnt_reg_n_0_[11] ),
        .O(\FSM_onehot_fsm[4]_i_6__1_n_0 ));
  LUT4 #(
    .INIT(16'h4FFF)) 
    \FSM_onehot_fsm[4]_i_7__1 
       (.I0(\converge_cnt_reg_n_0_[3] ),
        .I1(\converge_cnt_reg_n_0_[8] ),
        .I2(\converge_cnt_reg_n_0_[17] ),
        .I3(\converge_cnt_reg_n_0_[18] ),
        .O(\FSM_onehot_fsm[4]_i_7__1_n_0 ));
  LUT6 #(
    .INIT(64'h0D0D0D0DFFFF0DFF)) 
    \FSM_onehot_fsm[4]_i_8__1 
       (.I0(\converge_cnt_reg_n_0_[21] ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[14] ),
        .I3(\converge_cnt_reg_n_0_[3] ),
        .I4(\converge_cnt_reg_n_0_[2] ),
        .I5(\converge_cnt_reg_n_0_[0] ),
        .O(\FSM_onehot_fsm[4]_i_8__1_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[1]_i_1__2_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[1] ),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[2]_i_1__2_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[3]_i_1__2_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[4]_i_1__2_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAAAEA)) 
    \FSM_sequential_fsm_rx[0]_i_1__1 
       (.I0(\rxeq_cnt_reg[1]_0 ),
        .I1(out[2]),
        .I2(out[1]),
        .I3(\rxeq_control_reg2_reg[1] [1]),
        .I4(\rxeq_control_reg2_reg[1] [0]),
        .I5(\FSM_sequential_fsm_rx[0]_i_3__1_n_0 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hCCCC0C0C0000BBFF)) 
    \FSM_sequential_fsm_rx[0]_i_3__1 
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(out[0]),
        .I2(rxeqscan_new_txcoeff_done),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(out[1]),
        .I5(out[2]),
        .O(\FSM_sequential_fsm_rx[0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h0CA0FFC00CA00FC0)) 
    \FSM_sequential_fsm_rx[1]_i_1__1 
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(\rxeq_control_reg2_reg[0] ),
        .I2(out[0]),
        .I3(out[1]),
        .I4(out[2]),
        .I5(\rxeq_cnt_reg[1] ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h2230FF0022FCFF00)) 
    \FSM_sequential_fsm_rx[2]_i_1__1 
       (.I0(\rxeq_control_reg2_reg[0] ),
        .I1(out[0]),
        .I2(rxeqscan_preset_done),
        .I3(out[2]),
        .I4(out[1]),
        .I5(\rxeq_cnt_reg[1] ),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h00FF7000)) 
    adapt_done_cnt_i_1__1
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(\rxeq_control_reg2_reg[1] [0]),
        .I2(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I3(adapt_done_cnt),
        .I4(adapt_done_cnt_reg_n_0),
        .O(adapt_done_cnt_i_1__1_n_0));
  LUT6 #(
    .INIT(64'hF000F101FFFFF101)) 
    adapt_done_cnt_i_2__1
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I3(fsm1),
        .I4(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I5(new_txcoeff_req_reg2),
        .O(adapt_done_cnt));
  FDRE #(
    .INIT(1'b0)) 
    adapt_done_cnt_reg
       (.C(CLK),
        .CE(1'b1),
        .D(adapt_done_cnt_i_1__1_n_0),
        .Q(adapt_done_cnt_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hA8880000)) 
    adapt_done_i_1__1
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(adapt_done_cnt_reg_n_0),
        .I2(\rxeq_control_reg2_reg[1] [1]),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(new_txcoeff_req_reg2),
        .O(adapt_done));
  FDRE #(
    .INIT(1'b0)) 
    adapt_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(adapt_done),
        .Q(rxeqscan_adapt_done),
        .R(RST_CPLLRESET));
  CARRY4 converge_cnt0_carry
       (.CI(1'b0),
        .CO({converge_cnt0_carry_n_0,converge_cnt0_carry_n_1,converge_cnt0_carry_n_2,converge_cnt0_carry_n_3}),
        .CYINIT(\converge_cnt_reg_n_0_[0] ),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[4:1]),
        .S({\converge_cnt_reg_n_0_[4] ,\converge_cnt_reg_n_0_[3] ,\converge_cnt_reg_n_0_[2] ,\converge_cnt_reg_n_0_[1] }));
  CARRY4 converge_cnt0_carry__0
       (.CI(converge_cnt0_carry_n_0),
        .CO({converge_cnt0_carry__0_n_0,converge_cnt0_carry__0_n_1,converge_cnt0_carry__0_n_2,converge_cnt0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[8:5]),
        .S({\converge_cnt_reg_n_0_[8] ,\converge_cnt_reg_n_0_[7] ,\converge_cnt_reg_n_0_[6] ,\converge_cnt_reg_n_0_[5] }));
  CARRY4 converge_cnt0_carry__1
       (.CI(converge_cnt0_carry__0_n_0),
        .CO({converge_cnt0_carry__1_n_0,converge_cnt0_carry__1_n_1,converge_cnt0_carry__1_n_2,converge_cnt0_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[12:9]),
        .S({\converge_cnt_reg_n_0_[12] ,\converge_cnt_reg_n_0_[11] ,\converge_cnt_reg_n_0_[10] ,\converge_cnt_reg_n_0_[9] }));
  CARRY4 converge_cnt0_carry__2
       (.CI(converge_cnt0_carry__1_n_0),
        .CO({converge_cnt0_carry__2_n_0,converge_cnt0_carry__2_n_1,converge_cnt0_carry__2_n_2,converge_cnt0_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[16:13]),
        .S({\converge_cnt_reg_n_0_[16] ,\converge_cnt_reg_n_0_[15] ,\converge_cnt_reg_n_0_[14] ,\converge_cnt_reg_n_0_[13] }));
  CARRY4 converge_cnt0_carry__3
       (.CI(converge_cnt0_carry__2_n_0),
        .CO({converge_cnt0_carry__3_n_0,converge_cnt0_carry__3_n_1,converge_cnt0_carry__3_n_2,converge_cnt0_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[20:17]),
        .S({\converge_cnt_reg_n_0_[20] ,\converge_cnt_reg_n_0_[19] ,\converge_cnt_reg_n_0_[18] ,\converge_cnt_reg_n_0_[17] }));
  CARRY4 converge_cnt0_carry__4
       (.CI(converge_cnt0_carry__3_n_0),
        .CO(NLW_converge_cnt0_carry__4_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_converge_cnt0_carry__4_O_UNCONNECTED[3:1],converge_cnt0[21]}),
        .S({1'b0,1'b0,1'b0,\converge_cnt_reg_n_0_[21] }));
  LUT5 #(
    .INIT(32'h0000AAA2)) 
    \converge_cnt[0]_i_1__3 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(\converge_cnt_reg_n_0_[0] ),
        .O(converge_cnt[0]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[10]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[10]),
        .O(converge_cnt[10]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[11]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[11]),
        .O(converge_cnt[11]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[12]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[12]),
        .O(converge_cnt[12]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[13]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[13]),
        .O(converge_cnt[13]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[14]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[14]),
        .O(converge_cnt[14]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[15]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[15]),
        .O(converge_cnt[15]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[16]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[16]),
        .O(converge_cnt[16]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[17]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[17]),
        .O(converge_cnt[17]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[18]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[18]),
        .O(converge_cnt[18]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[19]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[19]),
        .O(converge_cnt[19]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[1]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[1]),
        .O(converge_cnt[1]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[20]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[20]),
        .O(converge_cnt[20]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[21]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[21]),
        .O(converge_cnt[21]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[2]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[2]),
        .O(converge_cnt[2]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[3]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[3]),
        .O(converge_cnt[3]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[4]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[4]),
        .O(converge_cnt[4]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[5]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[5]),
        .O(converge_cnt[5]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[6]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[6]),
        .O(converge_cnt[6]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[7]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[7]),
        .O(converge_cnt[7]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[8]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[8]),
        .O(converge_cnt[8]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[9]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[9]),
        .O(converge_cnt[9]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[0]),
        .Q(\converge_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[10]),
        .Q(\converge_cnt_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[11]),
        .Q(\converge_cnt_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[12]),
        .Q(\converge_cnt_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[13]),
        .Q(\converge_cnt_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[14]),
        .Q(\converge_cnt_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[15]),
        .Q(\converge_cnt_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[16]),
        .Q(\converge_cnt_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[17]),
        .Q(\converge_cnt_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[18]),
        .Q(\converge_cnt_reg_n_0_[18] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[19]),
        .Q(\converge_cnt_reg_n_0_[19] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[1]),
        .Q(\converge_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[20]),
        .Q(\converge_cnt_reg_n_0_[20] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[21]),
        .Q(\converge_cnt_reg_n_0_[21] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[2]),
        .Q(\converge_cnt_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[3]),
        .Q(\converge_cnt_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[4]),
        .Q(\converge_cnt_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[5]),
        .Q(\converge_cnt_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[6]),
        .Q(\converge_cnt_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[7]),
        .Q(\converge_cnt_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[8]),
        .Q(\converge_cnt_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[9]),
        .Q(\converge_cnt_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [0]),
        .Q(fs_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [1]),
        .Q(fs_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [2]),
        .Q(fs_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [3]),
        .Q(fs_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [4]),
        .Q(fs_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [5]),
        .Q(fs_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[0]),
        .Q(fs_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[1]),
        .Q(fs_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[2]),
        .Q(fs_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[3]),
        .Q(fs_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[4]),
        .Q(fs_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[5]),
        .Q(fs_reg2[5]),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'h02)) 
    fsm1_inferred__1
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(adapt_done_cnt_reg_n_0),
        .I2(\rxeq_control_reg2_reg[1] [0]),
        .O(fsm1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [0]),
        .Q(lf_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [1]),
        .Q(lf_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [2]),
        .Q(lf_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [3]),
        .Q(lf_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [4]),
        .Q(lf_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [5]),
        .Q(lf_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[0]),
        .Q(lf_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[1]),
        .Q(lf_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[2]),
        .Q(lf_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[3]),
        .Q(lf_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[4]),
        .Q(lf_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[5]),
        .Q(lf_reg2[5]),
        .R(RST_CPLLRESET));
  LUT2 #(
    .INIT(4'h8)) 
    new_txcoeff_done_i_1__1
       (.I0(new_txcoeff_req_reg2),
        .I1(\FSM_onehot_fsm_reg_n_0_[4] ),
        .O(new_txcoeff_done));
  FDRE #(
    .INIT(1'b0)) 
    new_txcoeff_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(new_txcoeff_done),
        .Q(rxeqscan_new_txcoeff_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE new_txcoeff_req_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_new_txcoeff_req_reg),
        .Q(new_txcoeff_req_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE new_txcoeff_req_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(new_txcoeff_req_reg1),
        .Q(new_txcoeff_req_reg2),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'hEA)) 
    preset_done_i_1__1
       (.I0(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I1(preset_valid_reg2),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(preset_done));
  FDRE #(
    .INIT(1'b0)) 
    preset_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(preset_done),
        .Q(rxeqscan_preset_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [0]),
        .Q(preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [1]),
        .Q(preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [2]),
        .Q(preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[0]),
        .Q(preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[1]),
        .Q(preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[2]),
        .Q(preset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE preset_valid_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_valid_reg),
        .Q(preset_valid_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE preset_valid_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(preset_valid_reg1),
        .Q(preset_valid_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0080F00000800000)) 
    rxeq_adapt_done_i_1__1
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(rxeq_adapt_done_reg0),
        .I2(out[2]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(USER_RXEQ_ADAPT_DONE),
        .O(rxeq_adapt_done_reg));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT2 #(
    .INIT(4'hE)) 
    rxeq_adapt_done_i_2__1
       (.I0(rxeqscan_adapt_done),
        .I1(rxeq_adapt_done_reg_reg_0),
        .O(rxeq_adapt_done_reg0));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'h44FF4000)) 
    rxeq_adapt_done_reg_i_1__1
       (.I0(out[1]),
        .I1(out[2]),
        .I2(rxeqscan_adapt_done),
        .I3(rxeq_adapt_done_reg_i_2__1_n_0),
        .I4(rxeq_adapt_done_reg_reg_0),
        .O(rxeq_adapt_done_reg_reg));
  LUT6 #(
    .INIT(64'hFFAA000010105555)) 
    rxeq_adapt_done_reg_i_2__1
       (.I0(out[1]),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(\rxeq_control_reg2_reg[1] [0]),
        .I3(rxeqscan_new_txcoeff_done),
        .I4(out[0]),
        .I5(out[2]),
        .O(rxeq_adapt_done_reg_i_2__1_n_0));
  LUT4 #(
    .INIT(16'h0400)) 
    rxeq_new_txcoeff_req_i_1__1
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(out[0]),
        .I2(out[1]),
        .I3(out[2]),
        .O(rxeq_new_txcoeff_req));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [0]),
        .Q(txcoeff_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [10]),
        .Q(txcoeff_reg1[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [11]),
        .Q(txcoeff_reg1[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [12]),
        .Q(txcoeff_reg1[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [13]),
        .Q(txcoeff_reg1[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [14]),
        .Q(txcoeff_reg1[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [15]),
        .Q(txcoeff_reg1[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [16]),
        .Q(txcoeff_reg1[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [17]),
        .Q(txcoeff_reg1[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [1]),
        .Q(txcoeff_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [2]),
        .Q(txcoeff_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [3]),
        .Q(txcoeff_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [4]),
        .Q(txcoeff_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [5]),
        .Q(txcoeff_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [6]),
        .Q(txcoeff_reg1[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [7]),
        .Q(txcoeff_reg1[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [8]),
        .Q(txcoeff_reg1[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [9]),
        .Q(txcoeff_reg1[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[0]),
        .Q(txcoeff_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[10]),
        .Q(txcoeff_reg2[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[11]),
        .Q(txcoeff_reg2[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[12]),
        .Q(txcoeff_reg2[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[13]),
        .Q(txcoeff_reg2[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[14]),
        .Q(txcoeff_reg2[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[15]),
        .Q(txcoeff_reg2[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[16]),
        .Q(txcoeff_reg2[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[17]),
        .Q(txcoeff_reg2[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[1]),
        .Q(txcoeff_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[2]),
        .Q(txcoeff_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[3]),
        .Q(txcoeff_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[4]),
        .Q(txcoeff_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[5]),
        .Q(txcoeff_reg2[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[6]),
        .Q(txcoeff_reg2[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[7]),
        .Q(txcoeff_reg2[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[8]),
        .Q(txcoeff_reg2[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[9]),
        .Q(txcoeff_reg2[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[0]),
        .Q(txpreset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[1]),
        .Q(txpreset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[2]),
        .Q(txpreset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[3]),
        .Q(txpreset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[0]),
        .Q(txpreset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[1]),
        .Q(txpreset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[2]),
        .Q(txpreset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[3]),
        .Q(txpreset_reg2[3]),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_rxeq_scan" *) 
module pcie_7x_0_pcie_7x_0_rxeq_scan_41
   (D,
    rxeq_new_txcoeff_req,
    rxeq_adapt_done_reg_reg,
    rxeq_adapt_done_reg,
    RST_CPLLRESET,
    rxeq_new_txcoeff_req_reg,
    CLK,
    rxeq_preset_valid_reg,
    \rxeq_control_reg2_reg[0] ,
    out,
    \rxeq_cnt_reg[1] ,
    \rxeq_control_reg2_reg[1] ,
    \rxeq_cnt_reg[1]_0 ,
    rxeq_adapt_done_reg_reg_0,
    USER_RXEQ_ADAPT_DONE,
    \rxeq_preset_reg[2] ,
    Q,
    \rxeq_txcoeff_reg[17] ,
    \rxeq_fs_reg[5] ,
    \rxeq_lf_reg[5] );
  output [2:0]D;
  output rxeq_new_txcoeff_req;
  output rxeq_adapt_done_reg_reg;
  output rxeq_adapt_done_reg;
  input RST_CPLLRESET;
  input rxeq_new_txcoeff_req_reg;
  input CLK;
  input rxeq_preset_valid_reg;
  input \rxeq_control_reg2_reg[0] ;
  input [2:0]out;
  input \rxeq_cnt_reg[1] ;
  input [1:0]\rxeq_control_reg2_reg[1] ;
  input \rxeq_cnt_reg[1]_0 ;
  input rxeq_adapt_done_reg_reg_0;
  input USER_RXEQ_ADAPT_DONE;
  input [2:0]\rxeq_preset_reg[2] ;
  input [3:0]Q;
  input [17:0]\rxeq_txcoeff_reg[17] ;
  input [5:0]\rxeq_fs_reg[5] ;
  input [5:0]\rxeq_lf_reg[5] ;

  wire CLK;
  wire [2:0]D;
  wire \FSM_onehot_fsm[1]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm[2]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm[3]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm[3]_i_2__1_n_0 ;
  wire \FSM_onehot_fsm[3]_i_3__1_n_0 ;
  wire \FSM_onehot_fsm[3]_i_4__0_n_0 ;
  wire \FSM_onehot_fsm[3]_i_5__0_n_0 ;
  wire \FSM_onehot_fsm[3]_i_6__0_n_0 ;
  wire \FSM_onehot_fsm[3]_i_7__0_n_0 ;
  wire \FSM_onehot_fsm[3]_i_8__0_n_0 ;
  wire \FSM_onehot_fsm[3]_i_9__0_n_0 ;
  wire \FSM_onehot_fsm[4]_i_1__1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_2__1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_3__1_n_0 ;
  wire \FSM_onehot_fsm[4]_i_4__0_n_0 ;
  wire \FSM_onehot_fsm[4]_i_5__0_n_0 ;
  wire \FSM_onehot_fsm[4]_i_6__0_n_0 ;
  wire \FSM_onehot_fsm[4]_i_7__0_n_0 ;
  wire \FSM_onehot_fsm[4]_i_8__0_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[4] ;
  wire \FSM_sequential_fsm_rx[0]_i_3__0_n_0 ;
  wire [3:0]Q;
  wire RST_CPLLRESET;
  wire USER_RXEQ_ADAPT_DONE;
  wire adapt_done;
  wire adapt_done_cnt;
  wire adapt_done_cnt_i_1__0_n_0;
  wire adapt_done_cnt_reg_n_0;
  wire [21:0]converge_cnt;
  wire [21:1]converge_cnt0;
  wire converge_cnt0_carry__0_n_0;
  wire converge_cnt0_carry__0_n_1;
  wire converge_cnt0_carry__0_n_2;
  wire converge_cnt0_carry__0_n_3;
  wire converge_cnt0_carry__1_n_0;
  wire converge_cnt0_carry__1_n_1;
  wire converge_cnt0_carry__1_n_2;
  wire converge_cnt0_carry__1_n_3;
  wire converge_cnt0_carry__2_n_0;
  wire converge_cnt0_carry__2_n_1;
  wire converge_cnt0_carry__2_n_2;
  wire converge_cnt0_carry__2_n_3;
  wire converge_cnt0_carry__3_n_0;
  wire converge_cnt0_carry__3_n_1;
  wire converge_cnt0_carry__3_n_2;
  wire converge_cnt0_carry__3_n_3;
  wire converge_cnt0_carry_n_0;
  wire converge_cnt0_carry_n_1;
  wire converge_cnt0_carry_n_2;
  wire converge_cnt0_carry_n_3;
  wire \converge_cnt_reg_n_0_[0] ;
  wire \converge_cnt_reg_n_0_[10] ;
  wire \converge_cnt_reg_n_0_[11] ;
  wire \converge_cnt_reg_n_0_[12] ;
  wire \converge_cnt_reg_n_0_[13] ;
  wire \converge_cnt_reg_n_0_[14] ;
  wire \converge_cnt_reg_n_0_[15] ;
  wire \converge_cnt_reg_n_0_[16] ;
  wire \converge_cnt_reg_n_0_[17] ;
  wire \converge_cnt_reg_n_0_[18] ;
  wire \converge_cnt_reg_n_0_[19] ;
  wire \converge_cnt_reg_n_0_[1] ;
  wire \converge_cnt_reg_n_0_[20] ;
  wire \converge_cnt_reg_n_0_[21] ;
  wire \converge_cnt_reg_n_0_[2] ;
  wire \converge_cnt_reg_n_0_[3] ;
  wire \converge_cnt_reg_n_0_[4] ;
  wire \converge_cnt_reg_n_0_[5] ;
  wire \converge_cnt_reg_n_0_[6] ;
  wire \converge_cnt_reg_n_0_[7] ;
  wire \converge_cnt_reg_n_0_[8] ;
  wire \converge_cnt_reg_n_0_[9] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]fs_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]fs_reg2;
  wire fsm1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]lf_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]lf_reg2;
  wire new_txcoeff_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire new_txcoeff_req_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire new_txcoeff_req_reg2;
  wire [2:0]out;
  wire preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]preset_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire preset_valid_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire preset_valid_reg2;
  wire rxeq_adapt_done_reg;
  wire rxeq_adapt_done_reg0;
  wire rxeq_adapt_done_reg_i_2__0_n_0;
  wire rxeq_adapt_done_reg_reg;
  wire rxeq_adapt_done_reg_reg_0;
  wire \rxeq_cnt_reg[1] ;
  wire \rxeq_cnt_reg[1]_0 ;
  wire \rxeq_control_reg2_reg[0] ;
  wire [1:0]\rxeq_control_reg2_reg[1] ;
  wire [5:0]\rxeq_fs_reg[5] ;
  wire [5:0]\rxeq_lf_reg[5] ;
  wire rxeq_new_txcoeff_req;
  wire rxeq_new_txcoeff_req_reg;
  wire [2:0]\rxeq_preset_reg[2] ;
  wire rxeq_preset_valid_reg;
  wire [17:0]\rxeq_txcoeff_reg[17] ;
  wire rxeqscan_adapt_done;
  wire rxeqscan_new_txcoeff_done;
  wire rxeqscan_preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]txcoeff_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]txcoeff_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txpreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txpreset_reg2;
  wire [3:0]NLW_converge_cnt0_carry__4_CO_UNCONNECTED;
  wire [3:1]NLW_converge_cnt0_carry__4_O_UNCONNECTED;

  LUT6 #(
    .INIT(64'h00000F0F0111CDDD)) 
    \FSM_onehot_fsm[1]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(new_txcoeff_req_reg2),
        .I3(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I4(preset_valid_reg2),
        .I5(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm[1]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hA8)) 
    \FSM_onehot_fsm[2]_i_1__1 
       (.I0(preset_valid_reg2),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAA8AA)) 
    \FSM_onehot_fsm[3]_i_1__1 
       (.I0(\FSM_onehot_fsm[3]_i_2__1_n_0 ),
        .I1(\FSM_onehot_fsm[3]_i_3__1_n_0 ),
        .I2(\FSM_onehot_fsm[3]_i_4__0_n_0 ),
        .I3(\FSM_onehot_fsm[3]_i_5__0_n_0 ),
        .I4(\FSM_onehot_fsm[3]_i_6__0_n_0 ),
        .I5(\FSM_onehot_fsm[3]_i_7__0_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h00000202FF000202)) 
    \FSM_onehot_fsm[3]_i_2__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(fsm1),
        .I3(new_txcoeff_req_reg2),
        .I4(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I5(preset_valid_reg2),
        .O(\FSM_onehot_fsm[3]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT4 #(
    .INIT(16'hFFD2)) 
    \FSM_onehot_fsm[3]_i_3__1 
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(\rxeq_control_reg2_reg[1] [0]),
        .I2(\converge_cnt_reg_n_0_[21] ),
        .I3(\FSM_onehot_fsm[3]_i_8__0_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_3__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFEB)) 
    \FSM_onehot_fsm[3]_i_4__0 
       (.I0(\FSM_onehot_fsm[4]_i_8__0_n_0 ),
        .I1(\converge_cnt_reg_n_0_[14] ),
        .I2(\converge_cnt_reg_n_0_[13] ),
        .I3(\FSM_onehot_fsm[4]_i_7__0_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'h005D)) 
    \FSM_onehot_fsm[3]_i_5__0 
       (.I0(\converge_cnt_reg_n_0_[0] ),
        .I1(\converge_cnt_reg_n_0_[2] ),
        .I2(\converge_cnt_reg_n_0_[3] ),
        .I3(\FSM_onehot_fsm[3]_i_9__0_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'hF9FFFFFFFFFFFFFF)) 
    \FSM_onehot_fsm[3]_i_6__0 
       (.I0(\converge_cnt_reg_n_0_[20] ),
        .I1(\converge_cnt_reg_n_0_[21] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I3(\converge_cnt_reg_n_0_[9] ),
        .I4(\converge_cnt_reg_n_0_[11] ),
        .I5(\converge_cnt_reg_n_0_[19] ),
        .O(\FSM_onehot_fsm[3]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h2FFFFFFF2F2FFF22)) 
    \FSM_onehot_fsm[3]_i_7__0 
       (.I0(\converge_cnt_reg_n_0_[14] ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[10] ),
        .I3(\converge_cnt_reg_n_0_[8] ),
        .I4(\converge_cnt_reg_n_0_[13] ),
        .I5(\converge_cnt_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm[3]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF4FF)) 
    \FSM_onehot_fsm[3]_i_8__0 
       (.I0(\converge_cnt_reg_n_0_[8] ),
        .I1(\converge_cnt_reg_n_0_[10] ),
        .I2(\converge_cnt_reg_n_0_[5] ),
        .I3(\converge_cnt_reg_n_0_[15] ),
        .I4(\converge_cnt_reg_n_0_[4] ),
        .I5(\converge_cnt_reg_n_0_[6] ),
        .O(\FSM_onehot_fsm[3]_i_8__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFEF)) 
    \FSM_onehot_fsm[3]_i_9__0 
       (.I0(\converge_cnt_reg_n_0_[7] ),
        .I1(\converge_cnt_reg_n_0_[1] ),
        .I2(\converge_cnt_reg_n_0_[16] ),
        .I3(\converge_cnt_reg_n_0_[12] ),
        .O(\FSM_onehot_fsm[3]_i_9__0_n_0 ));
  LUT6 #(
    .INIT(64'hAA080808AA08AAAA)) 
    \FSM_onehot_fsm[4]_i_1__1 
       (.I0(\FSM_onehot_fsm[4]_i_2__1_n_0 ),
        .I1(\FSM_onehot_fsm[4]_i_3__1_n_0 ),
        .I2(\FSM_onehot_fsm[4]_i_4__0_n_0 ),
        .I3(fsm1),
        .I4(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I5(\FSM_onehot_fsm[4]_i_5__0_n_0 ),
        .O(\FSM_onehot_fsm[4]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_onehot_fsm[4]_i_2__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .O(\FSM_onehot_fsm[4]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000080000000820)) 
    \FSM_onehot_fsm[4]_i_3__1 
       (.I0(\FSM_onehot_fsm[3]_i_5__0_n_0 ),
        .I1(\converge_cnt_reg_n_0_[13] ),
        .I2(\converge_cnt_reg_n_0_[14] ),
        .I3(\converge_cnt_reg_n_0_[10] ),
        .I4(\FSM_onehot_fsm[4]_i_6__0_n_0 ),
        .I5(\converge_cnt_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm[4]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFBAA)) 
    \FSM_onehot_fsm[4]_i_4__0 
       (.I0(\FSM_onehot_fsm[3]_i_3__1_n_0 ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[21] ),
        .I3(\converge_cnt_reg_n_0_[14] ),
        .I4(\FSM_onehot_fsm[4]_i_7__0_n_0 ),
        .I5(\FSM_onehot_fsm[4]_i_8__0_n_0 ),
        .O(\FSM_onehot_fsm[4]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \FSM_onehot_fsm[4]_i_5__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(new_txcoeff_req_reg2),
        .O(\FSM_onehot_fsm[4]_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \FSM_onehot_fsm[4]_i_6__0 
       (.I0(\converge_cnt_reg_n_0_[9] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I2(\converge_cnt_reg_n_0_[19] ),
        .I3(\converge_cnt_reg_n_0_[11] ),
        .O(\FSM_onehot_fsm[4]_i_6__0_n_0 ));
  LUT4 #(
    .INIT(16'h4FFF)) 
    \FSM_onehot_fsm[4]_i_7__0 
       (.I0(\converge_cnt_reg_n_0_[3] ),
        .I1(\converge_cnt_reg_n_0_[8] ),
        .I2(\converge_cnt_reg_n_0_[17] ),
        .I3(\converge_cnt_reg_n_0_[18] ),
        .O(\FSM_onehot_fsm[4]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h0D0D0D0DFFFF0DFF)) 
    \FSM_onehot_fsm[4]_i_8__0 
       (.I0(\converge_cnt_reg_n_0_[21] ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[14] ),
        .I3(\converge_cnt_reg_n_0_[3] ),
        .I4(\converge_cnt_reg_n_0_[2] ),
        .I5(\converge_cnt_reg_n_0_[0] ),
        .O(\FSM_onehot_fsm[4]_i_8__0_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[1]_i_1__1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[1] ),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[2]_i_1__1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[3]_i_1__1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[4]_i_1__1_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAAAEA)) 
    \FSM_sequential_fsm_rx[0]_i_1__0 
       (.I0(\rxeq_cnt_reg[1]_0 ),
        .I1(out[2]),
        .I2(out[1]),
        .I3(\rxeq_control_reg2_reg[1] [1]),
        .I4(\rxeq_control_reg2_reg[1] [0]),
        .I5(\FSM_sequential_fsm_rx[0]_i_3__0_n_0 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hCCCC0C0C0000BBFF)) 
    \FSM_sequential_fsm_rx[0]_i_3__0 
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(out[0]),
        .I2(rxeqscan_new_txcoeff_done),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(out[1]),
        .I5(out[2]),
        .O(\FSM_sequential_fsm_rx[0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0CA0FFC00CA00FC0)) 
    \FSM_sequential_fsm_rx[1]_i_1__0 
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(\rxeq_control_reg2_reg[0] ),
        .I2(out[0]),
        .I3(out[1]),
        .I4(out[2]),
        .I5(\rxeq_cnt_reg[1] ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h2230FF0022FCFF00)) 
    \FSM_sequential_fsm_rx[2]_i_1__0 
       (.I0(\rxeq_control_reg2_reg[0] ),
        .I1(out[0]),
        .I2(rxeqscan_preset_done),
        .I3(out[2]),
        .I4(out[1]),
        .I5(\rxeq_cnt_reg[1] ),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h00FF7000)) 
    adapt_done_cnt_i_1__0
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(\rxeq_control_reg2_reg[1] [0]),
        .I2(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I3(adapt_done_cnt),
        .I4(adapt_done_cnt_reg_n_0),
        .O(adapt_done_cnt_i_1__0_n_0));
  LUT6 #(
    .INIT(64'hF000F101FFFFF101)) 
    adapt_done_cnt_i_2__0
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I3(fsm1),
        .I4(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I5(new_txcoeff_req_reg2),
        .O(adapt_done_cnt));
  FDRE #(
    .INIT(1'b0)) 
    adapt_done_cnt_reg
       (.C(CLK),
        .CE(1'b1),
        .D(adapt_done_cnt_i_1__0_n_0),
        .Q(adapt_done_cnt_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hA8880000)) 
    adapt_done_i_1__0
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(adapt_done_cnt_reg_n_0),
        .I2(\rxeq_control_reg2_reg[1] [1]),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(new_txcoeff_req_reg2),
        .O(adapt_done));
  FDRE #(
    .INIT(1'b0)) 
    adapt_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(adapt_done),
        .Q(rxeqscan_adapt_done),
        .R(RST_CPLLRESET));
  CARRY4 converge_cnt0_carry
       (.CI(1'b0),
        .CO({converge_cnt0_carry_n_0,converge_cnt0_carry_n_1,converge_cnt0_carry_n_2,converge_cnt0_carry_n_3}),
        .CYINIT(\converge_cnt_reg_n_0_[0] ),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[4:1]),
        .S({\converge_cnt_reg_n_0_[4] ,\converge_cnt_reg_n_0_[3] ,\converge_cnt_reg_n_0_[2] ,\converge_cnt_reg_n_0_[1] }));
  CARRY4 converge_cnt0_carry__0
       (.CI(converge_cnt0_carry_n_0),
        .CO({converge_cnt0_carry__0_n_0,converge_cnt0_carry__0_n_1,converge_cnt0_carry__0_n_2,converge_cnt0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[8:5]),
        .S({\converge_cnt_reg_n_0_[8] ,\converge_cnt_reg_n_0_[7] ,\converge_cnt_reg_n_0_[6] ,\converge_cnt_reg_n_0_[5] }));
  CARRY4 converge_cnt0_carry__1
       (.CI(converge_cnt0_carry__0_n_0),
        .CO({converge_cnt0_carry__1_n_0,converge_cnt0_carry__1_n_1,converge_cnt0_carry__1_n_2,converge_cnt0_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[12:9]),
        .S({\converge_cnt_reg_n_0_[12] ,\converge_cnt_reg_n_0_[11] ,\converge_cnt_reg_n_0_[10] ,\converge_cnt_reg_n_0_[9] }));
  CARRY4 converge_cnt0_carry__2
       (.CI(converge_cnt0_carry__1_n_0),
        .CO({converge_cnt0_carry__2_n_0,converge_cnt0_carry__2_n_1,converge_cnt0_carry__2_n_2,converge_cnt0_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[16:13]),
        .S({\converge_cnt_reg_n_0_[16] ,\converge_cnt_reg_n_0_[15] ,\converge_cnt_reg_n_0_[14] ,\converge_cnt_reg_n_0_[13] }));
  CARRY4 converge_cnt0_carry__3
       (.CI(converge_cnt0_carry__2_n_0),
        .CO({converge_cnt0_carry__3_n_0,converge_cnt0_carry__3_n_1,converge_cnt0_carry__3_n_2,converge_cnt0_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[20:17]),
        .S({\converge_cnt_reg_n_0_[20] ,\converge_cnt_reg_n_0_[19] ,\converge_cnt_reg_n_0_[18] ,\converge_cnt_reg_n_0_[17] }));
  CARRY4 converge_cnt0_carry__4
       (.CI(converge_cnt0_carry__3_n_0),
        .CO(NLW_converge_cnt0_carry__4_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_converge_cnt0_carry__4_O_UNCONNECTED[3:1],converge_cnt0[21]}),
        .S({1'b0,1'b0,1'b0,\converge_cnt_reg_n_0_[21] }));
  LUT5 #(
    .INIT(32'h0000AAA2)) 
    \converge_cnt[0]_i_1__1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(\converge_cnt_reg_n_0_[0] ),
        .O(converge_cnt[0]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[10]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[10]),
        .O(converge_cnt[10]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[11]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[11]),
        .O(converge_cnt[11]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[12]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[12]),
        .O(converge_cnt[12]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[13]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[13]),
        .O(converge_cnt[13]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[14]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[14]),
        .O(converge_cnt[14]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[15]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[15]),
        .O(converge_cnt[15]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[16]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[16]),
        .O(converge_cnt[16]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[17]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[17]),
        .O(converge_cnt[17]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[18]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[18]),
        .O(converge_cnt[18]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[19]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[19]),
        .O(converge_cnt[19]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[1]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[1]),
        .O(converge_cnt[1]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[20]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[20]),
        .O(converge_cnt[20]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[21]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[21]),
        .O(converge_cnt[21]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[2]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[2]),
        .O(converge_cnt[2]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[3]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[3]),
        .O(converge_cnt[3]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[4]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[4]),
        .O(converge_cnt[4]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[5]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[5]),
        .O(converge_cnt[5]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[6]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[6]),
        .O(converge_cnt[6]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[7]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[7]),
        .O(converge_cnt[7]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[8]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[8]),
        .O(converge_cnt[8]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[9]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[9]),
        .O(converge_cnt[9]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[0]),
        .Q(\converge_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[10]),
        .Q(\converge_cnt_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[11]),
        .Q(\converge_cnt_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[12]),
        .Q(\converge_cnt_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[13]),
        .Q(\converge_cnt_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[14]),
        .Q(\converge_cnt_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[15]),
        .Q(\converge_cnt_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[16]),
        .Q(\converge_cnt_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[17]),
        .Q(\converge_cnt_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[18]),
        .Q(\converge_cnt_reg_n_0_[18] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[19]),
        .Q(\converge_cnt_reg_n_0_[19] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[1]),
        .Q(\converge_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[20]),
        .Q(\converge_cnt_reg_n_0_[20] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[21]),
        .Q(\converge_cnt_reg_n_0_[21] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[2]),
        .Q(\converge_cnt_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[3]),
        .Q(\converge_cnt_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[4]),
        .Q(\converge_cnt_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[5]),
        .Q(\converge_cnt_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[6]),
        .Q(\converge_cnt_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[7]),
        .Q(\converge_cnt_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[8]),
        .Q(\converge_cnt_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[9]),
        .Q(\converge_cnt_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [0]),
        .Q(fs_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [1]),
        .Q(fs_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [2]),
        .Q(fs_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [3]),
        .Q(fs_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [4]),
        .Q(fs_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [5]),
        .Q(fs_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[0]),
        .Q(fs_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[1]),
        .Q(fs_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[2]),
        .Q(fs_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[3]),
        .Q(fs_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[4]),
        .Q(fs_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[5]),
        .Q(fs_reg2[5]),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'h02)) 
    fsm1_inferred__0
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(adapt_done_cnt_reg_n_0),
        .I2(\rxeq_control_reg2_reg[1] [0]),
        .O(fsm1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [0]),
        .Q(lf_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [1]),
        .Q(lf_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [2]),
        .Q(lf_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [3]),
        .Q(lf_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [4]),
        .Q(lf_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [5]),
        .Q(lf_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[0]),
        .Q(lf_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[1]),
        .Q(lf_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[2]),
        .Q(lf_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[3]),
        .Q(lf_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[4]),
        .Q(lf_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[5]),
        .Q(lf_reg2[5]),
        .R(RST_CPLLRESET));
  LUT2 #(
    .INIT(4'h8)) 
    new_txcoeff_done_i_1__0
       (.I0(new_txcoeff_req_reg2),
        .I1(\FSM_onehot_fsm_reg_n_0_[4] ),
        .O(new_txcoeff_done));
  FDRE #(
    .INIT(1'b0)) 
    new_txcoeff_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(new_txcoeff_done),
        .Q(rxeqscan_new_txcoeff_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE new_txcoeff_req_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_new_txcoeff_req_reg),
        .Q(new_txcoeff_req_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE new_txcoeff_req_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(new_txcoeff_req_reg1),
        .Q(new_txcoeff_req_reg2),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'hEA)) 
    preset_done_i_1__0
       (.I0(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I1(preset_valid_reg2),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(preset_done));
  FDRE #(
    .INIT(1'b0)) 
    preset_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(preset_done),
        .Q(rxeqscan_preset_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [0]),
        .Q(preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [1]),
        .Q(preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [2]),
        .Q(preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[0]),
        .Q(preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[1]),
        .Q(preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[2]),
        .Q(preset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE preset_valid_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_valid_reg),
        .Q(preset_valid_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE preset_valid_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(preset_valid_reg1),
        .Q(preset_valid_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0080F00000800000)) 
    rxeq_adapt_done_i_1__0
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(rxeq_adapt_done_reg0),
        .I2(out[2]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(USER_RXEQ_ADAPT_DONE),
        .O(rxeq_adapt_done_reg));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT2 #(
    .INIT(4'hE)) 
    rxeq_adapt_done_i_2__0
       (.I0(rxeqscan_adapt_done),
        .I1(rxeq_adapt_done_reg_reg_0),
        .O(rxeq_adapt_done_reg0));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'h44FF4000)) 
    rxeq_adapt_done_reg_i_1__0
       (.I0(out[1]),
        .I1(out[2]),
        .I2(rxeqscan_adapt_done),
        .I3(rxeq_adapt_done_reg_i_2__0_n_0),
        .I4(rxeq_adapt_done_reg_reg_0),
        .O(rxeq_adapt_done_reg_reg));
  LUT6 #(
    .INIT(64'hFFAA000010105555)) 
    rxeq_adapt_done_reg_i_2__0
       (.I0(out[1]),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(\rxeq_control_reg2_reg[1] [0]),
        .I3(rxeqscan_new_txcoeff_done),
        .I4(out[0]),
        .I5(out[2]),
        .O(rxeq_adapt_done_reg_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h0400)) 
    rxeq_new_txcoeff_req_i_1__0
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(out[0]),
        .I2(out[1]),
        .I3(out[2]),
        .O(rxeq_new_txcoeff_req));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [0]),
        .Q(txcoeff_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [10]),
        .Q(txcoeff_reg1[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [11]),
        .Q(txcoeff_reg1[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [12]),
        .Q(txcoeff_reg1[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [13]),
        .Q(txcoeff_reg1[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [14]),
        .Q(txcoeff_reg1[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [15]),
        .Q(txcoeff_reg1[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [16]),
        .Q(txcoeff_reg1[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [17]),
        .Q(txcoeff_reg1[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [1]),
        .Q(txcoeff_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [2]),
        .Q(txcoeff_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [3]),
        .Q(txcoeff_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [4]),
        .Q(txcoeff_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [5]),
        .Q(txcoeff_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [6]),
        .Q(txcoeff_reg1[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [7]),
        .Q(txcoeff_reg1[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [8]),
        .Q(txcoeff_reg1[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [9]),
        .Q(txcoeff_reg1[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[0]),
        .Q(txcoeff_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[10]),
        .Q(txcoeff_reg2[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[11]),
        .Q(txcoeff_reg2[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[12]),
        .Q(txcoeff_reg2[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[13]),
        .Q(txcoeff_reg2[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[14]),
        .Q(txcoeff_reg2[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[15]),
        .Q(txcoeff_reg2[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[16]),
        .Q(txcoeff_reg2[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[17]),
        .Q(txcoeff_reg2[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[1]),
        .Q(txcoeff_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[2]),
        .Q(txcoeff_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[3]),
        .Q(txcoeff_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[4]),
        .Q(txcoeff_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[5]),
        .Q(txcoeff_reg2[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[6]),
        .Q(txcoeff_reg2[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[7]),
        .Q(txcoeff_reg2[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[8]),
        .Q(txcoeff_reg2[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[9]),
        .Q(txcoeff_reg2[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[0]),
        .Q(txpreset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[1]),
        .Q(txpreset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[2]),
        .Q(txpreset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[3]),
        .Q(txpreset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[0]),
        .Q(txpreset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[1]),
        .Q(txpreset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[2]),
        .Q(txpreset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[3]),
        .Q(txpreset_reg2[3]),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_rxeq_scan" *) 
module pcie_7x_0_pcie_7x_0_rxeq_scan_43
   (D,
    rxeq_new_txcoeff_req,
    rxeq_adapt_done_reg_reg,
    rxeq_adapt_done_reg,
    RST_CPLLRESET,
    rxeq_new_txcoeff_req_reg,
    CLK,
    rxeq_preset_valid_reg,
    \rxeq_control_reg2_reg[0] ,
    out,
    \rxeq_cnt_reg[1] ,
    \rxeq_control_reg2_reg[1] ,
    \rxeq_cnt_reg[1]_0 ,
    rxeq_adapt_done_reg_reg_0,
    USER_RXEQ_ADAPT_DONE,
    \rxeq_preset_reg[2] ,
    Q,
    \rxeq_txcoeff_reg[17] ,
    \rxeq_fs_reg[5] ,
    \rxeq_lf_reg[5] );
  output [2:0]D;
  output rxeq_new_txcoeff_req;
  output rxeq_adapt_done_reg_reg;
  output rxeq_adapt_done_reg;
  input RST_CPLLRESET;
  input rxeq_new_txcoeff_req_reg;
  input CLK;
  input rxeq_preset_valid_reg;
  input \rxeq_control_reg2_reg[0] ;
  input [2:0]out;
  input \rxeq_cnt_reg[1] ;
  input [1:0]\rxeq_control_reg2_reg[1] ;
  input \rxeq_cnt_reg[1]_0 ;
  input rxeq_adapt_done_reg_reg_0;
  input USER_RXEQ_ADAPT_DONE;
  input [2:0]\rxeq_preset_reg[2] ;
  input [3:0]Q;
  input [17:0]\rxeq_txcoeff_reg[17] ;
  input [5:0]\rxeq_fs_reg[5] ;
  input [5:0]\rxeq_lf_reg[5] ;

  wire CLK;
  wire [2:0]D;
  wire \FSM_onehot_fsm[1]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm[2]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm[3]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm[3]_i_2__0_n_0 ;
  wire \FSM_onehot_fsm[3]_i_3__0_n_0 ;
  wire \FSM_onehot_fsm[3]_i_4_n_0 ;
  wire \FSM_onehot_fsm[3]_i_5_n_0 ;
  wire \FSM_onehot_fsm[3]_i_6_n_0 ;
  wire \FSM_onehot_fsm[3]_i_7_n_0 ;
  wire \FSM_onehot_fsm[3]_i_8_n_0 ;
  wire \FSM_onehot_fsm[3]_i_9_n_0 ;
  wire \FSM_onehot_fsm[4]_i_1__0_n_0 ;
  wire \FSM_onehot_fsm[4]_i_2__0_n_0 ;
  wire \FSM_onehot_fsm[4]_i_3__0_n_0 ;
  wire \FSM_onehot_fsm[4]_i_4_n_0 ;
  wire \FSM_onehot_fsm[4]_i_5_n_0 ;
  wire \FSM_onehot_fsm[4]_i_6_n_0 ;
  wire \FSM_onehot_fsm[4]_i_7_n_0 ;
  wire \FSM_onehot_fsm[4]_i_8_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_fsm_reg_n_0_[4] ;
  wire \FSM_sequential_fsm_rx[0]_i_3_n_0 ;
  wire [3:0]Q;
  wire RST_CPLLRESET;
  wire USER_RXEQ_ADAPT_DONE;
  wire adapt_done;
  wire adapt_done_cnt;
  wire adapt_done_cnt_i_1_n_0;
  wire adapt_done_cnt_reg_n_0;
  wire [21:0]converge_cnt;
  wire [21:1]converge_cnt0;
  wire converge_cnt0_carry__0_n_0;
  wire converge_cnt0_carry__0_n_1;
  wire converge_cnt0_carry__0_n_2;
  wire converge_cnt0_carry__0_n_3;
  wire converge_cnt0_carry__1_n_0;
  wire converge_cnt0_carry__1_n_1;
  wire converge_cnt0_carry__1_n_2;
  wire converge_cnt0_carry__1_n_3;
  wire converge_cnt0_carry__2_n_0;
  wire converge_cnt0_carry__2_n_1;
  wire converge_cnt0_carry__2_n_2;
  wire converge_cnt0_carry__2_n_3;
  wire converge_cnt0_carry__3_n_0;
  wire converge_cnt0_carry__3_n_1;
  wire converge_cnt0_carry__3_n_2;
  wire converge_cnt0_carry__3_n_3;
  wire converge_cnt0_carry_n_0;
  wire converge_cnt0_carry_n_1;
  wire converge_cnt0_carry_n_2;
  wire converge_cnt0_carry_n_3;
  wire \converge_cnt_reg_n_0_[0] ;
  wire \converge_cnt_reg_n_0_[10] ;
  wire \converge_cnt_reg_n_0_[11] ;
  wire \converge_cnt_reg_n_0_[12] ;
  wire \converge_cnt_reg_n_0_[13] ;
  wire \converge_cnt_reg_n_0_[14] ;
  wire \converge_cnt_reg_n_0_[15] ;
  wire \converge_cnt_reg_n_0_[16] ;
  wire \converge_cnt_reg_n_0_[17] ;
  wire \converge_cnt_reg_n_0_[18] ;
  wire \converge_cnt_reg_n_0_[19] ;
  wire \converge_cnt_reg_n_0_[1] ;
  wire \converge_cnt_reg_n_0_[20] ;
  wire \converge_cnt_reg_n_0_[21] ;
  wire \converge_cnt_reg_n_0_[2] ;
  wire \converge_cnt_reg_n_0_[3] ;
  wire \converge_cnt_reg_n_0_[4] ;
  wire \converge_cnt_reg_n_0_[5] ;
  wire \converge_cnt_reg_n_0_[6] ;
  wire \converge_cnt_reg_n_0_[7] ;
  wire \converge_cnt_reg_n_0_[8] ;
  wire \converge_cnt_reg_n_0_[9] ;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]fs_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]fs_reg2;
  wire fsm1__0;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]lf_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [5:0]lf_reg2;
  wire new_txcoeff_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire new_txcoeff_req_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire new_txcoeff_req_reg2;
  wire [2:0]out;
  wire preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]preset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [2:0]preset_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire preset_valid_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire preset_valid_reg2;
  wire rxeq_adapt_done_reg;
  wire rxeq_adapt_done_reg0;
  wire rxeq_adapt_done_reg_i_2_n_0;
  wire rxeq_adapt_done_reg_reg;
  wire rxeq_adapt_done_reg_reg_0;
  wire \rxeq_cnt_reg[1] ;
  wire \rxeq_cnt_reg[1]_0 ;
  wire \rxeq_control_reg2_reg[0] ;
  wire [1:0]\rxeq_control_reg2_reg[1] ;
  wire [5:0]\rxeq_fs_reg[5] ;
  wire [5:0]\rxeq_lf_reg[5] ;
  wire rxeq_new_txcoeff_req;
  wire rxeq_new_txcoeff_req_reg;
  wire [2:0]\rxeq_preset_reg[2] ;
  wire rxeq_preset_valid_reg;
  wire [17:0]\rxeq_txcoeff_reg[17] ;
  wire rxeqscan_adapt_done;
  wire rxeqscan_new_txcoeff_done;
  wire rxeqscan_preset_done;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]txcoeff_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [17:0]txcoeff_reg2;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txpreset_reg1;
  (* ASYNC_REG = "true" *) (* SHIFT_EXTRACT = "NO" *) wire [3:0]txpreset_reg2;
  wire [3:0]NLW_converge_cnt0_carry__4_CO_UNCONNECTED;
  wire [3:1]NLW_converge_cnt0_carry__4_O_UNCONNECTED;

  LUT6 #(
    .INIT(64'h00000F0F0111CDDD)) 
    \FSM_onehot_fsm[1]_i_1__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(new_txcoeff_req_reg2),
        .I3(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I4(preset_valid_reg2),
        .I5(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm[1]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hA8)) 
    \FSM_onehot_fsm[2]_i_1__0 
       (.I0(preset_valid_reg2),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(\FSM_onehot_fsm[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAA8AA)) 
    \FSM_onehot_fsm[3]_i_1__0 
       (.I0(\FSM_onehot_fsm[3]_i_2__0_n_0 ),
        .I1(\FSM_onehot_fsm[3]_i_3__0_n_0 ),
        .I2(\FSM_onehot_fsm[3]_i_4_n_0 ),
        .I3(\FSM_onehot_fsm[3]_i_5_n_0 ),
        .I4(\FSM_onehot_fsm[3]_i_6_n_0 ),
        .I5(\FSM_onehot_fsm[3]_i_7_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000202FF000202)) 
    \FSM_onehot_fsm[3]_i_2__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(fsm1__0),
        .I3(new_txcoeff_req_reg2),
        .I4(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I5(preset_valid_reg2),
        .O(\FSM_onehot_fsm[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT4 #(
    .INIT(16'hFFD2)) 
    \FSM_onehot_fsm[3]_i_3__0 
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(\rxeq_control_reg2_reg[1] [0]),
        .I2(\converge_cnt_reg_n_0_[21] ),
        .I3(\FSM_onehot_fsm[3]_i_8_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFEB)) 
    \FSM_onehot_fsm[3]_i_4 
       (.I0(\FSM_onehot_fsm[4]_i_8_n_0 ),
        .I1(\converge_cnt_reg_n_0_[14] ),
        .I2(\converge_cnt_reg_n_0_[13] ),
        .I3(\FSM_onehot_fsm[4]_i_7_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h005D)) 
    \FSM_onehot_fsm[3]_i_5 
       (.I0(\converge_cnt_reg_n_0_[0] ),
        .I1(\converge_cnt_reg_n_0_[2] ),
        .I2(\converge_cnt_reg_n_0_[3] ),
        .I3(\FSM_onehot_fsm[3]_i_9_n_0 ),
        .O(\FSM_onehot_fsm[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF9FFFFFFFFFFFFFF)) 
    \FSM_onehot_fsm[3]_i_6 
       (.I0(\converge_cnt_reg_n_0_[20] ),
        .I1(\converge_cnt_reg_n_0_[21] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I3(\converge_cnt_reg_n_0_[9] ),
        .I4(\converge_cnt_reg_n_0_[11] ),
        .I5(\converge_cnt_reg_n_0_[19] ),
        .O(\FSM_onehot_fsm[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h2FFFFFFF2F2FFF22)) 
    \FSM_onehot_fsm[3]_i_7 
       (.I0(\converge_cnt_reg_n_0_[14] ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[10] ),
        .I3(\converge_cnt_reg_n_0_[8] ),
        .I4(\converge_cnt_reg_n_0_[13] ),
        .I5(\converge_cnt_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm[3]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF4FF)) 
    \FSM_onehot_fsm[3]_i_8 
       (.I0(\converge_cnt_reg_n_0_[8] ),
        .I1(\converge_cnt_reg_n_0_[10] ),
        .I2(\converge_cnt_reg_n_0_[5] ),
        .I3(\converge_cnt_reg_n_0_[15] ),
        .I4(\converge_cnt_reg_n_0_[4] ),
        .I5(\converge_cnt_reg_n_0_[6] ),
        .O(\FSM_onehot_fsm[3]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hFFEF)) 
    \FSM_onehot_fsm[3]_i_9 
       (.I0(\converge_cnt_reg_n_0_[7] ),
        .I1(\converge_cnt_reg_n_0_[1] ),
        .I2(\converge_cnt_reg_n_0_[16] ),
        .I3(\converge_cnt_reg_n_0_[12] ),
        .O(\FSM_onehot_fsm[3]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hAA080808AA08AAAA)) 
    \FSM_onehot_fsm[4]_i_1__0 
       (.I0(\FSM_onehot_fsm[4]_i_2__0_n_0 ),
        .I1(\FSM_onehot_fsm[4]_i_3__0_n_0 ),
        .I2(\FSM_onehot_fsm[4]_i_4_n_0 ),
        .I3(fsm1__0),
        .I4(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I5(\FSM_onehot_fsm[4]_i_5_n_0 ),
        .O(\FSM_onehot_fsm[4]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_onehot_fsm[4]_i_2__0 
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .O(\FSM_onehot_fsm[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000080000000820)) 
    \FSM_onehot_fsm[4]_i_3__0 
       (.I0(\FSM_onehot_fsm[3]_i_5_n_0 ),
        .I1(\converge_cnt_reg_n_0_[13] ),
        .I2(\converge_cnt_reg_n_0_[14] ),
        .I3(\converge_cnt_reg_n_0_[10] ),
        .I4(\FSM_onehot_fsm[4]_i_6_n_0 ),
        .I5(\converge_cnt_reg_n_0_[3] ),
        .O(\FSM_onehot_fsm[4]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFBAA)) 
    \FSM_onehot_fsm[4]_i_4 
       (.I0(\FSM_onehot_fsm[3]_i_3__0_n_0 ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[21] ),
        .I3(\converge_cnt_reg_n_0_[14] ),
        .I4(\FSM_onehot_fsm[4]_i_7_n_0 ),
        .I5(\FSM_onehot_fsm[4]_i_8_n_0 ),
        .O(\FSM_onehot_fsm[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \FSM_onehot_fsm[4]_i_5 
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(new_txcoeff_req_reg2),
        .O(\FSM_onehot_fsm[4]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \FSM_onehot_fsm[4]_i_6 
       (.I0(\converge_cnt_reg_n_0_[9] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I2(\converge_cnt_reg_n_0_[19] ),
        .I3(\converge_cnt_reg_n_0_[11] ),
        .O(\FSM_onehot_fsm[4]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h4FFF)) 
    \FSM_onehot_fsm[4]_i_7 
       (.I0(\converge_cnt_reg_n_0_[3] ),
        .I1(\converge_cnt_reg_n_0_[8] ),
        .I2(\converge_cnt_reg_n_0_[17] ),
        .I3(\converge_cnt_reg_n_0_[18] ),
        .O(\FSM_onehot_fsm[4]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0D0D0D0DFFFF0DFF)) 
    \FSM_onehot_fsm[4]_i_8 
       (.I0(\converge_cnt_reg_n_0_[21] ),
        .I1(\converge_cnt_reg_n_0_[20] ),
        .I2(\converge_cnt_reg_n_0_[14] ),
        .I3(\converge_cnt_reg_n_0_[3] ),
        .I4(\converge_cnt_reg_n_0_[2] ),
        .I5(\converge_cnt_reg_n_0_[0] ),
        .O(\FSM_onehot_fsm[4]_i_8_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_onehot_fsm_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_fsm_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[1]_i_1__0_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[1] ),
        .S(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[2]_i_1__0_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[3]_i_1__0_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_fsm_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\FSM_onehot_fsm[4]_i_1__0_n_0 ),
        .Q(\FSM_onehot_fsm_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAAAEA)) 
    \FSM_sequential_fsm_rx[0]_i_1 
       (.I0(\rxeq_cnt_reg[1]_0 ),
        .I1(out[2]),
        .I2(out[1]),
        .I3(\rxeq_control_reg2_reg[1] [1]),
        .I4(\rxeq_control_reg2_reg[1] [0]),
        .I5(\FSM_sequential_fsm_rx[0]_i_3_n_0 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hCCCC0C0C0000BBFF)) 
    \FSM_sequential_fsm_rx[0]_i_3 
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(out[0]),
        .I2(rxeqscan_new_txcoeff_done),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(out[1]),
        .I5(out[2]),
        .O(\FSM_sequential_fsm_rx[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0CA0FFC00CA00FC0)) 
    \FSM_sequential_fsm_rx[1]_i_1 
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(\rxeq_control_reg2_reg[0] ),
        .I2(out[0]),
        .I3(out[1]),
        .I4(out[2]),
        .I5(\rxeq_cnt_reg[1] ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h2230FF0022FCFF00)) 
    \FSM_sequential_fsm_rx[2]_i_1 
       (.I0(\rxeq_control_reg2_reg[0] ),
        .I1(out[0]),
        .I2(rxeqscan_preset_done),
        .I3(out[2]),
        .I4(out[1]),
        .I5(\rxeq_cnt_reg[1] ),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h00FF7000)) 
    adapt_done_cnt_i_1
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(\rxeq_control_reg2_reg[1] [0]),
        .I2(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I3(adapt_done_cnt),
        .I4(adapt_done_cnt_reg_n_0),
        .O(adapt_done_cnt_i_1_n_0));
  LUT6 #(
    .INIT(64'hF000F101FFFFF101)) 
    adapt_done_cnt_i_2
       (.I0(\FSM_onehot_fsm_reg_n_0_[1] ),
        .I1(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I2(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I3(fsm1__0),
        .I4(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I5(new_txcoeff_req_reg2),
        .O(adapt_done_cnt));
  FDRE #(
    .INIT(1'b0)) 
    adapt_done_cnt_reg
       (.C(CLK),
        .CE(1'b1),
        .D(adapt_done_cnt_i_1_n_0),
        .Q(adapt_done_cnt_reg_n_0),
        .R(RST_CPLLRESET));
  LUT5 #(
    .INIT(32'hA8880000)) 
    adapt_done_i_1
       (.I0(\FSM_onehot_fsm_reg_n_0_[4] ),
        .I1(adapt_done_cnt_reg_n_0),
        .I2(\rxeq_control_reg2_reg[1] [1]),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(new_txcoeff_req_reg2),
        .O(adapt_done));
  FDRE #(
    .INIT(1'b0)) 
    adapt_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(adapt_done),
        .Q(rxeqscan_adapt_done),
        .R(RST_CPLLRESET));
  CARRY4 converge_cnt0_carry
       (.CI(1'b0),
        .CO({converge_cnt0_carry_n_0,converge_cnt0_carry_n_1,converge_cnt0_carry_n_2,converge_cnt0_carry_n_3}),
        .CYINIT(\converge_cnt_reg_n_0_[0] ),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[4:1]),
        .S({\converge_cnt_reg_n_0_[4] ,\converge_cnt_reg_n_0_[3] ,\converge_cnt_reg_n_0_[2] ,\converge_cnt_reg_n_0_[1] }));
  CARRY4 converge_cnt0_carry__0
       (.CI(converge_cnt0_carry_n_0),
        .CO({converge_cnt0_carry__0_n_0,converge_cnt0_carry__0_n_1,converge_cnt0_carry__0_n_2,converge_cnt0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[8:5]),
        .S({\converge_cnt_reg_n_0_[8] ,\converge_cnt_reg_n_0_[7] ,\converge_cnt_reg_n_0_[6] ,\converge_cnt_reg_n_0_[5] }));
  CARRY4 converge_cnt0_carry__1
       (.CI(converge_cnt0_carry__0_n_0),
        .CO({converge_cnt0_carry__1_n_0,converge_cnt0_carry__1_n_1,converge_cnt0_carry__1_n_2,converge_cnt0_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[12:9]),
        .S({\converge_cnt_reg_n_0_[12] ,\converge_cnt_reg_n_0_[11] ,\converge_cnt_reg_n_0_[10] ,\converge_cnt_reg_n_0_[9] }));
  CARRY4 converge_cnt0_carry__2
       (.CI(converge_cnt0_carry__1_n_0),
        .CO({converge_cnt0_carry__2_n_0,converge_cnt0_carry__2_n_1,converge_cnt0_carry__2_n_2,converge_cnt0_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[16:13]),
        .S({\converge_cnt_reg_n_0_[16] ,\converge_cnt_reg_n_0_[15] ,\converge_cnt_reg_n_0_[14] ,\converge_cnt_reg_n_0_[13] }));
  CARRY4 converge_cnt0_carry__3
       (.CI(converge_cnt0_carry__2_n_0),
        .CO({converge_cnt0_carry__3_n_0,converge_cnt0_carry__3_n_1,converge_cnt0_carry__3_n_2,converge_cnt0_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(converge_cnt0[20:17]),
        .S({\converge_cnt_reg_n_0_[20] ,\converge_cnt_reg_n_0_[19] ,\converge_cnt_reg_n_0_[18] ,\converge_cnt_reg_n_0_[17] }));
  CARRY4 converge_cnt0_carry__4
       (.CI(converge_cnt0_carry__3_n_0),
        .CO(NLW_converge_cnt0_carry__4_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_converge_cnt0_carry__4_O_UNCONNECTED[3:1],converge_cnt0[21]}),
        .S({1'b0,1'b0,1'b0,\converge_cnt_reg_n_0_[21] }));
  LUT5 #(
    .INIT(32'h0000AAA2)) 
    \converge_cnt[0]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(\converge_cnt_reg_n_0_[0] ),
        .O(converge_cnt[0]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[10]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[10]),
        .O(converge_cnt[10]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[11]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[11]),
        .O(converge_cnt[11]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[12]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[12]),
        .O(converge_cnt[12]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[13]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[13]),
        .O(converge_cnt[13]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[14]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[14]),
        .O(converge_cnt[14]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[15]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[15]),
        .O(converge_cnt[15]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[16]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[16]),
        .O(converge_cnt[16]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[17]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[17]),
        .O(converge_cnt[17]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[18]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[18]),
        .O(converge_cnt[18]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[19]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[19]),
        .O(converge_cnt[19]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[1]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[1]),
        .O(converge_cnt[1]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[20]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[20]),
        .O(converge_cnt[20]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[21]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[21]),
        .O(converge_cnt[21]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[2]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[2]),
        .O(converge_cnt[2]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[3]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[3]),
        .O(converge_cnt[3]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[4]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[4]),
        .O(converge_cnt[4]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[5]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[5]),
        .O(converge_cnt[5]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[6]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[6]),
        .O(converge_cnt[6]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[7]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[7]),
        .O(converge_cnt[7]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[8]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[8]),
        .O(converge_cnt[8]));
  LUT5 #(
    .INIT(32'hAAA20000)) 
    \converge_cnt[9]_i_1 
       (.I0(\FSM_onehot_fsm_reg_n_0_[3] ),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(adapt_done_cnt_reg_n_0),
        .I3(\rxeq_control_reg2_reg[1] [0]),
        .I4(converge_cnt0[9]),
        .O(converge_cnt[9]));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[0]),
        .Q(\converge_cnt_reg_n_0_[0] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[10]),
        .Q(\converge_cnt_reg_n_0_[10] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[11]),
        .Q(\converge_cnt_reg_n_0_[11] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[12]),
        .Q(\converge_cnt_reg_n_0_[12] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[13]),
        .Q(\converge_cnt_reg_n_0_[13] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[14]),
        .Q(\converge_cnt_reg_n_0_[14] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[15]),
        .Q(\converge_cnt_reg_n_0_[15] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[16]),
        .Q(\converge_cnt_reg_n_0_[16] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[17]),
        .Q(\converge_cnt_reg_n_0_[17] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[18]),
        .Q(\converge_cnt_reg_n_0_[18] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[19]),
        .Q(\converge_cnt_reg_n_0_[19] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[1]),
        .Q(\converge_cnt_reg_n_0_[1] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[20] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[20]),
        .Q(\converge_cnt_reg_n_0_[20] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[21] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[21]),
        .Q(\converge_cnt_reg_n_0_[21] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[2]),
        .Q(\converge_cnt_reg_n_0_[2] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[3]),
        .Q(\converge_cnt_reg_n_0_[3] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[4]),
        .Q(\converge_cnt_reg_n_0_[4] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[5]),
        .Q(\converge_cnt_reg_n_0_[5] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[6]),
        .Q(\converge_cnt_reg_n_0_[6] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[7]),
        .Q(\converge_cnt_reg_n_0_[7] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[8]),
        .Q(\converge_cnt_reg_n_0_[8] ),
        .R(RST_CPLLRESET));
  FDRE #(
    .INIT(1'b0)) 
    \converge_cnt_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(converge_cnt[9]),
        .Q(\converge_cnt_reg_n_0_[9] ),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [0]),
        .Q(fs_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [1]),
        .Q(fs_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [2]),
        .Q(fs_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [3]),
        .Q(fs_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [4]),
        .Q(fs_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_fs_reg[5] [5]),
        .Q(fs_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[0]),
        .Q(fs_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[1]),
        .Q(fs_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[2]),
        .Q(fs_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[3]),
        .Q(fs_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[4]),
        .Q(fs_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \fs_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(fs_reg1[5]),
        .Q(fs_reg2[5]),
        .R(RST_CPLLRESET));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'h02)) 
    fsm1
       (.I0(\rxeq_control_reg2_reg[1] [1]),
        .I1(adapt_done_cnt_reg_n_0),
        .I2(\rxeq_control_reg2_reg[1] [0]),
        .O(fsm1__0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [0]),
        .Q(lf_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [1]),
        .Q(lf_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [2]),
        .Q(lf_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [3]),
        .Q(lf_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [4]),
        .Q(lf_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_lf_reg[5] [5]),
        .Q(lf_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[0]),
        .Q(lf_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[1]),
        .Q(lf_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[2]),
        .Q(lf_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[3]),
        .Q(lf_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[4]),
        .Q(lf_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \lf_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(lf_reg1[5]),
        .Q(lf_reg2[5]),
        .R(RST_CPLLRESET));
  LUT2 #(
    .INIT(4'h8)) 
    new_txcoeff_done_i_1
       (.I0(new_txcoeff_req_reg2),
        .I1(\FSM_onehot_fsm_reg_n_0_[4] ),
        .O(new_txcoeff_done));
  FDRE #(
    .INIT(1'b0)) 
    new_txcoeff_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(new_txcoeff_done),
        .Q(rxeqscan_new_txcoeff_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE new_txcoeff_req_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_new_txcoeff_req_reg),
        .Q(new_txcoeff_req_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE new_txcoeff_req_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(new_txcoeff_req_reg1),
        .Q(new_txcoeff_req_reg2),
        .R(RST_CPLLRESET));
  LUT3 #(
    .INIT(8'hEA)) 
    preset_done_i_1
       (.I0(\FSM_onehot_fsm_reg_n_0_[2] ),
        .I1(preset_valid_reg2),
        .I2(\FSM_onehot_fsm_reg_n_0_[1] ),
        .O(preset_done));
  FDRE #(
    .INIT(1'b0)) 
    preset_done_reg
       (.C(CLK),
        .CE(1'b1),
        .D(preset_done),
        .Q(rxeqscan_preset_done),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [0]),
        .Q(preset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [1]),
        .Q(preset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_preset_reg[2] [2]),
        .Q(preset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[0]),
        .Q(preset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[1]),
        .Q(preset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \preset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(preset_reg1[2]),
        .Q(preset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE preset_valid_reg1_reg
       (.C(CLK),
        .CE(1'b1),
        .D(rxeq_preset_valid_reg),
        .Q(preset_valid_reg1),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE preset_valid_reg2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(preset_valid_reg1),
        .Q(preset_valid_reg2),
        .R(RST_CPLLRESET));
  LUT6 #(
    .INIT(64'h0080F00000800000)) 
    rxeq_adapt_done_i_1
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(rxeq_adapt_done_reg0),
        .I2(out[2]),
        .I3(out[1]),
        .I4(out[0]),
        .I5(USER_RXEQ_ADAPT_DONE),
        .O(rxeq_adapt_done_reg));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT2 #(
    .INIT(4'hE)) 
    rxeq_adapt_done_i_2
       (.I0(rxeqscan_adapt_done),
        .I1(rxeq_adapt_done_reg_reg_0),
        .O(rxeq_adapt_done_reg0));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT5 #(
    .INIT(32'h44FF4000)) 
    rxeq_adapt_done_reg_i_1
       (.I0(out[1]),
        .I1(out[2]),
        .I2(rxeqscan_adapt_done),
        .I3(rxeq_adapt_done_reg_i_2_n_0),
        .I4(rxeq_adapt_done_reg_reg_0),
        .O(rxeq_adapt_done_reg_reg));
  LUT6 #(
    .INIT(64'hFFAA000010105555)) 
    rxeq_adapt_done_reg_i_2
       (.I0(out[1]),
        .I1(\rxeq_control_reg2_reg[1] [1]),
        .I2(\rxeq_control_reg2_reg[1] [0]),
        .I3(rxeqscan_new_txcoeff_done),
        .I4(out[0]),
        .I5(out[2]),
        .O(rxeq_adapt_done_reg_i_2_n_0));
  LUT4 #(
    .INIT(16'h0400)) 
    rxeq_new_txcoeff_req_i_1
       (.I0(rxeqscan_new_txcoeff_done),
        .I1(out[0]),
        .I2(out[1]),
        .I3(out[2]),
        .O(rxeq_new_txcoeff_req));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [0]),
        .Q(txcoeff_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [10]),
        .Q(txcoeff_reg1[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [11]),
        .Q(txcoeff_reg1[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [12]),
        .Q(txcoeff_reg1[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [13]),
        .Q(txcoeff_reg1[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [14]),
        .Q(txcoeff_reg1[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [15]),
        .Q(txcoeff_reg1[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [16]),
        .Q(txcoeff_reg1[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [17]),
        .Q(txcoeff_reg1[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [1]),
        .Q(txcoeff_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [2]),
        .Q(txcoeff_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [3]),
        .Q(txcoeff_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [4]),
        .Q(txcoeff_reg1[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [5]),
        .Q(txcoeff_reg1[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [6]),
        .Q(txcoeff_reg1[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [7]),
        .Q(txcoeff_reg1[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [8]),
        .Q(txcoeff_reg1[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg1_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(\rxeq_txcoeff_reg[17] [9]),
        .Q(txcoeff_reg1[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[0]),
        .Q(txcoeff_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[10]),
        .Q(txcoeff_reg2[10]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[11]),
        .Q(txcoeff_reg2[11]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[12]),
        .Q(txcoeff_reg2[12]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[13]),
        .Q(txcoeff_reg2[13]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[14]),
        .Q(txcoeff_reg2[14]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[15]),
        .Q(txcoeff_reg2[15]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[16]),
        .Q(txcoeff_reg2[16]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[17]),
        .Q(txcoeff_reg2[17]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[1]),
        .Q(txcoeff_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[2]),
        .Q(txcoeff_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[3]),
        .Q(txcoeff_reg2[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[4]),
        .Q(txcoeff_reg2[4]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[5]),
        .Q(txcoeff_reg2[5]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[6]),
        .Q(txcoeff_reg2[6]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[7]),
        .Q(txcoeff_reg2[7]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[8]),
        .Q(txcoeff_reg2[8]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txcoeff_reg2_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(txcoeff_reg1[9]),
        .Q(txcoeff_reg2[9]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[0]),
        .Q(txpreset_reg1[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[1]),
        .Q(txpreset_reg1[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[2]),
        .Q(txpreset_reg1[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg1_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(Q[3]),
        .Q(txpreset_reg1[3]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[0]),
        .Q(txpreset_reg2[0]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[1]),
        .Q(txpreset_reg2[1]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[2]),
        .Q(txpreset_reg2[2]),
        .R(RST_CPLLRESET));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDRE \txpreset_reg2_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(txpreset_reg1[3]),
        .Q(txpreset_reg2[3]),
        .R(RST_CPLLRESET));
endmodule

(* ORIG_REF_NAME = "pcie_7x_0_tandem_cpler_ctl_arb" *) 
module pcie_7x_0_pcie_7x_0_tandem_cpler_ctl_arb
   (rx_completion_busy,
    user_app_rdy_gnt,
    sys_reset,
    sys_clk,
    user_reset_out_reg,
    \pio_rx_sm_64.m_axis_rx_tready_reg ,
    m_axis_rx_tvalid,
    m_axis_rx_tvalid_reg,
    user_app_rdy_req,
    req_compl);
  output rx_completion_busy;
  output user_app_rdy_gnt;
  input sys_reset;
  input sys_clk;
  input user_reset_out_reg;
  input \pio_rx_sm_64.m_axis_rx_tready_reg ;
  input m_axis_rx_tvalid;
  input m_axis_rx_tvalid_reg;
  input user_app_rdy_req;
  input req_compl;

  wire m_axis_rx_tvalid;
  wire m_axis_rx_tvalid_reg;
  wire \pio_rx_sm_64.m_axis_rx_tready_reg ;
  wire req_compl;
  wire rx_busy;
  wire rx_busy0;
  wire rx_completion_busy;
  wire sys_clk;
  wire sys_reset;
  wire user_app_rdy_gnt;
  wire user_app_rdy_gnt_i_1_n_0;
  wire user_app_rdy_req;
  wire user_reset_out_reg;

  LUT3 #(
    .INIT(8'hE0)) 
    rx_busy_i_1
       (.I0(rx_busy),
        .I1(\pio_rx_sm_64.m_axis_rx_tready_reg ),
        .I2(m_axis_rx_tvalid),
        .O(rx_busy0));
  FDRE rx_busy_reg
       (.C(sys_clk),
        .CE(1'b1),
        .D(rx_busy0),
        .Q(rx_busy),
        .R(sys_reset));
  FDRE rx_completion_busy_reg
       (.C(sys_clk),
        .CE(1'b1),
        .D(user_reset_out_reg),
        .Q(rx_completion_busy),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAEAA)) 
    user_app_rdy_gnt_i_1
       (.I0(user_app_rdy_gnt),
        .I1(m_axis_rx_tvalid_reg),
        .I2(rx_completion_busy),
        .I3(user_app_rdy_req),
        .I4(req_compl),
        .I5(rx_busy),
        .O(user_app_rdy_gnt_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    user_app_rdy_gnt_reg
       (.C(sys_clk),
        .CE(1'b1),
        .D(user_app_rdy_gnt_i_1_n_0),
        .Q(user_app_rdy_gnt),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* KEEP_HIERARCHY = "true" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_CDC = "SINGLE" *) (* XPM_MODULE = "TRUE" *) 
module pcie_7x_0_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* ASYNC_REG = "true" *) (* RTL_KEEP = "true" *) (* XPM_CDC = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* KEEP_HIERARCHY = "true" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_CDC = "SINGLE" *) (* XPM_MODULE = "TRUE" *) 
module pcie_7x_0_xpm_cdc_single__1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* ASYNC_REG = "true" *) (* RTL_KEEP = "true" *) (* XPM_CDC = "SINGLE" *) wire [1:0]syncstages_ff;

  assign dest_out = syncstages_ff[1];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module pcie_7x_0_blk_mem_gen_generic_cstr
   (dout,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    \gc0.count_d1_reg[8] ,
    \gic0.gc0.count_d2_reg[8] ,
    din);
  output [31:0]dout;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]din;

  wire [0:0]E;
  wire [0:0]Q;
  wire [31:0]din;
  wire [31:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  pcie_7x_0_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.E(E),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module pcie_7x_0_blk_mem_gen_prim_width
   (dout,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    \gc0.count_d1_reg[8] ,
    \gic0.gc0.count_d2_reg[8] ,
    din);
  output [31:0]dout;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]din;

  wire [0:0]E;
  wire [0:0]Q;
  wire [31:0]din;
  wire [31:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  pcie_7x_0_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.E(E),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module pcie_7x_0_blk_mem_gen_prim_wrapper
   (dout,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    \gc0.count_d1_reg[8] ,
    \gic0.gc0.count_d2_reg[8] ,
    din);
  output [31:0]dout;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]din;

  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ;
  wire [0:0]E;
  wire [0:0]Q;
  wire [31:0]din;
  wire [31:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "INDEPENDENT" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({\gc0.count_d1_reg[8] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gic0.gc0.count_d2_reg[8] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DIADI(din[15:0]),
        .DIBDI(din[31:16]),
        .DIPADIP({1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0}),
        .DOADO(dout[15:0]),
        .DOBDO(dout[31:16]),
        .DOPADOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 }),
        .DOPBDOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 }),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(E),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(Q),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module pcie_7x_0_blk_mem_gen_top
   (dout,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    \gc0.count_d1_reg[8] ,
    \gic0.gc0.count_d2_reg[8] ,
    din);
  output [31:0]dout;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]din;

  wire [0:0]E;
  wire [0:0]Q;
  wire [31:0]din;
  wire [31:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  pcie_7x_0_blk_mem_gen_generic_cstr \valid.cstr 
       (.E(E),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_3_3" *) 
module pcie_7x_0_blk_mem_gen_v8_3_3
   (dout,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    \gc0.count_d1_reg[8] ,
    \gic0.gc0.count_d2_reg[8] ,
    din);
  output [31:0]dout;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]din;

  wire [0:0]E;
  wire [0:0]Q;
  wire [31:0]din;
  wire [31:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  pcie_7x_0_blk_mem_gen_v8_3_3_synth inst_blk_mem_gen
       (.E(E),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_3_3_synth" *) 
module pcie_7x_0_blk_mem_gen_v8_3_3_synth
   (dout,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    \gc0.count_d1_reg[8] ,
    \gic0.gc0.count_d2_reg[8] ,
    din);
  output [31:0]dout;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]din;

  wire [0:0]E;
  wire [0:0]Q;
  wire [31:0]din;
  wire [31:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  pcie_7x_0_blk_mem_gen_top \gnbram.gnativebmg.native_blk_mem_gen 
       (.E(E),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module pcie_7x_0_clk_x_pntrs
   (ram_full_fb_i_reg,
    RD_PNTR_WR,
    ram_full_fb_i_reg_0,
    v1_reg,
    WR_PNTR_RD,
    v1_reg_0,
    Q,
    D,
    \gc0.count_d1_reg[8] ,
    \gc0.count_reg[7] ,
    \gic0.gc0.count_d2_reg[8] ,
    wr_clk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ,
    rd_clk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output ram_full_fb_i_reg;
  output [8:0]RD_PNTR_WR;
  output ram_full_fb_i_reg_0;
  output [3:0]v1_reg;
  output [0:0]WR_PNTR_RD;
  output [3:0]v1_reg_0;
  input [0:0]Q;
  input [0:0]D;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [7:0]\gc0.count_reg[7] ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input wr_clk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  input rd_clk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  wire [0:0]D;
  wire [0:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [0:0]WR_PNTR_RD;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [7:0]\gc0.count_reg[7] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire \gsync_stage[2].wr_stg_inst_n_1 ;
  wire \gsync_stage[2].wr_stg_inst_n_2 ;
  wire \gsync_stage[2].wr_stg_inst_n_3 ;
  wire \gsync_stage[2].wr_stg_inst_n_4 ;
  wire \gsync_stage[2].wr_stg_inst_n_5 ;
  wire \gsync_stage[2].wr_stg_inst_n_6 ;
  wire \gsync_stage[2].wr_stg_inst_n_7 ;
  wire \gsync_stage[2].wr_stg_inst_n_8 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire [7:0]p_0_in;
  wire [7:0]p_0_in7_out;
  wire [8:8]p_0_out;
  wire [8:8]p_1_out;
  wire [7:0]p_22_out;
  wire [8:0]p_2_out;
  wire [8:0]p_3_out;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire rd_clk;
  wire [8:0]rd_pntr_gc;
  wire \rd_pntr_gc[0]_i_1_n_0 ;
  wire \rd_pntr_gc[1]_i_1_n_0 ;
  wire \rd_pntr_gc[2]_i_1_n_0 ;
  wire \rd_pntr_gc[3]_i_1_n_0 ;
  wire \rd_pntr_gc[4]_i_1_n_0 ;
  wire \rd_pntr_gc[5]_i_1_n_0 ;
  wire \rd_pntr_gc[6]_i_1_n_0 ;
  wire \rd_pntr_gc[7]_i_1_n_0 ;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wr_clk;
  wire [8:0]wr_pntr_gc;

  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(p_22_out[0]),
        .I1(\gc0.count_d1_reg[8] [0]),
        .I2(p_22_out[1]),
        .I3(\gc0.count_d1_reg[8] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(p_22_out[0]),
        .I1(\gc0.count_reg[7] [0]),
        .I2(p_22_out[1]),
        .I3(\gc0.count_reg[7] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(p_22_out[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .I2(p_22_out[3]),
        .I3(\gc0.count_d1_reg[8] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(p_22_out[2]),
        .I1(\gc0.count_reg[7] [2]),
        .I2(p_22_out[3]),
        .I3(\gc0.count_reg[7] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(p_22_out[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .I2(p_22_out[5]),
        .I3(\gc0.count_d1_reg[8] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(p_22_out[4]),
        .I1(\gc0.count_reg[7] [4]),
        .I2(p_22_out[5]),
        .I3(\gc0.count_reg[7] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(p_22_out[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .I2(p_22_out[7]),
        .I3(\gc0.count_d1_reg[8] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(p_22_out[6]),
        .I1(\gc0.count_reg[7] [6]),
        .I2(p_22_out[7]),
        .I3(\gc0.count_reg[7] [7]),
        .O(v1_reg_0[3]));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(RD_PNTR_WR[8]),
        .I1(Q),
        .O(ram_full_fb_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(RD_PNTR_WR[8]),
        .I1(D),
        .O(ram_full_fb_i_reg_0));
  pcie_7x_0_synchronizer_ff \gsync_stage[1].rd_stg_inst 
       (.D(p_3_out),
        .Q(wr_pntr_gc),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .rd_clk(rd_clk));
  pcie_7x_0_synchronizer_ff_48 \gsync_stage[1].wr_stg_inst 
       (.D(p_2_out),
        .Q(rd_pntr_gc),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .wr_clk(wr_clk));
  pcie_7x_0_synchronizer_ff_49 \gsync_stage[2].rd_stg_inst 
       (.D(p_3_out),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .out(p_1_out),
        .rd_clk(rd_clk),
        .\wr_pntr_bin_reg[7] (p_0_in));
  pcie_7x_0_synchronizer_ff_50 \gsync_stage[2].wr_stg_inst 
       (.D(p_2_out),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .out(p_0_out),
        .\rd_pntr_bin_reg[7] ({\gsync_stage[2].wr_stg_inst_n_1 ,\gsync_stage[2].wr_stg_inst_n_2 ,\gsync_stage[2].wr_stg_inst_n_3 ,\gsync_stage[2].wr_stg_inst_n_4 ,\gsync_stage[2].wr_stg_inst_n_5 ,\gsync_stage[2].wr_stg_inst_n_6 ,\gsync_stage[2].wr_stg_inst_n_7 ,\gsync_stage[2].wr_stg_inst_n_8 }),
        .wr_clk(wr_clk));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[2].wr_stg_inst_n_8 ),
        .Q(RD_PNTR_WR[0]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[2].wr_stg_inst_n_7 ),
        .Q(RD_PNTR_WR[1]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[2].wr_stg_inst_n_6 ),
        .Q(RD_PNTR_WR[2]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[2].wr_stg_inst_n_5 ),
        .Q(RD_PNTR_WR[3]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[2].wr_stg_inst_n_4 ),
        .Q(RD_PNTR_WR[4]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[2].wr_stg_inst_n_3 ),
        .Q(RD_PNTR_WR[5]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[2].wr_stg_inst_n_2 ),
        .Q(RD_PNTR_WR[6]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[2].wr_stg_inst_n_1 ),
        .Q(RD_PNTR_WR[7]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_out),
        .Q(RD_PNTR_WR[8]));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[0]_i_1 
       (.I0(\gc0.count_d1_reg[8] [0]),
        .I1(\gc0.count_d1_reg[8] [1]),
        .O(\rd_pntr_gc[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[1]_i_1 
       (.I0(\gc0.count_d1_reg[8] [1]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .O(\rd_pntr_gc[1]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[2]_i_1 
       (.I0(\gc0.count_d1_reg[8] [2]),
        .I1(\gc0.count_d1_reg[8] [3]),
        .O(\rd_pntr_gc[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[3]_i_1 
       (.I0(\gc0.count_d1_reg[8] [3]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .O(\rd_pntr_gc[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[4]_i_1 
       (.I0(\gc0.count_d1_reg[8] [4]),
        .I1(\gc0.count_d1_reg[8] [5]),
        .O(\rd_pntr_gc[4]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[5]_i_1 
       (.I0(\gc0.count_d1_reg[8] [5]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .O(\rd_pntr_gc[5]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[6]_i_1 
       (.I0(\gc0.count_d1_reg[8] [6]),
        .I1(\gc0.count_d1_reg[8] [7]),
        .O(\rd_pntr_gc[6]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[7]_i_1 
       (.I0(\gc0.count_d1_reg[8] [7]),
        .I1(\gc0.count_d1_reg[8] [8]),
        .O(\rd_pntr_gc[7]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\rd_pntr_gc[0]_i_1_n_0 ),
        .Q(rd_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\rd_pntr_gc[1]_i_1_n_0 ),
        .Q(rd_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\rd_pntr_gc[2]_i_1_n_0 ),
        .Q(rd_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\rd_pntr_gc[3]_i_1_n_0 ),
        .Q(rd_pntr_gc[3]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\rd_pntr_gc[4]_i_1_n_0 ),
        .Q(rd_pntr_gc[4]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\rd_pntr_gc[5]_i_1_n_0 ),
        .Q(rd_pntr_gc[5]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\rd_pntr_gc[6]_i_1_n_0 ),
        .Q(rd_pntr_gc[6]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\rd_pntr_gc[7]_i_1_n_0 ),
        .Q(rd_pntr_gc[7]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[8] [8]),
        .Q(rd_pntr_gc[8]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[0]),
        .Q(p_22_out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[1]),
        .Q(p_22_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[2]),
        .Q(p_22_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[3]),
        .Q(p_22_out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[4]),
        .Q(p_22_out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[5]),
        .Q(p_22_out[5]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[6]),
        .Q(p_22_out[6]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[7]),
        .Q(p_22_out[7]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_1_out),
        .Q(WR_PNTR_RD));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[0]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[8] [0]),
        .I1(\gic0.gc0.count_d2_reg[8] [1]),
        .O(p_0_in7_out[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[1]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[8] [1]),
        .I1(\gic0.gc0.count_d2_reg[8] [2]),
        .O(p_0_in7_out[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[2]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[8] [2]),
        .I1(\gic0.gc0.count_d2_reg[8] [3]),
        .O(p_0_in7_out[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[3]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[8] [3]),
        .I1(\gic0.gc0.count_d2_reg[8] [4]),
        .O(p_0_in7_out[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[4]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[8] [4]),
        .I1(\gic0.gc0.count_d2_reg[8] [5]),
        .O(p_0_in7_out[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[5]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[8] [5]),
        .I1(\gic0.gc0.count_d2_reg[8] [6]),
        .O(p_0_in7_out[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[6]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[8] [6]),
        .I1(\gic0.gc0.count_d2_reg[8] [7]),
        .O(p_0_in7_out[6]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[7]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[8] [7]),
        .I1(\gic0.gc0.count_d2_reg[8] [8]),
        .O(p_0_in7_out[7]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_in7_out[0]),
        .Q(wr_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_in7_out[1]),
        .Q(wr_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_in7_out[2]),
        .Q(wr_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_in7_out[3]),
        .Q(wr_pntr_gc[3]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_in7_out[4]),
        .Q(wr_pntr_gc[4]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_in7_out[5]),
        .Q(wr_pntr_gc[5]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_in7_out[6]),
        .Q(wr_pntr_gc[6]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_in7_out[7]),
        .Q(wr_pntr_gc[7]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [8]),
        .Q(wr_pntr_gc[8]));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module pcie_7x_0_compare
   (comp1,
    v1_reg,
    \rd_pntr_bin_reg[8] );
  output comp1;
  input [3:0]v1_reg;
  input \rd_pntr_bin_reg[8] ;

  wire CI;
  wire comp1;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire \rd_pntr_bin_reg[8] ;
  wire [3:0]v1_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\rd_pntr_bin_reg[8] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module pcie_7x_0_compare_45
   (ram_full_i,
    v1_reg_0,
    \rd_pntr_bin_reg[8] ,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    ram_full_fb,
    wr_en,
    comp1);
  output ram_full_i;
  input [3:0]v1_reg_0;
  input \rd_pntr_bin_reg[8] ;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input ram_full_fb;
  input wr_en;
  input comp1;

  wire CI;
  wire comp1;
  wire comp2;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire ram_full_fb;
  wire ram_full_i;
  wire \rd_pntr_bin_reg[8] ;
  wire [3:0]v1_reg_0;
  wire wr_en;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp2}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\rd_pntr_bin_reg[8] }));
  LUT5 #(
    .INIT(32'h55550400)) 
    ram_full_i_i_1
       (.I0(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .I1(comp2),
        .I2(ram_full_fb),
        .I3(wr_en),
        .I4(comp1),
        .O(ram_full_i));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module pcie_7x_0_compare_46
   (ram_empty_fb_i_reg,
    v1_reg,
    \gc0.count_d1_reg[8] ,
    rd_en,
    p_2_out,
    comp1);
  output ram_empty_fb_i_reg;
  input [3:0]v1_reg;
  input \gc0.count_d1_reg[8] ;
  input rd_en;
  input p_2_out;
  input comp1;

  wire CI;
  wire comp0;
  wire comp1;
  wire \gc0.count_d1_reg[8] ;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire p_2_out;
  wire ram_empty_fb_i_reg;
  wire rd_en;
  wire [3:0]v1_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp0}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_d1_reg[8] }));
  LUT4 #(
    .INIT(16'hAEAA)) 
    ram_empty_i_i_1
       (.I0(comp0),
        .I1(rd_en),
        .I2(p_2_out),
        .I3(comp1),
        .O(ram_empty_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module pcie_7x_0_compare_47
   (comp1,
    v1_reg_0,
    \gc0.count_reg[8] );
  output comp1;
  input [3:0]v1_reg_0;
  input \gc0.count_reg[8] ;

  wire CI;
  wire comp1;
  wire \gc0.count_reg[8] ;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire [3:0]v1_reg_0;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_reg[8] }));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module pcie_7x_0_fifo_generator_ramfifo
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    din,
    rst);
  output [31:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input [31:0]din;
  input rst;

  wire RD_RST;
  wire RST;
  wire WR_RST;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_10 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_3 ;
  wire [3:0]\gras.rsts/c0/v1_reg ;
  wire [3:0]\gras.rsts/c1/v1_reg ;
  wire [8:0]p_0_out;
  wire [8:0]p_12_out;
  wire [8:8]p_13_out;
  wire [8:8]p_22_out;
  wire [8:0]p_23_out;
  wire p_2_out;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire [7:0]rd_pntr_plus1;
  wire [1:0]rd_rst_i;
  wire rst;
  wire rst_full_ff_i;
  wire rst_full_gen_i;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire wr_en;
  wire [8:8]wr_pntr_plus2;
  wire [0:0]wr_rst_i;

  pcie_7x_0_clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.D(wr_pntr_plus2),
        .Q(p_13_out),
        .RD_PNTR_WR(p_23_out),
        .WR_PNTR_RD(p_22_out),
        .\gc0.count_d1_reg[8] (p_0_out),
        .\gc0.count_reg[7] (rd_pntr_plus1),
        .\gic0.gc0.count_d2_reg[8] (p_12_out),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (rd_rst_i[1]),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (wr_rst_i),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_10 ),
        .rd_clk(rd_clk),
        .v1_reg(\gras.rsts/c0/v1_reg ),
        .v1_reg_0(\gras.rsts/c1/v1_reg ),
        .wr_clk(wr_clk));
  pcie_7x_0_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_0_out),
        .Q({RD_RST,rd_rst_i[0]}),
        .WR_PNTR_RD(p_22_out),
        .empty(empty),
        .\gc0.count_d1_reg[7] (rd_pntr_plus1),
        .p_2_out(p_2_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .v1_reg(\gras.rsts/c0/v1_reg ),
        .v1_reg_0(\gras.rsts/c1/v1_reg ));
  pcie_7x_0_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_12_out),
        .E(\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .Q(p_13_out),
        .RD_PNTR_WR(p_23_out),
        .full(full),
        .\gic0.gc0.count_d1_reg[8] (wr_pntr_plus2),
        .\grstd1.grst_full.grst_f.rst_d3_reg (rst_full_gen_i),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ({RST,WR_RST}),
        .out(rst_full_ff_i),
        .prog_full(prog_full),
        .\rd_pntr_bin_reg[8] (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .\rd_pntr_bin_reg[8]_0 (\gntv_or_sync_fifo.gcx.clkx_n_10 ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  pcie_7x_0_memory \gntv_or_sync_fifo.mem 
       (.E(\gntv_or_sync_fifo.gl0.wr_n_3 ),
        .Q(rd_rst_i[0]),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (p_0_out),
        .\gic0.gc0.count_d2_reg[8] (p_12_out),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
  pcie_7x_0_reset_blk_ramfifo rstblk
       (.Q({RD_RST,rd_rst_i}),
        .\gic0.gc0.count_reg[0] ({RST,WR_RST,wr_rst_i}),
        .out(rst_full_ff_i),
        .p_2_out(p_2_out),
        .ram_full_fb_i_reg(rst_full_gen_i),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module pcie_7x_0_fifo_generator_top
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    din,
    rst);
  output [31:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input [31:0]din;
  input rst;

  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

  pcie_7x_0_fifo_generator_ramfifo \grf.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "9" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "32" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "32" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "kintex7" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "480" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "479" *) (* C_PROG_FULL_TYPE = "1" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "9" *) 
(* C_RD_DEPTH = "512" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "9" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "9" *) 
(* C_WR_DEPTH = "512" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "9" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_1_1" *) 
module pcie_7x_0_fifo_generator_v13_1_1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [31:0]din;
  input wr_en;
  input rd_en;
  input [8:0]prog_empty_thresh;
  input [8:0]prog_empty_thresh_assert;
  input [8:0]prog_empty_thresh_negate;
  input [8:0]prog_full_thresh;
  input [8:0]prog_full_thresh_assert;
  input [8:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [31:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [8:0]data_count;
  output [8:0]rd_data_count;
  output [8:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

  assign almost_empty = \<const0> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  pcie_7x_0_fifo_generator_v13_1_1_synth inst_fifo_gen
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_1_1_synth" *) 
module pcie_7x_0_fifo_generator_v13_1_1_synth
   (dout,
    empty,
    full,
    prog_full,
    rd_en,
    wr_en,
    rd_clk,
    wr_clk,
    din,
    rst);
  output [31:0]dout;
  output empty;
  output full;
  output prog_full;
  input rd_en;
  input wr_en;
  input rd_clk;
  input wr_clk;
  input [31:0]din;
  input rst;

  wire [31:0]din;
  wire [31:0]dout;
  wire empty;
  wire full;
  wire prog_full;
  wire rd_clk;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire wr_en;

  pcie_7x_0_fifo_generator_top \gconvfifo.rf 
       (.din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .prog_full(prog_full),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module pcie_7x_0_memory
   (dout,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    Q,
    \gc0.count_d1_reg[8] ,
    \gic0.gc0.count_d2_reg[8] ,
    din);
  output [31:0]dout;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]Q;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]din;

  wire [0:0]E;
  wire [0:0]Q;
  wire [31:0]din;
  wire [31:0]dout;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  pcie_7x_0_blk_mem_gen_v8_3_3 \gbm.gbmg.gbmga.ngecc.bmg 
       (.E(E),
        .Q(Q),
        .din(din),
        .dout(dout),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module pcie_7x_0_rd_bin_cntr
   (ram_empty_fb_i_reg,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    ram_empty_fb_i_reg_0,
    Q,
    WR_PNTR_RD,
    E,
    rd_clk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] );
  output ram_empty_fb_i_reg;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output ram_empty_fb_i_reg_0;
  output [7:0]Q;
  input [0:0]WR_PNTR_RD;
  input [0:0]E;
  input rd_clk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ;

  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire \gc0.count[8]_i_2_n_0 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ;
  wire [8:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire rd_clk;
  wire [8:8]rd_pntr_plus1;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(plusOp__0[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(Q[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(Q[6]),
        .I2(Q[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[8]_i_1 
       (.I0(Q[6]),
        .I1(\gc0.count[8]_i_2_n_0 ),
        .I2(Q[7]),
        .I3(rd_pntr_plus1),
        .O(plusOp__0[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gc0.count[8]_i_2 
       (.I0(Q[5]),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(Q[4]),
        .O(\gc0.count[8]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(Q[0]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(Q[1]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(Q[2]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(Q[3]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(Q[4]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(Q[5]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(Q[6]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(Q[7]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(rd_pntr_plus1),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(plusOp__0[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(plusOp__0[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(plusOp__0[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(plusOp__0[4]),
        .Q(Q[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(plusOp__0[5]),
        .Q(Q[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(plusOp__0[6]),
        .Q(Q[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(plusOp__0[7]),
        .Q(Q[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(rd_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] ),
        .D(plusOp__0[8]),
        .Q(rd_pntr_plus1));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .I1(WR_PNTR_RD),
        .O(ram_empty_fb_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1),
        .I1(WR_PNTR_RD),
        .O(ram_empty_fb_i_reg_0));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module pcie_7x_0_rd_logic
   (empty,
    p_2_out,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \gc0.count_d1_reg[7] ,
    v1_reg,
    v1_reg_0,
    rd_clk,
    Q,
    rd_en,
    WR_PNTR_RD);
  output empty;
  output p_2_out;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [7:0]\gc0.count_d1_reg[7] ;
  input [3:0]v1_reg;
  input [3:0]v1_reg_0;
  input rd_clk;
  input [1:0]Q;
  input rd_en;
  input [0:0]WR_PNTR_RD;

  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [1:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire empty;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire \gras.rsts_n_2 ;
  wire p_2_out;
  wire rd_clk;
  wire rd_en;
  wire rpntr_n_0;
  wire rpntr_n_10;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  pcie_7x_0_rd_status_flags_as \gras.rsts 
       (.E(\gras.rsts_n_2 ),
        .Q(Q[1]),
        .empty(empty),
        .\gc0.count_d1_reg[8] (rpntr_n_0),
        .\gc0.count_reg[8] (rpntr_n_10),
        .p_2_out(p_2_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0));
  pcie_7x_0_rd_bin_cntr rpntr
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(\gras.rsts_n_2 ),
        .Q(\gc0.count_d1_reg[7] ),
        .WR_PNTR_RD(WR_PNTR_RD),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] (Q[0]),
        .ram_empty_fb_i_reg(rpntr_n_0),
        .ram_empty_fb_i_reg_0(rpntr_n_10),
        .rd_clk(rd_clk));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module pcie_7x_0_rd_status_flags_as
   (empty,
    p_2_out,
    E,
    v1_reg,
    \gc0.count_d1_reg[8] ,
    v1_reg_0,
    \gc0.count_reg[8] ,
    rd_clk,
    Q,
    rd_en);
  output empty;
  output p_2_out;
  output [0:0]E;
  input [3:0]v1_reg;
  input \gc0.count_d1_reg[8] ;
  input [3:0]v1_reg_0;
  input \gc0.count_reg[8] ;
  input rd_clk;
  input [0:0]Q;
  input rd_en;

  wire [0:0]E;
  wire [0:0]Q;
  wire c0_n_0;
  wire comp1;
  wire empty;
  wire \gc0.count_d1_reg[8] ;
  wire \gc0.count_reg[8] ;
  wire p_2_out;
  wire rd_clk;
  wire rd_en;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  pcie_7x_0_compare_46 c0
       (.comp1(comp1),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .p_2_out(p_2_out),
        .ram_empty_fb_i_reg(c0_n_0),
        .rd_en(rd_en),
        .v1_reg(v1_reg));
  pcie_7x_0_compare_47 c1
       (.comp1(comp1),
        .\gc0.count_reg[8] (\gc0.count_reg[8] ),
        .v1_reg_0(v1_reg_0));
  LUT2 #(
    .INIT(4'h2)) 
    \gc0.count_d1[8]_i_1 
       (.I0(rd_en),
        .I1(p_2_out),
        .O(E));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(c0_n_0),
        .PRE(Q),
        .Q(p_2_out));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(c0_n_0),
        .PRE(Q),
        .Q(empty));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module pcie_7x_0_reset_blk_ramfifo
   (out,
    ram_full_fb_i_reg,
    tmp_ram_rd_en,
    Q,
    \gic0.gc0.count_reg[0] ,
    wr_clk,
    rst,
    rd_clk,
    p_2_out,
    rd_en);
  output out;
  output ram_full_fb_i_reg;
  output tmp_ram_rd_en;
  output [2:0]Q;
  output [2:0]\gic0.gc0.count_reg[0] ;
  input wr_clk;
  input rst;
  input rd_clk;
  input p_2_out;
  input rd_en;

  wire [2:0]Q;
  wire [2:0]\gic0.gc0.count_reg[0] ;
  wire \ngwrdrst.grst.g7serrst.rd_rst_asreg_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.wr_rst_asreg_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ;
  wire p_2_out;
  wire rd_clk;
  wire rd_en;
  wire rd_rst_asreg;
  wire rd_rst_asreg_d1;
  wire rd_rst_asreg_d2;
  wire rst;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d3;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire wr_rst_asreg;
  wire wr_rst_asreg_d1;
  wire wr_rst_asreg_d2;

  assign out = rst_d2;
  assign ram_full_fb_i_reg = rst_d3;
  LUT3 #(
    .INIT(8'hBA)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(Q[0]),
        .I1(p_2_out),
        .I2(rd_en),
        .O(tmp_ram_rd_en));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_d1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(rst),
        .Q(rst_d2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(rst),
        .Q(rst_d3));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg),
        .Q(rd_rst_asreg_d1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_d2_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rd_rst_asreg_d1),
        .Q(rd_rst_asreg_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_i_1 
       (.I0(rd_rst_asreg),
        .I1(rd_rst_asreg_d1),
        .O(\ngwrdrst.grst.g7serrst.rd_rst_asreg_i_1_n_0 ));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.rd_rst_asreg_i_1_n_0 ),
        .PRE(rst_rd_reg2),
        .Q(rd_rst_asreg));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(rd_rst_asreg),
        .I1(rd_rst_asreg_d2),
        .O(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ),
        .Q(Q[0]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ),
        .Q(Q[1]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ),
        .Q(Q[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg1_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_rd_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg2_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(rst_rd_reg1),
        .PRE(rst),
        .Q(rst_rd_reg2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst),
        .Q(rst_wr_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_wr_reg1),
        .PRE(rst),
        .Q(rst_wr_reg2));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg),
        .Q(wr_rst_asreg_d1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_asreg_d1),
        .Q(wr_rst_asreg_d2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_i_1 
       (.I0(wr_rst_asreg),
        .I1(wr_rst_asreg_d1),
        .O(\ngwrdrst.grst.g7serrst.wr_rst_asreg_i_1_n_0 ));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.wr_rst_asreg_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_asreg));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1 
       (.I0(wr_rst_asreg),
        .I1(wr_rst_asreg_d2),
        .O(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ),
        .Q(\gic0.gc0.count_reg[0] [0]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ),
        .Q(\gic0.gc0.count_reg[0] [1]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ),
        .Q(\gic0.gc0.count_reg[0] [2]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module pcie_7x_0_synchronizer_ff
   (D,
    Q,
    rd_clk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [8:0]D;
  input [8:0]Q;
  input rd_clk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  wire [8:0]Q;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;
  wire rd_clk;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module pcie_7x_0_synchronizer_ff_48
   (D,
    Q,
    wr_clk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [8:0]D;
  input [8:0]Q;
  input wr_clk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  wire [8:0]Q;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire wr_clk;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module pcie_7x_0_synchronizer_ff_49
   (out,
    \wr_pntr_bin_reg[7] ,
    D,
    rd_clk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [0:0]out;
  output [7:0]\wr_pntr_bin_reg[7] ;
  input [8:0]D;
  input rd_clk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  wire [8:0]D;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;
  wire rd_clk;
  wire \wr_pntr_bin[1]_i_2_n_0 ;
  wire \wr_pntr_bin[2]_i_2_n_0 ;
  wire [7:0]\wr_pntr_bin_reg[7] ;

  assign out[0] = Q_reg[8];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[8]),
        .Q(Q_reg[8]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \wr_pntr_bin[0]_i_1 
       (.I0(Q_reg[1]),
        .I1(Q_reg[0]),
        .I2(\wr_pntr_bin[1]_i_2_n_0 ),
        .I3(Q_reg[3]),
        .I4(Q_reg[2]),
        .I5(Q_reg[8]),
        .O(\wr_pntr_bin_reg[7] [0]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \wr_pntr_bin[1]_i_1 
       (.I0(\wr_pntr_bin[1]_i_2_n_0 ),
        .I1(Q_reg[3]),
        .I2(Q_reg[2]),
        .I3(Q_reg[8]),
        .I4(Q_reg[1]),
        .O(\wr_pntr_bin_reg[7] [1]));
  LUT4 #(
    .INIT(16'h6996)) 
    \wr_pntr_bin[1]_i_2 
       (.I0(Q_reg[7]),
        .I1(Q_reg[6]),
        .I2(Q_reg[5]),
        .I3(Q_reg[4]),
        .O(\wr_pntr_bin[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \wr_pntr_bin[2]_i_1 
       (.I0(Q_reg[8]),
        .I1(Q_reg[2]),
        .I2(Q_reg[3]),
        .I3(\wr_pntr_bin[2]_i_2_n_0 ),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [2]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_bin[2]_i_2 
       (.I0(Q_reg[4]),
        .I1(Q_reg[5]),
        .O(\wr_pntr_bin[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \wr_pntr_bin[3]_i_1 
       (.I0(Q_reg[5]),
        .I1(Q_reg[3]),
        .I2(Q_reg[4]),
        .I3(Q_reg[8]),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \wr_pntr_bin[4]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[4]),
        .I2(Q_reg[5]),
        .I3(Q_reg[8]),
        .I4(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \wr_pntr_bin[5]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[5]),
        .I2(Q_reg[8]),
        .I3(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [5]));
  LUT3 #(
    .INIT(8'h96)) 
    \wr_pntr_bin[6]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[6]),
        .I2(Q_reg[8]),
        .O(\wr_pntr_bin_reg[7] [6]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_bin[7]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[8]),
        .O(\wr_pntr_bin_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module pcie_7x_0_synchronizer_ff_50
   (out,
    \rd_pntr_bin_reg[7] ,
    D,
    wr_clk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [0:0]out;
  output [7:0]\rd_pntr_bin_reg[7] ;
  input [8:0]D;
  input wr_clk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  wire [8:0]D;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire \rd_pntr_bin[1]_i_2_n_0 ;
  wire \rd_pntr_bin[2]_i_2_n_0 ;
  wire [7:0]\rd_pntr_bin_reg[7] ;
  wire wr_clk;

  assign out[0] = Q_reg[8];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[8]),
        .Q(Q_reg[8]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \rd_pntr_bin[0]_i_1 
       (.I0(Q_reg[1]),
        .I1(Q_reg[0]),
        .I2(\rd_pntr_bin[1]_i_2_n_0 ),
        .I3(Q_reg[3]),
        .I4(Q_reg[2]),
        .I5(Q_reg[8]),
        .O(\rd_pntr_bin_reg[7] [0]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \rd_pntr_bin[1]_i_1 
       (.I0(\rd_pntr_bin[1]_i_2_n_0 ),
        .I1(Q_reg[3]),
        .I2(Q_reg[2]),
        .I3(Q_reg[8]),
        .I4(Q_reg[1]),
        .O(\rd_pntr_bin_reg[7] [1]));
  LUT4 #(
    .INIT(16'h6996)) 
    \rd_pntr_bin[1]_i_2 
       (.I0(Q_reg[7]),
        .I1(Q_reg[6]),
        .I2(Q_reg[5]),
        .I3(Q_reg[4]),
        .O(\rd_pntr_bin[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \rd_pntr_bin[2]_i_1 
       (.I0(Q_reg[8]),
        .I1(Q_reg[2]),
        .I2(Q_reg[3]),
        .I3(\rd_pntr_bin[2]_i_2_n_0 ),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [2]));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_bin[2]_i_2 
       (.I0(Q_reg[4]),
        .I1(Q_reg[5]),
        .O(\rd_pntr_bin[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \rd_pntr_bin[3]_i_1 
       (.I0(Q_reg[5]),
        .I1(Q_reg[3]),
        .I2(Q_reg[4]),
        .I3(Q_reg[8]),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \rd_pntr_bin[4]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[4]),
        .I2(Q_reg[5]),
        .I3(Q_reg[8]),
        .I4(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \rd_pntr_bin[5]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[5]),
        .I2(Q_reg[8]),
        .I3(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [5]));
  LUT3 #(
    .INIT(8'h96)) 
    \rd_pntr_bin[6]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[6]),
        .I2(Q_reg[8]),
        .O(\rd_pntr_bin_reg[7] [6]));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_bin[7]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[8]),
        .O(\rd_pntr_bin_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module pcie_7x_0_wr_bin_cntr
   (S,
    Q,
    \gdiff.diff_pntr_pad_reg[8] ,
    \gdiff.diff_pntr_pad_reg[9] ,
    \gic0.gc0.count_d1_reg[8]_0 ,
    v1_reg,
    v1_reg_0,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    RD_PNTR_WR,
    E,
    wr_clk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] );
  output [3:0]S;
  output [8:0]Q;
  output [3:0]\gdiff.diff_pntr_pad_reg[8] ;
  output [0:0]\gdiff.diff_pntr_pad_reg[9] ;
  output [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  output [3:0]v1_reg;
  output [3:0]v1_reg_0;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input [8:0]RD_PNTR_WR;
  input [0:0]E;
  input wr_clk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ;

  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [8:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [3:0]S;
  wire [3:0]\gdiff.diff_pntr_pad_reg[8] ;
  wire [0:0]\gdiff.diff_pntr_pad_reg[9] ;
  wire \gic0.gc0.count[8]_i_2_n_0 ;
  wire [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ;
  wire [8:0]plusOp__1;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wr_clk;
  wire [7:0]wr_pntr_plus2;

  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .O(plusOp__1[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .O(plusOp__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[2]),
        .O(plusOp__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(wr_pntr_plus2[1]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[2]),
        .I3(wr_pntr_plus2[3]),
        .O(plusOp__1[3]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(wr_pntr_plus2[2]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[3]),
        .I4(wr_pntr_plus2[4]),
        .O(plusOp__1[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gic0.gc0.count[5]_i_1 
       (.I0(wr_pntr_plus2[3]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[0]),
        .I3(wr_pntr_plus2[2]),
        .I4(wr_pntr_plus2[4]),
        .I5(wr_pntr_plus2[5]),
        .O(plusOp__1[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[6]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .O(plusOp__1[6]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[7]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .I2(wr_pntr_plus2[7]),
        .O(plusOp__1[7]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[8]_i_1 
       (.I0(wr_pntr_plus2[6]),
        .I1(\gic0.gc0.count[8]_i_2_n_0 ),
        .I2(wr_pntr_plus2[7]),
        .I3(\gic0.gc0.count_d1_reg[8]_0 ),
        .O(plusOp__1[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gic0.gc0.count[8]_i_2 
       (.I0(wr_pntr_plus2[5]),
        .I1(wr_pntr_plus2[3]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[0]),
        .I4(wr_pntr_plus2[2]),
        .I5(wr_pntr_plus2[4]),
        .O(\gic0.gc0.count[8]_i_2_n_0 ));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(wr_pntr_plus2[0]),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(wr_pntr_plus2[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(wr_pntr_plus2[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(wr_pntr_plus2[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(wr_pntr_plus2[4]),
        .Q(Q[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(wr_pntr_plus2[5]),
        .Q(Q[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(wr_pntr_plus2[6]),
        .Q(Q[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(wr_pntr_plus2[7]),
        .Q(Q[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(\gic0.gc0.count_d1_reg[8]_0 ),
        .Q(Q[8]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(Q[0]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(Q[1]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(Q[2]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(Q[3]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(Q[4]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(Q[5]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(Q[6]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(Q[7]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(Q[8]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(plusOp__1[0]),
        .Q(wr_pntr_plus2[0]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp__1[1]),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .Q(wr_pntr_plus2[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(plusOp__1[2]),
        .Q(wr_pntr_plus2[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(plusOp__1[3]),
        .Q(wr_pntr_plus2[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(plusOp__1[4]),
        .Q(wr_pntr_plus2[4]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[5] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(plusOp__1[5]),
        .Q(wr_pntr_plus2[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[6] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(plusOp__1[6]),
        .Q(wr_pntr_plus2[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[7] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(plusOp__1[7]),
        .Q(wr_pntr_plus2[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[8] 
       (.C(wr_clk),
        .CE(E),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ),
        .D(plusOp__1[8]),
        .Q(\gic0.gc0.count_d1_reg[8]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .I2(Q[1]),
        .I3(RD_PNTR_WR[1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(wr_pntr_plus2[0]),
        .I1(RD_PNTR_WR[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(RD_PNTR_WR[1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .I2(Q[3]),
        .I3(RD_PNTR_WR[3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2[2]),
        .I1(RD_PNTR_WR[2]),
        .I2(wr_pntr_plus2[3]),
        .I3(RD_PNTR_WR[3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(Q[4]),
        .I1(RD_PNTR_WR[4]),
        .I2(Q[5]),
        .I3(RD_PNTR_WR[5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2[4]),
        .I1(RD_PNTR_WR[4]),
        .I2(wr_pntr_plus2[5]),
        .I3(RD_PNTR_WR[5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(Q[6]),
        .I1(RD_PNTR_WR[6]),
        .I2(Q[7]),
        .I3(RD_PNTR_WR[7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(wr_pntr_plus2[6]),
        .I1(RD_PNTR_WR[6]),
        .I2(wr_pntr_plus2[7]),
        .I3(RD_PNTR_WR[7]),
        .O(v1_reg_0[3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_1
       (.I0(Q[7]),
        .I1(RD_PNTR_WR[7]),
        .O(\gdiff.diff_pntr_pad_reg[8] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_2
       (.I0(Q[6]),
        .I1(RD_PNTR_WR[6]),
        .O(\gdiff.diff_pntr_pad_reg[8] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_3
       (.I0(Q[5]),
        .I1(RD_PNTR_WR[5]),
        .O(\gdiff.diff_pntr_pad_reg[8] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_4
       (.I0(Q[4]),
        .I1(RD_PNTR_WR[4]),
        .O(\gdiff.diff_pntr_pad_reg[8] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__1_i_1
       (.I0(Q[8]),
        .I1(RD_PNTR_WR[8]),
        .O(\gdiff.diff_pntr_pad_reg[9] ));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_1
       (.I0(Q[3]),
        .I1(RD_PNTR_WR[3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_2
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_3
       (.I0(Q[1]),
        .I1(RD_PNTR_WR[1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_4
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .O(S[0]));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module pcie_7x_0_wr_logic
   (full,
    prog_full,
    Q,
    E,
    \gic0.gc0.count_d1_reg[8] ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \rd_pntr_bin_reg[8] ,
    \rd_pntr_bin_reg[8]_0 ,
    wr_clk,
    out,
    RD_PNTR_WR,
    wr_en,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] );
  output full;
  output prog_full;
  output [0:0]Q;
  output [0:0]E;
  output [0:0]\gic0.gc0.count_d1_reg[8] ;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input \rd_pntr_bin_reg[8] ;
  input \rd_pntr_bin_reg[8]_0 ;
  input wr_clk;
  input out;
  input [8:0]RD_PNTR_WR;
  input wr_en;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input [1:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ;

  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [0:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [3:0]\c1/v1_reg ;
  wire [3:0]\c2/v1_reg ;
  wire full;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire [1:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] ;
  wire out;
  wire [7:0]p_13_out;
  wire prog_full;
  wire ram_full_fb;
  wire \rd_pntr_bin_reg[8] ;
  wire \rd_pntr_bin_reg[8]_0 ;
  wire wpntr_n_0;
  wire wpntr_n_1;
  wire wpntr_n_13;
  wire wpntr_n_14;
  wire wpntr_n_15;
  wire wpntr_n_16;
  wire wpntr_n_17;
  wire wpntr_n_2;
  wire wpntr_n_3;
  wire wr_clk;
  wire wr_en;

  pcie_7x_0_wr_pf_as \gwas.gpf.wrpf 
       (.E(E),
        .Q(p_13_out),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .\gic0.gc0.count_d1_reg[7] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\gic0.gc0.count_d1_reg[8] (wpntr_n_17),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] [0]),
        .out(out),
        .prog_full(prog_full),
        .ram_full_fb(ram_full_fb),
        .wr_clk(wr_clk));
  pcie_7x_0_wr_status_flags_as \gwas.wsts 
       (.E(E),
        .full(full),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .out(out),
        .ram_full_fb(ram_full_fb),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8] ),
        .\rd_pntr_bin_reg[8]_0 (\rd_pntr_bin_reg[8]_0 ),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  pcie_7x_0_wr_bin_cntr wpntr
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q({Q,p_13_out}),
        .RD_PNTR_WR(RD_PNTR_WR),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .\gdiff.diff_pntr_pad_reg[8] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\gdiff.diff_pntr_pad_reg[9] (wpntr_n_17),
        .\gic0.gc0.count_d1_reg[8]_0 (\gic0.gc0.count_d1_reg[8] ),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] [1]),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "wr_pf_as" *) 
module pcie_7x_0_wr_pf_as
   (prog_full,
    wr_clk,
    out,
    E,
    Q,
    S,
    \gic0.gc0.count_d1_reg[7] ,
    \gic0.gc0.count_d1_reg[8] ,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    ram_full_fb,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] );
  output prog_full;
  input wr_clk;
  input out;
  input [0:0]E;
  input [7:0]Q;
  input [3:0]S;
  input [3:0]\gic0.gc0.count_d1_reg[7] ;
  input [0:0]\gic0.gc0.count_d1_reg[8] ;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input ram_full_fb;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;

  wire [0:0]E;
  wire [7:0]Q;
  wire [3:0]S;
  wire [8:5]diff_pntr;
  wire [3:0]\gic0.gc0.count_d1_reg[7] ;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire \gpf1.prog_full_i_i_1_n_0 ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;
  wire out;
  wire [9:6]plusOp;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire prog_full;
  wire prog_full_i;
  wire ram_full_fb;
  wire wr_clk;
  wire [3:0]NLW_plusOp_carry_O_UNCONNECTED;
  wire [0:0]NLW_plusOp_carry__0_O_UNCONNECTED;
  wire [3:0]NLW_plusOp_carry__1_CO_UNCONNECTED;
  wire [3:1]NLW_plusOp_carry__1_O_UNCONNECTED;

  FDCE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[6] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(plusOp[6]),
        .Q(diff_pntr[5]));
  FDCE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[7] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(plusOp[7]),
        .Q(diff_pntr[6]));
  FDCE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[8] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(plusOp[8]),
        .Q(diff_pntr[7]));
  FDCE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[9] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(plusOp[9]),
        .Q(diff_pntr[8]));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \gpf1.prog_full_i_i_1 
       (.I0(prog_full_i),
        .I1(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .I2(ram_full_fb),
        .I3(prog_full),
        .O(\gpf1.prog_full_i_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h40000000)) 
    \gpf1.prog_full_i_i_2 
       (.I0(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .I1(diff_pntr[5]),
        .I2(diff_pntr[8]),
        .I3(diff_pntr[7]),
        .I4(diff_pntr[6]),
        .O(prog_full_i));
  FDPE #(
    .INIT(1'b1)) 
    \gpf1.prog_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gpf1.prog_full_i_i_1_n_0 ),
        .PRE(out),
        .Q(prog_full));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(E),
        .DI(Q[3:0]),
        .O(NLW_plusOp_carry_O_UNCONNECTED[3:0]),
        .S(S));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(Q[7:4]),
        .O({plusOp[8:6],NLW_plusOp_carry__0_O_UNCONNECTED[0]}),
        .S(\gic0.gc0.count_d1_reg[7] ));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO(NLW_plusOp_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__1_O_UNCONNECTED[3:1],plusOp[9]}),
        .S({1'b0,1'b0,1'b0,\gic0.gc0.count_d1_reg[8] }));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module pcie_7x_0_wr_status_flags_as
   (full,
    ram_full_fb,
    E,
    v1_reg,
    \rd_pntr_bin_reg[8] ,
    v1_reg_0,
    \rd_pntr_bin_reg[8]_0 ,
    wr_clk,
    out,
    wr_en,
    \grstd1.grst_full.grst_f.rst_d3_reg );
  output full;
  output ram_full_fb;
  output [0:0]E;
  input [3:0]v1_reg;
  input \rd_pntr_bin_reg[8] ;
  input [3:0]v1_reg_0;
  input \rd_pntr_bin_reg[8]_0 ;
  input wr_clk;
  input out;
  input wr_en;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;

  wire [0:0]E;
  wire comp1;
  wire full;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire out;
  wire ram_full_fb;
  wire ram_full_i;
  wire \rd_pntr_bin_reg[8] ;
  wire \rd_pntr_bin_reg[8]_0 ;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire wr_clk;
  wire wr_en;

  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(wr_en),
        .I1(ram_full_fb),
        .O(E));
  pcie_7x_0_compare c1
       (.comp1(comp1),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8] ),
        .v1_reg(v1_reg));
  pcie_7x_0_compare_45 c2
       (.comp1(comp1),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .ram_full_fb(ram_full_fb),
        .ram_full_i(ram_full_i),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8]_0 ),
        .v1_reg_0(v1_reg_0),
        .wr_en(wr_en));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(out),
        .Q(ram_full_fb));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i),
        .PRE(out),
        .Q(full));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
